[{"title":"程序员的macOS系列：Mac开发环境配置","date":"2018-09-30T15:49:16.000Z","path":"2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/","text":"1、前言最近在写《程序员的macOS系列》文章，之前写的第一篇 程序员的macOS系列：精选Mac App，大家都希望尽快更新，今天开始写第二篇，其实macOS开发环境，系统默认自带ruby、python2、gcc、g++、bash等环境，并且因为macOS是以Unix为基础，所以有传统Unix/Linux的特性，很适合高效少折腾的开发者。所以，本文主要讲解一些通用开发环境配置，主要是以必须和提高效率为主！其它也没有什么高深介绍，当然，由于楼主目前主职是iOS，所以其它的开发环境接触不多(谦虚)，当前大家要学以至用，环境搭建都是相似的，熟悉了就不是问题。文章短短不可能详尽也，要学好每一个点也不是那么简单，惟有抛砖引玉，希望大家努力提高！ 程序员的macOS系列：精选Mac App 程序员的macOS系列：Mac开发环境配置 程序员的macOS系列：高效Alfred进阶 目前计划写《程序员的macOS系列》三篇，后续有想法在更新吧~ 2、开发环境配置需要提前说明一下，本文不使用代理源，如果命令无效，大家记得翻墙一下啊。另外，如果是通过软件包安装的方式，就不在这里列举了，比如Java的安装、MySQL的安装这些自行搜索~ HomebrewHomebrew 是强大的终端工具，用来管理很多在终端下操作的程序以及软件包的依赖，对于经常需要使用终端应用的程序员来说，是必不可少的第一步！ 1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" brew 一些常用命令： 123456brew searchbrew infobrew installbrew removebrew updatebrew upgrade brew 命令就不多说了，类似linux系统下的apt-get，程序员都要从入门到精通啊~ 命令行工具（Command Line Tools) 如果不是开发 iOS 或 macOS 可能就没有必要安装Xcode，但是可能需要安装一下Xcode 命令行工具，因为很多环境和软件都会使用到和依赖它（下面说到的Carthage、python3就依赖它）。 1xcode-select --install xcode-select 这个命令还可以切换xcode build的版本（目录），可以 xcode-select --help 查看更多。 这里提醒一下新手，终端的命令，如果记得命令名字，不记得用法，可以使用： 1xxx --help 也可以用： 1man xxx --help 和 man 命令的区别，是man命令是详细全面的介绍。 Bash（Zsh）安装 zsh： 1brew install zsh 使用 oh-my-zsh 可以将zsh变得更加强大而灵巧：1sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 另外可以安装 oh-my-zsh 一些插件，比如实现自动跳转：autojump、fasd 个性化配置，包括别名，都在目录 ~/.zshrc 下，需要深入教程的大家自动网上搜索啊。这里只是配置入门，修行还是看个人啊！ 创建别名的示例： 123vim ~/.zshrc //vim 命令下面会说到alias myblog='cd /Users/HTC/Documents/iHTCBlog' //快速到达指定目录alias st='open -a \"Sublime Text\"' //打开某个app node/npm1brew install node 安装node后，也会自动安装npm工具。npm 即 node package manager，用来搜索、下载、管理 node.js 相关的套件。 npm 一些常用命令： 12345npm help //查看npm帮助npm find //查找组件npm install //安装组件npm remove //删除组件npm update //更新组件 node除了node.js后台开发外，react native、Hexo博客也是依赖node环境，更多的node知识，我也还在努力学习中，后续有新认识，再回来更新啊！就不误人子弟啦~ vi(vim)vi是“visual interface”的缩写，vim是 vi IMproved(增强版的vi)。vi(vim)命令繁多，但是如果灵活使用之后将会大大提高效率！从此不用鼠标不是梦！ vi(vim)是Unix/Linux终端自带的，所以macOS也自带。那么vi(vim)要配置什么呢？ 就是大家觉得vi(vim)好用，但是，还认为可以更好用，所以，有很多的插件（用更少的按键，实现更多更合理的功能），例如实现文件浏览（NERD Tree），代码补全（YouCompleteMe），语法检查（syntastic），文件模糊搜索（ctrlp），显示vim状态栏（Vim Powerline）,主题颜色（Molokai）,显示文件结构（tagbar）等多种功能 使用教程可以参考之前的文章：vi(vim)快捷键小记 更多vi的插件，大家也是自行搜索学习啊~ Gitgit的作用就不多说了，如果是刚毕业的新手入门，建议自行学习，对你的开发帮助一定非常大~ git 安装： 1brew install git git基本配置： 1git config --global user.name &#34;iHTCboy&#34;&#10;git config --global user.email &#34;ihetiancong@gmail.com&#34;&#10;git config --global color.ui true&#10;git config --global alias.co checkout # &#21035;&#21517;&#10;git config --global alias.ci commit&#10;git config --global alias.st status&#10;git config --global alias.br branch&#10;git config --global core.editor &#34;vim&#34; # &#35774;&#32622;Editor&#20351;&#29992;vim&#10;git config --global core.quotepath false # &#35774;&#32622;&#26174;&#31034;&#20013;&#25991;&#25991;&#20214;&#21517; 用户的git配置文件目录： ~/.gitconfig python3python3是未来，所以还是要安装使用和开发的！ 1brew install python3 查看 python3的版本： 1python3 --version jenkins暂时留存，日后回来写 CocoaPodsCocoaPods 是iOS的包管理工具，类似于 java 的Maven、Node.js 的 npm、Python 的 pip、Ruby 的 gem。 CocoaPods 基于Ruby开发的，因此安装CocoaPods前需要先安装Ruby环境。而前面提到macOS系统默认自带Ruby环境! 所以，直接安装吧~ 安装命令： 1sudo gem install cocoapods 配置CocoaPods环境，安装Specs库，由于库很大，需要一些时间和网速： 1pod setup pod 一些常用命令：12345pod --version //pod版本pod init //创建Podfile文件pod install //项目pod安装pod update //项目pod更新pod search //搜索库 更多使用说明，自行搜索啊~ Carthage我们使用包管理，就是为了集成第三方库的时候更加方便，迅速。有时候 CocoaPods处理因包管理而导致的错误又浪费了我们很多时间。而 Carthage 使用的是一种非侵入性的哲学，Carthage 不会对我们的项目结构进行任何修改，更不多创建 workspace。它只是根据我们描述文件中配置的第三方库，将它们下载到本地，然后使用 xcodebuild 构建成 framework 文件。 另外 Carthage 除了非侵入性，它还是去中心化的，它的包管理不像 CocoaPods 那样，有一个中心服务器(cocoapods.org)，来管理各个包的元信息，而是依赖于每个第三方库自己的源地址，比如 Github。 安装： 1brew install carthage carthage 一些常用命令：123carthage version //查看版本brew upgrade carthage //升级carthagecarthage update //安装或更新项目的库 更多使用说明，自行搜索啊~ 3、其它环境配置和插件Finder（访达）预览插件1brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize webpquicklook suspicious-package quicklookase qlvideo 用于Finder快速显示文件的内容https://github.com/sindresorhus/quick-look-plugins qlcolorcode: 代码文件预览时高亮qlstephen: 以纯文本的形式预览无拓展名或者未知拓展名的文件qlmarkdown: 预览渲染后的 markdown 文件quicklook-json: 预览格式化后的 json 文件ProvisionQL: ipa文件信息展示QuickLookAPK：apk文件信息展示 用图片来说明一下作用：QuickLookJSON： QLMarkdown： ProvisionQL： QuickLookAPK： Hexo 博客1npm install -g hexo 具体hexo使用，可能参考之前的文章：Hexo搭建Github Pages博客填坑教程 报错：无法打开已损坏的安装包遇到打开自己下载的安装包失败时，可执行下面命令解决： 1sudo spctl --master-disable Safari ExtensionsSafari 浏览器的插件Apple - Safari - Safari Extensions Gallery 我这里就推荐几个常用的： Translate Evernote Web Clipper webQR Search Alias Awesome Screenshot 另外，macOS 10.14 后，苹果 Safari 浏览器不再支持不安全的扩展。只可以在 App Store 或 Safari 浏览器扩展库中查找经过 Apple 审核的更新扩展。 终端命令在终端和vim下，程序员的效率一定提升不少，对于新手，下面也列出一些重要的终端命令，方便大家重点掌握，更多就大家自动搜索了： 命令 作用 say xxx 读单词 pwd 显示当前目录的路径名 ls 查看当前目录下的文件 ls -al 查看所有文件，包含隐藏文件 clear 清除屏幕或窗口内容 cd /xx/yy 跳转到目录/xx/yy cd .. 返回上一级目录 cd / 返回根目录 cd - 返回到上一步操作目录 man xx 查看命令的详细帮助，比如 mac ls killall Finder 重启Finder rm xxx 删除文件 rm -rf xxxx 删除文件夹 defaults write com.apple.finder AppleShowAllFiles TRUE killall Finder 查看隐藏文件 defaults write com.apple.finder AppleShowAllFiles FALSE killall Finder 隐藏文件 ↑ ↓ 读取上一条或者下一条的命令记录 sudo vi /private/etc/hosts 编辑hosts文件 总结另外，楼主目前接触前端H5和后台开发时间不长，暂时不知道需要在macOS配置一些什么环境，这些后续在补充，下面引用的参考，大家有时间一定要看看哦。这一篇就先这样~ 大家也可以留言反馈。国庆快乐~ 参考 程序员的macOS系列：精选Mac App npm The missing package manager for macOS — The missing package manager for macOS vi(vim)快捷键小记 | iHTCboy’s blog Hexo搭建Github Pages博客填坑教程 | iHTCboy’s blog 让你的iTerm更Geek! | iHTCboy’s blog Git常用命令备忘 - stormzhang EffectiveMac - bestswifter Oh My Zsh - a delightful &amp; open source framework for Z-Shell zsh | 程序员的自我修养 sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers CocoaPods.org Carthage/Carthage: A simple, decentralized dependency manager for Cocoa Carthage 包管理工具，另一种敏捷轻快的 iOS &amp; MAC 开发体验 - SwiftCafe 享受代码的乐趣 Apple - Safari - Safari Extensions Gallery 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Mac","slug":"Mac","permalink":"https://iHTCboy.com/tags/Mac/"},{"name":"macOS","slug":"macOS","permalink":"https://iHTCboy.com/tags/macOS/"},{"name":"开发环境","slug":"开发环境","permalink":"https://iHTCboy.com/tags/开发环境/"},{"name":"程序员的macOS","slug":"程序员的macOS","permalink":"https://iHTCboy.com/tags/程序员的macOS/"}]},{"title":"Hopper Disassembler 逆向西数硬盘 WD My Passport 的失败经历","date":"2018-09-27T13:49:16.000Z","path":"2018/09/27/2018-09-27-Hopper逆向WD-MyPassport的失败经历/","text":"1、前言一直以来都是使用西数的移动硬盘，最开始256G的 My Passport，当时也不知道，在电脑城就买了，回家发现可以设置密码，当然，我记得有密码的存储设备，是台电的U盘，当年16G的加密U盘，我也买了3个（因为当年最大16G容量），所以，之后就与加密的存储设备相惜相爱，现在西数的移动硬盘也是几代后的AES 256位硬件加密。加密功能的存储设备越来越受喜爱，除了大部分网盘破产外，就是隐私的问题，大家都希望有自己的小空间。 几天前，购买了4T的 WD My Passport 加密移动硬盘，设置了一个新密码，然后过完中秋，发现！密码记不起来了！！！反复尝试，只能看到破解！！！ 2、怎么办？先说一下，WD怎么打开硬盘，密码位数不限制，字符、数字和特殊符号都可以，然后，只能点击界面上的 硬盘解锁 才能解锁。按回车没有反应： 如果尝试密码超过5次，只能把USB拨出，重新插入才能重新尝试： 知道了这个流程，就想到几个思路，找到点击硬盘解锁 点击的处理方法，返回成功就可以了？ Hopper Disassembler ： 从上面的图片，可以找到这个方法，非常明显示了！ 然后打开伪代码界面，里面的第一个判断是，如果 rax==0x7 ，就会进入到失败的逻辑处理中，所以这样要修复它为不等于（!=），下面在说怎么修改： 下面这个判断是 如果 rax==0x6 ，就是密码正确，可以打开硬盘！ 下图，可以看出cmp eax, 0x7，就是上面说的比较是否相等，因此选中cmp eax, 0x7一行，选择菜单栏 Modify -&gt; Assemble Instruction，然后后面的0x7为其它值，这样就不相等了 然后，这个也是相似，如果要让他相等，那么这个值改为0x7，因为失败时就是走上一个if判断中了，所以改一下这个值指向，应该就可以相等了吧？ 最后，选择 File -&gt; Produce New Executable 来生成新的可执行文件，替换掉原来的文件即可。 但是，想复制新的可执行文件替换失败：Read-only file system！！！ 最后，查了一些方法，也没有办法修改这个硬盘的这个目录属性，唉，这个方法不知道有没有效果？？？ 最后，还是乱输入时，记起了密码！！！然后就没有然后了。 剩下的，就看大家有能力的，来补充一下啊~ 或者，若干年后有能力罢。 总结总结。西数硬盘这个5次失败密码要重新链接的功能，让破解密码变得复杂，当然，能一直尝试密码也是有好处，也是弱处。 最后，发现会一点逆向技术，不管是正向的开发，还是逆向的开发，都会对提高自己开发的系统的安全性，有更好的思考！！！另外，真的需要有时候，回来学习一下汇编语言，是提高逆向内功的必经之路，在这里，先立个目录，回头尝尝，大家一起加油~ 监督！ 参考 最简单的Hopper Disassembler玩转Mac逆向 - 简书 iOS安全–使用Hopper修改程序逻辑跳过验证 一个数字的魔法——破解Mac上198元的Paw Mac OSX 之自己动手初步学习破解软件入门 - 简书 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Disassembler","slug":"Disassembler","permalink":"https://iHTCboy.com/tags/Disassembler/"},{"name":"Hopper","slug":"Hopper","permalink":"https://iHTCboy.com/tags/Hopper/"},{"name":"MyPassport","slug":"MyPassport","permalink":"https://iHTCboy.com/tags/MyPassport/"},{"name":"WD","slug":"WD","permalink":"https://iHTCboy.com/tags/WD/"},{"name":"西数硬盘","slug":"西数硬盘","permalink":"https://iHTCboy.com/tags/西数硬盘/"}]},{"title":"AppStore 拒绝审核原因：PLA 2.3","date":"2018-09-24T06:49:16.000Z","path":"2018/09/24/2018-09-24_苹果审核被拒PLA_2.3/","text":"1、前言最近更新了一下之前开源的一些iOS App，适配了一下iPhone X / Xs / XR / Xs Max，然后收到这样的拒审信： 2018年9月24日 上午1:08发件人 Apple 10.0 Before You Submit: Program License AgreementPLA 2.3 Your app or its metadata contains references to a pre-release version of Apple software or hardware. Apps with compatibility references to a pre-GM version of iOS SDK or pre-released Apple hardware are not in compliance with the Apple Developer Program License Agreement. Specifically, section 2.3 states: “Apple may provide You with pre-release versions of the Apple Software or related services that constitute Apple Confidential Information and are subject to the confidentiality obligations of this Agreement.” Next Steps Please remove all references to pre-release versions of Apple software and hardware from your app and its metadata. Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata, visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, reply to this message in Resolution Center and we will continue the review. 2、解决刚开始以为自己使用了 Xcode GM 版本提交应用，但反复检查就是正式的Xcode Version 10.0 (10A255)! 最后，还是通过网络搜索找到答案： 此版本的新增内容: v5.0.0 适配iPhoneX、XR、Xmax ； 修复新闻列表闪退问题； 优化一些功能细节体验 引用网友的话： 你的发布介绍里提到了苹果没开卖的iPadPro，删掉重新审核就行，不用重新上传包。回复大概这意思 然后搜索iPhone Xs上市时间? 将在9月14日周五开启预售，9月21日正式上市 没毛病！！！今天已经2018年9月24号啦！最后，还是发现，字母拼写错啦！！！ v5.0.0 适配 iPhone X、XR、XS Max； 修复新闻列表闪退问题； 优化一些功能细节体验 最后发现，还是被坑了一波： iPhone X🅁 即将到来iPhone XR 即将到来北京时间 10 月 19 日下午 3:01 起开始预购。 苹果拒审信： Next Steps Please remove all references to pre-release versions of Apple hardware from your app’s metadata such as iPhone XR. 最后苹果友善回复： 2018年9月24日 下午8:49发件人 Apple0 . 10.0 Before You Submit: Program License AgreementHello, Thank you for making these changes. We will continue the review, and we will notify you if there are any further issues. Best regards, App Store Review 3、总结还是第一次遇到这样的情况，苹果不允许发布无上线的硬件或软件产品，也就是说，不能写错名字！！！确实，这样的要求，完全合理！！！ 经过这事，苹果的审核确实还是存在很多问题，经过这几年，审核速度可以给予肯定，从原来一个星期，变快到1~2天，但是“审核质量” 却一直没有得到提升，导致开发者和审核员一直来回被拒来拒绝，相互怀疑和猜测，导致效率并没有真正的提高。希望，后续苹果能提供更优质的审核机制和流程标准。像谷歌play那样的机器审核也未必不行，后续在抽查，发现违反的，直接下架。这样对于开发者，都没有什么要向老板交待，直接了当！ 参考 最近被拒，不知道什么原因，内容是 PLA 2.3 - Swift中国 购买 iPhone XR - Apple (中国) 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"PLA2.3","slug":"PLA2-3","permalink":"https://iHTCboy.com/tags/PLA2-3/"},{"name":"review-guidelines","slug":"review-guidelines","permalink":"https://iHTCboy.com/tags/review-guidelines/"}]},{"title":"shell技巧5 - 全自动打包ipa","date":"2018-09-17T03:22:16.000Z","path":"2018/09/17/2018-09-17_shell技巧5_全自动打包生成ipa/","text":"1、前言最近在研究上传ipa文件自动上传到苹果后台（后续有时间也分享给大家啊），然后，就需要制作大量的ipa文件啊！如果手工的Archive 那不就死啦，整个步骤，大概要5分钟过程，而且不是一步到位等5分钟，所以就研究了一下项目如何自动打ipa，最后找到了 iOS项目之自动化打包 - 简书 这篇文件，然后根据需求，扩展做了全能自动化的，app-store、ad-hoc、dev 三种类型证书，另外项目如果是用cocoapod，需要用 -workspace，否则用 -project，都做了相当自能化的改造，下面就来看看吧！ ps: fastlane 当然能做到这些事情，但是这个工具太重，需要的配置也需要熟悉，对于刚毕业或陌生的同学有点难，学习一下ruby也是好事，大家有兴趣可以自行研究一下~ 2、使用说明本文，也不打算讲 xcodebuild 命令的原理，大家需要自动搜索，网上很多教程了。所以，我们先过一下，怎么打包吧！ 把 build_ipa_shell 脚本和证书配置文件夹复制到项目 根据要求修改项目名字和配置 在终端执行 sh build_ipa.sh，不要求切换到项目的目录啊，然后选择打包的类型，然后等待就好！ 1~ &#62; sh /Users/HTC/Desktop/BuildIPAExample/build_ipa_shell/build_ipa.sh &#10;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] 编译打包成功后，会自动打开ipa文件的目录！ 如果配置好后，只要执行一下命令，就自动打ipa包，并且成功后自己打开ipa包的目录，简直不能在简单了！ 3、配置说明上面已经说了 build_ipa.sh的配置，就是 ExportOptions-appstore.plist /ExportOptions-dev.plist / ExportOptions-adhoc.plist 三个证书的配置没有说，其实也很简单，自己配置，或者让Xcode生成配置！ 自己配置的就不说了，自己搜索一下教程就好，让Xcode生成，就是要 Archive 项目，然后选择 Export...： 上面三个文件，就对应下面的三个选项: 如果选择手动，就是使用本地的证书（如果是选择自动，就是Xcode中登陆了开发者账号，自动生成和匹配证书）： 等待Xcode生成ipa包，选择 Export，Xcode就会自动生成ipa文件和证书配置文件，跟我们的脚本一样的： 最后，导出的文件中，更改ExportOptions.plist 文件名字为对应的 ExportOptions-appstore.plist /ExportOptions-dev.plist / ExportOptions-adhoc.plist，然后复制到 build_ipa_shell 脚本目录就可以啦！ 4、一些坑点打包时，遇到下面报错：1234562018-09-17 10:35:23.068 xcodebuild[11322:5883826] [MT] IDEDistribution: Step failed: &lt;IDEDistributionPackagingStep: 0x7ff88e7ab7c0&gt;: Error Domain=NSCocoaErrorDomain Code=3840 \"No value.\" UserInfo=&#123;NSDebugDescription=No value., NSFilePath=/var/folders/12/yqg0r8s508lfmzw6b91nh97m0000gn/T/ipatool-json-filepath-vo804k&#125;error: exportArchive: The data couldn’t be read because it isn’t in the correct format.Error Domain=NSCocoaErrorDomain Code=3840 \"No value.\" UserInfo=&#123;NSDebugDescription=No value., NSFilePath=/var/folders/12/yqg0r8s508lfmzw6b91nh97m0000gn/T/ipatool-json-filepath-vo804k&#125;** EXPORT FAILED ** 解决方法：将对应打包的证书plist文件的compileBitcode内容由 true 改为 false 就可以： 12&lt;key&gt;compileBitcode&lt;/key&gt;&lt;false/&gt; 5、源代码具体的代码，也可参考我的Github代码： iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。 iHTCboy/BuildIPAExample: Build IPA file Example 1&#10;#&#33719;&#21462;&#33050;&#26412;&#25191;&#34892;&#30446;&#24405;&#10;scrip_path=&#34;$( cd &#34;$( dirname &#34;$&#123;BASH_SOURCE[0]&#125;&#34; )&#34; &#38;&#38; pwd )&#34;&#10;&#10;#&#24037;&#31243;&#32477;&#23545;&#36335;&#24452;&#10;project_path=$(dirname &#34;$scrip_path&#34;)&#10;&#10;#&#24037;&#31243;&#21517; &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;&#24037;&#31243;&#21517;&#10;project_name=BuildIPAExample&#10;&#10;#scheme&#21517; &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;sheme&#21517;&#10;scheme_name=BuildIPAExample&#10;&#10;#project_type &#39033;&#30446;&#22914;&#26524;&#26159;&#29992;cocoapod&#65292;&#23601;&#25913;&#20026; xcworkspace&#65292;&#21542;&#21017;&#29992; xcodeproj&#10;project_type=xcodeproj&#10;&#10;#&#25171;&#21253;&#27169;&#24335; Debug/Release&#10;development_mode=Debug&#10;&#10;#build&#25991;&#20214;&#22841;&#36335;&#24452;&#10;build_path=$&#123;project_path&#125;/build&#10;&#10;#plist&#25991;&#20214;&#25152;&#22312;&#36335;&#24452;&#10;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-dev.plist&#10;&#10;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;&#10;read number&#10;while([[ $number != 1 ]] &#38;&#38; [[ $number != 2 ]] &#38;&#38; [[ $number != 3 ]])&#10;do&#10;echo &#34;Error! Should enter 1 or 2 or 3&#34;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;read number&#10;done&#10;&#10;if [ $number == 1 ];then&#10;&#9;development_mode=Release&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-appstore.plist&#10;&#10;elif [ $number == 2 ];then&#10;&#9;development_mode=Release&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-adhoc.plist&#10;else&#10;&#9;development_mode=Debug&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-dev.plist&#10;fi&#10;&#10;#&#23548;&#20986;.ipa&#25991;&#20214;&#25152;&#22312;&#36335;&#24452;&#10;exportIpaPath=$&#123;project_path&#125;/ipa_files/$&#123;development_mode&#125;&#10;&#10;# &#29983;&#25104;&#20445;&#23384;ipa&#25991;&#20214;&#30340;&#30446;&#24405;&#10;if [ ! -d $&#123;project_path&#125;/ipa_files ];&#10;then&#10;mkdir -p $&#123;project_path&#125;/ipa_files;&#10;fi&#10;&#10;# &#25171;&#21253;&#31867;&#22411;&#10;if [ $project_type == &#34;xcodeproj&#34; ];&#10;then&#10;&#9;project_build=project&#10;else&#10;&#9;project_build=workspace&#10;fi&#10;&#10;# &#36827;&#20837;&#39033;&#30446;&#30446;&#24405;&#65292;&#26041;&#20415;&#21518;&#38754;&#30340;&#25805;&#20316;&#10;cd $&#123;project_path&#125;&#10;&#10;echo &#39;///-----------&#39;&#10;echo &#39;/// &#27491;&#22312;&#28165;&#29702;&#24037;&#31243;&#39;&#10;echo &#39;///-----------&#39;&#10;xcodebuild \\&#10;clean -configuration $&#123;development_mode&#125; -quiet || exit&#10;&#10;echo &#39;///--------&#39;&#10;echo &#39;/// &#28165;&#29702;&#23436;&#25104;&#39;&#10;echo &#39;///--------&#39;&#10;echo &#39;&#39;&#10;&#10;echo &#39;///-----------&#39;&#10;echo &#39;/// &#27491;&#22312;&#32534;&#35793;&#24037;&#31243;:&#39;$&#123;development_mode&#125;&#10;echo &#39;///-----------&#39;&#10;xcodebuild \\&#10;archive -$&#123;project_build&#125; $&#123;project_path&#125;/$&#123;project_name&#125;.$&#123;project_type&#125; \\&#10;-scheme $&#123;scheme_name&#125; \\&#10;-configuration $&#123;development_mode&#125; \\&#10;-archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive -quiet || exit&#10;&#10;echo &#39;///--------&#39;&#10;echo &#39;/// &#32534;&#35793;&#23436;&#25104;&#39;&#10;echo &#39;///--------&#39;&#10;echo &#39;&#39;&#10;&#10;echo &#39;///----------&#39;&#10;echo &#39;/// &#24320;&#22987;ipa&#25171;&#21253;&#39;&#10;echo &#39;///----------&#39;&#10;xcodebuild -exportArchive -archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive \\&#10;-configuration $&#123;development_mode&#125; \\&#10;-exportPath $&#123;exportIpaPath&#125; \\&#10;-exportOptionsPlist $&#123;exportOptionsPlistPath&#125; \\&#10;-quiet || exit&#10;&#10;if [ -e $exportIpaPath/$scheme_name.ipa ]; then&#10;echo &#39;///----------&#39;&#10;echo &#39;/// ipa&#21253;&#24050;&#23548;&#20986;&#39;&#10;echo &#39;///----------&#39;&#10;open $exportIpaPath&#10;else&#10;echo &#39;///-------------&#39;&#10;echo &#39;/// ipa&#21253;&#23548;&#20986;&#22833;&#36133; &#39;&#10;echo &#39;///-------------&#39;&#10;fi&#10;echo &#39;///------------&#39;&#10;echo &#39;/// &#25171;&#21253;ipa&#23436;&#25104; &#39;&#10;echo &#39;///-----------=&#39;&#10;echo &#39;&#39;&#10;&#10;# &#25171;&#24320;&#29983;&#25104;ipa&#30340;&#30446;&#24405;&#10;open $&#123;exportIpaPath&#125;&#10;&#10;# echo &#39;///-------------&#39;&#10;# echo &#39;/// &#24320;&#22987;&#21457;&#24067;ipa&#21253; &#39;&#10;# echo &#39;///-------------&#39;&#10;&#10;# if [ $number == 1 ];then&#10;&#10;# #&#39564;&#35777;&#24182;&#19978;&#20256;&#21040;App Store&#10;# # &#23558;-u &#21518;&#38754;&#30340;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;AppleID&#30340;&#36134;&#21495;&#65292;-p&#21518;&#38754;&#30340;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;&#23494;&#30721;&#10;# altoolPath=&#34;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&#34;&#10;# &#34;$altoolPath&#34; --validate-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u XXX -p XXX -t ios --output-format xml&#10;# &#34;$altoolPath&#34; --upload-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u XXX -p XXX -t ios --output-format xml&#10;# else&#10;&#10;# #&#19978;&#20256;&#21040;Fir&#10;# # &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;Fir&#24179;&#21488;&#30340;token&#10;# fir login -T XXX&#10;# fir publish $exportIpaPath/$scheme_name.ipa&#10;&#10;# fi&#10;&#10;exit 0 6、总结通过本次脚本，又让效率提升了n倍，以后打包不在害怕啦！！！另外，脚本中，还包含 上传到 AppStore 或第三方平台的功能，这里就先不写啦，大家有兴趣可以自行实践，和前面几篇技巧一样，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！ 后续有更多技巧，会继续给大家分享，期待~ 参考 iOS项目之自动化打包 - 简书 Xcode9 iOS export archive fails on correct format |Apple Developer Forums iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。 iHTCboy/BuildIPAExample: Build IPA file Example shell技巧1 - 生成ipa文件 | iHTCboy’s blog 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"bash","slug":"bash","permalink":"https://iHTCboy.com/tags/bash/"},{"name":"ipa","slug":"ipa","permalink":"https://iHTCboy.com/tags/ipa/"},{"name":"shell","slug":"shell","permalink":"https://iHTCboy.com/tags/shell/"},{"name":"xcodebuild","slug":"xcodebuild","permalink":"https://iHTCboy.com/tags/xcodebuild/"}]},{"title":"shell技巧4 - nm命令解决AppStore2.5.2被拒问题","date":"2018-09-16T14:20:16.000Z","path":"2018/09/16/2018-09-16_shell技巧4_nm命令解决AppStore被拒问题/","text":"1、前言最近App Store审核被拒，2. 5 Performance: Software Requirements，Guideline 2.5.2 - Performance - Software Requirements，遇到这样的问题，回信问苹果，肯定得不到答案，苹果就是礼貌的回复。经过一个星期的重复被拒，只能自己找问题，热更新问题，苹果拒审信一直长这样： ….This code, combined with a remote resource, can facilitate significant changes to your app’s behavior compared to when it was initially reviewed for the App Store. While you may not be using this functionality currently, it has the potential to load private frameworks, private methods, and enable future feature changes. This includes any code which passes arbitrary parameters to dynamic methods such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations(), and running remote scripts in order to change app behavior and/or call SPI, based on the contents of the downloaded script. Even if the remote resource is not intentionally malicious, it could easily be hijacked via a Man In The Middle (MiTM) attack, which can pose a serious security vulnerability to users of your app. … 从中找到了一些关键点： 1dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations(), 然后在 「iOS」热更新审核被拒的解决方法 文章中，找到可以打印下第三方的.a文件看看，看有没有 dlopen(), dlsym()，命令行： 1nm -u libwechaat.a &#62;&#62; xxx.txt 注：nm -u path：Display only undefined symbols。更多 nm 命令可查看我之前总结的文章 Mac查看文件内容常用的命令小结 2、定位和查到问题找到了方向，就是利用 nm 命令查到所有第三方的 .a / .framework是否有相关的方法。 但是如果一个一个库用nm命令去查找，效率非常低，而且每一个库的目录不一样，所以，想到用sehll脚本，整个工程遍历全部的文件，查到到库的，然后打印出来！这才是万利的方法啊！！ 3、shell 编程这里思路大家应该也想到，就是遍历目录，一个一个文件判断，问题的关键出来了！就是怎么判断一个文件是不是.a 或 .framework ？ 其实，可以利用 file 打印当前读取的文件的类型，如果是 Mach-O 类型，就是库文件。比如终端执行 file libWeChatSDK.a 会打印如下： 123456libWeChatSDK.a: Mach-O universal binary with 5 architectures: [i386:current ar archive] [arm64]libWeChatSDK.a (for architecture i386): current ar archivelibWeChatSDK.a (for architecture armv7): current ar archivelibWeChatSDK.a (for architecture armv7s): current ar archivelibWeChatSDK.a (for architecture x86_64): current ar archivelibWeChatSDK.a (for architecture arm64): current ar archive 然后用管道 grep 查找 ‘Mach-O’ 关键字，如果存在，就执行 nm -u file_path 查看所有的方法，最后通过 grep -E &#39;dlopen|method_exchangeImplementations|performSelector|respondsToSelector|dlsym&#39; 查找包含匹配 dlopen method_exchangeImplementations performSelector respondsToSelector dlsym 其中一个关键字就算包含，最后打印出包含的字段和路径。 最后，在终端执行脚本 sh nm_find.sh 就会得到下面的检查结果，非常的方便和高效！ 1234567891011121314151617181920212223242526================================================ Enter project path: /Users/HTC/Desktop/ThirdSDK -----------------------------/Users/HTC/Desktop/ThirdSDK/Adjust/Adjust-4.12.3/AdjustSdk.framework/AdjustSdk包含字段：U _dlsym-----------------------------/Users/HTC/Desktop/ThirdSDK/Chartboost/Chartboost-v6.0.1/Chartboost.framework/Chartboost包含字段：U _method_exchangeImplementations U _dlopen U _dlsym-----------------------------/Users/HTC/Desktop/ThirdSDK/Facebook/Facebook/FBSDKCoreKit.framework/FBSDKCoreKit包含字段：U _dlopen U _dlsym-----------------------------/Users/HTC/Desktop/ThirdSDK/Firebase/Crashlytics/Crashlytics.framework/submit包含字段：_class_respondsToSelector _dlsym 4、源代码具体的代码，也可参考我的Github代码： iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。 1#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;project_path=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;function getProjectPath() &#123;&#10;&#9;# &#36755;&#20986;&#25442;&#34892;&#65292;&#26041;&#20415;&#26597;&#30475;&#10;&#9;echo &#34;================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34; Enter project path: &#34; project_path&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#10;&#9;if test -z &#34;$project_path&#34;; then&#10;&#9;&#9;getProjectPath&#10;&#9;else&#10;&#9;&#9;read_dir $&#123;project_path&#125;&#10;&#9;fi&#10;&#125;&#10;&#10;function read_dir()&#123;&#10;&#9;for file in `ls $1` #&#27880;&#24847;&#27492;&#22788;&#36825;&#26159;&#20004;&#20010;&#21453;&#24341;&#21495;&#65292;&#34920;&#31034;&#36816;&#34892;&#31995;&#32479;&#21629;&#20196;&#10;&#9;do&#10;&#9;&#9;if [ -d $1&#34;/&#34;$file ] #&#27880;&#24847;&#27492;&#22788;&#20043;&#38388;&#19968;&#23450;&#35201;&#21152;&#19978;&#31354;&#26684;&#65292;&#21542;&#21017;&#20250;&#25253;&#38169;&#10;&#9;&#9;then&#10;&#9;&#9;&#9;read_dir $1&#34;/&#34;$file&#10;&#9;&#9;else&#10;&#9;&#9;&#9;#&#22312;&#27492;&#22788;&#22788;&#29702;&#25991;&#20214;&#21363;&#21487;&#10;&#9;&#9;&#9;file_path=&#34;$1/$file&#34;&#10;&#9;&#9;&#9;if `file $&#123;file_path&#125; | grep -q &#39;Mach-O&#39;` ; then&#10;&#9;&#9;&#9;&#9;find_world=$(echo `nm -u $&#123;file_path&#125; | grep -E &#39;dlopen|method_exchangeImplementations|performSelector|respondsToSelector|dlsym&#39;`)&#10;&#9;&#9;&#9;&#9;# -n &#23383;&#31526;&#20018;&#9;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#19981;&#20026;&#38646;&#21017;&#20026;&#30495;&#10;&#9;&#9;&#9;&#9;if [ -n &#34;$find_world&#34; ] ; then&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;-----------------------------\\n&#39;&#10;&#9;&#9;&#9;&#9;&#9;echo $&#123;file_path&#125;&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;&#21253;&#21547;&#23383;&#27573;&#65306;&#39;&#10;&#9;&#9;&#9;&#9;&#9;echo $&#123;find_world&#125;&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;\\n&#39;&#10;&#9;&#9;&#9;&#9;fi&#10;&#9;&#9;&#9;fi&#10;&#9;&#9;fi&#10;&#9;done&#10;&#125; &#10;&#10;#&#35835;&#21462;&#31532;&#19968;&#20010;&#21442;&#25968;&#10;getProjectPath&#10;&#10;echo &#34;------- end processing -------&#34; 5、总结最后，我们把这个脚本输出的全部内容截图，和这些第三方SDK的相关官网链接贴到回信中，告诉苹果审核员，我们应用不存在非法使用热更新 such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations() 等方法，最后苹果就通过了审核！！！ 通过 nm 命令和 shell脚本，又让效率提升了n倍，和前面几篇技巧一样，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！ 后续有更多技巧，会继续给大家分享，期待~ 参考 shell技巧1 - 生成ipa文件 | iHTCboy’s blog Shell 教程 | 菜鸟教程 Mac查看文件内容常用的命令小结 | iHTCboy’s blog shell技巧1 - 生成ipa文件 | iHTCboy’s blog 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"Guideline2.5.2","slug":"Guideline2-5-2","permalink":"https://iHTCboy.com/tags/Guideline2-5-2/"},{"name":"bash","slug":"bash","permalink":"https://iHTCboy.com/tags/bash/"},{"name":"nm","slug":"nm","permalink":"https://iHTCboy.com/tags/nm/"},{"name":"shell","slug":"shell","permalink":"https://iHTCboy.com/tags/shell/"}]},{"title":"shell技巧3 - 自动生成AppIcon","date":"2018-09-15T08:20:16.000Z","path":"2018/09/15/2018-09-15_shell技巧3_自动生成AppIcon/","text":"1、前言上一篇讲到 shell技巧2 - 图片旋转缩放转换格式等，而平时iOS开发中，Xcode中Assets.xcassets的AppIcon 需要设计师或开发者自行放置对应尺寸的图标，虽然我经常使用macOS下的 Prepo 应用生成多尺寸的图标，但是依然需要一张一张的放置到Xcode中，并且步骤非常不智能化，部分图标需要人工对应位置放置。如果通过使用 sips 命令，其实可以自动生成对应尺寸的图片，就可以灵活和自动化的批量生成AppIcon的全部图标，绝对的方便和效率！说到就马上实践吧！ 2、AppIcon 要求平时，我们的应用的图标，都会在 Assets.xcassets 的AppIcon 设置，对于 iOS 来说，需要配置如下图标： 其中，因为App如果只支持iOS7以上，1x 的设备也不需要支持了，那么大概导出需要如下的尺寸： pt 像素密度(scale) 尺寸(px) 用途 支持系统版本 20pt 2x 40*40 iPhone Notificafion iOS 7-12 20pt 3x 60*60 iPhone Notificafion iOS 7-12 29pt 2x 58*58 iPhone Spotlight/Settings iOS 5-6/5-12 29pt 3x 87*87 iPhone Spotlight/Settings iOS 5-6/5-12 40pt 2x 80*80 iPhone Spotlight iOS 7-12 40pt 3x 120*120 iPhone Spotlight iOS 7-12 60pt 2x 120*120 iPhone App iOS 7-12 60pt 3x 180*180 iPhone App iOS 7-12 20pt 2x 40*40 iPad Notificafion iOS 7-12 29pt 2x 58*58 iPad Settings iOS 5-12 40pt 2x 80*80 iPad Spotlight iOS 7-12 76pt 2x 152*152 iPad App iOS 7-12 83.5pt 2x 167*167 iPad Pro App iOS 9-12 1024pt 1x 1024*1024 App Store iOS 7-12 从上面表格可以看出，这些尺寸还是有一些重复的，所以导出尺寸时，其实没有那么多的啊，因为如果相同尺寸，可以使用同一张图片，从而减少包的体积啊！ 3、shell 编程通过使用 sips 命令进行图片处理，这里简单的写一下iOS App图标生成，apple watch 或 macOS app的图标生成的示例，希望大家能举一反三，这都是授鱼不如授渔！ 先说一下操作步骤： 1.在终端执行shell脚本： 1sh /Users/HTC/Desktop/make_iOSAppIcon.sh 2.然后拖拽1024图片路径到终端： 1================================================&#10;Enter origin image path: /Users/HTC/Desktop/apple.jpg 3.执行成功: 1234567891011121314151617------- start processing -------info: resize copy 1024 successfully.info: resize 1024 successfully.info: resize 180 successfully.info: resize 167 successfully.info: resize 152 successfully.info: resize 120 successfully.info: resize 87 successfully.info: resize 80 successfully.info: resize 60 successfully.info: resize 58 successfully.info: resize 40 successfully.info: resize 1024 to jpg successfully.creat iOS AppIcon finished!------- end processing ------- 生成的图标和json文件： 4.然后找到输出的文件夹（默认是在填写的图片的同级目录），复制到Xcode项目中 Project/Assets.xcassets/AppIcon.appiconset/ 即可。（如果还想省略这一步操作，也可以直接将生成的输出到项目的目录中，这步就交给读者需要自行添加啊） 5.打开Xcode，就能看到图片已经自动显示好！ 这里说一下大概的思路，其实也不难，首先判断输出的路径，如果不是目录、不存在的目录的文件、格式不符合的图片，就可以图片处理，否则提示重新输入图片路径。然后创建图片同级的文件夹用于保存生成的图标和配置的json文件，由于 “1024”图片最大，所以，先转成png，然后从大到小，一张一张剪切，另外，需要注意，1024如果是png，因为有透明度的话上传到AppStore是不成功的，所以，这里最后转换1024图片格式为jpg，这样保证万无一失。其它图标都是png，也不用切成圆角，因为苹果最终显示时系统自动切成图角。 总结一下好处： 方便快捷，不用人为关心 尺寸相同的图片只保留一张，减少包体积 1024图片为jpg，万无一失 4、源代码具体的代码，也可参考我的Github代码： iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。 1#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;image_path=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;getImagePath() &#123;&#10;&#9;echo -e &#34;\\n================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34;Enter origin image path: &#34; image_path&#10;&#9;# &#22914;&#26524;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#20026;&#38646;&#21017;&#20026;&#30495;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#65292;&#21542;&#21017;&#25191;&#34892;&#26059;&#36716;&#20989;&#25968;&#10;&#9;if&#9;test -z &#34;$image_path&#34;; then&#10;&#9;&#9; getImagePath&#10;&#9;else&#10;&#9;&#9;# &#22914;&#26524;&#25991;&#20214;&#23384;&#22312;&#19988;&#20026;&#30446;&#24405;&#21017;&#20026;&#30495;&#10;&#9;&#9;if test -d &#34;$image_path&#34;; then&#10;&#9;&#9;&#9;echo -e &#34;\\n------- [Error] the file path is directory --------&#34;&#10;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;else&#10;&#9;&#9;&#9;# &#22914;&#26524;&#25991;&#20214;&#23384;&#22312;&#19988;&#21487;&#35835;&#21017;&#20026;&#30495;&#10;&#9;&#9;&#9;if test -r &#34;$image_path&#34;; then&#10;&#9;&#9;&#9;&#9;ext=&#34;\\.jpeg|\\.jpg|\\.png|\\.JPEG|\\.JPG|\\.PNG|\\.gif|\\.bmp&#34;&#10;&#9;&#9;&#9;&#9;# get the images that need process.&#10;&#9;&#9;&#9;&#9;valid_img=$(echo &#34;$image_path&#34; | grep -E &#34;$&#123;ext&#125;&#34;)&#10;&#9;&#9;&#9;&#9;# &#21305;&#37197;&#21040;&#22270;&#29255;&#26684;&#24335;&#25165;&#22788;&#29702;&#10;&#9;&#9;&#9;&#9;if test -z &#34;$valid_img&#34;; then&#10;&#9;&#9;&#9;&#9;&#9;echo -e &#34;\\n------- [Error] the file is not&#39;s legal format --------&#34;&#10;&#9;&#9;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;&#9;creatAppIcon&#9;&#10;&#9;&#9;&#9;&#9;fi&#10;&#9;&#9;&#9;else&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;echo -e &#34;\\n------- [Error] the file path is not&#39;s find --------&#34;&#10;&#9;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;&#9;fi&#9;&#10;&#9;&#9;fi&#10;&#9;fi&#10;&#125;&#10;&#10;creatAppIcon() &#123;&#10;&#9;echo -e &#34;\\n------- start processing -------&#34;&#10;&#9;&#10;&#9;# &#22270;&#29255;&#30340;&#19978;&#19968;&#32423;&#30446;&#24405;&#10;&#9;prev_path=$(dirname &#34;$image_path&#34;)&#10;&#9;&#10;&#9;# &#36755;&#20986;icon&#30340;&#30446;&#24405;&#10;&#9;icon_paht=&#34;$&#123;prev_path&#125;/iOS_icon_`date +%Y%m%d_%H%M%S`&#34;&#10;&#9;&#10;&#9;# &#21019;&#24314;&#30446;&#24405;&#10;&#9;mkdir -p $&#123;icon_paht&#125;&#10;&#9;&#10;&#9;# 1024 icon &#29305;&#21035;&#22788;&#29702;&#10;&#9;icon_1024_path=&#34;$&#123;icon_paht&#125;/icon-1024.png&#34;&#10;&#9;cp $&#123;image_path&#125; $&#123;icon_1024_path&#125;&#10;&#9;&#10;&#9;sips -s format png $&#123;image_path&#125; --out $&#123;icon_1024_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\\tresize copy 1024 successfully.&#34; || echo -e &#34;info:\\tresize copy 1024 failed.&#34;&#10;&#9;&#10;&#9;sips -z 1024 1024 $&#123;icon_1024_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\\tresize 1024 successfully.&#34; || echo -e &#34;info:\\tresize 1024 failed.&#34;&#10;&#9;&#10;&#9;prev_size_path=$&#123;icon_1024_path&#125; #&#29992;&#20110;&#22797;&#21046;&#23567;&#22270;&#65292;&#20943;&#23569;&#20869;&#23384;&#28040;&#32791;&#10;&#9;# &#38656;&#35201;&#29983;&#25104;&#30340;&#22270;&#26631;&#23610;&#23544;&#10;&#9;icons=(180 167 152 120 87 80 60 58 40)&#10;&#9;for size in $&#123;icons[@]&#125;&#10;&#9;do&#10;&#9;&#9;size_path=&#34;$&#123;icon_paht&#125;/icon-$&#123;size&#125;.png&#34;&#10;&#9;&#9;cp $&#123;prev_size_path&#125; $&#123;size_path&#125;&#10;&#9;&#9;prev_size_path=$&#123;size_path&#125;&#10;&#9;&#9;sips -Z $size $&#123;size_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\\tresize $&#123;size&#125; successfully.&#34; || echo -e &#34;info:\\tresize $&#123;size&#125; failed.&#34;&#10;&#9;done&#10;&#9;&#10;&#9;# &#36716;&#25442;1024&#22270;&#29255;&#20026;jpg&#65292;&#38450;&#27490;&#26377;&#36879;&#26126;&#21306;&#22495;&#23548;&#33268;&#19978;&#20256; App Store &#22833;&#36133;&#10;&#9;icon_1024_jpg_path=&#34;$&#123;icon_paht&#125;/icon-1024.jpg&#34;&#10;&#9;mv $&#123;icon_1024_path&#125; $&#123;icon_1024_jpg_path&#125;&#10;&#9;sips -s format jpeg $&#123;icon_1024_jpg_path&#125; --out $&#123;icon_1024_jpg_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\\tresize 1024 to jpg successfully.&#34; || echo -e &#34;info:\\tresize 1024 to jpg failed.&#34;&#10;&#9;&#10;&#9;contents_json_path=&#34;$&#123;icon_paht&#125;/Contents.json&#34;&#10;&#9;# &#29983;&#25104;&#22270;&#26631;&#23545;&#24212;&#30340;&#37197;&#32622;&#25991;&#20214;&#10;&#9;echo &#39;&#123;&#10;&#9;&#9;&#34;images&#34; : [&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-40.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-60.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-58.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-87.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-80.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-120.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;60x60&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-120.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;60x60&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-180.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-40.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-58.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-80.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;76x76&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;76x76&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-152.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;83.5x83.5&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-167.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;1024x1024&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ios-marketing&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-1024.jpg&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;],&#10;&#9;&#9;&#34;info&#34; : &#123;&#10;&#9;&#9;&#9;&#34;version&#34; : 1,&#10;&#9;&#9;&#9;&#34;author&#34; : &#34;xcode&#34;&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#39; &#62; $&#123;contents_json_path&#125;&#10;&#9;&#9;&#10;&#9;echo -e &#34;\\n creat iOS AppIcon finished!&#34;&#10;&#9;echo -e &#34;\\n------- end processing -------&#34;&#10;&#125;&#10;&#10;&#10;# &#39318;&#20808;&#25191;&#34892;&#20989;&#25968;&#65292;&#22635;&#20889;1024&#22270;&#29255;&#30340;&#36335;&#24452;&#36171;&#20540;&#10;getImagePath 5、总结通过 ship 命令和 shell脚本和前面几篇技巧，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！ 其实，只要用命令有终端的地方，都是可以用shell脚本！后续有更多技巧，还会继续给大家分享，期待吧~ 参考 shell技巧2 - 图片旋转缩放转换格式等 | iHTCboy’s blog 利器: Mac自带的图片工具Sips sips MAN page Man Page - macOS - SS64.com 使用sips命令自动缩减图片尺寸 shell技巧1 - 生成ipa文件 | iHTCboy’s blog 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Assets","slug":"Assets","permalink":"https://iHTCboy.com/tags/Assets/"},{"name":"appicon","slug":"appicon","permalink":"https://iHTCboy.com/tags/appicon/"},{"name":"bash","slug":"bash","permalink":"https://iHTCboy.com/tags/bash/"},{"name":"shell","slug":"shell","permalink":"https://iHTCboy.com/tags/shell/"},{"name":"sips","slug":"sips","permalink":"https://iHTCboy.com/tags/sips/"},{"name":"xcassets","slug":"xcassets","permalink":"https://iHTCboy.com/tags/xcassets/"}]},{"title":"shell技巧2 - 图片旋转缩放转换格式等","date":"2018-09-14T13:20:16.000Z","path":"2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/","text":"1、前言在macOS下，如果对大量图片进行处理或数据收集，查找了一下，通过使用 sips 命令，可以进行图片的大部分操作处理，如果使用 shell，就可以灵活和自动化的批量操作图片！ 2、sips 用法常用的用法可以参考： 利器: Mac自带的图片工具Sips，全部的用法可以参考：sips MAN page Man Page - macOS - SS64.com 以下就是引用 利器: Mac自带的图片工具Sips 内容： 1.裁剪时固定图片宽度，高度自适应 1sips -Z 320 iamge_file_name 2.裁剪时指定图片宽与高 1# &#35009;&#21098;&#22270;&#29255;&#20026;400x300&#22823;&#23567;&#10;sips -z 400 300 iamge_file_name 注：需要注意的是这里的参数是小写的z，并且图片缩放方式不是锁定图片比例的，即如果图片本身是16:9，则会导致图片被挤压。 3.旋转图片 1sips -r 90 image_file_name 注：上面的命令将图片顺时针旋转90度，相信机智的你已经想到逆时针90度应该是-90了。没错，顺时针用正数表示，逆时针可以用负数表示。你可以进行任意角度和方向的旋转。 4.翻转图片 1sips -f horizontal image_file_name 注：上面命令可以对图片进行水平翻转，-f支持水平和垂直两种翻转，水平（horizontal），垂直（vertical）。 5.修改图片格式 1sips -s format jpeg input.png --out output.jpg 注：使用-s参数可以修改图片格式为指定值，sips支持jpeg | tiff | png | gif | jp2 | pict | bmp | qtif | psd | sgi | tga共11种格式。并且-s除了能修改文件格式外，还能修改图片的其它meta数据，具体可以通过man sips查看。 6.获取图片meta信息 1sips -g pixelWidth -g pixelHeight image_file_name 注：上面命令可以获取图片的长宽高信息，与-s参数一样，-g也支持更多的meta值，可以参见man sips的信息，这里就不做赘述了。 3、shell 编程通过使用 sips 命令进行图片处理，本来计划做一个功能库，但是想想还是没有必要，简单的写了一个图片旋转的示例，希望大家能举一反三，这都是授鱼不如授渔！ 4、图片旋转代码实现具体的代码，可参考我的Github代码： iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。 1#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;imagePath=&#34;&#34;&#10;angle=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;&#10;getImagePath() &#123;&#10;&#9;echo &#34;\\n================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34;Enter image path: &#34; imagePath&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#65292;&#21542;&#21017;&#25191;&#34892;&#26059;&#36716;&#20989;&#25968;&#10;&#9;if&#9;test -z &#34;$imagePath&#34;; then&#10;&#9;&#9; getImagePath&#10;&#9;else&#10;&#9;&#9;rotationImage&#10;&#9;fi&#10;&#125;&#10;&#10;&#10;rotationImage() &#123;&#10;&#9;echo &#34;\\n================================================&#34;&#10;&#9;read -p &#34;Enter angle(default 90&#176;): &#34; angle&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#40664;&#35748;&#35774;&#32622;&#20026;90&#24230;&#10;&#9;if test -z &#34;$angle&#34;; then&#10;&#9;&#9;angle=&#34;90&#34;&#10;&#9;fi&#10;&#10;&#9;# &#20351;&#29992; sips &#21629;&#20196;&#36827;&#34892;&#22270;&#29255;&#26059;&#36716;&#10;&#9;sips -r &#34;$&#123;angle&#125;&#34; &#34;$&#123;imagePath&#125;&#34;&#10;&#9;&#9;&#10;&#9;echo &#34;\\n rotation $angle &#176; finished!&#34;&#10;&#9;&#9;&#10;&#9;# &#37325;&#26032;&#35843;&#29992;&#26059;&#36716;&#20989;&#25968;&#65292;&#26041;&#20415;&#22810;&#27425;&#26059;&#36716;&#25805;&#20316;&#10;&#9;rotationImage&#10;&#9;&#10;&#125;&#10;&#10;# &#39318;&#20808;&#25191;&#34892;&#20989;&#25968;&#65292;&#32473;&#21464;&#37327;&#36171;&#20540;&#10;getImagePath 5、总结比如图片批量格式转换，图片尺寸批量获取等，通过 ship 命令，然后结合 sehll 脚本，效率和自动化不是梦！ 关于sips的更多使用场景，可以看看这篇文章 使用sips命令自动缩减图片尺寸 下一节，结合刚需，打算写一个从一张1024的图片，自动生成Xcode所需要的全部图标，这应该是一个不错的想法！期待吧~ 参考 利器: Mac自带的图片工具Sips sips MAN page Man Page - macOS - SS64.com 使用sips命令自动缩减图片尺寸 shell技巧1 - 生成ipa文件 | iHTCboy’s blog 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"bash","slug":"bash","permalink":"https://iHTCboy.com/tags/bash/"},{"name":"shell","slug":"shell","permalink":"https://iHTCboy.com/tags/shell/"},{"name":"sips","slug":"sips","permalink":"https://iHTCboy.com/tags/sips/"}]},{"title":"Python爬虫实践-网易云音乐","date":"2018-09-09T12:56:16.000Z","path":"2018/09/09/2018-09-09_Python爬虫实践-网易云音乐下载/","text":"1、前言最近，网易的音乐很多听不到了，刚好也看到很多教程，跟进学习了一下，也集大全了吧，本来想优化一下的，但是发现问题还是有点复杂，最后另辟捷径，提供了简单的方法啊！ 本文主要参考 python编写GUI版网易云音乐爬虫 后改写，有兴趣的可以看看文章的GUI，了解更多知识~ 2、Python + 爬虫首先，说一下准备工作： Python：需要基本的python语法基础 requests：专业用于请求处理，requests库学习文档中文版 lxml：其实可以用pythonth自带的正则表达式库re，但是为了更加简单入门，用 lxml 中的 etree 进行网页数据定位爬取。 re：python正则表达式处理 json：python的json处理库 如果大家对上面的库还比不懂，可以看看我的之前文章 《Python爬虫实践入门篇》 然后，说一下我们现在已经知道下载链接是这样的： 1http://music.163.com/song/media/outer/url?id=' id 就是歌曲的id！ 所以，现在我们爬虫主要的工作就是找到这个id，当然为了更好的保存，也要找到这个歌名啦！ 那现在就是要找到我们需要爬虫的网站链接啦！我分析了一下，大概是下面三种： 123456#歌曲清单music_list = 'https://music.163.com/#/playlist?id=2412826586' #歌手排行榜artist_list = 'https://music.163.com/#/artist?id=8325'#搜索列表 search_list = 'https://music.163.com/#/search/m/?order=hot&amp;cat=全部&amp;limit=435&amp;offset=435&amp;s=梁静茹' 如果你已经只是想下载一首歌，比如静茹-勇气：https://music.163.com/#/song?id=254485，那你直接就用浏览器打开 http://music.163.com/song/media/outer/url?id=254485 就可以了，没必要爬虫啊！ 好啦！感觉重点都说完了，提取和解析就是用 lxml，不懂的就看我之前的文章啊 《Python爬虫实践入门篇》 3、下载歌词如果还要下载歌词，那也很简单，通过接口，有歌曲的id就可以： 1url = 'http://music.163.com/api/song/lyric?id=&#123;&#125;&amp;lv=-1&amp;kv=-1&amp;tv=-1'.format(song_id) 返回的json数据大概长这样： 123456789101112131415161718192021&#123; sgc: true, sfy: false, qfy: false, lrc: &#123; version: 7, lyric: \"[00:39.070]开了窗 等待天亮\\n[00:46.160]看这城市 悄悄的 熄了光\\n[00:51.850]听风的方向\\n[00:55.090]这一刻 是否和我一样\\n[00:58.730]孤单的飞翔\\n[01:02.300]模糊了眼眶\\n[01:07.760]广播里 那首歌曲\\n[01:14.830]重复当时 那条街那个你\\n[01:20.410]相同的桌椅\\n[01:23.740]不用言语 就会有默契\\n[01:27.470]这份亲密\\n[01:30.560]那么熟悉\\n[01:33.850]在爱里 等着你\\n[01:37.480]被你疼惜 有种暖意\\n[01:41.090]在梦里 全是你\\n[01:43.920]不要再迟疑 把我抱紧\" &#125;, klyric: &#123; version: 0, lyric: null &#125;, tlyric: &#123; version: 0, lyric: null &#125;, code: 200&#125; 剩下的也没有什么好说的啦！ 4、坑点与进阶表面上很简单，但是需要注意的是，网易返回的链接，数据是js动态加载，也就是爬虫得到的网页数据和浏览器得到的dom内容和结构不一样！ 坑其中，搜索列表爬虫回来的内容，完全得不到歌曲id！！！ 解决解决方法也是有的！ python模拟浏览器使用selenium+phantomjs无界面浏览器，这两者的结合其实就是直接操作浏览器，可以获取JavaScript渲染后的页面数据。 缺点： 由于是无界面浏览器，采用此方案效率极低，如果大批量抓取不推荐。对于异步请求并且数据在源码中并不存在的，同时也就无法抓取到的数据。 搜索的歌曲变成歌单比如想下载全部的某一歌手的全部音乐，用手机云音乐搜索，然后全部保存到新建一个歌单，这样就可以啦！ 进阶如果想使用了解更多网易云音乐js的加密解密过程，可以看看这个 Python 爬虫如何获取 JS 生成的 URL 和网页内容？ - 路人甲的回答 - 知乎 总结用python，就一定要简单，我认为复杂的东西，还是尽量少做，能取巧就取巧，所以本文没有使用selenium+phantomjs实践，如果想了解更多selenium+phantomjs内容，可以参考文末引用链接。 注：本文只是技术交流，请不要商业用途~ 如有违反，本人一概不负责。 全部代码又是非常简单的100行代码完事！！！ GitHub: WebCrawlerExample/163_NeteaseMusic.py at master · iHTCboy/WebCrawlerExample 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091import osimport reimport jsonimport requestsfrom lxml import etreedef download_songs(url=None): if url is None: url = 'https://music.163.com/#/playlist?id=2384642500' url = url.replace('/#', '').replace('https', 'http') # 对字符串进行去空格和转协议处理 # 网易云音乐外链url接口：http://music.163.com/song/media/outer/url?id=xxxx out_link = 'http://music.163.com/song/media/outer/url?id=' # 请求头 headers = &#123; 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36', 'Referer': 'https://music.163.com/', 'Host': 'music.163.com' &#125; # 请求页面的源码 res = requests.get(url=url, headers=headers).text tree = etree.HTML(res) # 音乐列表 song_list = tree.xpath('//ul[@class=\"f-hide\"]/li/a') # 如果是歌手页面 artist_name_tree = tree.xpath('//h2[@id=\"artist-name\"]/text()') artist_name = str(artist_name_tree[0]) if artist_name_tree else None # 如果是歌单页面： #song_list_tree = tree.xpath('//*[@id=\"m-playlist\"]/div[1]/div/div/div[2]/div[2]/div/div[1]/table/tbody') song_list_name_tree = tree.xpath('//h2[contains(@class,\"f-ff2\")]/text()') song_list_name = str(song_list_name_tree[0]) if song_list_name_tree else None # 设置音乐下载的文件夹为歌手名字或歌单名 folder = './' + artist_name if artist_name else './' + song_list_name if not os.path.exists(folder): os.mkdir(folder) for i, s in enumerate(song_list): href = str(s.xpath('./@href')[0]) song_id = href.split('=')[-1] src = out_link + song_id # 拼接获取音乐真实的src资源值 title = str(s.xpath('./text()')[0]) # 音乐的名字 filename = title + '.mp3' filepath = folder + '/' + filename print('开始下载第&#123;&#125;首音乐：&#123;&#125;\\n'.format(i + 1, filename)) try: # 下载音乐 #下载歌词 #download_lyric(title, song_id) data = requests.get(src).content # 音乐的二进制数据 with open(filepath, 'wb') as f: f.write(data) except Exception as e: print(e) print('&#123;&#125;首全部歌曲已经下载完毕！'.format(len(song_list)))def download_lyric(song_name, song_id): url = 'http://music.163.com/api/song/lyric?id=&#123;&#125;&amp;lv=-1&amp;kv=-1&amp;tv=-1'.format(song_id) # 请求头 headers = &#123; 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36', 'Referer': 'https://music.163.com/', 'Host': 'music.163.com' # 'Origin': 'https://music.163.com' &#125; # 请求页面的源码 res = requests.get(url=url, headers=headers).text json_obj = json.loads(res) lyric = json_obj['lrc']['lyric'] reg = re.compile(r'\\[.*\\]') lrc_text = re.sub(reg, '', lyric).strip() print(song_name, lrc_text)if __name__ == '__main__': #music_list = 'https://music.163.com/#/playlist?id=2384642500' #歌曲清单 music_list = 'https://music.163.com/#/artist?id=8325' #歌手排行榜 # music_list = 'https://music.163.com/#/search/m/?order=hot&amp;cat=全部&amp;limit=435&amp;offset=435&amp;s=梁静茹' #搜索列表 download_songs(music_list) 参考 python编写GUI版网易云音乐爬虫 Python爬虫实践入门篇 | iHTCboy’s blog Python 爬虫如何获取 JS 生成的 URL 和网页内容？ - 路人甲的回答 - 知乎 Python 爬虫获取网易云音乐歌手歌词 python爬虫的最佳实践(五)–selenium+PhantomJS的简单使用 Selenium with Python — Selenium Python Bindings 2 documentation ariya/phantomjs: Scriptable Headless Browser WebCrawlerExample/163_NeteaseMusic.py at master · iHTCboy/WebCrawlerExample 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Python","slug":"Python","permalink":"https://iHTCboy.com/tags/Python/"},{"name":"Python爬虫","slug":"Python爬虫","permalink":"https://iHTCboy.com/tags/Python爬虫/"},{"name":"爬虫","slug":"爬虫","permalink":"https://iHTCboy.com/tags/爬虫/"},{"name":"网易云音乐","slug":"网易云音乐","permalink":"https://iHTCboy.com/tags/网易云音乐/"}]},{"title":"django中ajax post数据时request.POST获取数组问题","date":"2018-09-05T10:49:16.000Z","path":"2018/09/05/2018-09-05_post参数为数组时django中request问题/","text":"1、前言最近在使用django开发web页面时，使用ajax的post参数中带有数组，然后在 request.POST 里获取的数组时，数组变成了一个元组！！！官方给出的通过 request.POST.getlist(&#39;key&#39;)来获取也是很鸡肉！那要怎么解决呢？ 2、问题问题是这样，在前端js的post请求参数带有数组或字典：12345678910111213var body = &#123; 'account': account, 'password': password, 'array': [1, 2, 3], 'dict': &#123;'k1': 'v1', 'k2': 'v2'&#125;&#125;;$.ajax(&#123; url: url, type: \"POST\", data: body, ... ...&#125;); 在django后python解析request.POST，获取数组就变成这样： 如果是这样写： 123if request.method == 'POST': array = request.POST['array'] dict = request.POST['dict'] 直接是报错： 12raise MultiValueDictKeyError(key)django.utils.datastructures.MultiValueDictKeyError: 'array' 所以我们要看看 request.POST 到底是什么类型，内容又是什么？？？ 12request.POST：&lt;QueryDict: &#123;'account': ['account'], 'password': ['password'], 'array[]': ['1', '2', '3'], 'dict[k1]': ['v1'], 'dict[k2]': ['v2']&#125;&gt; QueryDict ？？？字典！！！ 从前端传入的数组，变成了字典，问题有三个： array 变成 array[] 键 [1, 2, 3] 变成 [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;] dict 变成 dict[k1]、dict[k1] 其实，这个不是bug！！！ 这是一个 django 自定义的类似字典的类，用来处理同一个键带多个值的情况。 python 原始的字典中，当一个键出现多个值的时候会发生冲突，只保留最后一个值。而在 HTML 表单中，通常会发生一个键有多个值的情况。 例如： 1234 query_string 需要一个字符串 a=1&amp;a=2&amp;c=3，例如：&gt;&gt;&gt; QueryDict('a=1&amp;a=2&amp;c=3')&lt;QueryDict: &#123;'a': ['1', '2'], 'c': ['3']&#125;&gt; 那么怎么取值呢？ 按照getlist(key) 拿不到： 用 [key] 只取到容器的最后一个值： 用 getlist(key[]) 数组可以拿到字符串数组，但是字典就只能一个一个拿了！ 3、解决方法 方法一 在前端的body参数变成json字符串：123456var body = JSON.stringify(&#123; 'account': account, 'password': password, 'array': [1, 2, 3], 'dict': &#123;'k1': 'v1', 'k2': 'v2'&#125;&#125;) 但在后端得到的是这样： 1&lt;QueryDict: &#123;'&#123;\"account\":\"account\",\"password\":\"password\",\"array\":[1,2,3],\"dict\":&#123;\"k1\":\"v1\",\"k2\":\"v2\"&#125;&#125;': ['']&#125;&gt; 全部参数作为key的字典，显示不符合要求，并且导致处理复杂起来。 方法二子级变成json字符串： 123456var body = &#123; 'account': account, 'password': password, 'array': JSON.stringify([1, 2, 3]), 'dict': JSON.stringify(&#123;'k1': 'v1', 'k2': 'v2'&#125;)&#125;; 得到的结果： 1&lt;QueryDict: &#123;'account': ['account'], 'password': ['password'], 'array': ['[1,2,3]'], 'dict': ['&#123;\"k1\":\"v1\",\"k2\":\"v2\"&#125;']&#125;&gt; 数组和字典的全部值作为value，并且是string类型，显示不符合要求，并且导致处理复杂起来。 方法三其实，我们知道后端为了多个相同key存在，所以才这样处理，那么我们可以这样考虑，让数据和字典不在是数组和字典，后端在还原不就可以啦！ 123456var body = &#123; 'account': account, 'password': password, 'array': '1' + JSON.stringify([1, 2, 3]), 'dict': '1' + JSON.stringify(&#123;'k1': 'v1', 'k2': 'v2'&#125;)&#125;; 让 ‘array’、’dict’ 变成 ‘1’ + json字符串形式，然后后端按规则还原： 1&lt;QueryDict: &#123;'account': ['account'], 'password': ['password'], 'array': ['1[1,2,3]'], 'dict': ['1&#123;\"k1\":\"v1\",\"k2\":\"v2\"&#125;']&#125;&gt; 按规则还原：1234array = request.POST['array']dict = request.POST['dict']array_list = json.loads(array[1:])dict_list = json.loads(dict[1:]) 这样拿也许不是好办法，但是当你数组或字典数据非常多时，也就这样啦，当然，也可以json字符串后加密，这样后端也不能解析，如果需要，大家也可以这样做啊~ 总结在处理这些数据时，可能是为了方便而方便，有时候只有清楚知道原因，才能更好的处理，上面的方法确实不是好方法，有时候还是按规则来处理更好，一个人开发还好，如果是多人，那将来可能会留下坑啊。 参考 关于ajax post 数据时django中request.body与request.POST问题 - 简书 django-QueryDict 对象 - scolia - 博客园 Request and response objects | Django documentation | Django django中同通过getlist() 接收页面form的post数组 - ccorz - 博客园 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"django","slug":"django","permalink":"https://iHTCboy.com/tags/django/"},{"name":"post数组参数","slug":"post数组参数","permalink":"https://iHTCboy.com/tags/post数组参数/"},{"name":"request.POST","slug":"request-POST","permalink":"https://iHTCboy.com/tags/request-POST/"}]},{"title":"shell技巧1 - 生成ipa文件","date":"2018-08-31T13:19:16.000Z","path":"2018/08/31/2018-08-31_shell技巧1_生成ipa文件/","text":"1、前言iTunes 12.7 之前，可以下载ipa应用包、打开ipa包，也生成ipa文件！但是在这12.7之后，关于ipa的所有功能已经移除，如果还想下载ipa包，可以参考我之前的文章：解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题，今天我们主要来说说制作ipa文件的功能。 2、ipa文件结构其实ipa文件可以理解为一个zip的压缩文件，所以解压ipa文件后，得到ipa的目录 ipafilename/Payload/xxx.app，以微信示例： 所以，如果我们编译的项目，想生成ipa文件，以前是拖拽到iTunes就会自动生成ipa文件，现在不行了，根据这个原理，我们在Xcode中编译生成的.app目录，按照前面说的目录结构，进行压缩就行啦！ 3、bash脚本 生成.app目录内容： 执行shell脚本生成ipa文件： 生成成功后，自动打开ipa文件所在目录： 4、全部代码具体的代码，可参考我的Github代码： iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#!/bin/bash# 定义用到的变量projectAppPath=\"\"outputPath=\"\"ipaFileName=\"\"# 定义读取输入字符的函数getProjectAppPath() &#123; # 输出换行，方便查看 echo \"\\n================================================\" # 监听输入并且赋值给变量 read -p \" Enter .app path: \" projectAppPath # 如果为空值，从新监听 if test -z \"$projectAppPath\"; then getprojectAppPath fi&#125;getOutputPath() &#123; # 输出换行，方便查看 echo \"\\n================================================\" # 监听输入并且赋值给变量 read -p \" Enter output path: \" outputPath if test -z \"$outputPath\"; then # 如果没有输出路径，默认输出到桌面 outputPath=\"Desktop\" fi&#125;getipaFileName() &#123; # 输出换行，方便查看 echo \"\\n================================================\" # 监听输入并且赋值给变量 read -p \" Enter ipa FileName: \" ipaFileName if test -z \"$ipaFileName\"; then getipaFileName fi&#125;# 执行函数，给变量赋值getProjectAppPathgetOutputPathgetipaFileName# 切换到当前用户的home目录，方便创建桌面目录cd ~# 在输出路径下创建 Payload 文件夹mkdir -p \"$&#123;outputPath&#125;/Payload\"# 将.app 文件复制到 输出路径的 Payload 文件夹下cp -r \"$&#123;projectAppPath&#125;\" \"$&#123;outputPath&#125;/Payload/\"# 切换到输出路径cd \"$&#123;outputPath&#125;\"# 将 Payload 文件夹压缩成 ipa 包zip -r \"$&#123;ipaFileName&#125;.ipa\" Payload# 删除当前路径下 Payload 文件夹【-r 就是向下递归，不管有多少级目录，一并删除 -f 就是直接强行删除，不作任何提示的意思】rm -rf \"Payload\"# 成功提示echo \"\\n\\n=====================【转换ipa完成】=========================\\n\"echo $&#123;outputPath&#125;## 打开输出的路径#open -a Finder \"$&#123;outputPath&#125;\"# 从当前位置打开finderopen .# 结束退出exit 0 5、优化方法一每次想生成ipa文件，就要打开终端，执行 sh make_ipa_file.sh，相当麻烦，所以，如果生成别名，直接在终端输入别名就可以执行啦，是不是很棒！ 为.bash_profile添加了一个别名：1mkipa='sh /Users/HTC/Documents/iBash/make_ipa_file.sh' 以后直接在终端输入：mkipa就可以啦，这不是很棒！！！ 方法二如果是 Unix 可执行文件，直接点击，会自动打开终端执行。 把 make_ipa_file.sh 改为 make_ipa_file_sh 名字，然后在终端为文件添加可执行权限：chmod +x /Users/HTC/Desktop/make_ipa_file_sh 这样就生成了 Unix 文件，双击就会打开到终端： 方法三在 ~/.bashrc 里面添加本函数，或添加脚本路径，也可以方便执行。 方法四如果是macOS环境，还可以通过苹果的apple脚本服务，来做到一键化，以后有机会在谈谈。 方法五也通过 spotlight 或 第三方软件 Alfred 快速查找文件打开~ 6、总结通过这个简单又复杂的示例，其实使用脚本的最终目录，也是想提高效率！！所以，打包ipa包的效率，也是向着这样的方向努力！如果你对shell还不熟悉，可以看看下面这2个教程，当前我学习的时候，还没有人给指导，所以，你们是幸福的一代程序员！加油！ Shell 教程 | 菜鸟教程 执行 Shell 脚本 - EffectiveMac 参考 iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。 新版 iTunes 的变化 - Apple 支持 Linux bash总结(一) 基础部分(适合初学者学习和非初学者参考) - 博客园 ios打包ipa的四种实用方法(.app转.ipa) osx - Executing Shell Scripts from the OS X Dock? - Stack Overflow 解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题 Shell 教程 | 菜鸟教程 执行 Shell 脚本 - EffectiveMac 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"bash","slug":"bash","permalink":"https://iHTCboy.com/tags/bash/"},{"name":"ipa","slug":"ipa","permalink":"https://iHTCboy.com/tags/ipa/"},{"name":"itunes","slug":"itunes","permalink":"https://iHTCboy.com/tags/itunes/"},{"name":"shell","slug":"shell","permalink":"https://iHTCboy.com/tags/shell/"}]},{"title":"Python爬虫天猫店铺全部商品一记","date":"2018-08-25T07:49:16.000Z","path":"2018/08/25/2018-08-25_Python爬虫天猫店铺全部商品一记/","text":"1、前言最近小姐姐工作需要，需要爬取天猫某店的全部商品，正好小哥学习了Python几个月，就答应上手试试！结果第一道题就难住了，天猫登陆需要账号密码和验证码！！！虽然知道可以通过模拟和Session操作，但是，始终是新手开车，还没有学习那么高深，感觉会走很多弯路！！另外，也想想，有没有什么更简单的方法？？？ 不出意思，还真发现啦！天猫的手机版可以不用登陆，全部数据访问！！！就这样~ 开始吧！ 2、遇到的坑点本文主要是在 利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园 这个大哥的基础上，踩坑填坑，然后增加自己一些数据要求~ 坑一 1234567File \"/Users/HTC/Documents/Programing/Python/WebCrawlerExample/WebCrawler/Tmall_demo.py\", line 63, in get_products writer.writerows(products) File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py\", line 158, in writerows return self.writer.writerows(map(self._dict_to_list, rowdicts)) File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py\", line 151, in _dict_to_list + \", \".join([repr(x) for x in wrong_fields]))ValueError: dict contains fields not in fieldnames: 'titleUnderIconList' writer.writerows 没有找到这个’titleUnderIconList’字段，这个字段应该是天猫的接口后来返回的数据，在代码里只能删除掉： 1del product['titleUnderIconList']del product['titleUnderIconList'] 坑二 12345File \"/Users/HTC/Documents/Programing/Python/WebCrawlerExample/WebCrawler/Tmall_demo.py\", line 65, in get_products writer.writerows(products) File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py\", line 158, in writerows return self.writer.writerows(map(self._dict_to_list, rowdicts))UnicodeEncodeError: 'ascii' codec can't encode characters in position 26-27: ordinal not in range(128) 熟悉的人儿，看到python3与python2的区别，就知道，&#39;ascii&#39; codec can&#39;t encode 就是编码问题，问题就出来这里writer.writerows, python3处理、解析或转换和保存时，最好都指定一下使用 utf-8编码吧，特别是遇到中文的情况！ 最后指定编码用utf-8： 123with open(self.filename, 'a', encoding=\"utf-8\", newline='') as f: writer = csv.DictWriter(f, fieldnames=title) writer.writerows(products) 坑三 123456035009803B0图片下载错误 ： http//img.alicdn.com/bao/uploaded/i4/821705368/TB1Sht8cfQs8KJjSZFEXXc9RpXa_!!0-item_pic.jpg Invalid URL '035009803B0': No schema supplied. Perhaps you meant http://035009803B0?02100713003图片下载错误 ： http//img.alicdn.com/bao/uploaded/i1/821705368/TB1_OIkXQfb_uJkSmRyXXbWxVXa_!!0-item_pic.jpg Invalid URL '02100713003': No schema supplied. Perhaps you meant http://02100713003?02800614023图片下载错误 ： http//img.alicdn.com/bao/uploaded/i3/821705368/TB1kKK6cInI8KJjSsziXXb8QpXa_!!0-item_pic.jpg Invalid URL '02800614023': No schema supplied. Perhaps you meant http://02800614023? 下图图片失败的提示，原因是天猫接口返回的商品数据如下： 1234567891011&#123;item_id: 14292263734,title: \"XXXXXX\",img: \"//img.alicdn.com/bao/uploaded/i2/821705368/TB1Us3Qcr_I8KJjy1XaXXbsxpXa_!!0-item_pic.jpg\",sold: \"3\",quantity: 0,totalSoldQuantity: 2937,url: \"//detail.m.tmall.com/item.htm?id=xxxxx\",price: \"188.00\",titleUnderIconList: [ ]&#125;, 不带协议名字！！！不知道是什么时候的历史留下的坑点吧！！！大厂也是有坑的！！ 3、总结具体的代码，可参考我的Github代码： iHTCboy/WebCrawlerExample: 网页爬虫实践示例 代码详细的解析还是参考这位大神的 利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园，写的非常的详细！ 整体来说，因为天猫的商品数据通过js来获取，所以比较容易获取到数据，而不用大量的爬取页面的商品，这个很赞！所以，爬虫这技术活，有很多方法，能找到好的方法，才是爬虫的最高境界啊！加油~ 代码python就是利害，一百行代码就搞定！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107import osimport requestsimport jsonimport csvimport randomimport refrom datetime import datetimefrom urllib import requestimport timeclass TM_producs(object): def __init__(self, storename): self.storename = storename self.url = 'https://&#123;&#125;.m.tmall.com'.format(storename) self.headers = &#123; \"user-agent\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 \" \"(KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\" &#125; datenum = datetime.now().strftime('%Y%m%d_%H%M%S') self.filename = '&#123;&#125;_&#123;&#125;.csv'.format(self.storename, datenum) self.get_file() def get_file(self): '''创建一个含有标题的表格''' title = ['item_id', 'product_id', 'price', 'quantity', 'sold', 'title', 'totalSoldQuantity', 'url', 'img'] with open(self.filename, 'w', newline='') as f: writer = csv.DictWriter(f, fieldnames=title) writer.writeheader() return def get_totalpage(self): '''提取总页码数''' num = random.randint(83739921, 87739530) endurl = '/shop/shop_auction_search.do?sort=s&amp;p=1&amp;page_size=12&amp;from=h5&amp;ajson=1&amp;_tm_source=tmallsearch&amp;callback=jsonp_&#123;&#125;' url = self.url + endurl.format(num) html = requests.get(url, headers=self.headers).text infos = re.findall('\\((&#123;.*&#125;)\\)', html)[0] infos = json.loads(infos) totalpage = infos.get('total_page') return int(totalpage) def get_products(self, page): '''提取单页商品列表''' num = random.randint(83739921, 87739530) endurl = '/shop/shop_auction_search.do?sort=s&amp;p=&#123;&#125;&amp;page_size=12&amp;from=h5&amp;ajson=1&amp;_tm_source=tmallsearch&amp;callback=jsonp_&#123;&#125;' url = self.url + endurl.format(page, num) html = requests.get(url, headers=self.headers).text infos = re.findall('\\((&#123;.*&#125;)\\)', html)[0] infos = json.loads(infos) products = infos.get('items') for product in products: del product['titleUnderIconList'] item_id = product['item_id'] product_id = self.get_product_spm(item_id) product['product_id'] = product_id imgUrl = 'https:' + product['img'] self.save_img(imgUrl, product_id) item_id = product['item_id'] # print(products) title = ['item_id', 'product_id', 'price', 'quantity', 'sold', 'title', 'totalSoldQuantity', 'url', 'img'] with open(self.filename, 'a', encoding=\"utf-8\", newline='') as f: writer = csv.DictWriter(f, fieldnames=title) writer.writerows(products) def get_product_spm(self, item_id): url = 'https://detail.m.tmall.com/item.htm?id=&#123;&#125;'.format(item_id) html = requests.get(url, headers=self.headers).text # &#123;\"货号\":\"07300318000 \"&#125; product_id = re.findall(r'\"货号\":\"(.+?)\"&#125;', html)[0].strip() print(product_id) return product_id def save_img(self, img_url, file_name): try: # 获得图片后缀 file_suffix = os.path.splitext(img_url)[1] cwd = os.getcwd() save_path = os.path.join(cwd, 'images/') if not os.path.exists(save_path): os.makedirs(save_path) image_path = os.path.join(save_path, file_name + file_suffix) # 下载图片 image = requests.get(img_url, headers=self.headers) # 命名并保存图片 with open(image_path, 'wb') as f: f.write(image.content) except Exception as e: print('图片下载错误 ：', file_name, e) def main(self): '''循环爬取所有页面宝贝''' total_page = self.get_totalpage() for i in range(1, total_page + 1): self.get_products(i) print('总计&#123;&#125;页商品，已经提取第&#123;&#125;页'.format(total_page, i)) time.sleep(1 + random.random())if __name__ == '__main__': storename = 'mgssp' tm = TM_producs(storename) tm.main() 参考 iHTCboy/WebCrawlerExample: 网页爬虫实践示例 利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园 Hopetree/E-commerce-crawlers: 电商网站爬虫合集，淘宝京东亚马逊等 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Python","slug":"Python","permalink":"https://iHTCboy.com/tags/Python/"},{"name":"Python爬虫","slug":"Python爬虫","permalink":"https://iHTCboy.com/tags/Python爬虫/"},{"name":"天猫","slug":"天猫","permalink":"https://iHTCboy.com/tags/天猫/"},{"name":"爬虫","slug":"爬虫","permalink":"https://iHTCboy.com/tags/爬虫/"}]},{"title":"PyCharm for Mac快捷键小记","date":"2018-08-04T15:09:16.000Z","path":"2018/08/04/2018-08-04_PyCharm_for_Mac快捷键小记/","text":"1、前言总结一下自己平时常用的PyCharm for Mac快捷键，因为网上经常找到的都是Windows版本，所以当是备忘也好，后续会不定期更新。 2、PyCharm for Mac 快捷键 快捷键 说明 cmd + b 跳转到声明处（cmd加鼠标） cmd + d 在下一行复制本行的内容 cmd [] 光标之前/后的位置 cmd + opt + [] 函数和方法前后的位置 cmd + backspace 删除当前行 cmd + c 复制光标当前行,剪切同理 cmd + f 当前文件搜索（回车下一个 shift回车上一个） cmd + r 当前文件替换 cmd + shift + f 全局搜索 cmd + shift + r 全局替换 cmd + shift + a 搜索动作 cmd + o 搜索class cmd + opt + o 搜索符号（函数等) cmd + shift + o 搜索文件 shift + shift 任意搜索功能 cmd + l 指定行数跳转 shift + enter 在行中的时候直接到下一行(新建) cmd + 展开当前 cmd - 折叠当前 cmd shift + 展开所有 cmd shift - 折叠所有 cmd / 注释/取消注释一行 cmd + opt + / 批量注释(pycharm不生效) ctr + tab 史上最NB的导航窗口（工程文件列表、文件结构列表、命令行模式、代码检查、VCS等，下面两个是可以被替换的） alt + F12 打开命令行栏 cmd + F12 显示文件结构 cmd + j 代码智能补全 alt + F1 定位编辑文件所在位置: cmd + F6 更改变量 cmd + opt + t 指定代码被注释语句或者逻辑结构、函数包围 Tab / Shift + Tab 缩进、不缩进当前行 cmd + opt + l 代码块对齐 opt + F7 find usage 参考下面是PyCharm教程、Flask、Django框架学习的一些链接！大家有空可以看看~ PyCharm PyCharm 收藏多年快捷键分享~ - Henry Z’s blog~ https://changchen.me/blog/20170607/pycharm-shortcut/pycharm 使用教程 https://www.jianshu.com/p/2bfc19e1381cPyCharm IDE 链接sqlite、建表、添加、查询数据 - CSDN博客 https://blog.csdn.net/qq_36482772/article/details/53458400Pycharm快捷键整理（Mac） - 简书 https://www.jianshu.com/p/be0bdc02f7da你有哪些想要分享的 PyCharm 使用技巧？ - 知乎https://www.zhihu.com/question/37787004/answer/186042335PyCharm速览 http://www.liujiangblog.com/blog/28/迈出Pycharm第一步-刘江的博客 http://www.liujiangblog.com/blog/29/ Flask框架 快速入门 — Flask 0.10.1 文档 http://docs.jinkan.org/docs/flask/quickstart.html#quickstart Flask 入门指南 https://blog.igevin.info/posts/flask-startup-guideline/ 利用pycharm学习flask教程 https://www.jianshu.com/p/a7d988fb807f python flask搭建web应用 - CSDN博客 https://blog.csdn.net/u012734441/article/details/62036503《Flask Web开发——基于Python的Web应用开发实践》一字一句上机实践（上） - 舞动的心 - 博客园 http://www.cnblogs.com/liuzhen1995/p/8001040.htmlFlask Web开发学习笔记（一）~（6） https://www.jianshu.com/p/303057e51417Flask 的部署 https://windard.com/project/2016/12/01/Deploy-Flask-APP如果你也想写Flask| 编程派 | Coding Python http://codingpy.com/article/if-you-also-want-to-write-flask/Introduction | Flask之旅 https://spacewander.github.io/explore-flask-zh/index.html Django框架 介紹 | Django Book 2.0 中文版 https://wizardforcel.gitbooks.io/django-book-20-zh-cn/content/index.html从Python到Django入门教程 https://borisliu.gitbooks.io/from-python-to-django/content/introduction/preface.htmlDjango新手图文入门教程 http://www.liujiangblog.com/blog/3/ 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"PyCharm","slug":"PyCharm","permalink":"https://iHTCboy.com/tags/PyCharm/"},{"name":"shortcut","slug":"shortcut","permalink":"https://iHTCboy.com/tags/shortcut/"}]},{"title":"iTerm2快捷键小记","date":"2018-08-03T13:19:16.000Z","path":"2018/08/03/2018-08-03_iTerm快捷键小记/","text":"1、前言总结一下自己平时常用的iTerm快捷键，当是备忘也好，后续会不定期更新。 2、iTerm2 快捷键 快捷键 作用说明 command + f 搜索&amp;查找，如果输入搜索内容后，按下 tab 键，就会 iTerm 自动帮选中搜索关键词，并且自动的帮我们复制到了剪贴板中。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。按 esc 退出搜索。 command + r 或 ctrl + l 清空屏幕，而且只是换到新一屏，不会像 clear 一样创建一个空屏 command + k clear，清空屏幕 command + d 垂直分屏 command + shift + d 水平分屏 command + ; 查看历史命令 command + shift + h 查看剪贴板历史，会自动列出输入过的命令 command + number tab 标签窗口来回切换 command + option + ←/→ 或 command + [ / ] 切换屏幕 ctrl + x 第一次按时，移动光标至行首；再次按时，回到原有位置 ctrl + a 到行首（Ahead of line） ctrl + e 到行尾（End of line） ctrl + f/b 前进后退(相当于左右方向键) ctrl + u 清除当前行（无论光标在什么位置） ctrl + d 删除光标当前位置的字符 ctrl + h 删除光标之前的字符 ctrl + w 删除光标之前的单词 ctrl + k 删除光标当前位置到文本末尾的所有字符 ctrl + t 交换光标当前位置的字符与前一个字符的位置 ctrl + c 或 ctrl + j 或 ctrl + o 取消当前行输入的命令（中断操作）。重新起一行。 ctrl + y 粘贴之前（ctrl +u/k/w）删除的内容 ctrl + p 或 !! 上一条命令。调出命令历史中的前一条（Previous）命令，相当于通常的上箭头 ctrl + n 下一条命令。调出命令历史中的下一条（Next）命令，相当于通常的上箭头 ctrl + s 冻结终端操作（暂停脚本） ctrl + q 恢复冻结（继续执行脚本） ctrl + r 搜索命令历史。根据用户输入查找相关历史命令（reverse-i-search） ctrl + l 或 command + r 换到新一屏，创建一个空屏 ctrl + i 或 tab 横行制表符，在命令行中补齐指令 双击 选中单词 三击 选中整行 四击 智能选择 !word 重复运行最近一条以“word”开头的指令，如!ls 或 !l !$ 调用上一条指令的最后一个参数作为当前指令对象,如，假设上一条指令为： ls abc.txt bbc.txt 那么， vi !$ 相当于： vi bbc.txt !number 调用执行指定编号的历史记录指令,如!2, !11 参考 iTerm2 快捷键大全 - 陈斌彬的技术博客 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iTerm","slug":"iTerm","permalink":"https://iHTCboy.com/tags/iTerm/"},{"name":"shortcut","slug":"shortcut","permalink":"https://iHTCboy.com/tags/shortcut/"}]},{"title":"vi(vim)快捷键小记","date":"2018-07-28T07:49:16.000Z","path":"2018/07/28/2018-07-28_Vim快捷键小记/","text":"1、前言vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。总结一下自己平时常用的vim快捷键，当是忘记也好，后续会不定期更新。 2、vim 快捷键 快捷键 说明 vi[m] + file 打开[新建]文件 【命令模式】 可以移动光标、删除字符等 h,j,k,l 左，下，上，右 Blankspace 向右 Backspace 向左 Enter 移动到下一行首 - 移动到上一行首 b 上一个词的词首 w 下一个词的词首 e 下一个词的词尾 ^ 行首 $ 行尾 f/F + 字符 向前/向后移动到特定的字符（行内） gg 文件的第一行 G 文件的最后一行 nG 移动到第n行 n+ 向下跳n行 n- 向上跳n行 /字 正向查找搜素字符串 ?字 反向查找搜素字符串 n 向下搜索前一个搜素动作 N 向上搜索前一个搜索动作 x 删除字符 nx 删除从光标开始的n个字符 df + 字符 删除从当前字符到指定字符 dw/daw 删除单词 d$ 删除从当前光标到行尾 dd 删除当前行 ndd 向下删除当前行在内的n行 dd + p delete一行，然后放在当前光标下方 dd + P delete一行，然后放在当前光标上方 dw + p delete单词，然后放在当前光标后面 dw + P delete单词，然后放在当前光标前面 p/P 重复粘贴，粘贴剪切板里的内容在光标后/前 yw 复制单词 yf + 字符 复制从当前字符到指定字符 yy 复制整行 y$ 复制当前光标到行尾的内容 y^ 复制从光标到行首的内容 J 合并光标所在行及下一行为一行 . 重复上一个操作 n+action 表示执行某个操作n次 u 撤销上一步操作 U 撤销对当前行的所有操作 ctrl + r 重做 ctrl + b 向前翻一页 ctrl + f 向后翻一页 ctrl + u 向前翻半页 ctrl + d 向后翻半页 ctrl + e 下滚一行 :set nu 显示行号 :set nonu 取消显示行号 :s/old/new 用new替换行中首次出现的old :s/old/new/g 用new替换行中所有的old :n,m s/old/new/g 用new替换从n到m行里所有的old :%s/old/new/g 用new替换当前文件里所有的old :w 保存正在编辑的文件 :w new.txt //保存至new.tex文件 :q 退出不保存（文件未修改时） :q! 退出编辑器，且不保存 :wq 保存后退出正在编辑的文件 :help 显示相关命令的帮助 【选择模式】 v 不规则选择 V 按行选择 Ctrl + v 按列选择 【插入模式】 在此模式下可以输入字符，按ESC将回到命令模式。 i 在当前字符前面插入 I 在行首插入 a 在当前字符后面插入 A 在行尾插入 o 在当前行的下一行插入 O 在当前行的上一行插入 r 更改当前的字符 R 更改多个字符 cw/caw 更改单词 cf + 字符 更改从当前字符到指定字符 c$ 更改从当前字符到行尾 cc 更改整行 参考 Linux上vi(vim)编辑器使用教程 - VPS侦探 简明 Vim 练级攻略 | | 酷 壳 - CoolShell YBlog - Learn Vim Progressively Vim配置、插件和使用技巧 - 简书 Vim快捷键分类 - 豪情 - 博客园 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Vim","slug":"Vim","permalink":"https://iHTCboy.com/tags/Vim/"},{"name":"shortcut","slug":"shortcut","permalink":"https://iHTCboy.com/tags/shortcut/"}]},{"title":"Django 2.0 model on_delete错误小记","date":"2018-07-22T08:49:16.000Z","path":"2018/07/22/2018-07-22_Django错误小记/","text":"1、前言今天用 Django 2.0 时模型的外键报了一个错误： 1TypeError: __init__() missing 1 required positional argument: 'on_delete' 2、原因经过筛查，在创建多对一的关系的，需要在Foreign的第二参数中加入 on_delete=models.CASCADE 主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除。 on_delete参数的各个值（可选的值都内置在django.db.models中）的含义: CASCADE：级联删除，模拟SQL语言中的ON DELETE CASCADE约束，将定义有外键的模型对象同时删除！ PROTECT: 保护模式，阻止上面的删除操作，但是弹出ProtectedError异常 SET_NULL：置空模式，将外键字段设为null，只有当字段设置了null=True时，方可使用该值。 SET_DEFAULT: 置默认值，将外键字段设为默认值。只有当字段设置了default参数时，方可使用。 DO_NOTHING：什么也不做。 SET()：设置为一个传递给SET()的值或者一个回调函数的返回值，注意大小写。自定义一个值，该值当然只能是对应的实体。 示例： 1author = models.ForeignKey(AuthModel, null=True, blank=True, on_delete=models.SET_NULL) 关于SET()的使用： 1**&#23448;&#26041;&#26696;&#20363;**&#10;def get_sentinel_user():&#10; return get_user_model().objects.get_or_create(username=&#39;deleted&#39;)[0]&#10;&#10;class MyModel(models.Model):&#10; user = models.ForeignKey(&#10; settings.AUTH_USER_MODEL,&#10; on_delete=models.SET(get_sentinel_user),&#10; ) 参考 on_delete=models.CASCADE级联删除 - CSDN博客 django数据模型中关于on_delete的使用 - CSDN博客 django2.0 关联表的必填on_delete参数的含义 - CSDN博客 django 关系类型字段 - 刘江的django教程 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Django","slug":"Django","permalink":"https://iHTCboy.com/tags/Django/"},{"name":"on_delete","slug":"on-delete","permalink":"https://iHTCboy.com/tags/on-delete/"}]},{"title":"程序员的macOS系列：精选Mac App","date":"2018-07-15T14:29:16.000Z","path":"2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/","text":"1、前言最近打算写《程序员的macOS系列》文章，总结一下自己程序员几年的macOS系统使用，本文是《程序员的macOS系列》的第一篇精选Mac App，介绍一下程序员macOS的应用，所以这系列文章是指向于程序员，可能会偏向iOS开发，尽量写大全吧。网上也有很多总结了Mac App的文章，但本文是一个程序员系列的，注意定位就好。 程序员的macOS系列：精选Mac App 程序员的macOS系列：Mac开发环境配置 程序员的macOS系列：高效Alfred进阶 目前计划写《程序员的macOS系列》这三篇，后续有想法在增加吧~ 2、精选Mac AppMac电脑上有很多应用，这里不提供任何安装包，默认是链接到对应的App官网，另外，如果App有上架到AppStore，建议在AppStore购买下载，说不定下次换电脑时会非常方便！ IDE集成开发环境，程序员利器！ App 名称 简介 价格 官网 下载 Xcode Xcode是 Mac, iPhone, iPad, Apple TV, and Apple Watch 等应用的开发集成工具。 免费 Xcode - Apple Developer ‎Xcode on the Mac App Store Android Studio Android Studio是一个为Android平台开发程序的集成开发环境。 免费 Android Studio - Android Developers ‎Download Android Studio and SDK tools - Android Developers PyCharm PyCharm是一个用于计算机编程的集成开发环境，主要用于Python语言开发，由捷克公司JetBrains开发，提供代码分析、图形化调试器，集成测试器、集成版本控制系统，并支持使用Django进行网页开发。 PyCharm一个跨平台开发环境，拥有Windows, macOS 和Linux版本。 收费 JetBrains Download PyCharm WebStorm WebStorm 是jetbrains公司旗下一款JavaScript 开发工具。目前已经被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等 收费 JetBrains Download WebStorm AppCode jetbrains公司旗下的 Objective-C/Swift 集成开发环境，用于帮助开发 Mac、iPhone 和 iPad 的应用程序。 收费 JetBrains Download AppCode: Smart Swift &amp; Obj-C IDE IntelliJ IDEA java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。 收费 JetBrains Download IntelliJ IDEA PhpStorm PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。 收费 JetBrains Download PhpStorm CLion CLion是一款专为开发C及C++所设计的跨平台IDE。它是以IntelliJ为基础设计的，包含了许多智能功能来提高开发人员的生产力，提高开发人员的工作效率。 收费 JetBrains Download CLion GoLand GoLand是一款专为开发Go语言所设计的跨平台IDE。 收费 JetBrains Download GoLand CodeRunner CodeRunner 是 Mac 上一款功能强大但使用简单代码工具，官方介绍支持几乎所有语言（20种语言），同时支持语法高亮、代码提示和多种界面主题，在学习新的语言或编写简单测试代码时非常实用。 收费 CodeRunner – Programming Editor for Mac ‎CodeRunner 2 on the Mac App Store wechatwebdevtools（微信开发者工具） 为了帮助开发者简单和高效地开发和调试微信小程序，微信在原有的公众号网页调试工具的基础上，推出了全新的 微信开发者工具，集成了公众号网页调试和小程序调试两种开发模式。 免费 微信 · 小程序 开发者工具 下载 CocosCreator Cocos Creator是以内容创作为核心的游戏开发工具，在Cocos2d-x基础上实现了彻底脚本化、组件化和数据驱动等特点。 Cocos Creator基于开源框架Cocos2d-x，实现了一体化、可扩展、可自定义工作流的编辑器，并在Cocos系列产品中第一次引入了组件化编程思想和数据驱动的架构设计，这极大地简化了Cocos2d-x开发工作流中的场景编辑、UI设计、资源管理、游戏调试和预览、多平台发布等工作，是使用Cocos2d-x进行团队协作开发的最佳选择。 免费 Cocos引擎_游戏开发引擎 Cocos Creator 下载 Unity Unity 是一套跨平台的游戏引擎，可用于开发Windows、MacOS、Linux 平台的单机游戏，或是iOS、Android 移动设备的游戏。Unity 也可开发支持WebGL 技术的网页游戏，或 PlayStation、XBox、Wii 主机上的游戏。 收费 Unity Download - Unity Unreal Engine 4 虚幻引擎是一款由Epic Games开发的游戏引擎，多用于开发第一人称射击游戏。 收费 虚幻引擎 下载 Developer Tools程序开发中使用的工具应用。 App 名称 简介 价格 官网 下载 Visual Studio Code Visual Studio Code是一个由微软开发的，同时支持Windows、Linux和macOS操作系统且开放源代码的文本编辑器。它支持调试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全、代码片段、代码重构等。 免费 Visual Studio Code - Code Editing. Redefined Download Visual Studio Code - Mac, Linux, Windows Atom Atom是由GitHub开发的自由及开放源代码的文字与代码编辑器，支持macOS、Windows和Linux操作系统，支持Node.js所写的插件，并内置由Github提供的Git版本控制系统。多数的延伸包皆为开放源代码授权，并由社区建置与维护。 免费 Atom IDE Atom Sublime Text Sublime Text是一套跨平台的文本编辑器，支持基于Python的插件。Sublime Text是专有软件，可通过包扩展。大多数的包使用自由软件授权发布，并由社区建置维护。 免费/收费 Sublime Text - A sophisticated text editor for code, markup and prose Download - Sublime Text iTerm iTerm 是一款完全免费的，专为 masOS 用户打造的命令行应用。有很多能够提升效率的实用功能，比如说窗口分割、热键窗口、智能搜索、自动完成、快速复制等 免费 iTerm2 - macOS Terminal Replacement Downloads - iTerm2 Navicat Premium Navicat Premium 是一套数据库开发工具，让你从单一应用程序中同时连接 MySQL、MariaDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。它与 Amazon RDS、Amazon Aurora、Amazon Redshift、Microsoft Azure、Oracle Cloud、阿里云和腾讯云等云数据库兼容。你可以快速轻松地创建、管理和维护数据库。 收费 Navicat Premium - 以单一的 GUI 同时连接不同类型的数据库 下载 Navicat Premium 14 天免费 SourceTree SourceTree 是Windows 和Mac OS X 下免费的Git 和Hg 客户端，拥有可视化界面，容易上手操作。 免费 Sourcetree - Free Git GUI for Mac and Windows Sourcetree GitHub Desktop GitHub Desktop is an open source Electron-based GitHub app. It is written in TypeScript and uses React. 免费 GitHub Desktop - Simple collaboration from your desktop GitHub Desktop Dash Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 200+ APIs, 100+ cheat sheets and more. You can even generate your own docsets or request docsets to be included. 免费/收费 Dash for macOS Dash for macOS Charles Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information). 免费/收费 Charles Web Debugging Proxy • HTTP Monitor / HTTP Proxy / HTTPS &amp; SSL Proxy / Reverse Proxy Download Charles Easy APNs Provider 一个推送服务提供商（Apns Provider）方能发送推送来测试iOS程序。 免费 苹果推送服务测试小工具 Easy APNs Provider （Mac平台） ‎Easy APNs Provider on the Mac App Store Genymotion Create any Android device - Emulate all Android versions and screen size. 免费/收费 Genymotion Android Emulator Genymotion VirtualBox Oracle VirtualBox是由德国InnoTek软件公司出品的虚拟机软件，现在则由甲骨文公司进行开发，是甲骨文公司xVM虚拟化平台技术的一部分。它提供用户在32位或64位的Windows、Solaris及Linux 操作系统上虚拟其它x86的操作系统。 免费 VirtualBox – Oracle VM VirtualBox Downloads – Oracle VM VirtualBox Parallels Desktop Parallels Desktop是一款运行在Mac 电脑上的极为优秀的虚拟机软件。 用户可以在Mac OS X 下非常方便运行Windows、Linux 等操作系统及应用。 用户不必繁琐重复地重启电脑即可在Win 与Mac 之间切换甚至同时使用它们。 收费 Parallels Desktop 13 Parallels Desktop 13 Reveal Reveal是iOS开发工具中的神器之一，它能够在应用程序运行过程中调试应用程序界面。 免费/收费 Reveal - Runtime view debugging for iOS &amp; tvOS apps &amp; extensions Download - Reveal Kaleidoscope Kaleidoscope is the world’s most powerful file comparison app. Compare different text files, images, and folders on your Mac and iPad. Review and merge changes in a matter of seconds (merging available only on the Mac). 收费 Kaleidoscope ‎Kaleidoscope on the Mac App Store Prepo Prepo可以帮助设计师快速生成各种尺寸的图标，只需你将最大分辨率的图标拖拽进来，其他的尺寸交给Prepo做就好了。 免费 Prepo 2 - Mac and iOS - Preview, resize and export icon and @2x artwork for app development ‎Prepo on the Mac App Store PaintCode 随心所欲的将界面设计转换成代码。 收费 PaintCode - Turn your drawings into Objective-C or Swift drawing code PaintCode QuartzCode QuartzCode是一款专门用来创作iOS/macOS动画的软件，基本上把整个Core Animation框架的内容都搬到了软件里面，比如各种Layer、Mask、可以用来动画的属性，基本上跟代码是一致的，完全可以当成“可视化动画编程”工具，而且制作以后可以导出代码+资源文件，直接就可以在代码里面调用，方便自定义修改。 收费 QuartzCode - Turn your animations to objective-c or swift OS X / iOS animations code ‎QCode on the Mac App Store Core Animator Core Animator 是一款动画制作软件，可以自动生成 Objective-C 和 Swift 代码，让开发者快速在 App 中制作动画效果甚至是游戏。 收费 CoreAnimator ‎Core Animator on the Mac App Store VisualJSON Visual JSON is a simple and very easy to use JSON visulization tool for JSON API server/client developers. 免费 VisualJSON by youknowone ‎Visual JSON on the Mac App Store FauxPas Faux Pas inspects your iOS or Mac app’s Xcode project and warns about possible bugs, as well as about maintainability and style issues. 收费 Faux Pas for Xcode Faux Pas for Xcode iReSign iReSign allows iDevice app bundles (.ipa) files to be signed or resigned with a digital certificate from Apple for distribution. This tool is aimed at enterprises users, for enterprise deployment, when the person signing the app is different than the person(s) developing it. 免费 maciekish/iReSign maciekish/iReSign iOS App Signer This is an app for OS X that can (re)sign apps and bundle them into ipa files that are ready to be installed on an iOS device. 免费 DanTheMan827/ios-app-signer Releases · DanTheMan827/ios-app-signer Impactor Cydia Impactor is a GUI tool for working with mobile devices. It has features already, but is still very much a work-in-progress. 免费 Cydia Impactor Cydia Impactor MachOView MachOView is a visual Mach-O file browser. It provides a complete solution for exploring and in-place editing Intel and ARM binaries. 免费 MachOView - Code MachOView download - SourceForge.net Hopper Disassembler Hopper Disassembler是一款是32位和64位的二进制反汇编器，反编译和调试。你可以使用此工具拆开你想要的任何二进制。 收费 Hopper Hopper IDA Pro IDA Pro，为Interactive Disassembler公司的反组译与除错工具的产品。常用于逆向工程。 收费 IDA IDA: Ordering System增强或改变macOS系统功能，常驻状态栏或成为系统服务的一部分。 App 名称 简介 价格 官网 下载 Alfred Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac. 收费 Alfred - Productivity App for Mac OS X Alfred - Productivity App for Mac OS X Moom Moom 是一款专为Mac准备的窗口管理工具，它能够让您移动和缩放窗口。 收费 Moom · Many Tricks ‎Moom on the Mac App Store Keka Keka is a full featured file archiver, as easy as it can be. 收费 Keka - the macOS file archiver ‎Keka on the Mac App Store The Unarchiver The Unarchiver是一款免费实用的解压缩应用程序，用户可以使用它解压多达30种不同的压缩格式文件。 免费 The Unarchiver - Top Free Unarchiving Software for macOS ‎‎The Unarchiver on the Mac App Store Jietu截图 截图（Jietu）是一款免费应用，精美界面设计，操作简单，功能强大。截图功能包括区域截图／窗口截图／全屏截图／倒计时截图／录制屏幕，保存可自定义选择图片和视频质量。 免费 轻松便捷爱截图 ‎截图(Jietu)-快速标注、便捷分享的截屏工具 on the Mac App Store iText iText是一个OCR图像转成文字的工具，在macOS上非常方便和准确的识别。 免费/订阅 iText - OCR Tool - Toolinbox ‎iText - OCR &amp; Translator on the Mac App Store ShadowsocksX A secure socks5 proxy, designed to protect your Internet traffic. 免费 yangfeicheung/Shadowsocks-X: Latest ShadowsocksX for Mac OS X 10.9+ Shadowsocks X - A secure socks5 proxy TinyCal 小历是 macOS &amp; iOS 平台上面小而美的日历，macOS 上面通过菜单栏和通知中心让用户查看日历十分便捷。 收费 小历 - 小而美的日历 (OS X) - iOS Zen ‎小历 - 小而美的日历 on the Mac App Store TripMode TripMode，每当你的笔记本接入手机热点后，都会自动开启流量管控状态。 收费 TripMode - Your mobile data savior. TripMode - Your mobile data savior. Utility通用工具，便捷和高效的专精应用。 App 名称 简介 价格 官网 下载 Mate Translate 非常棒的应用，翻译很精确！ 收费 Mate Translate – your ultimate translation app ‎Mate Translate – translator on the Mac App Store CleanMyMac 如果电脑空间小，清空电脑还有很有作用。比对苹果x删除，用CleanMyMac卸载更干净。 收费 CleanMyMac 3: The Best Mac Cleanup App for OS X. Get a Cleaner Mac in Minutes. Download CleanMyMac 3 Google Chrome 一款快速、简单且安全的浏览器，适合在所有设备上使用。 免费 Chrome 网络浏览器 Chrome 网络浏览器 iSmartPhoto iSmartPhoto是一个快速的图像浏览器和强大的图像管理器。不像 iPhoto，iSmartPhoto for mac不需要你手动导入照片–它自动拉取你的照片从任何文件夹或驱动器。通过只是双单击查找器的单个图像或拖动文件夹，iSmartPhoto会自动显示每个图像从所选的文件夹及其子文件夹。 收费 ismartphoto ‎iSmartPhoto on the Mac App Store Kantu（看图） Kantu (看图)是腾讯在 macOS 平台出品的优质看图工具，轻轻松松从万张照片中找到你想要的。 免费 看图 - 轻松找照片 ‎看图-轻松找照片 on the Mac App Store GIF Brewery GIF Brewery 制作GIF 动图。 免费 GIF Brewery by Gfycat ‎GIF Brewery 3 by Gfycat on the Mac App Store YoudaoDict（网易有道词典） 一款英语、日语、韩语、法语免费全能查词翻译软件。 免费 ‎YoudaoDict on the Mac App Store Downie 易用的在线视频下载工具。 收费 Downie - YouTube Video Downloader for macOS - Charlie Monroe Software Downie - YouTube Video Downloader for macOS - Charlie Monroe Software Waltr 2 非常方便的同步iOS设备，拖拽就可以输送音乐、视频、电子书。 收费 WALTR 2. The all-new product. WALTR 2. The all-new product. iExplorer iExplorer 是一个非常优秀的一个免 iTunes 同步文件的资源管理器。 收费 iPhone Music, Messages &amp; File Transfer for Mac &amp; PC · iExplorer iExplorer iMazing 让备受信赖的软件为您传输和保存音乐、消息、文件和数据。安全备份任何 iPhone、iPad 或 iPod touch。iMazing 功能强大、易于使用，称得上是 Mac 和 PC 上最好的 iOS 设备管理器。 收费 iMazing - 兼容 Mac 及 PC 的 iPhone、iPad 和 iPod 管理软件。传输、拷贝、备份音乐、信息、文件等数据。 下载 iMazing 2 HandShaker HandShaker Mac 版（原名 SmartFinder)，使你在 Mac 电脑上也可以方便自如地管理你在 Android 手机中的内容。 免费 Smartisian 应用下载-锤子科技官网 ‎HandShaker - 安卓手机管理工具 - on the Mac App Store QuickTime Player QuickTime Player作为macOS默认的播放器，完美的iOS屏幕投影，完美的屏幕录像。 免费 Apple - QuickTime - Downloads Apple - QuickTime - Downloads Write图文创作，包括文字、图像、脑图等。 App 名称 简介 价格 官网 下载 Microsoft WordExcelPowerPoint 微软Office三件套，良心！ 收费 Office 365 for Mac, Office 2016 for Mac Download and install KeynoteNumbersPages Keynote是一个演示幻灯片应用软件，由苹果电脑公司出品，运行于OS X 操作系统。最早发布于2003年1月。Keynote现在与Pages、Numbers组成工具软件套装iWork。 免费 Keynote 讲演 - Apple (中国) Keynote on the ‎Mac App Store MindNode 4 很漂亮和简洁的思维导图制作软件。 收费 MindNode ‎MindNode 4 on the App Store StarUML StarUML是一种生成类图和其他类型的统一建模语言(UML)图表的工具。 收费 StarUML Download - StarUML MWeb 3 MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。 收费 MWeb - 专业的Markdown写作、记笔记、静态博客生成软件 - MWeb MWeb on the ‎Mac App Store MacDown 开源免费的Mardown编辑器。 免费 MacDown: The open source Markdown editor for macOS Releases · MacDownApp/macdown Evernote（印象笔记） 随时随地获取、整理、分享笔记。 免费/订阅 智能工作，有序生活，记录一切。- Evernote ‎Evernote – stay organized on the Mac App Store YoudaoNote（有道云笔记） 有道云笔记是网易有道按照国人使用习惯进行开发的多平台记录工具，受到超过5000万用户的喜爱。 免费 有道云笔记 ‎有道云笔记 on the Mac App Store Design设计，影、音、视、图。 App 名称 简介 价格 官网 下载 Adobe Photoshop CC Adobe Photoshop，简称“Ps”，是一个由Adobe开发和发行的图像处理软件。 收费 Adobe: Creative, marketing and document management solutions Adobe Photoshop CC - Best photo, image, and design editing software Adobe Illustrator CC Adobe Illustrator，简称“AI”，是Adobe系统公司推出的基于向量的图形制作软体。最初是1986年为苹果公司麦金塔电脑设计开发的，1987年1月发布，在此之前它只是Adobe内部的字体开发和PostScript编辑软件。 收费 Adobe: Creative, marketing and document management solutions Adobe Illustrator CC - Vector graphic design software Sketch Sketch 是一款矢量绘图工具。 收费 Sketch - The digital design toolkit Sketch - Download Sketch Axure RP Axure RP是一款专业的快速原型设计工具。Axure（发音：Ack-sure），代表美国Axure公司；RP则是Rapid Prototyping（快速原型）的缩写。 收费 Prototypes, Specifications, and Diagrams in One Tool - Axure Software Download Axure RP 8 - Axure Software ColorSnapper2 这个取色软件很棒，取色能转成代码最突出，CSS/Swift/OC/Java/Android/.Net/OpenG/..等代码。 收费 ColorSnapper — The Color Picker App for macOS ‎ColorSnapper 2 on the Mac App Store Color Picker 比较简洁的取色工具，以前是免费的，现在不太建议买。 收费 nscoding - Patrick Chamelo - Vasileia Chatziioannou ‎Color Picker on the Mac App Store xScope 4 xScope 是一款Mac上的设计开发辅助工具，尤其是移动应用的设计，帮助每个设计者快速，精确的完成工作，度量距离，角度的标尺，放大镜，精确垂直，水平标记辅助线，精确阔度，找画面上符合位置测交叉点。 收费 xScope • Measure. Inspect. Test. ‎xScope 4 on the Mac App Store Logoist 3 Logoist 是 Mac OS X 平台上一款非常不错的 Mac 平面设计软件，能设计 logo、标题艺术、图像、横幅、网站元素、贺卡、按钮、iBooks 作者标题、图片拼贴、桌面背景等等，只要任何叫的出名字的图形，Logoist 都可以帮你办到。 收费 Logoist 3 - Powerful Vector Design App for Mac ‎Logoist 3 on the Mac App Store Pixelmator Mac OS X 专有的图像处理软件。Pixelmator 界面清爽，布局灵活，熟悉 Photoshop 的人可迅速上手。软件建立在一些开源和 Mac OS X 图形技术之上，可调用 Mac 图形加速。使用起来在界面交互和流畅感上均优于 Photoshop，且与 Mac 自带程序整合不错。 收费 Pixelmator ‎Pixelmator on the Mac App Store Final Cut Pro 后期制作，前景更广阔。 收费 Final Cut Pro X - Apple (中国) ‎Final Cut Pro on the Mac App Store Motion 特效，特别容易。Motion 是一款强大的运动图形工具，可帮你便捷地制作影院级 2D、3D 和 360° 字幕，流畅的转场，以及逼真的实时特效。 收费 Motion 5 - Apple (中国) ‎Motion on the Mac App Store Compressor 强大的编码，传输，完成。Compressor 与 Final Cut Pro 紧密整合，带来了自定义输出设置、分布式编码和丰富的传输功能。它支持 360° 全景视频、HDR、HEVC 和 MXF 输出，让你能以强大、灵活的方式导出 Final Cut Pro 项目。 收费 Final Cut Pro X - Compressor 4 - Apple (中国) ‎Compressor on the Mac App Store Logic Pro X Logic Pro X 制作的动力十足， 创作的十足强音。 收费 Logic Pro X - Apple (中国) ‎Logic Pro X on the Mac App Store MainStage MainStage 3 舞台音效，媲美录音室效果。现在，将你的 Mac 变身现场演出装备。凭借不计其数的各种插件和音效选择，你可以让键盘、吉他或演唱表现令观众耳目一新，难以忘怀。 收费 Logic Pro X - MainStage 3 - 将你的 Mac 变身现场演出装备 - Apple (中国) ‎MainStage 3 on the Mac App Store 通讯交互，万物相联。 App 名称 简介 价格 官网 下载 Telegram Telegram是一个跨平台的即时通信软件，它的客户端是自由及开放源代码软件，但是它的服务器是专有软件。用户可以相互交换加密与自析构的消息，以及照片、视频、文件，支持所有的文件类型。 免费 Telegram Messenger ‎Telegram on the Mac App Store WeChat（微信） 一款免费发短讯和打电话的一体化应用程式。 免费 WeChat - Free messaging and calling app ‎WeChat on the Mac App Store QQ QQ 免费 QQ Mac版-匠心之韵·清新聊人 ‎QQ on the Mac App Store TeamViewer TeamViewer 基于最广泛的平台和技术，连接全世界的人、地区和事物。 免费/订阅 TeamViewer – 远程支持、远程访问、在线协作和会议 macOS版TeamViewer下载 Apple Remote Desktop Apple Remote Desktop 是管理你网络上的 Mac 电脑的最佳方式。分发软件，为终端用户提供实时在线帮助，创建详细的软硬件报告，自动执行常规的管理任务。 收费 Remote Desktop - Apple ‎Apple Remote Desktop on the Mac App Store Maipo 全功能新浪微博 macOS 客户端 免费 Maipo - 全功能新浪微博 macOS 客户端 ‎Maipo for Weibo on the Mac App Store GTD时间，就是生命。 App 名称 简介 价格 官网 下载 Things3 一款优秀的GTD任务管理工具。 收费 The all-new Things. Your to-do list for Mac &amp; iOS ‎Things 3 on the Mac App Store Gestimer 简单方便的提醒创建小工具。 收费 Gestimer - For those little reminders during the day ‎Gestimer on the Mac App Store Pomodoro Timer 漂亮的番茄时钟。 免费 Cannonball HQ Pomodoro Timer for Mac, It helps you implement the Pomodoro technique in your daily activities. Tomato One 简洁的番茄时钟。 免费 Rinik Support ‎Tomato One - Free Focus Timer on the Mac App Store JustFocus 番茄时间，休息时间时显示漂亮的锁屏图片。 免费 枫言枫语 ‎Just Focus on the Mac App Store Noizio Noizio 是一款Mac OS X 下的白噪音应用，可以让自己觉着是坐在一个壁炉前、咖啡馆里、森林里，海边。可以让你忽略其他噪音，专注工作。 收费 Noizio – ambient sound equalizer for relax or productivity. ‎Noizio on the Mac App Store Learning学习，知识无涯。 App 名称 简介 价格 官网 下载 WWDC 开源免费的看WWDC视频的应用！ 免费 The unofficial WWDC app for macOS Releases · insidegui/WWDC Reeder 一款很好的RSS订阅应用。 收费 ★reeder ‎Reeder 3 on the Mac App Store English Class This is a multifunctional instrument for improving and controlling English knowledge and skills. 收费 Academ Media ‎English Class Pro on the Mac App Store iBooks macOS和iOS同步看书的原生体验很棒！ 免费 iBooks - 官方 Apple 支持 iBooks - 官方 Apple 支持 Recreation（娱乐）娱乐，消遣和放松。 App 名称 简介 价格 官网 下载 NeteaseMusic（网易云音乐） 免费的音乐云盘赞！ 免费 网易云音乐 网易云音乐 on the ‎Mac App Store Movist Movist是Mac平台下一个全格式播放器,基于QuickTime &amp; FFmpeg,您可以选择由QuickTime 还是 FFmpeg来解码播放,支持.avi、.mkv、.wmv、flv、rmvb等格式。 收费 cocoable.com ‎Movist on the Mac App Store MPlayerX MPlayerX是MAC上的一款使用简单方便的视频播放器，基于FFmpeg 和 Mplayer 开发。界面简洁明了，支持多种格式，包括RMVB、AVI、WMV、MKV等常用视频格式，也支持SRT、ASS等字幕格式。 收费 MPlayerX ‎MPlayerX on the Mac App Store VLC VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。 免费 VLC media player, the best Open Source player - VideoLAN Official download of VLC IINA macOS 上好的现代视频播放器。 免费 lhc70000/iina: The modern video player for macOS. Releases · lhc70000/iina 总结没想到想总结好全部App，最后发现太多软件了，已经上百个应用啦，想写的详细点发现没有时间，所以将就先这样吧，有时候在回来。 精选为什么说这些软件是精选，因为在macOS上，好的应用很多，所以精选也很多。列举的每个应用，其实都可以单独写一篇长文，还是计划以后有时间在写写。大家也可以自行搜索教程学习，建议喜欢的应用就要早点熟悉！你一定会发现“惊-喜”！如果你有好的应用，不要独享，也欢迎留言推荐，谢谢！ 收费为什么这软件收费？其实，我想说，换一个角度，【这软件收费有什么突出的优点？】收费并专业的软件，都有它强大或突出的优势！正因为喜欢软件的这优点，自己也入手了 Final Cut Pro，希望自己有时间可以做一些优美的视频~ 我想表达的不是土豪，或炫富，只是希望大家有能力，或者表达到软件的喜欢。算了，不说这些。好的软件，真的做的很好，非常敬佩！ 下载本文优先显示Mac App Store下载的链接，因为在AppStore不限制下载次数，也就是不限制安装的设备数量，并且，在新电脑直接安装就可以，非常的方便！！！ 参考 维基百科 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Mac","slug":"Mac","permalink":"https://iHTCboy.com/tags/Mac/"},{"name":"MacApp","slug":"MacApp","permalink":"https://iHTCboy.com/tags/MacApp/"},{"name":"macOS","slug":"macOS","permalink":"https://iHTCboy.com/tags/macOS/"},{"name":"程序员的macOS","slug":"程序员的macOS","permalink":"https://iHTCboy.com/tags/程序员的macOS/"}]},{"title":"(译)一个完整的Django入门指南---第7部分","date":"2018-07-14T10:49:16.000Z","path":"2018/07/14/2018-07-14_一个完整的Django入门指南---第7部分/","text":"1、前言本篇文章是翻译 A Complete Beginner’s Guide to Django 系列的最后一篇文章 A Complete Beginner’s Guide to Django - Part 7，因为搜索找了很久都没有找到对应的中文翻译篇（如果有，就是我没有找到…），又因为这个系列真的非常的好，简单，容易，非常适配入门，所以就打算自已试试翻译，也当是自己学习入门的一步吧！ 简介（Introduction） 欢迎来到我们教程系列的最后一部分！这篇文章，我们将把Django应用程序部署到生产服务器。我们还将为我们的服务器配置Email服务和HTTPS证书。 首先，我想到了给一个使用虚拟专用服务器（VPS）的例子，它更通用，然后使用一个平台比如 Heroku 服务。但它我写得太详细了，所以本教程我最终偏向关于VPS的内容。 我们的项目已经上线啦！您可以在阅读本文之前点击在线查看，这是我们本文要部署的应用程序：www.djangoboards.com。 版本控制（Version Control）版本控制是软件开发中非常重要的话题。特别是在团队开发中同时开发多个功能，并一起维护项目代码时。无论是一个开发人员项目还是多个开发人员项目，每个项目都应该使用版本控制。 版本控制系统有几种选择。也许是因为GitHub的流行，Git 成为版本控制的实际标准。所以如果你不熟悉版本控制，Git是一个很好的入门起点。一般有很多相关的教程，课程和资源，因此遇到问题很容易找到帮助。 GitHub和Code School有一个关于Git的很棒的互动教程，这是一个非常好的介绍Git的网站。几年前我就开始从SVN转到Git。 这是一个非常重要的话题，我其实应该从第一个教程开始讲Git。但事实是我希望本教程系列的重点放在Django上。如果Git这东西对您来说都是新的，请不要担心。一步一步入门是很重要的。也许你的第一个项目并不完美。重要的是要坚持学习和慢慢提高你的技能，但要有恒心！ 关于Git的一个非常好的事情是它不仅仅是一个版本控制系统。围绕它建立了丰富的工具和服务生态系统。一些很好的例子比如持续集成、部署、代码审查、代码质量和项目管理。 使用Git来支持Django项目的部署过程非常有用。这是从源代码存储库中拉取最新版本或在出现问题时回滚到特定版本的便捷方式。有许多服务使用Git来集成，以便执行自动化测试和部署。 如果您没有在本地计算机上安装Git，请从 https://git-scm.com/downloads 下载和安装。 Git 基本配置（Basic Setup）首先，设置你电脑的Git身份： 1git config --global user.name &#34;Vitor Freitas&#34;&#10;git config --global user.email vitor@simpleisbetterthancomplex.com 译者注： git config –global user.name “xxx”: 设置git操作者名称 git config –global user.email “email” 设置git操作者邮箱这2个配置的名字和邮箱，会记录在git操作记录中。 在项目根目录（与manage.py相同的目录）中，初始化一个git存储库： 1git init 1Initialized empty Git repository in /Users/vitorfs/Development/myproject/.git/ 检查存储库的状态： 1git status 1On branch master&#10;&#10;Initial commit&#10;&#10;Untracked files:&#10; (use &#34;git add &#60;file&#62;...&#34; to include in what will be committed)&#10;&#10; accounts/&#10; boards/&#10; manage.py&#10; myproject/&#10; requirements.txt&#10; static/&#10; templates/&#10;&#10;nothing added to commit but untracked files present (use &#34;git add&#34; to track) 在继续添加源文件之前，请在项目根目录中创建名为.gitignore的新文件。这个特殊的文件将帮助我们保持Git仓库的干净，保证缓存文件或日志这样的不必要的文件不会添加到Git仓库中。 您可以从 GitHub 获取 Python项目的通用.gitignore文件。 确保将它从 Python.gitignore 重命名为 .gitignore（点很重要！）。 您可以补充 .gitignore 文件内容，告诉它(Git)忽略SQLite数据库文件，例如： .gitignore 文件内容： 1__pycache__/&#10;*.py[cod]&#10;.env&#10;venv/&#10;&#10;SQLite database files&#10;*.sqlite3 现在将文件添加到存储库： 1git add . 请注意上面add后面有一个点。上面的命令告诉Git 在当前目录中添加所有未跟踪的文件。（译者注，点表示所有，整句就表示添加所以文件到Git，除了.gitignore文件列出的要忽略。） 现在进行第一次提交： 1git commit -m &#34;Initial commit&#34; 一定要写一个注释说明这个提交是什么，简要描述你改变了什么。 Git 远程仓库（Remote Repository）现在让我们将 GitHub 设置为远程仓库。首先，在GitHub上创建一个免费帐户，然后在电子邮件中点击GitHub发来的验证链接确认您的电子邮件地址。然后您就能在GitHub上创建公开仓库（译者注：GitHub公开仓库是免费的，私有仓库收费。）。 现在，只需为仓库创建一个名称，不要勾选使用自述文件初始化它（initialize this repository with a README），也不要添加 Add .gitignore 或添加 Add a license 许可证。确保仓库开始为空： 创建仓库后，您应该看到如下内容： 现在让我们将其配置为我们的远程仓库： 1git remote add origin git@github.com:sibtc/django-boards.git 现在将代码推送到远程服务器，即GitHub仓库： 1git push origin master&#10;&#10;Counting objects: 84, done.&#10;Delta compression using up to 4 threads.&#10;Compressing objects: 100% (81/81), done.&#10;Writing objects: 100% (84/84), 319.70 KiB | 0 bytes/s, done.&#10;Total 84 (delta 10), reused 0 (delta 0)&#10;remote: Resolving deltas: 100% (10/10), done.&#10;To git@github.com:sibtc/django-boards.git&#10; * [new branch] master -&#62; master 我创建此仓库只是为了演示使用现有代码库创建远程仓库的过程。该项目的源代码正式托管在此仓库中：https://github.com/sibtc/django-beginners-guide。 项目配置（Project Settings）无论代码是存储在公共或私有远程仓库中，都不应提交敏感信息并将其推送到远程仓库。这包括密钥，密码，API密钥等。 此时，我们必须在 settings.py 模块中处理两种特定类型的配置： 密钥和密码等敏感信息; 针对特定的环境配置。 密码和密钥可以存储在环境变量中或使用本地文件（未提交到远程仓库）： 1234567# environment variablesimport osSECRET_KEY = os.environ['SECRET_KEY']# or local fileswith open('/etc/secret_key.txt') as f: SECRET_KEY = f.read().strip() 为此， 我在我开发的每个Django项目中都使用了一个名为 Python Decouple 的优秀实用功能库。它将搜索名为 .env 的本地文件以设置这配置变量，并将内容配置到环境变量。它还提供了一个定义默认值的接口，在适当时将数据转换为int，bool和list。 这不是强制性的，但我真的觉得它是一个非常有用的工具。它像Heroku这样的服务一样有魅力。 首先，让我们安装它： 1pip install python-decouple myproject/settings.py 123from decouple import configSECRET_KEY = config('SECRET_KEY') 现在，我们可以将敏感信息放在一个名为.env的特殊文件中（注意前面的点），该文件位于manage.py文件所在的目录中： 123456789101112myproject/ |-- myproject/ | |-- accounts/ | |-- boards/ | |-- myproject/ | |-- static/ | |-- templates/ | |-- .env &lt;-- here! | |-- .gitignore | |-- db.sqlite3 | +-- manage.py +-- venv/ .env 文件内容： 1SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=d 该.ENV文件中忽略的.gitignore文件，所以每次我们要部署应用程序或在不同的机器上运行时，我们将创建一个.ENV文件，并添加必要的配置。 现在让我们安装另一个库来帮助我们用简单一行代码来编写数据库连接。这样，在不同的环境中编写不同的数据库连接字符串会更容易： 1pip install dj-database-url 目前，我们需要解耦的全部配置： myproject/settings.py 1234567891011from decouple import config, Csvimport dj_database_urlSECRET_KEY = config('SECRET_KEY')DEBUG = config('DEBUG', default=False, cast=bool)ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())DATABASES = &#123; 'default': dj_database_url.config( default=config('DATABASE_URL') )&#125; 本地计算机的.env文件示例： 123SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=dDEBUG=TrueALLOWED_HOSTS=.localhost,127.0.0.1 请注意，在DEBUG配置中我们给了一个默认值(True)，因此在生产环境中我们可以忽略（注释）此配置，因此它将被自动设置为False，因为它生产环境应该是False的。 现在ALLOWED_HOSTS将被转换成一个列表[‘.localhost’, ‘127.0.0.1’. ]。现在，这是在我们的本地机器上，为了生产，我们将其设置为类似于[‘.djangoboards.com’, ]您拥有的任何域名。 这特定配置可确保您的应用程序仅提供给这个域名。 记录依赖库版本（Tracking Requirements）跟踪项目的依赖关系是一个很好的做法，因此另一台机器上更容易安装它(依赖的环境)。 我们可以通过运行下面的命令来检查当前安装的Python依赖库： 12345678pip freezedj-database-url==0.4.2Django==1.11.6django-widget-tweaks==1.4.1Markdown==2.6.9python-decouple==3.1pytz==2017.2 在项目根目录中创建名为requirements.txt的文件，并在其中添加依赖项(就是上面 pip freeze得到的项目所有的依赖库)： requirements.txt 文件内容： 12345dj-database-url==0.4.2Django==1.11.6django-widget-tweaks==1.4.1Markdown==2.6.9python-decouple==3.1 我保留了pytz == 2017.2，因为它是由Django自动安装的。 您可以更新源代码仓库： 1git add .&#10;git commit -m &#34;Add requirements.txt file&#34;&#10;git push origin master 域名（Domain Name）如果我们要正确部署Django应用程序，我们将需要一个域名（译者注：如果部署外网，给别人使用需要域名，但如果是内网使用，只有IP地址也可以访问。此处，作者意思要处理上线外网。）。拥有域名来为应用程序提供服务，配置电子邮件服务和配置https证书非常重要。 最近，我一直在使用 Namecheap 。您可以以8.88美元/年的价格获得.com域名，或者如果您只是尝试一下，您可以用 0.99美元/年 的价格注册.xyz域名。（译者注：在中国，可以注册阿里云、腾讯云等著名的注册商都有域名卖买，大家可自行搜索官网。） 无论如何，您可以自由使用任何注册商。为了演示部署过程，我注册了 www.DjangoBoards.com 域名。 部署策略（Deployment Strategy）以下是我们将在本教程中使用的部署策略的概述： 云服务是使用 Digital Ocean 提供的虚拟专用服务器。您可以使用我的会员链接注册Digital Ocean以获得 免费的10美元信用额度（仅适用于新帐户）。（译者注：云服务商在中国可选择阿里云、腾讯云） 首先我们将使用 NGINX（译者注：Nginx是一个异步框架的 Web服务器，通常作为负载均衡器。），其商标是食人魔。NGINX将收到访问者对服务器的所有请求。但如果请求数据，它不会尝试做任何不聪明的事情（译者注：Nginx主要负责处理请求，并分发给文件系统或HTTP服务器等。）。它所要做的就是确定所请求的信息是否是一个可以自行提供的静态资源，或者它是否更复杂。如果是，它会将请求传递给 Gunicorn（译者注：Gunicorn“绿色独角兽”是一个被广泛使用的高性能的Python WSGI UNIX HTTP服务器，移植自Ruby的独角兽（Unicorn ）项目,使用pre-fork worker模式，具有使用非常简单，轻量级的资源消耗，以及高性能等特点。）。 NGINX 还将配置 HTTPS证书。这意味着它只接受通过HTTPS的请求。如果客户端尝试通过HTTP请求，NGINX将首先将用户重定向到HTTPS，然后它才会决定如何处理请求链接。 我们还将安装此 certbot 以自动续订 Let’s Encrypt 的证书。（译者注：想了解更多内容，可阅读HTTPS 简介及使用官方工具 Certbot 配置 Let’s Encrypt SSL 安全证书详细教程 | Linux Story。） Gunicorn是一个应用服务器。根据服务器拥有的CPU处理器数量，它可以通过生成多个同时工作的程序以并行处理多个请求。它管理工作负载并执行Python和Django代码。 Django是一个努力工作的代表。它可以访问数据库（PostgreSQL）或文件系统。但在大多数情况下，工作是在视图内部完成，渲染模板，以及过去几周我们编写过的所有内容。在Django处理请求之后，它会向Gunicorn返回一个响应，他将结果返回给NGINX，最终将响应传递给客户端。 我们还将安装PostgreSQL，一个优秀的数据库系统。由于Django的ORM系统，很容易切换数据库。（译者注：PostgreSQL被业界誉为“最先进的开源数据库”，面向企业复杂SQL处理的OLTP在线事务处理场景，支持NoSQL数据类型（JSON/XML/hstore）、支持GIS地理信息处理。） 最后一步是安装Supervisor。它是一个过程控制系统，它将密切关注Gunicorn和Django，以确保一切顺利进行。如果服务器重新启动，或者Gunicorn崩溃，它将自动重启。（译者注：Supervisor是一个Python开发的client/server系统，可以管理和监控*nix上面的进程的工具。） 部署到VPS（Digital Ocean）（Deploying to a VPS (Digital Ocean)）您可以使用您喜欢的任何其他VPS（虚拟专用服务器）。配置应该非常相似，毕竟我们将使用Ubuntu 16.04 作为我们的服务器。 首先，让我们创建一个新的服务器（在Digital Ocean上，他们称之为“Droplet”）。选择Ubuntu 16.04： 选择尺寸。最小的空间就足够了： 然后为您的Droplet选择一个主机名（在我的例子为“django-boards”）： 如果您有SSH密钥，则可以将其添加到您的帐户。然后，您将能够使用它登录服务器。否则，他们会通过电子邮件向您发送root密码。(译者注：SSH密钥可以不用输入密码就链接到服务器，具体可自行搜索了解更多。) 现在选择服务器的IP地址： 在我们登录服务器之前，让我们将域名指向此IP地址。这将节省一些时间，因为DNS设置通常需要几分钟才能传播。 所以这里我们添加了两条A记录，一条指向主域名“djangoboards.com”，另一条指向“www.djangoboards.com”。我们将使用NGINX配置规范URL。 现在让我们使用终端登录服务器： 12ssh root@45.55.144.54root@45.55.144.54's password: 然后你应该看到以下消息： 1234567891011121314151617You are required to change your password immediately (root enforced)Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud0 packages can be updated.0 updates are security updates.Last login: Sun Oct 15 18:39:21 2017 from 82.128.188.51Changing password for root.(current) UNIX password: 设置新密码，然后开始配置服务器。 12sudo apt-get updatesudo apt-get -y upgrade 如果在升级过程中收到任何提示，请选择”keep the local version currently installed”(保持当前安装的本地版本)选项。 Python 3.6 123sudo add-apt-repository ppa:deadsnakes/ppasudo apt-get updatesudo apt-get install python3.6 PostgreSQL 1sudo apt-get -y install postgresql postgresql-contrib NGINX 1sudo apt-get -y install nginx Supervisor 1234sudo apt-get -y install supervisorsudo systemctl enable supervisorsudo systemctl start supervisor Virtualenv 123wget https://bootstrap.pypa.io/get-pip.pysudo python3.6 get-pip.pysudo pip3.6 install virtualenv 应用用户（Application User）使用以下命令创建新用户： 1adduser boards 通常，我只选择应用程序的名称。输入密码，并可选择在提示中添加一些额外信息。 现在将用户添加到sudoers列表： 1gpasswd -a boards sudo PostgreSQL数据库配置（PostgreSQL Database Setup）首先切换到postgres用户： 1sudo su - postgres 创建数据库用户： 1createuser u_boards 创建一个新数据库并将用户设置为所有者： 1createdb django_boards --owner u_boards 为用户定义一个强密码： 1psql -c \"ALTER USER u_boards WITH PASSWORD 'BcAZoYWsJbvE7RMgBPzxOCexPRVAq'\" 我们现在可以退出postgres用户了： 1exit Django项目配置（Django Project Setup）切换到应用程序用户： 1sudo su - boards 开始前，我们先检查终端的位置： 123pwd/home/boards 首先，让我们用我们的代码克隆存储库： 1git clone https://github.com/sibtc/django-beginners-guide.git 启动虚拟环境(virtualenv)： 1virtualenv venv -p python3.6 初始化virtualenv： 1source venv/bin/activate 安装依赖的库（译者注：从文件中读取依赖进行安装。）： 1pip install -r django-beginners-guide/requirements.txt 我们再添加两个额外的库，Gunicorn和PostgreSQL驱动程序： 12pip install gunicornpip install psycopg2 现在在/home/boards/django-beginners-guide文件夹中，让我们创建一个.env文件来存储数据库凭据，密钥和其他所有内容： /home/boards/django-beginners-guide/.env 123SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=dALLOWED_HOSTS=.djangoboards.comDATABASE_URL=postgres://u_boards:BcAZoYWsJbvE7RMgBPzxOCexPRVAq@localhost:5432/django_boards 以下是数据库URL的语法：postgres://db_user:db_password@db_host:db_port/db_name。 现在让我们迁移数据库，收集静态文件并创建一个超级用户： 1cd django-beginners-guide 123456789101112131415161718192021python manage.py migrateOperations to perform: Apply all migrations: admin, auth, boards, contenttypes, sessionsRunning migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying boards.0001_initial... OK Applying boards.0002_auto_20170917_1618... OK Applying boards.0003_topic_views... OK Applying sessions.0001_initial... OK 现在静态文件： 12345678910111213python manage.py collectstaticCopying '/home/boards/django-beginners-guide/static/js/jquery-3.2.1.min.js'Copying '/home/boards/django-beginners-guide/static/js/popper.min.js'Copying '/home/boards/django-beginners-guide/static/js/bootstrap.min.js'Copying '/home/boards/django-beginners-guide/static/js/simplemde.min.js'Copying '/home/boards/django-beginners-guide/static/css/app.css'Copying '/home/boards/django-beginners-guide/static/css/bootstrap.min.css'Copying '/home/boards/django-beginners-guide/static/css/accounts.css'Copying '/home/boards/django-beginners-guide/static/css/simplemde.min.css'Copying '/home/boards/django-beginners-guide/static/img/avatar.svg'Copying '/home/boards/django-beginners-guide/static/img/shattered.png'... 此命令将所有静态资产复制到外部目录，NGINX可以在该目录中为我们提供文件。稍后会详细介绍。 现在为应用程序创建一个超级用户： 1python manage.py createsuperuser 配置Gunicorn（Configuring Gunicorn）Gunicorn是负责在代理服务器后面执行Django代码的工具。 在/home/boards中创建一个名为gunicorn_start的新文件： 1234567891011121314151617181920212223242526#!/bin/bashNAME=\"django_boards\"DIR=/home/boards/django-beginners-guideUSER=boardsGROUP=boardsWORKERS=3BIND=unix:/home/boards/run/gunicorn.sockDJANGO_SETTINGS_MODULE=myproject.settingsDJANGO_WSGI_MODULE=myproject.wsgiLOG_LEVEL=errorcd $DIRsource ../venv/bin/activateexport DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULEexport PYTHONPATH=$DIR:$PYTHONPATHexec ../venv/bin/gunicorn $&#123;DJANGO_WSGI_MODULE&#125;:application \\ --name $NAME \\ --workers $WORKERS \\ --user=$USER \\ --group=$GROUP \\ --bind=$BIND \\ --log-level=$LOG_LEVEL \\ --log-file=- 此脚本将启动应用程序服务器。我们提供了一些信息，例如Django项目的位置，用于运行服务器的应用程序用户等等。 现在让这个文件可执行： 1chmod u+x gunicorn_start 创建两个空文件夹，一个用于套接字文件，另一个用于存储日志： 1mkdir run logs 现在/home/boards里面的目录结构应该是这样的： 123456django-beginners-guide/gunicorn_startlogs/run/staticfiles/venv/ 其中staticfiles文件夹由创建collectstatic命令。 配置Supervisor（Configuring Supervisor）首先，在 /home/boards/logs/ 文件夹中创建一个空的日志文件： 1touch logs/gunicorn.log 现在创建一个新的supervisor文件： 1sudo vim /etc/supervisor/conf.d/boards.conf 1234567[program:boards]command=/home/boards/gunicorn_startuser=boardsautostart=trueautorestart=trueredirect_stderr=truestdout_logfile=/home/boards/logs/gunicorn.log 保存文件并运行以下命令：12sudo supervisorctl rereadsudo supervisorctl update 现在检查状态： 1sudo supervisorctl status boards 1boards RUNNING pid 308, uptime 0:00:07 配置NGINX（Configuring NGINX）下一步是设置NGINX服务器以提供静态文件并将请求传递给Gunicorn： 在 /etc/nginx/sites-available/ 中添加一个名为boards的新配置文件： 123456789101112131415161718192021222324252627282930upstream app_server &#123; server unix:/home/boards/run/gunicorn.sock fail_timeout=0;&#125;server &#123; listen 80; server_name www.djangoboards.com; # here can also be the IP address of the server keepalive_timeout 5; client_max_body_size 4G; access_log /home/boards/logs/nginx-access.log; error_log /home/boards/logs/nginx-error.log; location /static/ &#123; alias /home/boards/staticfiles/; &#125; # checks for static file, if not found proxy to app location / &#123; try_files $uri @proxy_to_app; &#125; location @proxy_to_app &#123; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; proxy_pass http://app_server; &#125;&#125; 创建指向已启用站点的文件夹的引用链接： 1sudo ln -s /etc/nginx/sites-available/boards /etc/nginx/sites-enabled/boards 删除默认的NGINX网站： 1sudo rm /etc/nginx/sites-enabled/default 重启NGINX服务： 1sudo service nginx restart 此时，如果DNS已经生效，则可能通过URL www.djangoboards.com 访问该网站。 配置电子邮件服务（Configuring an Email Service）入门使用的最佳选择之一是 Mailgun。它提供了一个非常可靠的免费计划，每月包含12,000封电子邮件。 注册一个免费帐户。然后按照步骤操作，这非常简单。您必须与您注册域名的服务一起使用。在我的例子中，它是 Namecheap。 点击添加域以向您的帐户添加新域。按照说明操作，确保使用 “mg.” 子域名： 现在抓取第一组DNS记录，它是两个TXT记录： 使用您的注册商提供的网络界面将其添加到您的域中： 重复上述步骤，对MX记录做同样的事情： 将它们添加到域中： 现在这一步不是强制性的，但由于我们已经在这里，所以也配置一下： 添加所有DNS记录后，单击“立即检查DNS记录”按钮： 现在我们需要有一些耐心。有时需要一段时间来验证DNS。 同时，我们可以配置应用程序以接收连接参数。 myproject/settings.py 123456789EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')EMAIL_HOST = config('EMAIL_HOST', default='')EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)DEFAULT_FROM_EMAIL = 'Django Boards &lt;noreply@djangoboards.com&gt;'EMAIL_SUBJECT_PREFIX = '[Django Boards] ' 然后，我的本地计算机.env文件将如下所示： 12345SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=dDEBUG=TrueALLOWED_HOSTS=.localhost,127.0.0.1DATABASE_URL=sqlite:///db.sqlite3EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend 我的线上（云服务器）.env文件看起来像这样： 123456SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=dALLOWED_HOSTS=.djangoboards.comDATABASE_URL=postgres://u_boards:BcAZoYWsJbvE7RMgBPzxOCexPRVAq@localhost:5432/django_boardsEMAIL_HOST=smtp.mailgun.orgEMAIL_HOST_USER=postmaster@mg.djangoboards.comEMAIL_HOST_PASSWORD=ED2vmrnGTM1Rdwlhazyhxxcd0F 您可以在Mailgun 的the Domain Information（域信息）部分中找到您的凭据。 EMAIL_HOST: SMTP Hostname（SMTP主机名） EMAIL_HOST_USER: Default SMTP Login（默认SMTP登录） EMAIL_HOST_PASSWORD: Default Password（默认密码） 我们可以在线上服务器中测试新设置。在本地计算机上的settings.py文件中进行更改，将更改提交到远程仓库。然后，在服务器中拉出新代码并重新启动Gunicorn进程： 1git pull 使用电子邮件凭据编辑.env文件。 然后重启Gunicorn进程： 1sudo supervisorctl restart boards 现在我们可以尝试测试重置密码的邮件流程： 在Mailgun仪表板上，您可以获得有关电子邮件传递的一些统计信息： 配置HTTPS证书（Configuring HTTPS Certificate）现在让我们使用 Let’s Encrypt 提供的一个很好的HTTPS证书来提高我们的应用程序的安全性。 设置HTTPS从未如此简单。更好的是，我们现在可以免费获得它。他们提供了一个名为certbot的解决方案 ，负责为我们安装和更新证书。这非常简单： 12345sudo apt-get updatesudo apt-get install software-properties-commonsudo add-apt-repository ppa:certbot/certbotsudo apt-get updatesudo apt-get install python-certbot-nginx 现在安装证书： 1sudo certbot --nginx 只需按照提示操作即可。当被问及： 1Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. 选择2将所有HTTP流量重定向到HTTPS。 有了这个，该网站已经通过HTTPS提供服务： 设置证书的自动续订。运行以下命令编辑crontab文件：1sudo crontab -e 将以下行添加到文件末尾：10 4 * * * /usr/bin/certbot renew --quiet 该命令将每天凌晨4点运行。所有在30天内到期的证书将自动续订。 总结（Conclusions）非常感谢所有关注本系列教程的人，给予评论和反馈！我真的很感激！这是该系列的最后一篇教程。我希望你喜欢它！ 尽管这是教程系列的最后一部分，但我还是计划编写一些后续教程来探索其他有趣的主题，例如数据库优化以及在我们目前拥有的内容之上添加更多功能。 顺便说一句，如果您有兴趣为项目做出贡献，很少有人愿意免费提交pull请求！该项目的源代码可在GitHub上获得：https://github.com/sibtc/django-beginners-guide/ 另外，请告诉我您还想看到的其他内容！:-) 译者总结翻译本文之前，从来没有翻译过技术文章。现在用一天时间翻译完，真的觉得翻译的工作很辛苦，以前看了很多翻译的文章，在这里感谢那些无私奉献的译者们！ 在翻译过程中，有很多技术点，需要自已查一下资料，带出一些扩展；有一些技术知识，原作者一笔带过，又害怕读者看不懂，然后又想展开述；遇到一些自己不懂的技术，也是要硬头表去翻译；也有一些翻译的句子，反复多次斟酌文字，希望能够通俗易懂的描述出来。 最后，翻译只是第一步，理解了原作者的文章，并更好的学习到知识，简单明了的译文，是翻译的初心。当然，在这过程，也发现英文的重要性，希望大家也重视英文，为自己的技术视野更广，不断努力！正如文中作者说的，也许是你第一次遇到的知识，只有坚持，反复多看几次，慢慢的，你一定会懂的！恒心！ 参考扩展教程材料一共会被分为七个部分。此教程将从安装、开发环境的准备，模型，视图，模板，URL到更高级的主题（如迁移，测试和部署）中详细探讨所有基本概念。 Vitor Freitas 原文系列： A Complete Beginner’s Guide to Django 公众号Python之禅 翻译： 一个完整的Django入门指南 - 第1部分 Django入门指南-第2部分（系统设计） 一个完整的Django入门指南 - 第3部分：高级概念 Django入门实践指南-第4章：模型设计 Django入门实践指南-第5章：编写第一个视图函数 苍云横渡 翻译的Windows版本： 【第一部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书 【第二部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书 【第三部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书 【第四部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书 【第五部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书 【第六部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书 扩展阅读： git 关于Git的很棒的互动教程 NGINX Gunicorn certbot HTTPS 简介及使用官方工具 Certbot 配置 Let’s Encrypt SSL 安全证书详细教程 | Linux Story PostgreSQL Supervisor 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Django","slug":"Django","permalink":"https://iHTCboy.com/tags/Django/"},{"name":"Python","slug":"Python","permalink":"https://iHTCboy.com/tags/Python/"}]},{"title":"macOS的控制台Console.app","date":"2018-07-13T14:29:16.000Z","path":"2018/07/13/2018-07-13_macOS的控制台Console/","text":"1、前言从Xcode9.4开始，Devices 界面已经移除了真机设备的日志输出log，而移到macOS系统独立的控制台app(Console.app): 2、控制台 Console.app 查看日志信息和报告以获取有关 Mac 和设备的诊断信息。 控制台应用很早的macOS版本就有了，但是不常用，其实Xcode中移除，也是因为与控制器功能相似，对于Xcode来说，也许真的是一个负担，并且Xcode现在bug已经够多了，移除也是一个好事吧。 可以直接看苹果文档：欢迎使用控制台 - Apple 支持 3、一些技巧相对于以前想看设备的日志，其实，控制台可谓更轻量，更快捷，更专业吧。下面就说说一些技巧： 筛选所需我们打开控制台的目的，一般都是调试我们自己开发的iOS应用吧！这时候，链接设备后，其实我们只关心我们自己的应用的日志，但默认情况下，会显示所有应用当前输出的日志，这时候，筛选所需显得很有必要！找到你应用输出的一条日志，然后鼠标右键（或按住 Control 键点按日志信息），然后选择 显示“进程&#39;XXX&#39;”： 这里示例WeRead(微信读书)的进程筛选，然后就会只显示这个应用的全部日志，相对于Xcode的日志界面，其实非常方便啦~ 显示所需另一方面，第一条日志默认只显示一行，如果想显示全部，可以点击后，在下方显示具体的内容： 如果用快捷键（→ 和 ←）左右箭头键可以快速在当前选择的行显示全部的内容： 4、快捷键使用键盘快捷键快速完成“控制台”中的许多任务。 快捷键 说明 Command-Option-F 搜索日志信息和活动 Command-F 在日志信息中查找文本 Command-G 跳到下一条搜索结果 Command-Shift-G 跳到上一条搜索结果 Command-K 清除日志信息或活动 Shift-Command-R 重新载入日志信息或活动 Shift-Command-N 跳到最近的日志信息或活动 Command-0 显示或隐藏边栏 Command-R 在 Finder 中显示报告 → 在本行展开所选日志信息 ← 在本行折叠所选日志信息 Control-Command-F 进入或退出全屏幕视图 Command-C 拷贝所选日志信息文本 5、总结这个过程，大家也许会发现，用快捷键是提高效率的直接方式，用 Alfred 来打开也很方便（后面计划写一个Alfred开发者效率的文章，期待吧!）。刚开始，也许对于打开控制台查看日志log输出不习惯，但有时候只是查看日志排查问题，直接打开 Console.app 真的方便很多（你知道打开Xcode需要的时候更久，并且在打开Devices更是久啊），所以，综上，这个控制台 Console.app也是一件好事！ 说到这里，其实，我更想吐槽的是Xcdoe！！！越来越庞大，还有Swift的交替，还有功能更强大？直接导致品控越来越差。所以，从这个角度来看，苹果把Xcode的很多相关但不重要的功能单独出来，也许是到于Xcode开发团队来说，是一件好事，到后续的版本迭代也是好事吧，希望Xcode10给开发者带来新体验！期待9月！！ 6、参考 欢迎使用控制台 - Apple 支持 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Console.app","slug":"Console-app","permalink":"https://iHTCboy.com/tags/Console-app/"},{"name":"macOS","slug":"macOS","permalink":"https://iHTCboy.com/tags/macOS/"},{"name":"苹果控制台","slug":"苹果控制台","permalink":"https://iHTCboy.com/tags/苹果控制台/"}]},{"title":"Python爬虫实践入门篇","date":"2018-07-10T13:49:16.000Z","path":"2018/07/10/2018-07-10_Python爬虫实践入门篇/","text":"1、前言学习Python二个多月啦，周末时开始兴趣学习爬虫，虽然有点概念，但是也折腾了大半天，下面就开始简要记录一下吧。 2、需要的准备 Python：需要基本的python语法基础 requests：专业用于请求处理，requests库学习文档中文版 lxml：其实可以用pythonth自带的正则表达式库re，但是为了更加简单入门，用 lxml 中的 etree 进行网页数据定位爬取。 通过pip安装 requests 和 lxml 库，在终端输入：12pip install requestspip install lxml 注：如果是安装到Python3就用pip3 install 下载过程成功的输出：123456Collecting lxml Cache entry deserialization failed, entry ignored Downloading https://files.pythonhosted.org/packages/00/fd/5e65f293e366a63198dade275b886e5d24752367c2e67e3993023b0d58ef/lxml-4.2.3-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl (8.7MB) 100% |████████████████████████████████| 8.7MB 821kB/s Installing collected packages: lxmlSuccessfully installed lxml-4.2.3 注：如果安装过程遇到任何问题，请谷歌吧，如果网上找不到答案，也不要问我！找不到答案我直播吃翔！！！ 3、实践过程为了这过程有点兴趣，我找了一个美图的网站，爬虫了一波图片~ 实践爬虫的网站链接：https://www点aitaotu点com（注意，这不是打广告！） 下载页面html内容： 123page = 'https://www点aitaotu点com/guonei/36350.html'data = requests.get(page).textdom = etree.HTML(data) 解析(定位)元素: 123title_path = '//*[@id=\"photos\"]/h1/text()'totalpage_path = '//*[@id=\"picnum\"]/span[2]/text()'image_path = '//*[@id=\"big-pic\"]/p/a/img' 这里的xpath怎么获取，就是网页里面，打开开发者检查元素工具，在safari和chrome都有这个功能： 获取元素内容： 123456title = dom.xpath(title_path)[0]total = dom.xpath(totalpage_path)[0]image_url = dom.xpath(image_path)[0]img_src = image_url.xpath('./@src')[0]img_alt = image_url.xpath('./@alt')[0] 这里解析就不解析了，其实通过PyCharm IDE可能实时查看每个对象的属性，可以更清晰的了解解析的元素结构，帮助理解，这里就暂时不说IDE的方法啦，大家有兴趣可以试试，也是很简单的~ 最后拿到图片链接，就是下载图片然后保存输出到电脑啊！（文章尾附完整代码！） 4、总结爬虫入门就这样结束啦！学习了python后，发现语法很简单，代码很轻松就完成！不到100行！！！ python通过各种库，解决了编程语言自身的庞大，完成了自己是胶水语言的特点！ 通过这次实践，其实，有很多细节东西，只有自己做了才知道，比较说保存图片的路径，找到当前目录，怎么分目录保存，目录文件操作，这些都是自己之前实践了一个django工具学习过来的。所以，现在经历多了，才知道，什么时候学习都不晚，有些东西，真的是不知道什么时候你会用上，真的，自己早知道这个道理几年，就不像年轻时那么想，这东西怎么可能会用上，不学！！！果然是年轻坑爹！！！学会老，学到老吧！ 5、代码 iHTCboy/WebCrawlerExample: 网页爬虫实践示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#!/usr/local/bin/python3#coding=utf-8import osimport requestsfrom lxml import etreedef downloadImages(url): data = requests.get(page).text dom = etree.HTML(data) title_path = '//*[@id=\"photos\"]/h1/text()' totalpage_path = '//*[@id=\"picnum\"]/span[2]/text()' image_path = '//*[@id=\"big-pic\"]/p/a/img' title = dom.xpath(title_path)[0] total = dom.xpath(totalpage_path)[0] image_url = dom.xpath(image_path)[0] img_src = image_url.xpath('./@src')[0] img_alt = image_url.xpath('./@alt')[0] print(title, total, img_src, img_alt) cwd = os.getcwd() save_path = os.path.join(cwd, 'images/' + title) if not os.path.exists(save_path): os.makedirs(save_path) print(u'保存图片的路径：', save_path) img_path = os.path.dirname(img_src) img_name = os.path.basename(img_src) img_format = img_name.split('.')[1] print(img_path, img_name) for i in range(1, int(total) + 1): new_img_url = '%s/%02d.%s' % (img_path, i, img_format) save_img_path = '%s/%02d.%s' % (save_path, i, img_format) # 下载图片 image = requests.get(new_img_url) # 命名并保存图片 with open(save_img_path, 'wb') as f: f.write(image.content)if __name__ == '__main__': url = 'https://www.aitaotu.com/' # download list list = ['guonei/36350.html', 'guonei/36352.html', 'guonei/36351.html', 'guonei/36357.html', 'guonei/36250.html', 'guonei/36341.html', 'guonei/36334.html', 'guonei/36306.html', 'guonei/35969.html', 'guonei/35219.html', 'guonei/36290.html', 'guonei/36277.html', 'guonei/36263.html', 'gangtai/36303.html', 'gangtai/36226.html', 'guonei/35260.html', 'guonei/35247.html', 'guonei/36257.html', 'guonei/36221.html', 'guonei/21647.html', 'guonei/21499.html', 'guonei/36319.html', 'guonei/34903.html', 'guonei/14148.html', 'guonei/33780.html', 'guonei/14338.html', 'guonei/14550.html', 'guonei/14818.html', 'guonei/16820.html', 'guonei/18388.html', 'guonei/13447.html', 'guonei/25912.html', 'guonei/13991.html', 'guonei/8246.html', 'guonei/36171.html' ] print(u'准备下载：%d套图', len(list)) for type in list: page = url + type downloadImages(page) print(u'下载完成啦！') 代码就没有太多注释，因为很简单，就说一下运行方式吧，在终端： python2:1python YellowImage.py python3:1python3 YellowImage.py 最后的成果： 6、参考 Python教程 - 廖雪峰的官方网站 Requests: 让 HTTP 服务人类 — Requests 2.18.1 文档 Beautiful Soup 4.2.0 文档 正则表达式30分钟入门教程 在线正则表达式测试 lxml - Processing XML and HTML with Python Python lxml教程 | 卡瓦邦噶！ 非结构化数据之lxml库 · 网络爬虫教程 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Python","slug":"Python","permalink":"https://iHTCboy.com/tags/Python/"},{"name":"Python爬虫","slug":"Python爬虫","permalink":"https://iHTCboy.com/tags/Python爬虫/"},{"name":"爬虫","slug":"爬虫","permalink":"https://iHTCboy.com/tags/爬虫/"}]},{"title":"聊聊简书文章被锁定","date":"2018-07-08T10:49:16.000Z","path":"2018/07/08/2018-07-08_简书文章被锁定/","text":"1、文章被锁定昨晚看到简书消息： 原文章已经转移到个人博客： 《建立信任机制》 《绝代宠妓》（Dangerous Beauty）观后感: https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感 2、去中心化 我不知道这是机器过滤还是人工选择，但作为第一批用户，见证成长，为这样的行为感觉太可惜。想起简书很久之前，我在14年无意见看到简书时，就觉得这个写作社区很棒，当时还联系了简书，与联合创始人交流了一下，当然还开玩笑说毕业后想去简书，当时我就认为简书是未来的一个方向： 今天聊这个，其实还是不想吐槽什么。但，互联网发展到现在，从web的去中心化，现在又回到一个一个的社区，一个一个的app，我想乔布斯也不认为这是未来。去中心化，我认为是未来的方向，就像现在2018年最火的区块链！虽然现在00后之前的人，在于朋友圈子，QQ圈子，形成了国内的大中心。就像每一个中国思想的人都曾想拥有自己的房子一样。 我想象，00后之后，大家对房子的态度不会在像现在这样，对待互联网也不像现在，百花齐放，去中心化，也许是需要时间吧，让我们一起见证~ 参考引用 《绝代宠妓》（Dangerous Beauty）观后感: https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感 《建立信任机制》 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"去中心化","slug":"去中心化","permalink":"https://iHTCboy.com/tags/去中心化/"},{"name":"简书文章被封","slug":"简书文章被封","permalink":"https://iHTCboy.com/tags/简书文章被封/"},{"name":"违反规定","slug":"违反规定","permalink":"https://iHTCboy.com/tags/违反规定/"}]},{"title":"淡淡iOS12独立沙盒账户登陆","date":"2018-06-20T11:49:16.000Z","path":"2018/06/20/2018-06-20_淡淡iOS12独立沙盒账户登陆/","text":"1、前言在iOS12前，如果对沙盒账号测试充值不熟悉的同学，也许会遇到过这样的情况： 不允许创建 iTunes 账户此 AppleID 目前无法用于 iTunes Store。请稍后重试 其实，测试账号不能在设置里登陆，只能在测试app里面发起充值时弹窗中登陆。苹果的文档也有说明，https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectInAppPurchase_Guide/Chapters/TestingInAppPurchases.html 2、iOS SandboxiOS12 终于把沙盒储值账号单独出来： 其实，沙盒账号是苹果账号的一种，沙盒账号与正式账号是唯一，也就是说一个邮箱只能是沙盒或者是正式账号，注册了其一就无法在用于另一种。 现在把沙盒账号独立出来，对于开发者来说，肯定是好事，因为很多次运营测试同事跑过来问，为什么沙盒账号登陆不了？？？每次遇到新人，我只能默默的，也许苹果也发现了这个问题，而现在这个问题解决了！！！ 其实，苹果的充值很多问题，其中掉单是最严重也是吐槽最多的，也许，苹果正在优化这一块？也许~ 期待吧！ 3、参考 Apple_TestingInAppPurchases_Guide unable-to-log-in-with-sandbox-test-users-on-device 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS12","slug":"iOS12","permalink":"https://iHTCboy.com/tags/iOS12/"},{"name":"sandbox","slug":"sandbox","permalink":"https://iHTCboy.com/tags/sandbox/"},{"name":"沙盒账户","slug":"沙盒账户","permalink":"https://iHTCboy.com/tags/沙盒账户/"}]},{"title":"AppStore App 转让问题总结","date":"2018-06-09T04:49:16.000Z","path":"2018/06/09/2018-06-09_iOSApp转让问题总结/","text":"1、前言因为转移应用后，没有使用新账号的证书打包上传时报错： iTunes Store Operation Failed ERROR ITMS-90159: “Invalid provisioning profile…” 修改证书后重新上传时，警告⚠️： WARNING ITMS-90076: “Potential Loss of Keychain Access. The previous version of software has an application-identifier value of [‘HZVSAS9COL.com.ihtcboy.abc’] and the new version of software being submitted has an application-identifier of [‘SEGO5FPL9U.com.qq.abc’]. This will result in a loss of keychain access.” 这个是因为证书团队 ID更变的警告，不影响上传到AppStore。需要注意，如果应用有使用 keychain group，则会导致原来用 keychain存储的数据掉失。如果与账号有关联的逻辑，最好在更新版本前通知用户，告诉注意事项，是否要绑定手机等。 Technical Q&amp;A QA1726: Resolving the Potential Loss of Keychain Access warning 2、疑问列表下面列表结合苹果官方文档，列表了一些大家比较关心的情况。 转让 App 有哪些要求？如要转让 App，请确保： 转让方和接收方都有有效的开发者帐户，且都已接受当前有效的所有主协议的最新版本 此 App 拥有至少一个已获批的版本 此 App 处于“已经上架”、“被拒绝”、“被开发者拒绝”或“被开发者下架”状态 任意关联的 App 内购买项目处于“准备提交”、“已经上架”、“被拒绝”、“被开发者下架”或“已批准”状态 TestFlight Beta 版测试应在 App 的所有 Beta 版本中被关闭 您知道接收方团队代理的 Apple ID 及其团队 ID 如果此 App 使用 iAd，则转让方和接收方都必须已接受所有 iAd 协议的最新版本。 那些情况下 App 无法转让？您无法转让符合以下条件的 App： 在 App 的任意版本中包含或使用 iCloud 授权 在 App 的任意版本中包含或使用 Passbook 授权 包含或使用与接收方的某个 App 的 SKU 匹配的 SKU，包括此前已移除的 SKU 包含或使用与接收方的某个 App 的 App 内购买产品 ID 匹配的 App 内购买产品 ID，包括此前已移除的 App 内购买 包含或使用已批准自动续订、非续订或免费订阅的 App 内购买，包括此前已移除的 App 内购买订阅 在沙箱中运行的 Mac App，若与其他 Mac App 共享应用程序组容器目录，也无法转让。 要转让任意此类 App，接收方必须将此 App 创建为新的 App。当前客户、评级和评论无法转让到新的 App。 推送证书是否会随 App 一并转让？不会。转让 App 时不会转让推送证书。现有证书将继续有效，直至过期或被撤消。有关推送证书的详细信息应在 App 转让前与转让方进行协商。 App 转让后，相关开发者证书都需要更改？App 转让后，App ID 前辍会更改以匹配接收方的团队 ID。 转让后的 App，打新ipa包前，需要使用新开发者账号的签名证书！ 推送证书也需要一同更新 哪个 iTunes Connect 用户职能可以转让 App？具有法务职能的 iTunes Connect 用户（也称作团队代理）可以发起和接受 App 转让。 转让流程需要多长时间？转让未启用 iAd 或 Game Center 的 App 最多需要三个小时（从接收方接受转让开始计时）。如果 App 启用了 iAd 或 Game Center，或 App 存在任何出口合规性问题，则整个转让流程最多可能需要两个工作日。 我能否同时转让多个 App ？不可以。一次只能转让一个 App。 我可否取消 App 转让？在 App 仍处于“等待 App 转让”状态时，转让方和接收方可在 协议、税务和银行业务 中取消 App 转让。 要取消转让，转让方必须点按“转让协议”部分“正在处理的合约”子部分中 App 旁边的“撤消”。 接收方可以通过点按“转让协议”部分“正在处理的合约”子部分中 App 旁边的“查看”，然后点按“App 转让”页面上的“拒绝”来取消转让。 如何接受 App 转让？要接受 App 转让，具有法务职能的 iTunes Connect 用户（也称作团队代理）必须点按“合约、税务和银行业务”模块中“正在处理的合约”页面上的“查看”。待提供了所有必需信息之后，具有法务职能的用户必须接受合约条款。接收方接受转让请求后，App 的状态将变成“正在处理 App 转让”。 我必须在多长时间内接受 App 转让？60 天后未接受的 App 转让将被取消。 在 iTunes Connect 中转让 App 是否会一并转让源代码和 App 二进制文件？不会。在 iTunes Connect App 转让流程中，不包含源代码和 App 二进制文件。源代码和二进制文件的转让必须单独处理。 在转让过程中，App 在 App Store 上是否依然可用？如果 App 在转让时处于“已经上架”状态，则它在转让过程中将在 App Store 上仍然可用。 在 iTunes Connect 中转让 App 是否会一并转让客户评级和评论？会。在 app 转让之前发布的所有评级和评论都会一并转让。 App 转让完成后会不会通知我？会。转让完成后，转让方和接收方都会收到电子邮件通知。 我能否对处于“已经上架”（等待 App 转让）状态的 App 进行元数据更改？不能。不能对处于（等待 App 转让）状态的 App 进行元数据更改。您只能更改您的 App 的权利和定价。 App 转让后，我是否还能用 iTunes Connect 访问我的 App 的任何信息？不能。转让后，您将无法查看此 App 的历史记录、Game Center、App 内购买项目或其他 App 信息。 与此 App 关联的所有信息都会转让给接收方。如果您想要保留任何此类信息，您必须在发起转让前编辑它。 App 转让到我的帐户后，我可否申请新的促销代码？不可以。只能为每个 App 版本生成 100 个促销代码，这与 App 的所有权状态无关。App 转让后，不会产生新的或更多的促销代码。促销代码从生成之日起四周内有效。 转让我的 App 后，我是否还能访问它的“销售和趋势”信息？对于 App 在转让前发生的销售，转让方可继续访问其“销售和趋势”信息。接收方只能收到转让后产生的 App 销售信息。 App 转让后，App ID 前辍是否会更改以匹配接收方的团队 ID？会。App 转让后，App ID 前辍会更改以匹配接收方的团队 ID。 App 转让后，钥匙串是否还继续有效？在对 App 进行更新前，钥匙串将继续有效。更新后，将无法访问此前的钥匙串数据。此外，如果您的钥匙串访问组在 Xcode 项目中作了定义，您将需要更新它以反映接收方的团队 ID，这样才能继续在 App 中使用钥匙串服务。 参考 App 转让概述 - iTunes Connect 开发人员帮助 App转让 要求 - iTunes Connect 资源和帮助 iTunes Connect 资源和帮助 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"App转让","slug":"App转让","permalink":"https://iHTCboy.com/tags/App转让/"},{"name":"ITMS-90159","slug":"ITMS-90159","permalink":"https://iHTCboy.com/tags/ITMS-90159/"}]},{"title":"iOS快速清除全部的消息推送","date":"2018-05-26T15:46:16.000Z","path":"2018/05/26/2018-05-26_iOS快速清除全部的消息推送/","text":"前言越来越多的应用，请求用户推送权限，一般情况下，普通应用我是不允许的，除了通讯应用、支付宝（银行app有很多不羊毛的活动推送，不允许）、GTD（Things、Due）、健身（Kepp、SixPack），其它的像淘宝天猫、京东，每次打开app，都要反复问我还要不要打开推送，你们就不能先调查一下我用的iOS系统多久吗？请问一个用了4年以上的用户，如果他还想打你们家的app推送，难道不知道在那里开吗？脑子进水吧。 iOS10 以上如果是iOS10以上，并且是iPhone 6S、iPhone 6S plus ，就可以利用3D Touch一键清除通知。 如果是点击推送的 x ，就会出现 Clear，点击后会清除当前区的推送 如果长压（3D Touch），就出现 Clear All Notifications，点击就会清楚全部的推送 iOS 9如果是iOS 9 和更老的机型，首先按住锁屏上方的把手把通知中心拉下来，拖到底，松手，然后再向上把它拖回去，锁屏瞬间清空! 总结iOS10以后的通知中心，合并了全部和未读消息，然后没有提供一个更好的展示形式，只是推送内容和交互更新，并没有解决推送过多的问题，就比如微信推送的消息是最多的，并且推送的类型也不一样，轻重急缓不分！推送作为中国人工作和生活提示，已经越来越重要，更加高效和智能的推送展现，迫在眉睫。 听说iOS12会重新设计通知，希望是真的，非常期待，因为苹果这2年已经没有为系统做更多的创新或颠覆，希望苹果有所创新！ 参考引用 具透丨好的 iOS 体验，从用好通知开始：iOS 10 通知详解 - 少数派 教你快速清除烦人的消息推送iPhone技巧爱思助手 NO.3一键清除通知_数码_GQ男士网 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"消息推送","slug":"消息推送","permalink":"https://iHTCboy.com/tags/消息推送/"}]},{"title":"iTerm配置导出与迁移方法","date":"2018-05-12T15:49:16.000Z","path":"2018/05/12/2018-05-12_iTerm配置导出与迁移方法/","text":"1、前言iTerm软件的实用就不用在说了，最近迁移新工作电脑，打算把自己电脑配置好的iTerm迁移到新电脑，网上找了很久都没有找到教程，看到iTerm的profiles下有 ‘Copy Profile as JSON’，但没有导出成文件，也没有找到导入配置的地方！！ 找了好久，最后还是在官网上找到了说明，所以，软件的使用教程，直接去官网找，别在谷歌百度了！！！ 2、iTerm配置导出&amp;迁移如果大家英文好，直接上官网看看吧，Dynamic Profiles - Documentation - iTerm2 - macOS Terminal Replacement 我这里简单说一下步骤，打开配置： 1iTerm -&gt; Preferences -&gt; Profiles -&gt; Other Actions 然后有2种选择方式： Copy Profile as JSON （复制当前选中的配置） Copy All Profiles as JSON （复制全部的配置） 这里选择复制全部的配置，然后保存到一个文件里面，后缀可以不用选择，文件名随意起，如： 然后把这个配置文件，复制到新电脑的下面目录下： 1~/Library/Application Support/iTerm2/DynamicProfiles/ 然后启动新电脑的 iTerm2，这时配置已经加载迁移成功啦，DynamicProfiles目录下的文件可以删除，因为 iTerm2 启动里，会自动加载这个目录下的配置内容，但是配置读取成功后，iTerm是另外保存配置的。 总结这次迁移新电脑过程中，很多软件都重新下载，另外，之前在淘宝买个正版的软件，比如16年时，数码荔枝正版软件，当前代理的 CleanMyMac3 优惠价只要45元，当时就下手了。但是今天，突然发现只能一台设备激活，但是在AppStore购买的软件，可以无限下载啊！！！无限设备呢！！！！ 之前 Mweb 黑色星期五是半价，就在AppStore购买了，现在可以随意多台设备下载！所以，想想，其实还是在AppStore下载购买好！原因有: 自动更新，安全可靠 一个账号购买，无限安装设备（家庭共享也可以免费下载） 当然，有些软件不在AppStore上架，可能就是上面的无限下载导致软件开发商不愿意在AppStore上架的原因吧，比如 jetbrains, Adobe 大厂， 很多软件也是，唉，我已经在AppStore购买了很多正版软件，真心觉得自动安装更新非常方便，现在的时代时间就是金钱，希望更多开发商在AppStore for mac 上架应用（当然，如果真希望用户只能一台设备安装，如果与苹果协商有解决方案，其实也是大喜的标示~） 参考 Dynamic Profiles - Documentation - iTerm2 - macOS Terminal Replacement 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iTerm2_DynamicProfiles","slug":"iTerm2-DynamicProfiles","permalink":"https://iHTCboy.com/tags/iTerm2-DynamicProfiles/"},{"name":"iTerm配置导出","slug":"iTerm配置导出","permalink":"https://iHTCboy.com/tags/iTerm配置导出/"},{"name":"iTerm配置迁移","slug":"iTerm配置迁移","permalink":"https://iHTCboy.com/tags/iTerm配置迁移/"}]},{"title":"mac版QQ聊天信息备份与导出方法","date":"2018-05-08T11:35:16.000Z","path":"2018/05/08/2018-05-08_mac版QQ聊天信息备份与导出方法/","text":"前言最近，我司终于更换新电脑的计划落实啦！！！ Mac mini 3.0GHz 双核 Intel Core i7 处理器 (Turbo Boost 高达 3.5GHz)16GB 1600MHz LPDDR3 SDRAM1TB 融合硬盘Intel Iris Graphics 图形处理器 非常值的可贺！然而，就是新电脑，一切都是新！一切都是白！！非常多工具的数据需要迁移，开发环境需要配置，最近也打算总结一下新电脑配置方面的文章，作为自己备份，或者给新手参考，相信有很大帮助。今天就先从QQ说起吧~ 正题说回来，因为QQ内容是工作的主要记录，所以， 企业QQ聊天内容迁移将下面目录： 1/Users/用户名/Library/Containers/com.tencent.eimmac/Data/Library/Application Support/QQ 复制目录下所有内容到新电脑，就可以啦! 用户版QQ聊天内容迁移将下面目录： 1/Users/用户名/Library/Containers/com.tencent.qq/Data/Library/Application Support/QQ/ 复制目录下所有内容到新电脑， 如果需要把聊天中的图片也迁移，就需要在复制目录： 1/Users/用户名/Library/Containers/com.tencent.qq/Data/Documents/ 注意： 上面目录中 用户名 是你电脑的账户名 企业QQ是在com.tencent.eimmac目录下，而用户版QQ是在 com.tencent.qq 下 授鱼&amp;授渔如果是其它功能的内容迁移，道理相似，把对应的软件的目录的内容复制到新电脑就可以了。当然，想方便查看软件的目录备份内容，可以用 CleanMyMac 卸载器 查看： 总结作为程序员，越来越觉得云端的好处，迁移数据是一件痛苦（辛苦）的事件，如果是电脑小白，那更加是的。所以，有必要作一些更好的方法，比如云端备份软件的配置，用脚本来操作迁移过程，因为不是经常性换电脑，所以这个就不作进一步实践了。 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"mac版QQ信息导出","slug":"mac版QQ信息导出","permalink":"https://iHTCboy.com/tags/mac版QQ信息导出/"},{"name":"聊天内容迁移","slug":"聊天内容迁移","permalink":"https://iHTCboy.com/tags/聊天内容迁移/"}]},{"title":"Github Pages页面重定向到新网址，实现域名跳转","date":"2018-05-06T08:35:16.000Z","path":"2018/05/06/2018-05-06_Github_Pages页面重定向到新网址,实现域名跳转/","text":"1、前言最新还是决下心来换域名啦！从 http://ihtc.cc 换成 https://ihtcboy.com ！然后问题就来了，以前文章的链接打开404了，旧域名也访问不通，这样子不行呢！用了2年多的旧域名，在百度谷歌还是积累了一些爬虫，还有很多分享到第三方平台的文章呢！想一想，还是想救一救它！！！ 2、准备工作首先，因为是2个域名，所以我分别用2个GitHub账号设置对应的Repo地址解析。 域名 Repo ihtc.cc HeTianCong.github.io ihtcboy.com iHTCboy.github.io 3、域名重定向首先要解决的问题是 ihtc.cc 重写向到 ihtcboy.com，在网上搜索到，域名的重定向可以有以下3种方法（如果还有其它，欢迎大家补充！）： 域名转发 301重定向 JS跳转 方法一，域名注册商支持域名转发功能才行！放弃~方法二， 就是Web 服务器（这里是GitHub）给访问老域名的请求返回一个 302，然后跳转到新域名上。考虑到使用的GitHub托管服务是不可能配置 Web 服务器的，也只能放弃~ 最后就是剩下JavaScript 实现，在 HeTianCong.github.io 新建index.html 文件，内容为： 1&lt;script type=\"text/javascript\"&gt;window.location.href=\"https://ihtcboy.com\";&lt;/script&gt; 解析： index.html就是访问 ihtc.cc 时，GitHub 默认打开的页面，所以在里面用JS重写向到新的域名，这样就解决了旧域名重写向新网址的问题啦！！ 4、文章重定向旧的文章链接： 1http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/ 既然要重定向到新的域名，，就不可能在旧的Repo里增加全部旧文章吧（虽然方案是可行），但是这样又起不到读者知道新域名的问题，硬要搞2个Repo，那就没有前面的重定向必要啦！！！ 最后想到旧的链接访问不通时，表现形式：404There isn’t a GitHub Pages site here.！ 那么在 Repo 下建立一个 404.html，这样是不是就可以拿到访问文章的链接，然后就你所欲为！（拿旧域名替换成新域名就可以啦！）马上就开始行动吧！ 404.html 文件，内容为： 1234567891011121314151617&lt;script src=\"http://cdn.bootcss.com/purl/2.3.1/purl.min.js\"&gt;&lt;/script&gt;&lt;script&gt;var url = purl();if (url.attr('host') == 'ihtc.cc') &#123; var old_url = url.attr('source'); var new_url = old_url.replace('ihtc.cc', \"ihtcboy.com\"); window.location.replace(new_url); &#125;else if (url.attr('host') == 'www.ihtc.cc') &#123; var old_url = url.attr('source'); var new_url = old_url.replace('www.ihtc.cc', \"ihtcboy.com\"); window.location.replace(new_url);&#125;else &#123; window.location.href=\"https://ihtcboy.com\";&#125; &lt;/script&gt; 上面js是放在 404.html 里面，当文章访问不通时会显示 404.html 页面，这时就会直接调用js判断域名，然后替换成新域名来访问！ 最后实践发现，这个方法可行！！！（当然，有些禁止js运行的浏览器这些人群就被忽略吧，不属于大多数人的世界-.-） 从浏览器访问 www.ihtc.cc/xxx 或 ihtc.cc/xxx 的读者，都会被重定向到 ihtcboy.com! 以上全部的配置内容可参考 HeTianCong.github.io 5、总结刚开始是想放弃，因为经常中谷歌搜索文章里，常常发现404的 There isn’t a GitHub Pages site here.，都是怀疑作者域名过期或变更等，又没有自己后台服务器，只能不了而之，旧的读者从此就与这个网站失联，觉得是有点可惜！ 所以，今天的这个文章，希望对愿意写文章，有又变更域名需求的博客同仁来说，希望是一个更好的开始！ 6、参考 HeTianCong.github.io 如何实现域名A指向域名B？三种域名跳转方法供选择 - CSDN博客 博客折腾记之网址变更｜Ruo Dojo 三谈github页面域名绑定：域名跳转 - 雁起平沙的网络日志 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Github Pages","slug":"Github-Pages","permalink":"https://iHTCboy.com/tags/Github-Pages/"},{"name":"JS跳转","slug":"JS跳转","permalink":"https://iHTCboy.com/tags/JS跳转/"},{"name":"域名跳转","slug":"域名跳转","permalink":"https://iHTCboy.com/tags/域名跳转/"},{"name":"重定向","slug":"重定向","permalink":"https://iHTCboy.com/tags/重定向/"}]},{"title":"忆爷爷 —— 留守老人的一代","date":"2018-05-04T16:05:16.000Z","path":"2018/05/05/2018-05-05_忆爷爷——留守老人的一代/","text":"忆爷爷生于三十年代，抗日战争之际。 听爷爷说，我们家以前是地主，解放后，我们家族就走下坡路，爷辈各兄弟分散多地。 读书时，还不能体会到地主阶级的痛，改革开放后家族迁于麓阳村。 到了我爸那一代，小时候读书被人欺负，是随便一个人都可以欺负地主家的孩子，也许已经没有人能想象到是什么一个场景，历史过去，没有留下记忆的境头，没有人敢写的历史问题，越来越多的消失。最后我爸连小学都没能毕业。到了我叔那辈，读到初中，家里还穷，那时我大伯和我爸已经娶妻生子，我叔南下广东打工，为家里带来了很多改变，新录音机，当时可是了不起，因为那时家里就一台黑白小电视。 也就97年香港回归后，我叔在广东学会了很多，从打杂工、洗车，然后做厨师，在外面无依无靠，靠自己努力做到，在当时已经了不起，听爷爷说，当时叔的工资都寄回家了。家里穷，我依然记得吃肥猪肉都是很奢侈。 99年，千禧年来临前，在叔的带领下来到广州。然后一直到现在，在外打工将近二十个年头。背井离乡，那时间我才10岁不到，爷爷一个人在家里照顾2个姐姐，2个哥哥，直到他们都出来打工，最后一个一个远走他乡，离他而去。 20年，对于一个老人，每年过年过节一个人！春节、清明节、端午节、中秋节，都没有回去过，对于老人来说，什么又是对又是错，钱又有什么用。 说说那时交通，20个小时班车，因为火车站在广州市中心，所以只能就近坐班车，从下午到晚上，然后第二天早上回到南宁，回到家里，真的不容易。现在动车4个小时，公交车和地铁方便，回家当天就到，也许以后也没有人知道，甚至大多数90后也不了而之，随着历史的迁移只会越小人知道，然后就最后没有人知道这些历史，没有人知道上一辈人的辛苦，上一辈人的辛酸。 爷爷写的一手好的毛笔字，村里的红事白事都会叫他写，惟一的春联他就不敢写，都是叫村里的老师帮写，也许他还觉得自己文采不够？另外，爷爷自学了针灸，平时有空都会帮别人治治，虽然我不确认效果，但是中国的针灸历史很久。从这两个方面，就觉得爷爷有什么东西值得我去学习，在那个年代，那个压力，这种精神，永远不朽！ 念读高中时，因为广东不给外地人读，所以回南宁读书，有几个寒暑假都在家里陪爷爷一起过。想起高中的那时候，由于学业繁忙，每天都是爷爷买菜煮饭给我吃，这就这样，一辈子的回忆。也只有这样的机会，我才能了解这些故事，少数人才记得的历史。 听爷爷常常唠叨，他以为家族一辈子都不会在兴旺起来。当年闹饥荒，地主被批斗，奶奶就是被批斗而逝去。在我记忆里，没有奶奶的画面，听爷爷说，我很小时奶奶就去了。 爷爷不经常提说这些历史，就像他说恨毛主席。爷爷经历了我们这一代无法想象的苦，我们又享受上一辈奋斗带来的富，已经没有多少人会记住历史。就像爷爷说希望当年那些对待他的人，让他们知道错。在别人看来，爷爷过于自我，普通人没有人会理解，别人会恶评。 那又如何，我已经没有办法帮爷爷实现梦想了，因为历史永远回不去。大家习惯于现在，现在的小康生活。那一代人，知青，上山下乡，慢慢的被人忘记了，那些老人也慢慢消失。那一代人，在这近二十年，也许做了一些常人无法理解的事，大家都不了解。没有人知道为什么，也没有人关心，最后也再没有人知道了。 越来越多的留守老人逝去，越来越多的留守儿童长大成人，然后背井离乡，回到旧路。 有时候站在历史的回流中，看着城市里面永远不会熄灭的灯光，其实是最大的阴影，最大的黑暗。 在历史的车轮碾压下，尘归尘土归土。现在的小康生活，来的太容易。每天纸醉金迷，玩物丧志，玩弄人生。最可怕的是，只会羡慕别人，完全没有自我的那些生命。一辈子就这些长，有些事要记住，有些事要去做，如果不能体会到的困境，就不会意识到自己在睡觉吧。 那些无奈，辛勤的日子，依然会有人记得，带着梦想去奋斗吧！ 忆往昔，爷爷一路走好，愿天堂没有孤独。 5月4日 夜","tags":[{"name":"下一代","slug":"下一代","permalink":"https://iHTCboy.com/tags/下一代/"},{"name":"爷爷","slug":"爷爷","permalink":"https://iHTCboy.com/tags/爷爷/"},{"name":"留守儿童","slug":"留守儿童","permalink":"https://iHTCboy.com/tags/留守儿童/"},{"name":"留守老人","slug":"留守老人","permalink":"https://iHTCboy.com/tags/留守老人/"}]},{"title":"联系AppStore苹果审核人员的方法","date":"2018-04-20T05:19:16.000Z","path":"2018/04/20/2018-04-20_联系AppStore审核人员的方法/","text":"1、前言作为一名iOS开发工(ban)程(zhuan)师(gong)，只要应用要上线AppStore，总会遇到被苹果拒审的情况！这就是为什么苹果能保持如此优质App市场的原因！爸爸，我错了。。。 被拒时回复 苹果官方申诉网页 邮件 打电话 注：按时间成本排序 2、正题2.1、被拒时直接回复如果应用被拒，并且是不需要重新出包的情况，或者对苹果裁判结果不满足，可以直接回复。 2.2、苹果官方申诉网页Contact the App Review Team 联系苹果客服的页面： 选择你需要联系苹果客服的问题类型： 2.2.1 appeal an app rejection or app removal(就 App 遭拒情况提出申诉)就您被拒绝的 app 向 App Review 委员会提交申诉。 填写基本应用信息 填写提交申诉内容 申诉信发送成功（同时会给开发者邮箱发送通知） 2.2.2 加快 App Review请求加快对 app 紧急更新的审核。 加速审核跟申诉基本一样，多了一个选择加速的原因： 注：加速审核是否成功，苹果都会通过开发者邮箱回复结果。 2.3.3 我们能为您提供什么协助？苹果在2018年中旬增加了中文的反馈页面，而且分类别门的列出了以下大类，还有小类！真的非常用心！ 链接：https://developer.apple.com/contact/#!/topic/select 四、邮件联系AppReview@apple.com 在提交后（处于“审核中”），应用和应用内购的状态-状态更新通知 发者遭拒和影响审核时间相关的信息 用遭拒通知咨询-快速审核请求 iTSPayments@apple.com 付状态查询 与苹果向开发者支付费用相关的问题 咨询财务报表 AppStoreNotices@apple.com App Store内应用侵权问题，比如我们可以投诉“摩根书院”的关键字侵权 DevPrograms@apple.com iDP或ADC查询 程序信息、收益、账户信息 修改邮箱地址、公司联系地址、团队代理人（代理人才有权生成发布证书） ADC产品、硬件等退费 ADC网站查询：合作伙请求 iDP-DTS@apple.com 代码级别的提问 API使用 代码崩溃/如何使用和查看Crash logs X-code使用问题, 证书问题 修改代码可能会引发iTC上传错误或应用遭拒的情况 注意，区别于上边这个地址，99$的iDP每年有2次技术支持的机会，申请地址如下：https://developer.apple.com/membercenter/index.action#techSupport iTunesConnect@apple.com iTC遇到的任何错误 应用/应用内购买设置和管理 应用在商店里/用户评论投诉等相关的事宜 推广码查询 编辑应用信息（名称、评分、关键词、定价、本地化等） iTC 用户以及应用内购买测试用户设置 关键词/商店搜索查询 iTC登陆事宜-崩溃日志 对Contact Us的疑问等 iAD激活和获取iAd模板 iTSBanking@apple.com 更新银行账户信息 与银行账户信息相关的事宜 协助填写银行信息表格 所有的开发者可通过iTC Contact Us 模块来修改银行账户信息，将表格发至这个邮箱 iTSTax@apple.com 与收入和销售税有关的问题 协助填写报税表格 处理报税表格 iTunesAppReporting@apple.com 销售/销售趋势报告理解的问题 报告丢失问题 销售/销售趋势报告与财务报告之差异 五、电话联系苹果相关地区联系电话 国家/地区 语言 营业时间 电话 中国 英语、简体中文 周一至周五， 09:00 - 17:00（CST） 4006 701 855 更新地区：全球电话支持 - Apple Developer 参考 联系我们 - Apple Developer 全球电话支持 - Apple Developer 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppReview","slug":"AppReview","permalink":"https://iHTCboy.com/tags/AppReview/"},{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"苹果审核员","slug":"苹果审核员","permalink":"https://iHTCboy.com/tags/苹果审核员/"}]},{"title":"macOS中基于L2TP协议的VPN连接时提示“IPSec 共享密钥”丢失问题解决","date":"2018-04-10T10:59:26.000Z","path":"2018/04/10/2018-04-10_macOS中基于L2TP协议的VPN连接时提示“IPSec共享密钥”丢失问题解决/","text":"1、遇到的问题 “IPSec 共享密钥”丢失。请验证您的设置并尝试重新连接。 在网上找到很多相似的解决方法，但是却没有人说出为什么要这样做？？ 2、问题原因&amp;解决2.1 原因：最后在Oracle官方文档找到了解释： 引用 Oracle Solaris 10 8/11 Information Library 文档: /etc/ppp/options包含缺省应用于系统中所有 PPP 链路的特征（例如，计算机是否要求对等点对其本身进行验证）的文件。如果不存在此文件，将禁止非超级用户使用 PPP。 也就是说，默认情况下macOS跟Liunx一样，在/etc/ppp/目录下没有 options这个配置文件，所以对于非root用户就无法使用ppp链路。 2.2 解决知其然，所以知其后然，这时候的解决方法就是在/etc/ppp/目录下建立options`这个配置文件，并且配置ppp链路l2tp不需要ipsec密钥。 下面就是vim命令操作，如果想系统学习相关命令可查看 每天一个linux命令目录，这里不打算详细讲解，有兴趣同学可以另行学习。 2.2.1 操作步骤（1）在终端任意路径下输入命令： sudo vim /etc/ppp/options然后输入电脑密码后，显示vim操作界面后按键盘i进入插入模式，输入下面内容：12plugin L2TP.pppl2tpnoipsec （2）然后按esc键退出插入模式，最后输入:wq!，强制保存并退出vim模式。 2.2.2 命令解释 sudo：用管理员权限执行命令 vim：用vim打开文件，后面跟上文件所在的路径 plugin L2TP.ppp：配置ppp链路插件？具体暂未了解，知道的同学可以告诉我啊！ l2tpnoipsec: 配置ppp链路l2tp不需要ipsec密钥。 2.2.3 终端操作示意 最后，想验证是否保存成功，可以用open /etc/ppp/options命令打开文件查看内容： 3、总结在这个探索的过程，自己了解得更多，就会发现自己知道的越少！求甚解，也许就是最好的学习态度，大家都要坚持！ 4、参考引用 在文件中和命令行上使用 PPP 选项 - 系统管理指南：网络服务 Mac OS X 下无密钥方式连接基于L2TP协议的VPN mac的vpn配置“IPSec 共享密钥”丢失问题 - 简书 Mac 笔记本无共享密钥连接L2TP VPN-我的运维历程-51CTO博客 Mac OSX 无共享的密钥情况下连接基于L2TP协议的VPN « jiangrongyong’s Blog Mac OSX 无共享的密钥情况下连接基于L2TP协议的VPN | micmiu - 软件开发+生活点滴 每天一个linux命令目录 - peida - 博客园 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"IPsec","slug":"IPsec","permalink":"https://iHTCboy.com/tags/IPsec/"},{"name":"PPP","slug":"PPP","permalink":"https://iHTCboy.com/tags/PPP/"},{"name":"macOS","slug":"macOS","permalink":"https://iHTCboy.com/tags/macOS/"},{"name":"vpn","slug":"vpn","permalink":"https://iHTCboy.com/tags/vpn/"}]},{"title":"PyCharm 2018 for mac 数据库实战：链接SQLite、建表、添加、查询数据","date":"2018-04-03T13:46:26.000Z","path":"2018/04/03/2018-04-03_PyCharm_2018_for_mac数据库实战_链接SQLite_建表_添加_查询数据/","text":"一、前言 最近开始入门python，当然是要使用PyCharm，然后在项目中遇到.db数据库文件，双击打不开？网上找到了windows版本的教程，版本也比较旧，所以有空就来一发，当备忘也好~ 二、链接SQLite 2.1 控制台创建数据库DB文件 2.2 打开sqlite配置界面按下图步骤打开sqlite配置目录 2.3 安装sqlite驱动点击下载驱动，直到显示提示“no objects”： 2.4 链接刚才创建的数据库 ios_test.db文件 点击步骤4的“Test Connection” 时，显示 Successful 就表示连接成功，点击右下角的OK返回！ PyCharm自动打开Sqlite数据库： 三、操作数据库 3.1 创建一张表 3.2 添加数据 3.3 查询数据 3.4 关联表 3.5 更多示例 相关代码： 123456789101112131415161718192021222324252627282930313233343536-- 创建一个表create table iOSDevice( deviceName TEXT);-- 插入数据insert into iOSDevice values('iPhone8');insert into iOSDevice values('iPhone8 Plus');insert into iOSDevice values('iPhoneX');-- 查询所有数据select * from iOSDevice;-- 创建一个新表create table iProduct ( Mac text, iPhone text, iPad text, Watch text, -- 关联表 foreign key (iPhone) references iOSDevice(deviceName))-- 插入多个值insert into iProduct values( 'Macbook Pro', 'iPhone', 'iPad mini4', 'apple Watch');-- 查询表数据select * from iProduct; 四、总结 通过PyCharm进行SQLite操作，之前真没有想到PyCharm如此强大！IDE就是IDE，收费也是硬道理！希望好好利用PyCharm做更多有趣的事件~ 五、参考引用 PyCharm IDE 链接sqlite、建表、添加、查询数据 - CSDN博客 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"PyCharm","slug":"PyCharm","permalink":"https://iHTCboy.com/tags/PyCharm/"},{"name":"Python","slug":"Python","permalink":"https://iHTCboy.com/tags/Python/"},{"name":"SQLite","slug":"SQLite","permalink":"https://iHTCboy.com/tags/SQLite/"}]},{"title":"判断NSString为空的问题浅析","date":"2018-03-17T15:02:26.000Z","path":"2018/03/17/2018-03-17_判断NSString为空的问题浅析/","text":"1、前言判断字符串是否为空的情况，一般判断的逻辑如下： 是否为nil 是否是NSNull 是否去掉空格之后长度为0 在某书看到如下代码： 12345678910111213141516171819202122@interface NSString (Util)- (BOOL)isBlankString:(NSString *)str;@end@implementation NSString (Util)- (BOOL)isBlankString:(NSString *)str &#123; NSString *string = str; if (string == nil || string == NULL) &#123; return YES; &#125; if ([string isKindOfClass:[NSNull class]]) &#123; return YES; &#125; if ([[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] length]==0) &#123; return YES; &#125; return NO;&#125;链接：https://www.jianshu.com/p/fd32b759bace來源：简书 2、判断NSString为空的问题大家继续之前，可以认真看看上面的代码有没有问题？或者有没有优化的空间？ 原作者表示里面有一个坑，调用者为nil时： 12NSString *str = (网络解析出来的数据，解析结果为nil);BOOL isBlank = [str isBlankString]; 就是说，如果用实例方法进行判断为空，因为实例对象为空时，根据objc的动态性，向空对象发消息会直接返回nil，并不会找到实例方法进行调用。所以，要判断字符串为空，只能传入字符串对象（可能为空），进行判断。 1234567#import &lt;Foundation/Foundation.h&gt;@interface MyUtility+ (BOOL)isBlankString:(NSString *)string;@end 123456789101112131415161718192021#import \"MyUtility.h\"@implementation MyUtility+ (BOOL)isBlankString:(NSString *)str &#123; NSString *string = str; if (string == nil || string == NULL) &#123; return YES; &#125; if ([string isKindOfClass:[NSNull class]]) &#123; return YES; &#125; if ([[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] length]==0) &#123; return YES; &#125; return NO;&#125;@end 其中NULL、nil、Nil、NSNull的区别： 标志 值 含义 NULL (void *)0 C指针的字面零值 nil (id)0 Objective-C对象的字面零值 Nil (Class)0 Objective-C类的字面零值 NSNull [NSNull null] 用来表示零值的单独的对象 3、总结通过这个例子，可能看出看似简单的问题，其实都有非常值得探究的深渊！希望自己不要自尽为是，虚心学习，考虑问题有更多角度，细致严谨！ 4、参考引用 判断NSString为空容易犯的错 - 简书 nil / Nil / NULL / NSNull - NSHipster 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"NSNull","slug":"NSNull","permalink":"https://iHTCboy.com/tags/NSNull/"},{"name":"NSString","slug":"NSString","permalink":"https://iHTCboy.com/tags/NSString/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"nil","slug":"nil","permalink":"https://iHTCboy.com/tags/nil/"}]},{"title":"AppStore无法内购相关问题解决的解决方案","date":"2018-03-14T14:12:26.000Z","path":"2018/03/14/2018-03-14_AppStore无法内购相关问题解决的解决方案/","text":"1.如果游戏无法进行内购，或者购买显示为不可用，需要玩家配合检查确认以下情况： 请确认应用是从 App Store 上面下载的。 请确认不是越狱安装破解插件导致无法购买。 请确认网络是否通畅 请确认在 系统设置 &gt; 通用 &gt; 访问限制 中的 “App 内购买项目” 是否为打开状态。 注销你的 Apple ID 重新进入游戏，重新尝试购买； 如果你已经购买成功但是却没有收到金币，那么你可以切换网络成移动数据网络，然后重新打开游戏确认。 如果以上情况都排除了还是无法进行购买，请联系我们技术。 2.点击支付购买的时候，提示“您的购买无法完成，如需帮助，请联系iTunes支持”您好，此情况是触发了苹果公司的安全机制，例如：高频率的购买、频繁更换国家/地区购买、高额的购买等等原因，需联系苹果公司客服提供Apple ID 核实具体原因。建议直接拨打苹果客服电话： 中國大陸：400-666-8800香港（中文） ：(852) 2112-0099香港（英文）： (852) 2112-0099澳門：先撥 0800-111， 再撥 800-708-5413紐西蘭：0800127753馬來西亞：1-800803638澳洲：（61）1300321456新加坡境內： 800-186-1087新加坡境外： (65) 6835-1812印尼：08001027753日本境內： 0120-27753-5日本境外： (81) 3-6365-4705越南： 1800 1127 更多查看：联系 Apple 获取支持和服务 - Apple 支持 3.为什么我用苹果手机充值的时候偶尔会出现延迟到账的情况？苹果系统用户在使用内购服务时候，均通过苹果账号生成订单并提交给我司进行对于商品发货，费用并非由我司直接扣除，因此中间可能会产生延迟发货情况，还请在交易过程中耐心等待。 4.获取其他 iTunes 购买项目的帮助 有些超过 90 天的项目和购买不符合退款条件。请参阅条款和条件以了解更多信息。 了解 iTunes Store 购买项目如何收费 — 包括通过“家人共享”功能购买的项目。 如果您收到一封关于帐户收费的电子邮件，但您不记得授权过这笔收费，请检查确认这封电子邮件是不是合法。 获取有关通过您可能已下载到设备上的应用进行的订阅和重复购买的帮助。 获取关于 iCloud 储存空间方案降级方面的帮助。 您还可以在 App Store 或 iTunes Store 中查看购买历史记录。 5.参考 关于 App 内购买项目 - Apple 支持 如果您没有看到应用内购买项目 - Apple 支持 获取关于从 App Store、iTunes Store 或 iBooks Store 所购项目的帮助 - Apple 支持 无法内购问题检查列表 – Support Center | Grid Diary 更改或移除 Apple ID 付款信息 查看、更改或取消您的订阅 - Apple 支持 联系 Apple 获取支持和服务 - Apple 支持 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"无法内购","slug":"无法内购","permalink":"https://iHTCboy.com/tags/无法内购/"},{"name":"苹果客服电话","slug":"苹果客服电话","permalink":"https://iHTCboy.com/tags/苹果客服电话/"}]},{"title":"NSString的boolValue方法甚解","date":"2018-03-11T13:22:26.000Z","path":"2018/03/11/2018-03-11_NSString的boolValue方法甚解/","text":"1、前言NSString的boolValue之前有使用，但是一直没有真正了解什么时候返回YES（true）或NO(false)。其实，苹果在官方文档中已经写的很清楚，按command + control 点击boolValue进入文档就可以看到： &gt; boolValueThe Boolean value of the string. Declaration@property(readonly) BOOL boolValue; DiscussionThis property is YES on encountering one of “Y”, “y”, “T”, “t”, or a digit 1-9—the method ignores any trailing characters. This property is NO if the receiver doesn’t begin with a valid decimal text representation of a number.The property assumes a decimal representation and skips whitespace at the beginning of the string. It also skips initial whitespace characters, or optional -/+ sign followed by zeroes. 中文意思: 字符串中包含“Y”，“y”，“T”，“t”，或1-9的数字开关时，这个属性值为YES。 如果不是以有效的十进制数字开始的文本表示，则此属性为NO。 该属性采用十进制表示法，并在字符串的开头跳过空格。它也会跳过最初的空格字符（忽略全部的空格开头），或者单个 -/+ 符号开头。 2、测试一波大家可以思考一下，下面的代码输出结果是什么？ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546NSArray *tests = @[ @\"Y\", @\"N\", @\"T\", @\"F\", @\"t\", @\"f\", @\"1\", @\"0\", @\"Yes\", @\"No\", @\"No really no\", @\"true\", @\"false\", @\"To be or not to be\", @\"False\", @\"3567\", @\"0123456789\", @\"000\", @\"0ab\", @\"1cd\", @\"abc\", @\"\", @\"+aeb\", @\"+3sb\", @\"-ss\", @\"-01\", @\"-21\", @\" 1\", @\" 0\", @\"--1\", @\"++1\", @\"-+1\", @\" 2\", @\" 0\", @\" 2 0\", @\" 0 2\", @\" 20\", @\"000-1\", @\" + 111\", @\" +111\" ]; NSArray *boolToString = @[@\"NO\", @\"YES\"]; for (NSString *test in tests)&#123; NSLog(@\"boolValue:\\\"%@\\\" =&gt; %@\", test, boolToString[[test boolValue]]); &#125; 3、结果运行结果： 12345678910111213141516171819202122232425262728293031323334353637383940boolValue:\"Y\" =&gt; YESboolValue:\"N\" =&gt; NOboolValue:\"T\" =&gt; YESboolValue:\"F\" =&gt; NOboolValue:\"t\" =&gt; YESboolValue:\"f\" =&gt; NOboolValue:\"1\" =&gt; YESboolValue:\"0\" =&gt; NOboolValue:\"Yes\" =&gt; YESboolValue:\"No\" =&gt; NOboolValue:\"No really no\" =&gt; NOboolValue:\"true\" =&gt; YESboolValue:\"false\" =&gt; NOboolValue:\"To be or not to be\" =&gt; YESboolValue:\"False\" =&gt; NOboolValue:\"3567\" =&gt; YESboolValue:\"0123456789\" =&gt; YESboolValue:\"000\" =&gt; NOboolValue:\"0ab\" =&gt; NOboolValue:\"1cd\" =&gt; YESboolValue:\"abc\" =&gt; NOboolValue:\"\" =&gt; NOboolValue:\"+aeb\" =&gt; NOboolValue:\"+3sb\" =&gt; YESboolValue:\"-ss\" =&gt; NOboolValue:\"-01\" =&gt; YESboolValue:\"-21\" =&gt; YESboolValue:\" 1\" =&gt; YESboolValue:\" 0\" =&gt; NOboolValue:\"--1\" =&gt; NOboolValue:\"++1\" =&gt; NOboolValue:\"-+1\" =&gt; NOboolValue:\" 2\" =&gt; YESboolValue:\" 0\" =&gt; NOboolValue:\" 2 0\" =&gt; YESboolValue:\" 0 2\" =&gt; NOboolValue:\" 20\" =&gt; YESboolValue:\"000-1\" =&gt; NOboolValue:\" + 111\" =&gt; NOboolValue:\" +111\" =&gt; YES 4、总结不知道大家答对多少？是不是对这个方法又熟悉了几分呢？实践见真知。 5、参考引用 [NSString boolValue]-Manbolo Blog 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"NSString","slug":"NSString","permalink":"https://iHTCboy.com/tags/NSString/"},{"name":"boolValue","slug":"boolValue","permalink":"https://iHTCboy.com/tags/boolValue/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"两个NSInvocation崩溃引起的反思","date":"2018-03-05T15:42:26.000Z","path":"2018/03/05/2018-03-05_两个NSInvocation崩溃引起的反思/","text":"1、前言最近在使用NSInvocation进行多参数方法调用，结果就崩溃了！signature为nil 和 一直提示找不到方法！！！ method signature argument cannot be nil 崩溃信息：1234*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '+[NSInvocation _invocationWithMethodSignature:frame:]: method signature argument cannot be nil'*** First throw call stack:(0x1831a6d8c .........)libc++abi.dylib: terminating with uncaught exception of type NSException unrecognized selector sent to instance崩溃信息：1234*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[ViewController openView]: unrecognized selector sent to instance 0x10510b1b0'*** First throw call stack:(0x1831a6d8c ......)libc++abi.dylib: terminating with uncaught exception of type NSException 开始的代码： 1234567891011121314151617181920212223242526272829303132333435363738394041- (void)myInvocation &#123; SEL myMethod = @selector(sum:parm:parm:); //创建一个函数签名，这个签名可以是任意的,但需要注意，签名函数的参数数量要和调用的一致。 NSMethodSignature * sig = [[self class] instanceMethodSignatureForSelector:myMethod]; //通过签名初始化 NSInvocation * invocatin = [NSInvocation invocationWithMethodSignature:sig]; //设置target [invocatin setTarget:self]; //设置selecteor [invocatin setSelector:myMethod]; int a=1; int b=2; int c=3; /* //index为2 是因为0、1两个参数已经被target和selector占用，其实可以这样设置： ViewController * view = self; [invocatin setArgument:&amp;view atIndex:0]; [invocatin setArgument:&amp;myMethod atIndex:1]; */ [invocatin setArgument:&amp;a atIndex:2]; [invocatin setArgument:&amp;b atIndex:3]; [invocatin setArgument:&amp;c atIndex:4]; [invocatin retainArguments]; //我们将c的值设置为返回值 [invocatin setReturnValue:&amp;c]; int d; //取这个返回值 [invocatin getReturnValue:&amp;d]; NSLog(@\"%d\",d); //消息调用 [invocatin invoke]; &#125;+ (int)sum:(int)a parm:(int)b parm:(int)c&#123; NSLog(@\"sum: %d:%d:%d\",a,b,c); return a+b+c;&#125; 2、NSInvocation 注意项一直排查，开始以为是方法名写错了，认真一个一个字检查，没有错哦！！Way?! 不得而，还是在看看苹果文档！！！ instanceMethodSignatureForSelector:1+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector; Returns an NSMethodSignature object that contains a description of the instance method identified by a given selector. methodSignatureForSelector:1- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector; Returns an NSMethodSignature object that contains a description of the method identified by a given selector. 2.1 崩溃一 分析：从苹果文档可以看到，生成NSMethodSignature对象有2个方法，一个是实例方法和一个类方法。 如果SEL是类方法要使用 methodSignatureForSelector:， 如果SEL是实例方法就使用 instanceMethodSignatureForSelector: 所以，把instanceMethodSignatureForSelector: 改为methodSignatureForSelector 就解决啦！ 2.2 崩溃二 分析：有了上面的分析，崩溃二是因为 setTarget:使用实例self，而类方法应用使用类，所以修改为[invocatin setTarget:[self class]];，就解决啦！ 2.3 最终代码：123456789101112131415161718192021222324252627282930313233343536373839404142- (void)myInvocation &#123; SEL myMethod = @selector(sum:parm:parm:); //创建一个函数签名，这个签名可以是任意的,但需要注意，签名函数的参数数量要和调用的一致。 NSMethodSignature * sig = [[self class] methodSignatureForSelector:myMethod]; //通过签名初始化 NSInvocation * invocatin = [NSInvocation invocationWithMethodSignature:sig]; //设置target [invocatin setTarget:[self class]]; //设置selecteor [invocatin setSelector:myMethod]; int a=1; int b=2; int c=3; /* //index为2 是因为0、1两个参数已经被target和selector占用，其实可以这样设置： ViewController * view = self; [invocatin setArgument:&amp;view atIndex:0]; [invocatin setArgument:&amp;myMethod atIndex:1]; */ [invocatin setArgument:&amp;a atIndex:2]; [invocatin setArgument:&amp;b atIndex:3]; [invocatin setArgument:&amp;c atIndex:4]; [invocatin retainArguments]; //我们将c的值设置为返回值 [invocatin setReturnValue:&amp;c]; int d; //取这个返回值 [invocatin getReturnValue:&amp;d]; NSLog(@\"%d\",d); //消息调用 [invocatin invoke]; &#125;+ (int)sum:(int)a parm:(int)b parm:(int)c&#123; NSLog(@\"sum: %d:%d:%d\",a,b,c); return a+b+c;&#125; 3、总结出现这样一个问题，直接说明平时没有关注文档和API实现，当前NSInvocation不常用，但是这次排查也用半天时间，有时候怀疑自己代码时，还是要从根本上找原因——— 从官方文档重新开始！ 另外，复制网上的代码是一个危险的动作，不求甚解有时候坑就越深，希望自己以后不懂的知识要使用时，除了工期赶&amp;复制，还要及时补充自己的空白，知其码，并知其然！努力成为一个优秀工程师！严谨！ 4、参考引用 objective c - How can I invoke a class method by NSInvocation? - Stack Overflow NSInvocation - Foundation | Apple Developer Documentation methodSignatureForSelector: - NSObject | Apple Developer Documentation instanceMethodSignatureForSelector: - NSObject | Apple Developer Documentation 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"NSInvocation","slug":"NSInvocation","permalink":"https://iHTCboy.com/tags/NSInvocation/"},{"name":"NSMethodSignature","slug":"NSMethodSignature","permalink":"https://iHTCboy.com/tags/NSMethodSignature/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"Gitment评论功能接入踩坑教程","date":"2018-02-25T04:45:26.000Z","path":"2018/02/25/2018-02-25_Gitment评论功能接入踩坑教程/","text":"1、前言之前接入的评论功能，都因为各种原因被放弃了，今天从新计划接入评论功能，所以就有了今天这篇文章。 2、评论模块简介 多说 - 最多用户使用的评论，但遗憾2017年6月将暂定服务；不建议新用户使用，但为旧用户保留，也感谢多说一路的陪伴； 网易云跟帖 - 网易提供的评论组件，功能比较简单，性能优秀；管理后台在查询上还不算特别智能，但足够普通用户使用； 畅言 - 搜狐提供的评论组件，功能丰富，体验优异；但必须进行域名备案。只要域名备过案就可以通过审核，简单问题复杂化。 Disqus - 国外使用较多的评论组件。万里长城永不倒，一枝红杏出墙来，你懂的。 以上评论模块应该大家都知道，多说和网易云跟帖没有了，畅言要备案，对于只是挂靠在GitHub的博客非常的不友好，放弃！Disqus，我们都希望自己的博客可以不分国界！所以Disqus也只能放弃！ 综上所述，将是我们要重点介绍的Gitment ！！！ 3、Gitment评论模块 Gitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation. Gitment 基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。 想了解具体示例，可以点击查看官方Demo Page：Gitment Demo 具体的接入我就不在这里说了，本文末有参考链接大家可以去了解学习，主要是说一下其中的坑点。 4、Gitment坑点小结4.1、owner: ‘Your GitHub ID’ owner: &#39;你的 GitHub ID&#39;, 可以是你的GitHub用户名，也可以是github id，建议直接用GitHub用户名就可以。 4.2、repo: ‘The repo to store commentsrepo: &#39;存储评论的 github repo&#39;这个是你要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的。 4.3、Error: Not Found问题owner或者repo配置错误了，注意名字和仓库名字的大小写。 4.4、Error: Comments Not Initialized 在注册OAuth Application这个步骤中，给Authorization callback URL指定的地址错了 还没有在该页面的Gitment评论区登陆GitHub账号 如果还是不行，可以参考另一个情况 Error: Comments Not Initialized · Issue #95 · imsun/gitment 4.5、Error：validation failedissue的标签label有长度限制！labels的最大长度限制是50个字符。 id: &#39;页面 ID&#39;, // 可选。默认为 location.href 这个id的作用，就是针对一个文章有唯一的标识来判断这篇本章。 在issues里面，可以发现是根据网页标题来新建issues的，然后每个issues有两个labels（标签），一个是gitment，另一个就是id。 所以明白了原理后，就是因为id太长，导致初始化失败，现在就是要让id保证在50个字符内。 对应配置的id为：1id: '&lt;%= page.title %&gt;' 如果用网页标题也不能保证在50个字符！ 最后，我用文章的时间，这样长度是保证在50个字符内，完美解决！1id: '&lt;%= page.date %&gt;' 注意事项： 用文章时间，避免了文章每次更新标题或路径时，会重新创建一个issue评论的问题，也解决了label长度问题。 关于Gitment的id在那里修改的问题，大家需要根据自己使用的主题，找到id配置的位置进行修改。（ps 可以在主题的github仓库中搜索gitment来定位） 4.6、gitment的汉化只需到模板里将原来定义CSS和JS的那两行改成：12&lt;link rel=\"stylesheet\" href=\"https://billts.site/extra_css/gitment.css\"&gt;&lt;script src=\"https://billts.site/js/gitment.js\"&gt;&lt;/script&gt; 即可。来源：https://github.com/imsun/gitment/issues/104 4.7、所有文章一键初始化评论配置正确的文章，第一次显示，提示还没有初始化： 文章作者需要登陆GitHub授权后，会显示初始化按钮(注意，不要多点按钮，否则issues出现多条一样的)： 点击初始化按钮后，如果正常就会出现： 关于自动初始化所有文章的功能，到本文编写时，还没有一个完善的解决方法，就是用脚本来执行自动化，有需要的可以详细了解：https://github.com/imsun/gitment/issues/5 4.8、请保持克制，切勿滥用。作者提醒使用本项目的用户，请保持克制，切勿滥用。详见 Gitment：使用 GitHub Issues 搭建评论系统 4.9、订阅issueissue订阅，有新评论时就可以通过邮件提醒，这个功能是把双刃剑，因为有些垃圾订阅邮件骚扰，大家看着用吧。 5、总结Gitment目前来说，已经解决了一个博客简单的评论功能，点赞 / 有完整的 Markdown / GFM 和代码高亮支持! 通过Gitment至少可以证明一点，生产力的发展有无限可能，环境的限制，会有的各种奇异的想法，或者奇异的东西出现，Gitment就是一个完美的证明，充分解决了一个简单博客的评论功能。另一方面，与国内的生活要求，希望大家能够遵守规则，让GitHub和Gitment在我们生活中快乐成长！ 6、参考引用 GitHub imsun/gitment: A comment system based on GitHub Issues. Gitment Demo Gitment：使用 GitHub Issues 搭建评论系统 | I’m Sun 添加Gitment评论系统踩过的坑 | XiChen’s Blog Hexo博客框架下Gitment取代多说评论 | 仁伯安 GITMENT系统VALIDATION FAILED问题的解决 所有文章一键初始化评论 · Issue #5 · imsun/gitment 评论框汉化问题 · Issue #104 · imsun/gitment Error: Comments Not Initialized · Issue #95 · imsun/gitment 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Gitment","slug":"Gitment","permalink":"https://iHTCboy.com/tags/Gitment/"},{"name":"博客评论功能","slug":"博客评论功能","permalink":"https://iHTCboy.com/tags/博客评论功能/"},{"name":"评论配置","slug":"评论配置","permalink":"https://iHTCboy.com/tags/评论配置/"}]},{"title":"免费将音频转成文字的快速方法","date":"2018-02-23T15:30:36.000Z","path":"2018/02/23/2018-02-23_免费将音频转成文字的快速方法/","text":"1、前言最近在看YouTube视频时，里面有自动字幕功能，当时非常激动，字幕很准确；其实YouTube这个功能在2010就上线了。今天就是想利用YouTube这个强大的功能，将音频转换成文本啊！因为尝试了讯飞和百度后，不只是收费，准确率也不好，特别是英文。 2、自己的音频（视频）如果是视频，直接在YouTube上传就可以，如果是音频，YouTube不接受纯音频文件。所以，我们得通过第三方网站 TunesToTube - Upload 上传，给音频配上画面。 上传音频后转换视频： 在YouTube视频管理，查看刚才上传的视频，需要等待一下，会自动生成字幕： 可以查看自动生成的字幕，并且下载！ 3、YouTube的视频如果是YouTube上已经有的视频，你想下载字幕，则可以通过第三方API来下载完整的字幕，以下是用 - YouTube字幕下载 网站示意: 选择下载的字幕： 下载的字幕示意： 4、总结随着今年AI人工智能的发展，谷歌的自动翻译已经给世界带来了巨大的改变，相反国内，其实一直在说AI，却没有做出大的变化，就像优酷，没有考虑谷歌的强大，一直与爱x艺视频，腾x视频都在为版本争，而且国内都是综艺视频占大头，有点可惜。希望，AI在未来能解决更多简单操作但繁琐的重复劳动工作的问题，一起加油！ 5、参考引用 一款自动、免费整理英文录音的神器，居然是它 TunesToTube - Upload YouTube字幕下载_Vimeo字幕下载Download Youtube and Vimeo Captions(Subtitles)朱炜 推荐YouTube视频自动识别字幕的下载工具 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"YouTube字幕","slug":"YouTube字幕","permalink":"https://iHTCboy.com/tags/YouTube字幕/"},{"name":"字幕下载","slug":"字幕下载","permalink":"https://iHTCboy.com/tags/字幕下载/"},{"name":"自动翻译","slug":"自动翻译","permalink":"https://iHTCboy.com/tags/自动翻译/"},{"name":"音频转文本","slug":"音频转文本","permalink":"https://iHTCboy.com/tags/音频转文本/"}]},{"title":"利用iPhone“破解”下载百度云文件限速问题","date":"2018-02-16T09:12:16.000Z","path":"2018/02/16/2018-02-16_利用iPhone“破解”下载百度云文件限速问题/","text":"1、前言最近想下载一个资源，找到百度网盘的，文件总大小871.84M，下载速度100kb/s，没有开会员，这速度有良心了！but，下载到300多m就断开了！！！wtf！！！然后网上找到 Aria2GUI，然后发现，现在百度网盘已经封杀了。 纠结，开会员？这是一个伪需求，因为自己不经常使用百度网盘，就下载一次开一次会员15元，不是说这个贵，总会觉得感觉有点大财小用的样子，所以如果百度云能推出下载一次一分钱或一毛钱酱紫，我觉得是可以接受的。好了，废话就不多说了，今天我们的另一个方法吧。 2、打开iPhone百度网盘下载因为发现用手机百度网盘App下载，网速是根据你的网线速度决定的，不需要开通会员，网速也不会受到限制。因为百度网盘下载上的资源是不能分享到其它应用的（.rar、.zip、视频等），所以没有网速的限制吧！？ 正是利用这点，百度网盘找到你要下载的文件，点击下载就可以了，下载完后就是好事！接下来要考虑的是怎么把下载好的文件，拉出来！ 3、打开iTunes提取文件用iTunes找到手机，点击手机查看手机信息，点击文件共享，找到百度网盘的文稿： 把拖拽出来的文件，找到Cache文件，里面就是缓存的资源，包括下载的文件、在线看的视频内容、预览的图片等。 4、总结利用这个方法，我在家里网速10M情况下，不到半个小时，就已经下载完这个文件并且得到源文件！！所以比用其他的下载方法方便可靠又安全。用官方的应用下载确实是便捷！密码帐号这些都不会外漏，无安全的隐患。在这里祝大家玩得开心，下载的开心，新年快乐！ 5、参考引用 Aria2GUI iPhone的百度云下载的压缩包如何用其他软件解压？ - 知乎 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"百度云下载","slug":"百度云下载","permalink":"https://iHTCboy.com/tags/百度云下载/"},{"name":"百度网盘限制","slug":"百度网盘限制","permalink":"https://iHTCboy.com/tags/百度网盘限制/"},{"name":"破解下载限速","slug":"破解下载限速","permalink":"https://iHTCboy.com/tags/破解下载限速/"}]},{"title":"关于16进制颜色值转换为UIColor的思考","date":"2018-02-07T12:26:16.000Z","path":"2018/02/07/2018-02-07_关于16进制颜色值转换为UIColor的思考/","text":"1、前言大家都知道iOS的UIColor提供的自定义初始化是通过RGB(A) 4个10进行制的参数，那么为什么用16进制呢？因为web和安卓端以常识性用16进制读取，所以为了方便设计师出图标注，很多时候都是16进制的效果图。而今天就是要讨论一下，这个16进制的转换的方法。 网页颜色 - 维基百科: 在HTML和CSS中使用3字节共6个十六进制数字表示一种颜色，每字节从00到FF，相当十进位数字从0到255，按顺序前两位是红色的值，中间两位是绿的值，最后两位是蓝色的值。 由于网页（WEB）是基于计算机浏览器开发的媒体，所以颜色以光学颜色RGB（红、绿、蓝）为主。 网页颜色是以16进制代码表示，一般以“#”号开头，后面分别为R、G、B的16位进制数。 FF为最大数，代表十进制255。比如白色是R、G、B三个颜色最大，在网页代码便是：#FFFFFF。黑色是三个颜色为0，在网页代码便是：#000000。当颜色代码为#XXYYZZ时，可以用#XYZ表示，如#135与#113355表示同样的颜色。在CSS中，也可以使用rgb(127,127,127)代替#7F7F7F（十进制表示）。 有意思的是，可以知道表示颜色数总共有： 256^3 = 16,777,216 种，这个颜色就是我们常说的真彩色。 2、几种16进制颜色值转换UIColor的方式16进制转换为10进制后的整形转换为UIColor： 12// rgb颜色转换（rgbValue为16进制转换成10进制的整形）#define MACRO_COLOR_HexCOLOR(rgbValue) ([UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0f green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0f blue:((float)(rgbValue &amp; 0xFF))/255.0f alpha:1.0]) 方法一： 12345678910#pragma mark -16进制颜色值转化UIColor+ (UIColor *)colorFromHexString:(NSString *)hexString&#123; unsigned rgbValue = 0; NSScanner *scanner = [NSScanner scannerWithString:hexString]; [scanner setScanLocation:1]; // bypass '#' character [scanner scanHexInt:&amp;rgbValue]; // Optionally prefixed with \"0x\" or \"0X\" return MACRO_COLOR_HexCOLOR(rgbValue);&#125; 这种方法，只能输入以#开头的十六进制颜色，比如#3c93fd，如果输入0X3c93fd，最后都会得到黑色。（因为rgbValue为0，所以全部颜色为0，得到黑色。） 方法二： 1234567+ (UIColor *)colorWithHexString:(NSString *) hexString &#123; NSScanner *scanner = [NSScanner scannerWithString: hexString]; unsigned hexNum; if (![scanner scanHexInt:&amp;hexNum]) return nil; return MACRO_COLOR_HexCOLOR(hexNum);&#125; 这种方法，只能输入以0X或0x开头的十六进制颜色，比如0x3c93fd，如果输入#3c93fd，最后都会得到nil（透明）。（scanner转换10进制失败，hexNum为0，但是直接return nil，） 方法三： 12345678910111213141516171819202122232425262728293031323334353637383940414243// 颜色转换三：iOS中十六进制的颜色（以#开头）转换为UIColor+ (UIColor *) colorWithHexString: (NSString *)color&#123; NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString]; // String should be 6 or 8 characters if ([cString length] &lt; 6) &#123; return [UIColor clearColor]; &#125; // 判断前缀并剪切掉 if ([cString hasPrefix:@\"0X\"]) cString = [cString substringFromIndex:2]; if ([cString hasPrefix:@\"#\"]) cString = [cString substringFromIndex:1]; if ([cString length] != 6) return [UIColor clearColor]; // 从六位数值中找到RGB对应的位数并转换 NSRange range; range.location = 0; range.length = 2; //R、G、B NSString *rString = [cString substringWithRange:range]; range.location = 2; NSString *gString = [cString substringWithRange:range]; range.location = 4; NSString *bString = [cString substringWithRange:range]; // Scan values unsigned int r, g, b; [[NSScanner scannerWithString:rString] scanHexInt:&amp;r]; [[NSScanner scannerWithString:gString] scanHexInt:&amp;g]; [[NSScanner scannerWithString:bString] scanHexInt:&amp;b]; return [UIColor colorWithRed:((float) r / 255.0f) green:((float) g / 255.0f) blue:((float) b / 255.0f) alpha:1.0f];&#125;作者：艳晓链接：https://www.jianshu.com/p/96835798e4fc 这种方法，做了0x和#判断，但是为什么那么长！！！有没有办法优化？ 3、优化的方法？因为用了NSScanner进行转换，所以为什么不用NSScanner直接判断，然后转换呢？另外苹果文档注释： 1- (BOOL)scanHexInt:(nullable unsigned *)result; // Optionally prefixed with \"0x\" or \"0X\" 所以，其实用NSScanner进行转换时，不用判断 “0x” or “0X”，所以直接判断 #后过滤掉(跳过)就可以啦！！！ 直接看代码吧，发现看代码比文字更有力！： 123456789101112+ (UIColor *) colorWithHexString:(NSString *)hexString &#123; NSScanner *scanner = [NSScanner scannerWithString:hexString]; //从当前的扫描位置开始扫描，判断扫描字符串是否从当前位置能扫描到和传入字符串相同的一串字符，如果能扫描到就返回YES，指针指向的地址存储的就是这段字符串的内容。 [scanner scanString:@\"#\" intoString:NULL]; unsigned rgbValue = 0; [scanner scanHexInt:&amp;rgbValue];// Optionally prefixed with \"0x\" or \"0X\" return MACRO_COLOR_HexCOLOR(rgbValue);&#125; 上面的scanString: intoString:方法是一个技巧，判断是否包含#，如果包括时，scanner的scanLocation会指向下一个字符。所以用scanHexInt:将十六进制无符号整形时，已经不包含#，所以能成功转换。 4、参考引用 uicolor-utilities/UIColor-Expanded.m at master · kballard/uicolor-utilities iOS中十六进制的颜色转换UIColor（RGB） - 简书 NSScanner：一个陌生的条件判断利器 - 简书 NSScanner类的基本用法 - CSDN博客 NSScanner使用详解 - 简书 网页颜色 - 维基百科 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"16进制颜色","slug":"16进制颜色","permalink":"https://iHTCboy.com/tags/16进制颜色/"},{"name":"NSScanner","slug":"NSScanner","permalink":"https://iHTCboy.com/tags/NSScanner/"},{"name":"UIColor","slug":"UIColor","permalink":"https://iHTCboy.com/tags/UIColor/"}]},{"title":"Mac查看文件内容常用的命令小结","date":"2018-02-04T14:04:16.000Z","path":"2018/02/04/2018-02-04_Mac查看文件内容常用的命令小结/","text":"前言最近苹果的热更新和私有库问题检查的更严了，如果应用被拒，苹果在拒绝信中会说到使用strings/otool/nm命令进行自查，所以总结了一些命令，方便查找和定位文件内容相关信息。 1、grep 作用：判断是否包含字符串 使用示例： grep -r &quot;xxx” path 检查是否包含（weixin）字符串： matches 表示包含。 2、strings 作用：find the printable strings in a object, or other binary, file 使用示例： strings a.out | grep hello //检查 a.out 文件中含有 hello 字符串的字节序列 检查二进制是否含有关键词的库（比如检查私有库）： 更多使用说明 man strings 3、otool 作用： object file displaying tool. (针对目标文件的展示工具，用来发现应用中使用到了哪些系统库，调用了其中哪些方法，使用了库中哪些对象及属性) 使用示例： otool -L path //查看可执行程序都链接了那些库 otool -L path | grep &quot;xxx&quot; //筛选是否链接了xxx库 otool -D path //查看支持的架构 otool -ov path //output the Objective-C class structures and their defined methods.(输出Object-C类结构以及定义的方法) 查看该应用是否砸壳: otool -l path | grep crypt //cryptid 0（砸壳） 1（未砸壳） 更多用法 man otool 4、nm 作用：display name list (symbol table). (显示符号表) 使用示例： nm path //得到Mach-O中的程序符号表 nm -nm path//目标文件的所有符号 符号表中标示为 undefined，意思是目标文件引用了类_XXX（XXX库），不过这并没有实现它。 nm -u path //Display only undefined symbols. 更多用法 man nm 5、file 作用：determine file type. (判断文件类型) 使用示例： file path 判断.a/framework是静态库还是动态库:静态库：动态库： 6、lipo 作用：create or operate on universal files（创建或处理通用文件的工具） 使用示例： lipo -info &#39;file path&#39; // 判断静态库所支持的平台 - i386 armv7 armv7s x86_64 arm64 lipo -remove i386 origin_xxx.a -output op_xxx.a // 删除静态库包括的i386平台 lipo -thin i386 origin_xxx.a -output op_xxx.a // 拆分静态库，只保留i386 CPU架构 lipo -create device_xxx.a simulator_xxx.a -output universal_xxx.a //对真机或者模拟器分别打出 .a 文件合并 7、参考阅读 “nm tool” Xcode manual page iOS-private-api-scanner/iOS私有API扫描工作总结· mrmign/iOS-private-api-scanner iOS-private-api-checker苹果iOS私有API检查工具 iOS开发-如何判断framework是动态库或静态库以及framework静态库转.a静态库 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"grep","slug":"grep","permalink":"https://iHTCboy.com/tags/grep/"},{"name":"iOS命令行","slug":"iOS命令行","permalink":"https://iHTCboy.com/tags/iOS命令行/"},{"name":"lipo","slug":"lipo","permalink":"https://iHTCboy.com/tags/lipo/"},{"name":"mac命令行","slug":"mac命令行","permalink":"https://iHTCboy.com/tags/mac命令行/"},{"name":"nm","slug":"nm","permalink":"https://iHTCboy.com/tags/nm/"},{"name":"otool","slug":"otool","permalink":"https://iHTCboy.com/tags/otool/"},{"name":"strings","slug":"strings","permalink":"https://iHTCboy.com/tags/strings/"}]},{"title":"让你的iTerm更Geek!","date":"2018-02-03T15:42:16.000Z","path":"2018/02/03/2018-02-03_让你的iTerm更Geek!/","text":"1、前言iTerm2 作为一个免费&amp;开源的应用，Mac程序员应用必备的软件！作为一个专业的终端，功能真的很强大，iTerm + oh-my-zsh 应作为最佳配置使用！ 2、一键调出 iTerm2 我们有时会遇上这样一种情况，就是我们只想用命令行执行某一个特定的操作，然后就不需要它了。其实在这种情况下我们没有必要打开命令行应用的。比如我们就是想看一眼某个文件夹里面都有什么文件，类似这种操作我们其实没有必要单独开启一个命令行窗口的。 然后网上找到的配置是这样的，设置HotKey：打开iTerm的Preperence → Profiles → Keys → HotKey 进行勾选设置 Show/hide iTerm2 with a system-wide hotkey Hotkey toggles a dedicated window with profile勾选上面的两个选项，关闭iTerm2，然后再次打开，任意应用程序界面按快捷键尝试一下。你会爱上这个感觉。 然而！！！没有找到 Hotkey toggles a dedicated window with profile 这个选项！！！ 我是使用 iTerm2( Build 3.1.5.beta.2): Way! way!! way!!!原来新版已经移动到对应的Profiles下的Keys下： 设置一下热键就可以啦！ 实用&amp;装逼时间： 有时候想快速打开，真的很方便！ 3、iTerm2 光标按照单词快速移动设置在Mac自带的终端中是可以使用 option+←和option+→ 这两个快捷键实现光标按照单词快速移动，但是发现iTerm用这个快捷键没有反应！！！每次只能用ctrl + f/b一个个字符移动，效率非常低！经过搜索，发现需要重新配置相应的映射。 打开iTerm2的 Preferences -&gt;选择相应的 Profile（默认为Default），选择“Keys”选项卡，然后可以在Key Mappings看到option+←和option+→ 这两组快捷键用作了其他功能，这里我们只需要重新绑定新的映射即可（下图是已经绑定之后的新映射）。 分别修改option+←和option+→的映射如下图所示，选择Action为“Send Escape Sequence”，然后输入“b”和“f”即可。 4、iTerm2 备忘命令行快捷键 快捷键 作用说明 command + f 搜索&amp;查找，如果输入搜索内容后，按下 tab 键，就会 iTerm 自动帮选中搜索关键词，并且自动的帮我们复制到了剪贴板中。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。按 esc 退出搜索。 command + k 清空屏幕 command + d 垂直分屏 command + shift + d 水平分屏 command + ; 查看历史命令 command + shift + h 查看剪贴板历史，会自动列出输入过的命令 command + number tab 标签窗口来回切换 command + option + ←/→ 或 command + [ / ] 切换屏幕 ctrl + x 第一次按时，移动光标至行首；再次按时，回到原有位置 ctrl + a 到行首（Ahead of line） ctrl + e 到行尾（End of line） ctrl + f/b 前进后退(相当于左右方向键) ctrl + u 清除当前行（无论光标在什么位置） ctrl + d 删除光标当前位置的字符 ctrl + h 删除光标之前的字符 ctrl + w 删除光标之前的单词 ctrl + k 删除光标当前位置到文本末尾的所有字符 ctrl + t 交换光标当前位置的字符与前一个字符的位置 ctrl + c 或 ctrl + j 或 ctrl + o 取消当前行输入的命令（中断操作）。重新起一行。 ctrl + y 粘贴之前（ctrl +u/k/w）删除的内容 ctrl + p 上一条命令。调出命令历史中的前一条（Previous）命令，相当于通常的上箭头 ctrl + n 下一条命令。调出命令历史中的下一条（Next）命令，相当于通常的上箭头 ctrl + s 冻结终端操作（暂停脚本） ctrl + q 恢复冻结（继续执行脚本） ctrl + r 搜索命令历史。根据用户输入查找相关历史命令（reverse-i-search） ctrl + l 或 command + r 或 clear 换到新一屏，创建一个空屏 ctrl + i 或 tab 横行制表符，在命令行中补齐指令 !word 重复运行最近一条以“word”开头的指令，如!ls 或 !l !$ 调用上一条指令的最后一个参数作为当前指令对象,如，假设上一条指令为： ls abc.txt bbc.txt 那么， vi !$ 相当于： vi bbc.txt !number 调用执行指定编号的历史记录指令,如!2, !11 5、参考引用 打造高效个性Terminal（一）之 iTerm | BlueSun 让你的Mac更Geek（逼格） - 简书 iTerm - 让你的命令行也能丰富多彩 - SwiftCafe 享受代码的乐趣 Mac下iTerm2光标按照单词快速移动设置 - CSDN博客 OS X 下的 iTerm 2 如何让 cursor 跳字移动？ · Ruby China iTerm2 快捷键大全 - 陈斌彬的技术博客 Mac 终端Terminal光标移动快捷键 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Terminal","slug":"Terminal","permalink":"https://iHTCboy.com/tags/Terminal/"},{"name":"iTerm进阶","slug":"iTerm进阶","permalink":"https://iHTCboy.com/tags/iTerm进阶/"},{"name":"命令行快捷键","slug":"命令行快捷键","permalink":"https://iHTCboy.com/tags/命令行快捷键/"}]},{"title":"装逼神句———有道词典命令行查询工具","date":"2018-01-29T00:49:16.000Z","path":"2018/01/29/2018-01-29_装逼神句———有道词典命令行查询工具/","text":"1、装逼说明不喜欢安装有道词典的应用程序，因为太耗资源还一堆广告，但是用浏览器打开dict.youdao.com也挺麻烦的，不是吗？快来试试有道词典命令行工具吧！ 2、看图装逼 3、自已装逼3.1 安装1npm install yddict -g 3.2 使用说明1yd &lt;要查询的单词&gt; 在/usr/local/lib/node_modules/yddict/目录下，可以进行一些自定义，或者更改查询的来源，主要源码 index.js： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#!/usr/bin/env nodeconst request = require('request');const cheerio = require('cheerio');const chalk = require('chalk');const fs = require('fs');const Spinner = require('cli-spinner').Spinner;const isChinese = require('is-chinese')const urlencode = require('urlencode');const spinner = new Spinner('努力查询中... %s');const home = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];const configFile = home + \"/config.json\";let color = 'gray';//更改查询结果的文字颜色spinner.setSpinnerString('|/-\\\\');spinner.start();const readFile = (filename, encoding) =&gt; &#123; try &#123; return fs.readFileSync(filename).toString(encoding); &#125; catch (e) &#123; return null; &#125;&#125;;const config = JSON.parse(readFile(configFile,\"utf8\"));const input = process.argv.slice(2)const word = input.join(' ')const isCn = isChinese(word);const URL = isCn ? `http://dict.youdao.com/w/eng/$&#123;urlencode(word)&#125;`:`http://dict.youdao.com/w/$&#123;urlencode(word)&#125;`const options = &#123; 'url':URL&#125;;if(config)&#123; if(config.proxy)&#123; options.proxy = config.proxy; &#125; if(config.color)&#123; color = config.color; &#125;&#125;const color_output = chalk.keyword(color);request(options,(error, response, body)=&gt;&#123; const $ = cheerio.load(body, &#123; ignoreWhitespace: true, xmlMode: true &#125;); let result = ''; spinner.stop(true); if(isCn)&#123; $('div.trans-container &gt; ul').find('p.wordGroup').each(function(i,elm)&#123; result = $(this).text().replace(/\\s+/g,\" \"); &#125;); &#125;else&#123; result = $('div#phrsListTab &gt; div.trans-container &gt; ul').text(); &#125; // phrase if (result === '') &#123; result = $('div#webPhrase &gt; p.wordGroup').text(); &#125; // sentence if (result === '') &#123; result = $('div#fanyiToggle &gt; div.trans-container &gt; p:nth-child(2)').text(); &#125; console.log(color_output(result));&#125;); 4、装逼指导 kenshinji/yddict: 一个命令行查单词的工具💻 📚 npm-有道词典命令行查询工具 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"命令行查单词","slug":"命令行查单词","permalink":"https://iHTCboy.com/tags/命令行查单词/"},{"name":"有道词典","slug":"有道词典","permalink":"https://iHTCboy.com/tags/有道词典/"}]},{"title":"iOS 应用内评分功能简介","date":"2018-01-20T11:49:16.000Z","path":"2018/01/20/2018-01-20_iOS应用内评分功能简介/","text":"1、前言iOS 终于开发应用内评星和评论功能啦！不用每次跑到AppStore，这样用户体验越来越好！这也是苹果开放和进步地方，希望大家不要总以为创新就是新事件！也许新东西不是好东西~ 2、使用说明接口调用123456789101112@available(iOS 10.3, *)open class SKStoreReviewController : NSObject &#123; /** Request StoreKit to ask the user for an app review. This may or may not show any UI. * * Given this may not succussfully present an alert to the user, it is not appropriate for use * from a button or any other user action. For presenting a write review form, a deep link is * available to the App Store by appending the query params \"action=write-review\" to a product URL. */ open class func requestReview()&#125; 没有什么特点，直接调用就好： 1234567import StoreKitif #available(iOS 10.3, *) &#123; SKStoreReviewController.requestReview() &#125; else &#123; //跳转AppStore &#125; 显示样式正式环境下，调用接口后，一年内只会显示3次。可以选择打分，或者以后。显示界面： 打分后，可以确定要提交，或者取消。 如果点击提交，会提示是否要撰写评论，如果点击 好 就关闭页面。如果点击撰写评论,就会打开详细的评论页面。 这个评价页面跟在 AppStore 上的评价页面是一样的，可以填写标题和内容。 注意事项 应用内评分功能只能在iOS 10.3 以上使用 在 iTunes Connect 可以查看、筛选、回复评论 AppStore 默认显示最新版本应用的评分和评论 从第一次评分弹窗开始，评分弹窗在365天内只能显示3次 评分弹窗是标准化UI，不提供自定义 dev模式下一直可以显示评分视图，dis模式下使用 TestFlight 点击不会显示 在打5星⭐，点击提交后，可以再次选择是否要文字评论，如果不需要就可以关闭窗口啦 文字评论也可以跳转到 AppStore 里进行，在 AppStore 应用下载链接后面拼接查询参数 “action=write-review” 【注：不限制 iOS 系统版本，都可以跳转到 AppStore 打开评价页面】 参考 App Review 概述 应用内评价功能 回复评论功能 评论功能的用户交互指南 相关 API 开发技术文档 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"StoreKit","slug":"StoreKit","permalink":"https://iHTCboy.com/tags/StoreKit/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"requestReview","slug":"requestReview","permalink":"https://iHTCboy.com/tags/requestReview/"}]},{"title":"你好，2018！","date":"2018-01-01T13:49:16.000Z","path":"2018/01/01/2018-01-01_你好，2018！/","text":"德鲁克在《管理的实践》中写道：“管理者很多时候在做决策的时候，都是在分析未来有可能有什么市场环境的变化，这些变化会有什么机会。” 序言这一年，在生命中非常有意义的一年，从创业者离场，回到一个中型企业，改变非常大。从职场熟人到职场老油条？毕业不知觉已经3年多了，有时还会回忆美好的学生时代，有时在想大学时在努力一点，也许现在生活更加美好一点啦。一路走过的2017，经历了非常之多，是时候在尘封前记录下来吧！ 第一章 创业公司的离开想起2016年初，辞职后就跟同事开始了创业公司，见证公司从无名，到有名，到离开时6人的团队，也换过了鲜血，一路走过来，确实不容易。其实，刚开始有同事离开时，自己心里确实很难过，一起就是兄弟，一样拼博，刚开始想不通，内心不能接受，慢慢的就理解了，其实就像自己当初离开上家公司一样，地球总是在转运，我们的离开只是一点一滴，生活还在，大家都没有离开。开怀，要情商高，经历多了自然会提升。 其中，最想谈的，还是我们的老板，他让我相信，如果经历没有达到量变，思维能力是感悟不出来的，除了技术是死知识，活的能力，只有多经历，然后多听，听听别人的脑海，自己的世界就会更大！ 最后，很非常我们的团队，在这样创业环境中，我们努力了，进步了，虽然我们只是创业大军时的一个缩影，在这个美好的时代，能够参与创业，见证一个公司的成立，这是像一个生命的诞生，充满着创业者的心血，希望大家以后看到创业公司和创业者，要多一点理解和多一份帮忙，也许一个公司的生死就在你的手里~ 第二章 说走就走的旅行年初离职后，选择给自己放松一下，说走就走，最后选择了去云南看雪。有意思的事，朋友圈大家都说冬天去云南风景不够美。事实证明，也只有自己去到，才能感觉到当地风俗文化，建筑人情。春夏秋冬，风景别致！ 云南确实是一个不错的地方，丽江的古韵，香格里拉的风情，大理的庙石，昆明的春天，值得一去。 在夏末时，去惠州看海，比之前去的珠海更漂亮，海更大，水更青，一个周末的时间有点紧凑，所以享受不了海水的温暖，在一个异地，另有一番滋味~ 另外今年办了港澳通行证和护照，但是入职新公司，就是没有更多的时间能够真正的给自己去一个更好的，或者说更加幻想的地方，去体验更多的世界角落，更美好的东西，更漂亮的东西，更加广阔的眼界。希望2018年，给自己更多的高度和视觉，凤凰涅磐！ 第三章 团队的魅力在2017年之前的工作，虽然公司也有团队，但这个阶层是不一样的。之前都是自己负责iOS的全部开发工作，现在是，在一个iOS的团队里，这是一个团队协作！ 团队协作能力，一直是我缺失的重要一部分。工作不在是的一亩三分地，每做一个git commit 都要考虑清楚，不仅仅是对团队的影响，严重的会影响整个项目，并且整个项目你并不能够从整体上把握，这是很可怕的事情。一个big team，只有在一个团队中，才能感受到团队的力量，并且希望大家遵守规则，一起努力的做好。 团队管理能力，说到管理，层次提升了，需要的能力也更高了，咱现在的条件，我确实是没有这样的能力去做一个团队的管理。我希望自己能够再接再厉，今年努力的去尝试，管理的经验不会白来，自己要珍惜这样的机会。 第四章 公司的氛围拒绝老油条。 虽然我工作了几年，这个时候大家都变成老油条，工作的事件能推掉就推掉，能闲着就玩游戏，能早点下班了就早点走。不能说不把公司当成家，是没有错的；但是没有把工作做好，我觉得这是很不应该的。 希望自己拒绝老油条！务实基础，努力进取！ 公司的环境，是我工作以来，最好的氛围啦。 团队协作，git管理，谷歌搜索，英文文档，韩文文档，各种国外的文化，感受各地的特色，慢慢地发现自己太渺小了，自己了解了太少了，自己确实对这个世界并不熟悉。 “人穷志短”实在是太精辟了。最近大家说的『贫穷限制了我的想象力』，我是发现程序员们都越来越限制自己的能力，满足不了自己的工作，满足不了自己的欲望，只是轻声叹息。愿大家，不要把责任都推到公司，多从自己找些原因，然后克服自己，战胜自己！ 第五章 中年危机？二十七八的年轻人，开始考虑人生的发展和最终的归属，我不能说这是没有根据，但实在是自己给自己限制了想像力。 正如下图，给自己一个最终的目标吧，程序员职业发展路线： 其实我觉得没什么压不压力的，没什么中年不中年危机的，主要是因为你们的脑海中都是有家庭，上有老下有小，家庭压力大，然后在中国传统的世界观里面总是有家，然后就买房买车，要各种的生活需求。然后自己团不过气来吧！其实自己学会放松，无欲无求，也就这样子，就像国外的程序员一样，没有说什么，困不困难了，没工作就没工作，该生活还是要生活。把这种做技术和做管理作为一种自己的兴趣，把上班当成了自己的爱好，当成自己想要做的事情，那你就不会觉得有什么危机，工作就是你的生活，生活就是工作，把生活和工作作为生活的一部分，那也是一个很好的理想。还怕自己每天总是想着我被辞退，我被炒鱿鱼，甚至说我自己活不下去，我自己老了，又何必。学会居安思危，但是同时也不要杞人忧天。生活每天都是充满了挑战，充满了学习，自己快乐就好！但愿，你能懂！ 第六章 学习的动力2017年，在深蹲iOS中，也在耕耘Swift。专注于iOS开发，喜欢移动开发，在学习Android/Python/bash，希望自己能在脚本自动化方面下功夫，然后打造移动的自动化，完成从前端到后端的打通，实现自己的梦想。 学海无涯，量力而行。 第七章 2017计划 锻炼 健康 存钱 节俭 读书 学习 旅游 娱乐 锻炼健康：除了平时多吃水果外，还要每天晚上睡觉前也要运动一下，仰卧起坐之类的都可以做；还有周末有空一定要去跑一下步，多运动锻炼，更多的需要自觉，形成一个习惯了，才是一个长久之计。 存钱节俭：计划每月存固定的钱，绝对不能拿出来用，给自己定每月的花费。今年确实是可以存点钱，因为没有出去怎么玩，也没有什么高端爱好，2018继续勉励，不用卖的东西，绝不要买！ 读书学习：2017年，确认没有读完几本书，主要还是在工作中总结，总结自己的经历和实践。今年，主要专注移动自动化，当然希望领导、演讲、博弈、文化、经济等方面知识要多感悟，构建多个知识体系的大全观。同时，希望今年学2到3门编程语言吧，Python/Ruby/?。 旅游娱乐：长线：张家界、杭州、厦门、北京、西藏； 短线：香港、澳门、深圳、清远。 2018，旺！旺！旺！ “和真理一样，未来总是掌握在少数人手中。” 希望自己，像追求真理一样，努力成为少数人。 最后，用一句话总结和展望：“小伙子，要有耐心，打造你的核心技能，要想做出世界一流的工作，不单是好奇心，还需要那种改变世界的憧憬，去想象有一天，自己的工作对世界产生很大的影响。” 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"2018","slug":"2018","permalink":"https://iHTCboy.com/tags/2018/"},{"name":"年终总结","slug":"年终总结","permalink":"https://iHTCboy.com/tags/年终总结/"}]},{"title":"开源协议简介","date":"2017-12-02T14:19:16.000Z","path":"2017/12/02/2017_12_开源协议简介/","text":"1、前言之前百度要求内部全面停止使用 React / React Native，原因是facebook在自己的很多开源库的开源许可协议中的附加专利条款(Additional patent grant)引起了激烈争论： 123React is BSD licensed. We also provide an additional patent grant.即：BSD 许可证 + 专利许可证。 所以，自己也了解了一下相关的开源协议，虽然看了又看，懂了又不懂，所以就记录一下吧！ 2、开源协议这里先放一张 阮一峰 制作的图片： Apache License 2.0这是一个著名的非盈利开源组织Apache采用的协议，它励代码共享和尊重原作者的著作权，同时也允许代码修改，再发布（作为开源或商业软件）。 要求在代码中保留作者提供的协议和版权信息如果修改了代码，则必须在被修改的文件中进行说明。允许的权利商用、分发、修改、专利授权、私用、附加协议 禁止项 禁止因使用等造成影响责任承担、也就是说免责申明不能使用相应的商标。 提示：商业软件可以使用，也可以修改使用Apache协议的代码。 GPLv3此协议是应用最为广泛的开源协议，拥有较强的版权自由要求,也赋予和保证了开源项目开发者广泛的权利。基本上，它允许用户合法复制，分发和修改软件，但衍生代码的分发需开源并且也要遵守此协议。此协议有许多变种，不同变种的要求略有不同。 要求修改后的源码也需要公开版权及协议也要于此协议一致修改后，需要在相应的文件做说明，允许商用，分发，修改，专利授权，私用 禁止 禁止因使用等造成影响责任承担、也就是说免责申明静止在软件分发传播过程中附加上原来没有的协议条款等 提示：商业软件不能使用GPL协议的代码。 LGPL其主要用于一些代码库，LGPL比起GPL它授予的权限较少，LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。因此使用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。注意是以类库的形式使用，也就是说如果修改了源代码的话则也必须使用LGPL协议贡献源码出来。 要求公开使用了LGPL部分的代码，其余部分不需要公开。可以库引用的方式用于商业软件。在代码中保留作者提供的协议和版权信息允许商用、分发、修改、专利授权、私用、附加协议 禁止禁止承担责任，(免责申明)、 提示：商业软件可以使用，但不能修改LGPL协议的代码。 GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品 MIT宽松简单且精要的一个协议。在适当标明来源及免责的情况下，它允许你对代码进行任何形式的使用,也就是原作者只想保留版权,而无任何其他了限制,而你必须在发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的。 要求在代码中保留作者提供的协议和版权信息 允许商用、分发、修改、私用、附加协议 禁止禁止承担责任，(免责申明) 提示：商业软件可以使用，也可以修改MIT协议的代码，甚至可以出售MIT协议的代码。 BSDBSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。与MIT协议只存在细微差异。差别为MIT可以使用原名称进行宣传，而BSD不可以。 要求在代码中保留作者提供的协议和版权信息 允许商用、分发、修改、私用、附加协议 禁止禁止承担责任，(免责申明) 提示：商业软件可以使用，也可以修改使用BSD协议的代码。 Mozilla 2.0是由Mozilla基金创建维护的。此协议旨在较为宽松的BSD协议和更加互惠的GPL协议中寻找一个折衷点，允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。这种授权维护了商业软件的利益，它要求基于这种软件得修改无偿贡献版权给该软件。 要求公开源代码在代码中保留作者提供的协议和版权信息允许商用、分发、修改、专利授权、私用、附加协议 禁止 禁止承担责任，(免责申明)禁止使用商标 提示：商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。 The UnlicenseThe Unlicense是一个放弃所有权利的许可证，没有任何限制，它一般用在致力于公有领域的产品。 注：开源许可证也可用于非软件产品，尤其是那些能够被当做源码编辑和管理的产品，如开源硬件设计等。如果你的产品不是软件产品(数据、多媒体等)，也有一些开源许可证可供选择。 Creative Commons许可证Creative Commons简称CC，中国大陆正式名称为知识共享。传统的著作权通常为两种极端，一种是”保留所有权利”，另一种是“不保留任何权利”（即公有领域，public domain）。知识共享则试图在两者中间广大的灰色地带保有弹性，使创作者可以“保留部分权利”。创作者可与大众分享创作，授予其他人再散布的权利，却又能保留其他某些权利。知识共享一般用于设计，摄影，图片作品的开放式分享，并提供多种可供选择的授权形式及条款组合： 署名（Attribution，简写为BY）：必须提到原作者。非商业用途（Noncommercial，简写为NC）：不得用于盈利性目的。禁止演绎（No Derivative Works，简写为ND）：不得修改原作品，不得再创作。相同方式共享（Share Alike，简写为SA）：允许修改原作品，但必须使用相同的许可证发布。 注：许可协议不能同时包含“相同方式共享”和“禁止演绎”许可要素，“相同方式共享”要素仅适用于演绎作品。这些授权形式可以结合起来用，如CC BY，CC BY-NC-SA等。 参考 如何看待百度要求内部全面停止使用 React / React Native? 如何选择开源许可证？- 阮一峰 如何选择和使用开源许可协议 | Eleveneat’s Blog 如何选择开源许可证？- 简书 十分钟理清常见的开源协议 如有疑问，欢迎在评论区一起讨论！ 如有不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Apache","slug":"Apache","permalink":"https://iHTCboy.com/tags/Apache/"},{"name":"BSD","slug":"BSD","permalink":"https://iHTCboy.com/tags/BSD/"},{"name":"GPL","slug":"GPL","permalink":"https://iHTCboy.com/tags/GPL/"},{"name":"LGPL","slug":"LGPL","permalink":"https://iHTCboy.com/tags/LGPL/"},{"name":"MIT","slug":"MIT","permalink":"https://iHTCboy.com/tags/MIT/"},{"name":"Mozilla","slug":"Mozilla","permalink":"https://iHTCboy.com/tags/Mozilla/"},{"name":"开源协议","slug":"开源协议","permalink":"https://iHTCboy.com/tags/开源协议/"}]},{"title":"你真的懂使用Runtime进行swizzle的最佳写法？","date":"2017-11-18T13:15:16.000Z","path":"2017/11/18/2017_11_你真的懂使用Runtime进行swizzle的最佳写法？/","text":"前言runtime 的黑魔法很多人都一定听过，或者已经在使用了。但是，怎么swizzle方法才是最好呢？ 一般写法123Method originalMethod = class_getInstanceMethod(aClass, originalSel); Method swizzleMethod = class_getInstanceMethod(aClass, swizzleSel); method_exchangeImplementations(originalMethod, swizzleMethod); 或者是下面这种方式，swizzle第二种写法: 12345678Method originalMethod = class_getInstanceMethod(aClass, originalSel); Method swizzleMethod = class_getInstanceMethod(aClass, swizzleSel); BOOL didAddMethod = class_addMethod(aClass, originalSel, method_getImplementation(swizzleMethod), method_getTypeEncoding(swizzleMethod)); if (didAddMethod) &#123; class_replaceMethod(aClass, swizzleSel, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod)); &#125;else&#123; method_exchangeImplementations(originalMethod, swizzleMethod); &#125; 更好写法其它，这样写，一般不会有问题，但是在一些情况下，比如这个hook的类没有实现你要swizzle的方法，这时是没有swizzle成功的，然后你自己写的 swizzle 里又自己调用自己，就无限循环。 1234567891011121314151617Method originalInsMethod = class_getInstanceMethod(class, originalSelector);// 处理为实例方法if (originalInsMethod)&#123; method_exchangeImplementations(originalInsMethod, swizzledMethod);&#125;else&#123; // 处理为类方法 Method originalClassMethod = class_getClassMethod(class, originalSelector); if (originalClassMethod) &#123; method_exchangeImplementations(originalClassMethod, swizzledMethod); &#125;else&#123; // 如果hook的类没有实现这个方法，则先添加方法，然后设置方法的IMP为一个空block。否则直接class_replaceMethod，则方法实则没有交接 class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod)); method_setImplementation(swizzledMethod, imp_implementationWithBlock(^(id self, SEL _cmd)&#123;&#125;)); &#125;&#125; 总结至于这个为什么会更好？ 有时间在慢慢说啦~ 参考 利用ios的hook机制实现adobe air ios ane下appdelegate的动态替换 - CSDN博客 Method结构, SEL, IMP理解 - Vanbein’s Blog 深入理解 Objective-C 的方法调用流程 - 简书 [iOS]在运行时为类添加方法 Runtime中Swizzle时你可能没注意到的问题 - 简书 Hello World 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Runtime","slug":"Runtime","permalink":"https://iHTCboy.com/tags/Runtime/"},{"name":"swizzle","slug":"swizzle","permalink":"https://iHTCboy.com/tags/swizzle/"}]},{"title":"使用AutoLayout约束, 为啥图片的大小(Image size)却还以实际大小显示？","date":"2017-11-18T12:49:16.000Z","path":"2017/11/18/2017_11_使用AutoLayout约束, 为啥图片的大小(Image size)却还以实际大小显示？/","text":"问题给一个 UIImageView 设置一张图片时，使用 AutoLayout 给 UIImageView 约束宽高，但是实际显示的大小，图片以实际的大小显示出来，代码也没有设置 frame，设置contentMode为UIViewContentModeScaleAspectFit 也不起作用。 原因最后注册到约束时，设置了 @property NSLayoutPriority priority; ，就是设置了线束的优先级为UILayoutPriorityDefaultHigh，导致这个约束级别比图片默认显示的大小的优先级低。 解决方法如果开始一定要给一个低级的约束，那么要以约束大小显示时，在重新添加一个相同大小约束的UILayoutPriorityRequired，这样就会覆盖低优先级的约束，图片大小就不会超级约束范围。 参考 Hello World ios - With Auto Layout, how do I make a UIImageView’s size dynamic depending on the image? - Stack Overflow 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AutoLayout","slug":"AutoLayout","permalink":"https://iHTCboy.com/tags/AutoLayout/"},{"name":"Imagesize","slug":"Imagesize","permalink":"https://iHTCboy.com/tags/Imagesize/"},{"name":"图片实际大小显示","slug":"图片实际大小显示","permalink":"https://iHTCboy.com/tags/图片实际大小显示/"}]},{"title":"UIActivityIndicatorView的hidden隐藏属性没作用？","date":"2017-11-15T01:17:16.000Z","path":"2017/11/15/2017_11_UIActivityIndicatorView的hidden隐藏属性没作用？/","text":"现象创作的UIActivityIndicatorView，想当作一般的 View 使用，然后想隐藏时，把hidden属性设置为 YES；但是一直没有作用。 原因UIActivityIndicatorView有一个属性hidesWhenStopped。它默认为YES(true)。建议用这个属性来隐藏UIActivityIndicatorView，因为在一些异步和通知回调中，hidden属性起不到作用，可以参考我写的 GitHub Demo. // default is YES. calls -setHidden when animating gets set to NO 解决方案设置indicatorView.hidesWhenStopped属性，使用startAnimating、stopAnimating方法来按钮 UIActivityIndicatorView 是否显示，这样不管什么情况下，都可以正常。 1indicatorView.hidesWhenStopped = YES; 123456if (isShow) &#123; [self.loadingView startAnimating];&#125;else&#123; [self.loadingView stopAnimating];&#125; 参考 Hello World xcode6 - swift UIActivityIndicatorView .hidden = false not working - Stack Overflow ios - UIActivityIndicatorView hidden property is set to YES by default - Stack Overflow https://github.com/iHTCboy/UIActivityIndicatorViewDemo 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"UIActivityIndicatorView","slug":"UIActivityIndicatorView","permalink":"https://iHTCboy.com/tags/UIActivityIndicatorView/"},{"name":"hidden隐藏没效","slug":"hidden隐藏没效","permalink":"https://iHTCboy.com/tags/hidden隐藏没效/"}]},{"title":"iOS11适配UIToolbar无法点击问题","date":"2017-11-09T12:54:16.000Z","path":"2017/11/09/2017_11_iOS11适配UIToolbar无法点击问题/","text":"前言一个简单的浏览器，使用到UIToolbar做底部工具栏，在 iOS11 上就有点击无响应的问题。现在发现苹果一到大系统版本，很多 UIView的实现和生命周期都变化，他们系统不用兼容 iOS10，想怎么改就怎么改，没有顾虑，但是我们作为开发者只能受累。 iOS 11原因：Toolbar 在iOS11默认添加有_UIToolbarContentView，_UIToolbarContentView _UIButtonBarStackView覆盖在自定义的按钮上面，导致按钮无响应。 解决为了解决iOS11(与较低版本兼容)的问题，您只需要在UIToolBar被添加为UI层次结构的子视图之后，调用 layoutIfNeeded方法，UIToolbarContentView会降低到UIToolBar的第一个子视图，然后你就可以将所有的子视图添加到最顶层。 For example in ObjC: 12345UIToolbar *toolbar = [UIToolbar new];[self addSubview: toolbar];[toolbar layoutIfNeeded];&lt;here one can add all subviews needed&gt; 在创建成功后，使用layoutIfNeeded方法，让_UIToolbarContentView马上生效，这样在添加子视图就没有问题啦。 总结iOS11 上的 NavigationBar 好像也有相似的结构变化，每一次新系统，用户无愿意升级，开发者为适配要付出更多，一方面是苹果的改变压力在加大，系统的维护也是一个很大工作；另一方面 App 的界面越来越复杂，如果在搭建时没有设计好 UI 框架，部分依赖系统组件功能，导致受到影响也比较大。 参考阅读 Hello World ios - iOS11 UIToolBar Contentview - Stack Overflow iOS 11 breaks slacktextviewcontroller · Issue #604 · slackhq/SlackTextViewController 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"UIToolbar","slug":"UIToolbar","permalink":"https://iHTCboy.com/tags/UIToolbar/"},{"name":"iOS11","slug":"iOS11","permalink":"https://iHTCboy.com/tags/iOS11/"}]},{"title":"解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题","date":"2017-10-30T05:04:16.000Z","path":"2017/10/30/2017_10_解决iTunes12.7无法下载AppStore应用的IPA包问题/","text":"问题描述苹果 iTunes 12.7 已经无法下载 ipa 包，如果想在 iTunes 12.7 使用已经无力回天。所以，只能降级！降级！降级！ 注：降级 iTunes 12.6.2 会导致无法识别到 iPhone8 / iPhone8 plus / iPhone X 设备， 2017.10月30号更新，下载 iTunes 12.6.3 支持 iPhone 8，iPhone X和iOS 11。 降级步骤1.下载旧的 iTunes 12.6首先下载旧包： 下载链接 下载 iTunes 12.6.3： Mac, PC 32-bit or PC 64-bit 支持 Mac 和 Windows! 2.卸载 iTunes 12.7如果你已经下载新版本，只能先卸载，否则无法安装。 3.安装 iTunes12.6.2.dmg以下以 Mac 电脑安装为例，windows 类似（但没有验证哦） 安装过程，要关闭一些应用，只能关闭不然无法安装： 安装时间有点长？最终是20分钟安装完，看电脑性能，又要换电脑了-_- 。 4.打开 iTunes 报错如果之前安装过 其它版本，打开时提示 iTunes安装完之后显示：不能读取文件‘iTunes Library.itl’’,说因为它是由更高版本iTunes所创建的。你要现在下载 iTunes 吗？ 解决方法 到 Music/iTunes 目录下，删除 iTunes 目录就可以，重启打开就正常 5.打开 iTunes 应用第一次打开 iTunes 是没有应用列表的，要点击如图设置： 6.又可以下载 ipa 啦，happy！ 总结目前这个方法在 10月30号还可以使用，后续不知道苹果会不会禁止，所以，iTunes 12.6 的安装包大家保存好啦~ 其实，苹果这个做也是迎合云端的趋势，现在已经很少有人在电脑上备份手机信息、通讯录、相片等，未来苹果也是希望用户使用 iCloud 来同步数据和备份数据。大家慢慢就习惯了，当然用 ipa 包另有所图的就这样啦~ 2017.10月30号更新方法2现在有另一种解决方案：苹果提供了一个版本的iTunes（12.6.3）的支持新的设备，iTunes 12.6.3包括支持iPhone 8，iPhone X和iOS 11设备的识别。Deploy apps in a business environment with iTunes - Apple Support 下载 iTunes 12.6.3： Mac, PC 32-bit or PC 64-bit* Deploy apps in a business environment with iTunesLearn how to deploy apps with iTunes. Apple offers Volume Purchase Programs and Apple Configurator on Mac to help enterprise environments manage and mass-deploy apps on iOS devices. But certain business partners might still need to use iTunes to install apps. Install apps with iTunesIf you’ve already installed a newer version of iTunes, you can download this version of iTunes on your Mac, PC 32-bit or PC 64-bit* and run the installer. After installation is complete, you can continue to deploy apps with iTunes.You won’t be prompted to download new versions of iTunes after you install this version. Manually update to the latest version of iTunes when you’re ready to upgrade. *Apple provides technical support only for the latest version of iTunes.Published Date: Oct 14, 2017 这个iTunes 12.6.3 是苹果10月14日更新的，最大特点是支持iPhone 8，iPhone X和iOS 11。根据苹果说明，提供 iTunes 12.6.3 来满足一些企业的需求，比如批量 iOS 部署，现在看来安装 iTunes 12.6.3 这个版本，应该是可下载 IPA 包的可行方案的权宜之计。** 参考 Hello World Apple - Support - iTunes Downloads app store - Get ipa file in Mac with iTunes 12.7 - Stack Overflow iphone - How do I download an iOS App (IPA) file to my Mac after iTunes 12.7 update? - Ask Different Apple still offers an iTunes version with App Store, Ringtones and other features removed in ‘focused’ iTunes 12.7 | 9to5Mac Deploy apps in a business environment with iTunes - Apple Support 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iTunes 12.7","slug":"iTunes-12-7","permalink":"https://iHTCboy.com/tags/iTunes-12-7/"},{"name":"下载IPA包","slug":"下载IPA包","permalink":"https://iHTCboy.com/tags/下载IPA包/"}]},{"title":"iOS11沙盒测试内购时重复提示登陆账号","date":"2017-10-28T11:44:16.000Z","path":"2017/10/28/2017_10_iOS11沙盒测试内购时重复提示登陆账号/","text":"问题目前在 iOS11.0.3上，通过储值登陆沙盒账号，得到错误“无法连接到iTunes商店” 或者 反复出现“登陆”界面。在ios10，我使用同样的沙盒帐户测试，则正常登陆并支付。 解决目前测试发现有效的方法： 在后台创建一个新的沙盒账号登陆，但是如果登陆成功后在登出，再次登陆时会重复弹出登陆界面。 把应用上传到 iTunes Connet，然后用 TestFlight 进行测试。 备注在苹果论坛上有很多人反馈，影响了很多开发者，有开发者因为苹果审核时沙盒登陆失败而被拒。但苹果尚未修复它，呵~ 参考 ios11 beta sandbox cannot connect to App Store | Apple Developer Forums iphone - iOS 11 - Is in app purchase testing using a sandbox user keeps asking to sign in for anyone else too? Forever loop? - Stack Overflow 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS11","slug":"iOS11","permalink":"https://iHTCboy.com/tags/iOS11/"},{"name":"sandbox","slug":"sandbox","permalink":"https://iHTCboy.com/tags/sandbox/"},{"name":"内购登陆反复","slug":"内购登陆反复","permalink":"https://iHTCboy.com/tags/内购登陆反复/"},{"name":"沙盒测试","slug":"沙盒测试","permalink":"https://iHTCboy.com/tags/沙盒测试/"}]},{"title":"教你如何强制显示一个竖屏的不能侧滑返回的SFSafariViewController","date":"2017-10-28T11:28:16.000Z","path":"2017/10/28/2017_10_教你如何强制显示一个竖屏的不能侧滑返回的SFSafariViewController/","text":"强制让控制器竖屏显示1234567891011121314151617181920- (BOOL)shouldAutorotate&#123; return NO;&#125;- (UIInterfaceOrientationMask)supportedInterfaceOrientations&#123; return UIInterfaceOrientationMaskPortrait;&#125;- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation&#123; return UIInterfaceOrientationPortrait;&#125;// 隐藏系统状态样- (BOOL)prefersStatusBarHidden&#123; return YES;&#125; 设置不让SFSafariViewController侧滑返回12345678910111213141516Swift:let viewController = SFSafariViewController(URL: url) presentViewController(viewController, animated: true) &#123; for view in viewController.view.subviews &#123; if let recognisers = view.gestureRecognizers &#123; for gestureRecogniser in recognisers where gestureRecogniser is UIScreenEdgePanGestureRecognizer &#123; gestureRecogniser.enabled = false &#125; &#125; &#125; &#125; 123456789101112131415OC: EFKRSafariViewController *safari = [[EFKRSafariViewController alloc] initWithURL:url]; safari.closeHandler = completion; [self presentViewController:safari animated:YES completion:^&#123; // 禁止侧滑返回，因为侧滑返回导致强制竖屏会变回横屏 for (UIView * view in safari.view.subviews) &#123; NSArray&lt;__kindof UIGestureRecognizer *&gt; * array = view.gestureRecognizers; if (array.count) &#123; for (UIScreenEdgePanGestureRecognizer * sepgr in array) &#123; sepgr.enabled = NO; &#125; &#125; &#125; &#125;]; 如何创建继承SFSafariViewController的控制器，在里面添加上面的代码就可以啦！ 总结有时候，我们在修改系统的控件属性时，总是希望想找到一个属性方法设置后，就可以达到自己想要的 UI或者逻辑，但其实，系统不可以提供那么多自定义的 API，所以，我们只能通过自己去找到想要的东西，然后去修复它，达到目的。类似的思想，比如hook。代码上也是很其妙。 参考扩展 SFSafariViewController in iOS 9.2 | Apple Developer Forums ios - Safari View Controller Swipe Left to dismiss goes black - Stack Overflow 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"SFSafariViewController","slug":"SFSafariViewController","permalink":"https://iHTCboy.com/tags/SFSafariViewController/"},{"name":"iOS侧滑返回","slug":"iOS侧滑返回","permalink":"https://iHTCboy.com/tags/iOS侧滑返回/"},{"name":"强制竖屏","slug":"强制竖屏","permalink":"https://iHTCboy.com/tags/强制竖屏/"}]},{"title":"AppStore 应用的本地化显示语言到底是什么决定的？","date":"2017-10-28T11:04:16.000Z","path":"2017/10/28/2017_10_AppStore应用的本地化显示语言到底是什么决定的？/","text":"本地化 App Store 信息iTunes Connect 本地化说明： 在添加 App 至您的帐户之后，您可以添加语言并输入您的 App 在 App Store 中显示的本地化信息。若要查看您可以本地化 App 元数据的语言和语言区列表，请参见 App Store 本地化。若要了解您可以本地化的属性，请参见必填项、可本地化以及可编辑的属性。 例如，如果主要语言设置为英文，那么该信息在所有 App Store 地区中都会显示为英文。如果您为您的 App 添加了法文并对文本、关键词和屏幕快照进行了本地化，那么语言设置为法文的用户会看到法文的本地化内容。所在地区支持法文（而非英文）的用户，也会看到法文的本地化内容。用户也可以在所有法语 App Store 中使用本地化关键词搜索到您的 App。在其他 App Store 地区，用户会看到以主要语言显示的信息（本示例中为英文）。 用户在设备上设置的语言控制 App Store 中显示的本地化内容。 如果没有与设置语言匹配的可用本地化内容，将显示最接近的本地化内容。如果您需要显示特定语言区的元数据，请在您的 App 中添加特定语言区的语言——例如，添加法文（加拿大）。无论用户设备的语言设置如何，您 App 的 App Store 网址（URL）都是相同的。 您在 iTunes Connect 中添加到 App 中的语言与您在 Xcode 中添加到 App 中的语言不同。您在 Xcode 中添加的语言在 App Store 中的“语言”下显示。若要本地化您 App 的二进制文件，请参阅“Internationalization and Localization Guide（《国际化和本地化指南》）”。 【重要事项】仅当 App 状态为可编辑时，您才可以管理语言。 问题总结1.主要语言是指什么？有什么作用？ 如果某个 App Store 地区没有提供本地化的 App 信息，那么 App 信息将以主要语言呈现。如果您没有看到想要使用的支持语言，请参阅 常见问题。 也就是，在新建App时，苹果要求选择 主要语言（其实就是至少有一种本地化语言）： 应用创建好后，还可以更改主要语言，前提是有创建了2个以上本地化语言： 所以，主要语言的作用就是 作为应用在 AppStore 上显示的主本地化语言。也就是说，如果应用只支持一种本地化语言，那么在所以 AppStore 上都是显示一样的语言。那么如果有2种本地化语言，又怎么显示呢？ 2.如果应用支持2种本地化语言，用户在 AppStore 上会显示那种本地化语言呢？假如应用支持 英文(英国)（主要语言）和法文： 用户操作系统中设置本地化的语言为英文，应用支持英文，则显示英文 App Store ; 用户操作系统中设置本地化的语言为法文，应用支持法文，则显示法文 App Store ; 用户操作系统中设置本地化的语言为中文的中国账号用户，因为在中国地区不支持英文和法文（按苹果支持语言列表查询），则显示主要语言：英文 App Store ; 用户操作系统中设置本地化的语言为中文的法国账号用户，因为在法国地区支持法文, 英文（英国）（按苹果支持语言列表查询），则优先显示排前语言：法文 App Store 。（参考下图） 可以得出， 应用在 AppStore 显示的本地化语言顺序，如果应用支持用户设备操作系统中设置本地化的语言，那么应用在 AppStore 本地化以操作系统中设置本地化的语言来显示。如果设置本地化的语言不被应用支持，以用户账号所在地区支持的本地化语言为显示，如果支持多种，排序在前为准。如果用户账号所在地区支持的本地化语言不被应用支持，那么以应用设置的主要语言显示。 苹果默认 AppStore 多数地区本地化都支持 英文（英国），加拿大、美国、澳大利亚除外: 3.我的 app 信息已本地化，它在 App Store 上为什么不以特定的语言显示？要在 App Store 上看到您的 app 的特定本地化内容，您需要更改 OS X 或 iOS 的语言。 OS X：&gt; 退出 iTunes 前往“系统偏好设置”中的“语言与地区” 添加新的语言，或将所需语言拖放到语言列表的顶部 打开 iTunes 点按“iTunes Store”按钮 滚动到页面底部 点按页面右侧的当前地区图标 选取所需的 App Store 的地区 搜索您的 App，此时应能看到您提供的本地化信息 iOS： 按两次主屏幕按钮，然后将 App Store 扫出屏幕，从而关闭 App Store 前往“设置”&gt;“通用”&gt;“多语言环境”&gt;“语言” 轻按所需的语言 轻按“完成” 打开 App Store 并滚动到页面底部 如果已经登录，则轻按您的 Apple ID，然后轻按“注销” 轻按“登录” 轻按“创建 Apple ID” 选取所需的地区并轻按“下一步” 显示语言将发生变更。如果您不想创建新的 Apple ID，则轻按以新的语言显示的“取消” 搜索您的 app，此时应能看到您提供的本地化信息 要查看原始语言的本地化内容，请重复上述步骤，然后用您现有的 Apple ID 登录。 更多参考 本地化 App Store 信息 - iTunes Connect 开发人员帮助 本地化 - iTunes Connect 资源和帮助 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"Localization","slug":"Localization","permalink":"https://iHTCboy.com/tags/Localization/"},{"name":"应用本地化语言","slug":"应用本地化语言","permalink":"https://iHTCboy.com/tags/应用本地化语言/"}]},{"title":"为新 iPhone X 添加启动图片","date":"2017-10-28T10:53:16.000Z","path":"2017/10/28/2017_10_为新iPhoneX添加启动图片/","text":"Xcode9 的 iPhone X 启动图片iPhone X 启动图片大小： Portrait size ： 1125px × 2436px Landscape size：2436px × 1125px 在 Xcode9 中位置： 启动图片尺寸： 目前是 iTunes 上传没有强制要求与说明，但是如果没有在 iPhoneX显示会上下留黑边，最好现在开始添加，苹果建议使用 storyboard 创建启动图片，但是要注意 iPhoneX 高度约束问题。网上给了一个应用没有iPhoneX启动图时打开的效果： 最新消息，iPhone X 的屏幕快照可选性在 iTunes Connet 后台上传，因为昨天 iPhoneX 可预定啦！ iTunes Connect 现已支持 iPhone X 屏幕快照2017年10月27日 现在，您可以为 iPhone X 上传屏幕快照。您将在 iOS App 版本信息页的“App 预览和屏幕快照”下方看到一个针对 5.8 英寸显示屏的新标签。请注意，iPhone X 的屏幕快照为可选项，且不能用于更小尺寸的设备。在 iPhone 上运行的所有 App 仍需提供 5.5 英寸显示屏的屏幕快照。iPhone X 屏幕快照分辨率1125 x 2436（纵向）2436 x 1125（横向）在《iTunes Connect 开发人员帮助》中了解更多关于上传屏幕快照的信息。了解更多有关为 iPhone X 更新 App 的信息。 参考 Launch Screen - Icons and Images - iOS Human Interface Guidelines ios - iPhone X: Incorrect launch-screen orientation used - Stack Overflow iTunes Connect 现已支持 iPhone X 屏幕快照-2017年10月27日 Submitting iOS apps to the App Store - Apple Developer 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"LaunchScreen","slug":"LaunchScreen","permalink":"https://iHTCboy.com/tags/LaunchScreen/"},{"name":"Xcode9","slug":"Xcode9","permalink":"https://iHTCboy.com/tags/Xcode9/"},{"name":"iPhoneX","slug":"iPhoneX","permalink":"https://iHTCboy.com/tags/iPhoneX/"}]},{"title":"沙盒测试账号：不允许创建 iTunes 账户","date":"2017-10-27T00:33:16.000Z","path":"2017/10/27/2017_10_沙盒测试账号：不允许创建iTunes账户/","text":"1.出现情况 在设置里登陆沙盒账号提示： 不允许创建 iTunes 账户此 Apple ID 目前无法用于 iTunes Store, 请稍后重试 正确方式： 沙盒测试账号只能在测试应用点击储值时，弹窗中输入账号，不能在设置里的 App Store 里添加。 苹果的文档也有说明，测试账号不能在设置里登陆 ： Important: Don’t enter your test account information in the Store settings panel. Doing so may invalidate your test account. 2. 正确的沙盒测试流程 To perform testing for in-app purchase products Set up test user accounts within Users and Roles in iTunes Connect, as detailed in Creating Sandbox Tester Accounts in iTunes Connect Developer Guide.You’ll need a test user for each territory you want to test the app in. Clear any account information stored on your test device. In Settings, go to the Store settings. Click the Sign Out button.This prevents an actual user account from automatically being used when testing. Important: Don’t enter your test account information in the Store settings panel. Doing so may invalidate your test account. Connect your test device to your Mac. In Xcode, set your test device as your scheme’s destination. Open your app, and perform your in-app purchase product testing. Use your test account credentials to test the purchase.When your app uses the Store Kit API to request a payment, you’re asked to sign in. Select Use Existing Account and enter your test account user name and password. You are then asked to confirm the purchase. The transaction completes.No financial transaction takes place, but a receipt is generated for a successful transaction. 3.参考： Testing Your App and In-App Purchase Products unable to log in with sandbox test users on device 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Sandbox","slug":"Sandbox","permalink":"https://iHTCboy.com/tags/Sandbox/"},{"name":"iTunes账户","slug":"iTunes账户","permalink":"https://iHTCboy.com/tags/iTunes账户/"},{"name":"沙盒测试","slug":"沙盒测试","permalink":"https://iHTCboy.com/tags/沙盒测试/"},{"name":"沙盒账号","slug":"沙盒账号","permalink":"https://iHTCboy.com/tags/沙盒账号/"}]},{"title":"Xcode8报错：\"Framework not found IOSurface for architecture arm64\"或者 \"Framework not found FileProvider for architecture x86_64/arm64\".","date":"2017-10-27T00:33:16.000Z","path":"2017/10/27/2017_10_Xcode8报错：Framework_not_found_IOSurface_for_architecture_arm64或者Framework_not_found_FileProvider_for_architecture_x86_64:arm64/","text":"Xcode8 编译报错： Framework not found IOSurface for architecture arm64或者 Framework not found FileProvider for architecture x86_64/arm64. 原因IOSurface.framework和 FileProvider.framework是 iOS11 新增加的库，但 Xcode8下没有这个库。打包静态库的时候，有一个Link Frameworks Automatically设置，默认为YES，会自动链接框架。所以Xcode 9打包的静态库时，在Xcode 8项目编译时候会提示找不到 IOSurface.framework和 FileProvider.framework。 题外话，这个在 Xcode5 和 Xcode6 过度时，Metal.framework 时发生过，可能过了就忘记了。也发现 Xcode 很多特性平时没有注意，有空真要多看看 LLVM 的知识。 结果如果原厂升级到 Xcode9，则不受影响。如果 Xcode8 编译报错，网上最初给出的方案，在 Xcode8 中添加IOSurface.framework和 FileProvider.framework后打包，结果最后坑定了！ 在 Xcode8 中添加IOSurface.framework和 FileProvider.framework后打包，上传iTunes Connet 报错： 正解解决方案 Build Settings 中 Link Frameworks Automatically 把默认Yes 改成 No ，在 Xcode8 编译就能通过。 参考&amp;扩展阅读 ios8 - XCode 6 GM: linker error when building for device (Metal not found) - Stack Overflow New Features in Xcode 5 XCode’s New “Link Frameworks Automatically” &amp; How to Fix “framework not found Metal for architecture armv7” ios - Framework not found IOSurface for architecture arm64 - Stack Overflow ios - When do you have to link Frameworks and Libraries to an XCode project? - Stack Overflow Don’t we need to link framework to XCode project anymore? objective c - @import vs #import - iOS 7 - Stack Overflow Modules和Autolinking的介绍与使用 - 简书 xcode 新特性的 一点理解 enable module 和 link frameworks automatically - 滴水成川 - CSDN博客 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Framework not found","slug":"Framework-not-found","permalink":"https://iHTCboy.com/tags/Framework-not-found/"},{"name":"IOSurface","slug":"IOSurface","permalink":"https://iHTCboy.com/tags/IOSurface/"},{"name":"Xcode9","slug":"Xcode9","permalink":"https://iHTCboy.com/tags/Xcode9/"}]},{"title":"Xcode9 打包App Store Icon(1024xp) WARNING ITMS-90704 -90717 问题解决","date":"2017-10-12T01:00:16.000Z","path":"2017/10/12/2017_10_Xcode9打包AppStore_Icon(1024xp)_WARNING_ITMS-90704-90717问题解决/","text":"Xcode9 打包，上传 iTunes Connet 报错，提示需要在icon添加一张 Marketing 1024x1024 的图标 WARNING ITMS-90704: “Missing Marketing Icon. iOS Apps must include a 1024x1024px Marketing Icon in PNG format. Apps that do not include the Marketing Icon cannot be submitted for App Review or Beta App Review.” Xcode9 中需要添加： 如果是 Xcode8还是在 iTunes Connect 后台添加 1024x1024 图标： App Store 1024x1024px 图标规范用 Xcode9 打包后上传 iTunes Connet 报错： ERROR ITMS-90717 Invalid App Store Icon. The App Store Icon in the asset catalog in ‘Some.app’ can’t be transparent nor contain an alpha channel. 原因：Xcode9中 1024x1024的图标只能 Alpha通道为否的 png 或 jpg 图片。 总结 App Store Icon (1024px)图标在 Xcode9 中只能放置不透明（没有 alpha通道）的 png 或 jpg 格式图片。 参考： Marketing/App Store Icon PNG transparency issue | Apple Developer Forums Add an App Store icon - Xcode Help ERROR ITMS-90717 - 简书 添加一个 App Store 图标 - iTunes Connect 开发人员帮助 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"App Store Icon","slug":"App-Store-Icon","permalink":"https://iHTCboy.com/tags/App-Store-Icon/"},{"name":"ITMS-90704","slug":"ITMS-90704","permalink":"https://iHTCboy.com/tags/ITMS-90704/"},{"name":"ITMS-90717","slug":"ITMS-90717","permalink":"https://iHTCboy.com/tags/ITMS-90717/"},{"name":"Xcode9","slug":"Xcode9","permalink":"https://iHTCboy.com/tags/Xcode9/"}]},{"title":"Xcode快捷键 高效必记","date":"2017-03-27T13:58:16.000Z","path":"2017/03/27/2017_03_Xcode快捷键高效必记/","text":"前言最近入职，忙于公司业务熟悉与熟练。工作三年了，上一年在创业公司，更多的是学习公司生存法则，忙于产品开发，没有好好总结，有机会也可以写写创业公司那么事，对个人而言是宝贵的经历。所以，最近在工作中，也会慢慢总结一下自己经验，然后思考一下，也当学习分享，一起进步！所以今天就先从IDE效率总结开始啊！ Xcode快捷键文字版有空在编辑，上个图片版先！个人认为这些背下来，都是提高效率不少！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Xcode","slug":"Xcode","permalink":"https://iHTCboy.com/tags/Xcode/"},{"name":"快捷键","slug":"快捷键","permalink":"https://iHTCboy.com/tags/快捷键/"}]},{"title":"再见2016","date":"2016-12-31T15:25:26.000Z","path":"2016/12/31/2016_再见2016/","text":"罗曼.罗兰说：“世界上只有一种真正的英雄主义，就是在认清生活真相之后仍然热爱生活。” 序言这一年，改变非常大，从职场新人到职场老人？毕业不知觉已经2年了，完全离开学生时代，有时候回想，学生的努力还不够，在校园学习的时光永远是美好的。一路过来，快愉。现在睡在2016年最后一天，是时候来总结一下！ 第一章 创业公司的开始想起年初，辞职后就跟同事开始了创业公司，公司从无名，到有名，到现在6人的团队，一路走过来，确实不容易。 说点实在的吧。在医美行业，完全不了解，整容在这之前给我的第一感觉就是手术，无法想法为美而整形的女生。然后接着开始努力补缴医美行业知识，发现这个行业有太多东西要学习，从一个外行人，慢慢变成一个不外不内的人啊-_-.. 没有成为内外人，确实不像我们老板那样，在这个行业一直做了二十几年，需要的敢气不是每个人都可以做到。年轻的时候，自己还是不敢认定一个行业，还是想多出去走走，多看看世界。 回顾起来，还是感谢当初公司给我这个机会，忙碌的前3个多月开发出一款产品，就像自己小孩一样，每天看到他长大，完成不一样的感觉。用了那么多心血，加了一个多月的班，我们都是怀着同样的梦想，一起向着目标出发，真的，就像我们在创业，我们产品随时可以深受用户喜爱。 说到创业公司，没有经历过从0到1的过程，真的不能想象，这是像一个生命的诞生，一个公司的长成，不是随便就成长，所以现在看到大厂，让我觉得老板都不容易，也明白了，为什么老板都想垄断，因为付出的努力和面对的风险，不是一般的打工心态的员工能想像的。现在我也许能想像了，但是老板的思维还是没有。老板总是从效益看问题，比如一个产品，并不是我们技术人员那样：能不能实现？怎么实现？技术未来如何？ 老板只会问：这个产品比别人强那里？多久能上线？能赚到大钱？ 在创业公司的这一年，看着公司成长，每天的运营，就像一颗树成长一样，经历的东西，真的很多说不出来，以后有机会，可以另外淡淡。看着公司成长，同时自己也学习到非常多的东西，运营、推广、策划、市场。一句话总结就是：努力并改变着，压力并前进着，无奈并期盼着。 第二章 生活的闲心记得不很清楚，一年过去了，都不知道做了什么呢。周末双休，本来打算在家可以多看几本书，现在看到也没能看多少本。 前半年一直忙着项目，然而并没有很好执行16年计划表，没有运动，没有锻炼，没有好好休息。后半年一直调整身体，也没有很好的学会生活，或者说不懂得生活，除了工作和学习，其它爱好也没有培养一下。可能我自己是工作狂人吧，只是自己不知道。 希望新的一年里，自己能好好的利用时间，好好的享受生活，享受工作，让自己的世界里，快乐与幸福！ 第三章 说走就走的世界今年真的没有去那里玩，计划的每月一游，也没有做到。也许工作真的身不由已，也许时间真的不是自己的，也许很多事情要我们去完成，但是我们不能为了工作而工作，说就是这样。生活的向往，就是工作的动力，去旅游的心情也是希望看到更多世界角落，从眼中看风景，然后在风景里看到别人工作，自然就会明白，生活就是工作，工作也是生活，从来没有公开的一清二楚。把生活和工作分得太开的人，都不太会生活吧。 除了广西广东，第一次离开南方，去了上海，想出去看看世界。上海是中国内地的金融中心，从民国就是外国人的一个大门，很多外国公司设立，相对广州，上海给我的感觉是，繁华的地方更繁华，田园的风景也是田园，并不会因为多了更多的高楼显得更大城市。在上海，大城市的感觉就是，地铁方便，公车没太多人，便利的地方更多完善。生活节奏，个人感觉没有广州快，比如吃早餐，上海的生煎，煎饼果子都是比广州的包点制作麻烦的，广州早餐蒸好装袋就ok，当然广州早上喝粥也是很清爽的一天。或者喝个早茶，对于上班族来说，只能想想了。总的来说，上海有上海的好，高楼大厦给了我们对城市的渴望。想起高中对于未来根本没有想法，只是听大人们说，现在认真读书，以后对自己会更好，也确实是这样，多读书没有错。如果读对书，那么应该更好。 珠海因为格力让大家都注意到，地理位置在澳门旁边，所以，发展也可以，主要的公交车也很方便，地形山丘多，所以旅游业相对好，交通其实不算方便，去珠海长隆海洋王国，45分钟的客车也不远。那天晚上看完烟花，返程时，一堆人，根本没有公车过来，也根本上不了车，准备11点了，太晚了，的士加价，黑车不敢坐，用手机打开滴滴，发现一百元内也能接受，就滴滴了，其实一路上也有点害怕，人生地不熟，车在开着，外面的风景一片黑，远远看去对面的澳门，依然光辉四射。所以，移动互联网还是改变了传统行业，有些我们接触不到的，就没有深深感受到吧，2017年，中国的移动互联网将改变的更快更深入更全面吧。 第四章 身心冥想不可否认的是，今年真的没有去长跑了。 吃了准备9个月的药品，已经不是第一次发现生命的感觉。幸与不幸，人云亦云。 病这事，如果没有生病，自己还以为自己很强大；一但生病，在中国依然病不起，无数的例子每天都在发生。每次都感觉自己很幸运，也很不幸运。 在医院里，我看到太多不幸，原因就是我们的医疗意识太薄弱了，根本不把病看在眼里，总以为身体自己能调节好，身体自己能恢复。感冒2个星期还不懂着去看医生，总感觉自己下个星期就会好。也许正是我们的自大与无知，让自己的生命跟自己开了一场玩笑。然后我们只看到我们社会的不是非，而没有自己珍惜锻炼身体的时间与机会。 时刻怀着感恩的心，上天给了你一次机会，依然需求你去珍惜。 钱不是万能的，但有钱却能解决很多问题，“人穷志短”实在是太精辟了。当你没有钱的时候，你会看重很多你不应该看重的东西，很多东西你可以用钱买来（比如技术和别人的经历）但你不愿意，因为你手上钱不多所以要省省是吧。结果你只能花自己的时间去琢磨，而等你琢磨透时商机已去！ 第五章 生活的一两点2017计划： 重新锻炼 节俭存钱 读书厨艺 工作游玩 锻炼：加油！每天多走走，多呼吸。 存钱：哈哈！节俭开始！毕业那时，感觉自己开始有自己的工资了，然后大笔的花了，用了，现在才发现，自己买了很多无用，或者体验不到生活品质的消费，生活需要理性节俭。 读书：如烂笔头！读书改性，让人聪慧。 游玩：听君一言！ 第六章 学习的一两点 iOS android swift python React-Native 2016年iOS一条路走到黑了，现在回头一看，进步的也很大，15年的自己太年轻了，慢慢的，自己进步也变得慢了。 学习的安卓没有进步了，swift也开始熟悉起来，混合开发也在学习，h5也在学习，js也在接触。发现大学没有好好学的，现在也要开始学，所以，知识是不管用不用上，多学点准没错，人生不等闲。 2017年，专注于iOS开发，喜欢移动开发。 学海无涯，量力而行。 第七章 2017计划 锻炼健康 存钱节俭 读书学习 旅游娱乐 锻炼健康：除了锻炼，还要多关注自己的体重，由于天天坐办公室，肚子会大，同时加班、熬夜等，要早睡，多吃水果等。 存钱节俭：计划每月存固定的钱，绝对不能拿出来用，给自己定每月的花费。同时，也要节俭，不用卖的东西，绝不要买。 读书学习：主要专注移动开发，还有领导、演讲、博弈、文化、经济等，多个知识体系的大全观。希望今年学2到3门编程语言吧。 旅游娱乐：长线：昆明、张家界、杭州、北京、西藏； 短线：深圳、清远、东莞、（香港、澳门） 2017，鸡动人新！ “每一天都是余生最年轻的一天，人生永远没有太晚的开始”。 事实上，任何行业都需要至少1万小时的积累，你不想承认这个规律，你希望自己努力一个月，就赶紧成为业界大神。 最后，用一句话总结： 这是一个最好的时代，也是一个最坏的时代，但这是我们自己的时代。","tags":[{"name":"2017","slug":"2017","permalink":"https://iHTCboy.com/tags/2017/"},{"name":"年终奖","slug":"年终奖","permalink":"https://iHTCboy.com/tags/年终奖/"},{"name":"年终总结","slug":"年终总结","permalink":"https://iHTCboy.com/tags/年终总结/"},{"name":"草从集","slug":"草从集","permalink":"https://iHTCboy.com/tags/草从集/"}]},{"title":"React Native项目Xcode打包发布iOS问题","date":"2016-12-25T12:45:16.000Z","path":"2016/12/25/2016_React_Native项目Xcode打包发布iOS问题/","text":"Xcode打包分布准备对于新手来说，如果是混合开发或者纯RN应用开发好后，想打包上线了，却发现官方文档没有找到详细打包的流程文档，对于完全没有经验的新手真的不太好友。下面是参考资料总结而成： 1、打包命令 react-native bundle，在RN项目根目录下：1react-native bundle --entry-file index.ios.js --platform ios --dev false --bundle-output ios/ios.jsbundle 参数：–entry-file ：ios或者android入口的js名称，比如index.ios.js–platform ：平台名称(ios或者android)–dev ：设置为false的时候将会对JavaScript代码进行优化处理。–bundle-output,：生成的jsbundle文件的所在目录和名称，比如 ios/ios.jsbundle。 在当前项目中，输入上面命令，然后在ios/目录下生成2个离线包： 123456789101112131415$ react-native bundle --entry-file index.ios.js --platform ios --dev false --bundle-output ios/ios.jsbundle[2016-12-25 19:55:01] &lt;START&gt; Initializing Packager[2016-12-25 19:55:01] &lt;START&gt; Building in-memory fs for JavaScript[2016-12-25 19:55:01] &lt;END&gt; Building in-memory fs for JavaScript (88ms)[2016-12-25 19:55:01] &lt;START&gt; Building Haste Map[2016-12-25 19:55:02] &lt;END&gt; Building Haste Map (1091ms)[2016-12-25 19:55:02] &lt;END&gt; Initializing Packager (1212ms)[2016-12-25 19:55:02] &lt;START&gt; Transforming files[2016-12-25 19:55:15] &lt;END&gt; Transforming files (13122ms)bundle: startbundle: finishbundle: Writing bundle output to: ios/ios.jsbundle(node:8023) DeprecationWarning: Using Buffer without `new` will soon stop working. Use `new Buffer()`, or preferably `Buffer.from()`, `Buffer.allocUnsafe()` or `Buffer.alloc()` instead.bundle: Done writing bundle outputAssets destination folder is not set, skipping... 运行上面命令后，在项目的ios文件夹下看到 ios.jsbundle、ios.jsbundle.meta。 2、iOS项目中导入包 3、修改项目中BundleURL修改AppDelegate.h的定向URL，需要注意的是名字要跟你生成的jsbundle的名字一致。 123// jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index.ios\" fallbackResource:nil]; jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"ios\" withExtension:@\"jsbundle\"]; 如果项目是混合开发，那么用到BundleURL的地方也要改成这个BundleURL地址。 如果修改了项目的js文件，那么就要重新打包一次，或者利用热更新机制更新。 参考 React Native ios打包 - 简书 React Native iOS打包，给用户生成ipa文件 - 简书 React Native程序部署至iOS应用商店之前需要的配置和如何生成release版本的APK包 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"RN","slug":"RN","permalink":"https://iHTCboy.com/tags/RN/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://iHTCboy.com/tags/ReactNative/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"打ipa包","slug":"打ipa包","permalink":"https://iHTCboy.com/tags/打ipa包/"}]},{"title":"iOS应用显示一直安装，重启无效，也删除不了问题","date":"2016-12-23T06:23:16.000Z","path":"2016/12/23/2016_iOS应用显示一直安装，重启无效，也删除不了问题/","text":"解决方法 在AppStore搜索这个应用，看到应用还在下载，点击取消，桌面的加载中的应用就消失了！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"应用无法安装","slug":"应用无法安装","permalink":"https://iHTCboy.com/tags/应用无法安装/"}]},{"title":"iOS读取文件Bundle pathForResource方法返回nil问题","date":"2016-11-29T09:19:16.000Z","path":"2016/11/29/2016_iOS读取文件Bundle_pathForResource方法返回nil问题/","text":"检查代码1234567oc: NSString* soundPath = [[NSBundle mainBundle] pathForResource:@\"wakeup\" ofType:@\"caf\"]; NSLog(@\"soundPath:%@\", soundPath); swift 3.0: let audioFile = Bundle.main.path(forResource: \"frogs.m4a\", ofType: nil) print(audioFile) 代码反复看了，clear工程n次，手机删掉项目n次，还是返回空，然后测试了一些pdf，png，mp3文件有路径返回，瞬间晕倒了 问题所在音频文件没有包含到项目资源中，手工添加就可以了！ 总结这种问题，不是代码多好多好就可以，一个问题，不只是知识点问题，可能对知识抱有怀疑，可以查正，如果发现查不到，然后这个问题是出在工具上，如果我直接新建一个工程，然后没有问题了就不管了，如果没有从根源上解决，下次出现也不能解决，这就是经验。 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Bundle","slug":"Bundle","permalink":"https://iHTCboy.com/tags/Bundle/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"pathForResource","slug":"pathForResource","permalink":"https://iHTCboy.com/tags/pathForResource/"}]},{"title":"清除Xcode的Archives列表的无用Apps","date":"2016-11-21T09:36:16.000Z","path":"2016/11/21/2016_清除Xcode的Archives列表的无用Apps/","text":"Archives目录当有多个账号同时登陆Xcode时，有一些应用不在本机发布，就会出现下图的空列表： 删除你一定非常想删除这样的列表，但是Xcode中却没有删除功能！ 进入目录：~/Library/Developer/Xcode/Products 删除对应无用的应用就可以！！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Archives","slug":"Archives","permalink":"https://iHTCboy.com/tags/Archives/"},{"name":"Xcode","slug":"Xcode","permalink":"https://iHTCboy.com/tags/Xcode/"}]},{"title":"NSDateFormatter的hh与HH和yyyy与YYYY出坑","date":"2016-10-11T15:30:16.000Z","path":"2016/10/11/2016_NSDateFormatter的hh与HH和yyyy与YYYY出坑/","text":"原因最近发现应用的倒计时显示为00:00:00，开始以为后台给的时间问题，然后怀疑是缓存问题，跟着代码调试了很久，终于发现原因。 123NSDateFormatter *formatter = [[NSDateFormatter alloc] init];formatter.dateFormat = @\"yyyy-MM-dd hh:mm:ss\";NSDate *nowDate = [formatter dateFromString:currentTime]; 发现一台设备调试显示： nowDate == nil 其它设备日期显示正确 解决 @”yyyy-MM-dd hh:mm:ss”; 改成 @”yyyy-MM-dd HH:mm:ss”; hh:mm:ss按照12小时制的格式进行字符串格式化如果时间处于00：00：00——12：59：59，则返回的字符串正常如果时间处于13：00：00——23：59：59，则返回的字符串是实际时间-12小时后的值，也就是说比真实的时间少了12个小时。 HH:mm:ss按照24小时制的格式进行字符串格式化 当手机时间为任意一个区间，则返回的字符串都是正常的。 参考时间格式化hh:mm:ss和HH:mm:ss区别NSDateFormatter的yyyy和YYYY到底什么区别 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"HH","slug":"HH","permalink":"https://iHTCboy.com/tags/HH/"},{"name":"NSDateFormatter","slug":"NSDateFormatter","permalink":"https://iHTCboy.com/tags/NSDateFormatter/"},{"name":"YYYY","slug":"YYYY","permalink":"https://iHTCboy.com/tags/YYYY/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"iOS CoreSpotlightSearch探索之道","date":"2016-06-18T10:17:16.000Z","path":"2016/06/18/2016_iOS_CoreSpotlightSearch探索之道/","text":"前言看到上图的搜索结果，找完了文档都没有发现这个效果怎样实现，我也是醉了，然后不小心看到下图，我相信有方法能实现，只是现在还没有发现！ 研究了几天，还是让我找到了结果，苹果还是不行啊，还是我不行？反正一路过来，不容易！！自己想实现的效果，含泪也要实现出来—.— 下面就是探索之道，喜欢看代码的就直接先上代码看吧 CoreSpotlightSearchDemo 1、普通类型一般应用搜索出来的结果都是一图片，一标题，一内容 但是如果想实现没有图片呢？如下图：123456789101112131415161718192021222324252627282930313233 // 把一个空数据赋给图片对象，然后系统好像判断了如果没有图片，则不显示？ attributedSet.thumbnailData = [NSData new];``` ### 2.右上角带有时间右上角带有时间的类型，一直看文档和网上的教程，都没有发现时间的设置，一般都是简单提一下怎么设置然后显示，不求甚解？！![带有时间的](http://upload-images.jianshu.io/upload_images/99517-ba6003190161f2c5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)``` // 显示时间的必要条件 attributedSet.contentType = (NSString*)kUTTypeMessage; attributedSet.contentCreationDate = [NSDate date];``` ### 3.显示电话下图是实现的电话显示和系统通讯录的搜索结果比较，系统有FaceTime的会显示，没有就隐藏，同时有发送短信的功能。但是系统好像没有开放这么多功能给开发者，只是给了电话的显示。而且，电话设置多个号码，但是点击时，直接打数据数组的第一个号码。最后是图标也不一样，系统的电话图标是实心的，实现的却是空心，累都凉了。``` // 显示的必要条件，是一个数据，可以有多个号码，但只会读第一个电话 attributedSet.phoneNumbers = @[@\"12345678\",@\"42535353\"]; attributedSet.supportsPhoneCall = @1;``` ![实现的电话类型png](http://upload-images.jianshu.io/upload_images/99517-f20fb4943676011f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![通讯录.png](http://upload-images.jianshu.io/upload_images/99517-6f5f9aa97a5dd3db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![有多个号码系统打电话则显示多个选择.PNG](http://upload-images.jianshu.io/upload_images/99517-bf0bdb549134fa58.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)### 4.带有位置导航的点击导航会跳转到地图，然后系统自动导航（代码里写好了经纬度），系统的地图都没有显示这个图标出来，就是这样了。提醒的是，如果你点击导航图标默认是跳转到系统的地图，然后是你当前地点到目标地点的线路规范，然后就可以导航了。如果点击cell其它内容，则跳转回应用，自己实现逻辑。![位置导航类型.png](http://upload-images.jianshu.io/upload_images/99517-8ccdd6d64132edc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) // 显示的必要条件，经纬度 attributedSet.longitude = @113.270793; attributedSet.latitude = @23.135308; attributedSet.supportsNavigation = @1; 12345### 5.带有星星评价的这个测试了很久才显示出来的，心累了。星星的显示，只能是整数个或者半个星星，最大是5，就是显示5星。星星后面还可以星星的评价说明，这个起点缀作用啦！![带星星评价](http://upload-images.jianshu.io/upload_images/99517-8ff8d409ba87cac9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) //要选中对应的媒体类型 attributedSet.contentType = (NSString) kUTTypeAudio;// attributedSet.contentType = (NSString) kUTTypeMovie; attributedSet.rating = @3.5; attributedSet.ratingDescription = @”raign44”;123456### 6.音乐我实现出来的音乐跟系统的音乐显示完全不一样，不清楚是我这边没有实现，还是苹果没有开放接口。我感觉是苹果没有开放的原因，如果你实现了一定要告诉我，我会知错就改的。![音乐类型](http://upload-images.jianshu.io/upload_images/99517-18253ee128b3f451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![ 苹果音乐.PNG](http://upload-images.jianshu.io/upload_images/99517-3ebc424e2ecb1f06.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) attributedSet.contentType = (NSString*) kUTTypeAudio; attributedSet.album = @\"album\"; attributedSet.lyricist = @\"lyricist\"; attributedSet.composer = @\"composer\"; attributedSet.artist = @\"artist\"; ``` 7.文档类型【未实现】这个也没有测试出来，等高手。文档类型带的是时间的修复。找到字段，设置了，但没有显示出来。下面是印象笔记和有道云笔记实现的效果。 8.邮件类型【未实现】系统的邮件类型显示分三行的。第一行是发件人，第二行是主题，第三行是内容。但是我还是没有找到苹果实现的效果。QQ邮箱显示的也是三行，但是他用了一个技巧，就是内容用了一个换行\\\\n，让内容一分为二，这样的效果我只能说将就了，但系统的实现我也没有找到，知道的麻烦也通知一下我，我一个星期在嘛呀。。 9.搜索关键字？最特别的是，我在搜索很多关键字时，发现京东每一次都出现，并且关键字也命中啦！如下图： 当时我就疑惑，这tm的怎么实现的！！！x爆天了！查看了系统的文档，都没有发现这样的搜索接口。然后想到 关键字的搜索，比如用&quot;*&quot; &quot;?&quot;，但是发现系统是无法代替换搜索的。最后想到京东覆盖了非常多的关键字，就是大量的注入关键字！！。这招真服了！！ 关于大量注入，我测试了一万条，因为系统的索引建立是在子线程执行，然后其实也没有什么大问题。 10.其它类型有了前面的类型，想要让你搜索结果显示的不一样，就是综合其它效果，做出自己漂亮吸引的形式啦！！如下是京东的商品显示，效果感觉还可以。当然，其它应用应该找到合适自己的显示，或好的让用户点击的欲望吧！ 11.言外之意从前面就可以看出，CSS(CoreSpotlightSearch)有非常多，非常复杂的知识，很多需要大家了解搜索吧。比如可以设置搜索关键字@property(nullable, copy) NSArray&lt;NSString*&gt; *keywords; ，也可以设置每一条搜索的过期时间@property (copy, null_resettable) NSDate * expirationDate，当然还可以删除某条记录或全部，关于更新，我发现每一条记录是根据UniqueIdentifier，如果发现相同的UniqueIdentifier，则系统会覆盖原来的内容，从而达到更新的作用。还有点击搜索结果，跳转回应用做逻辑处理，大家可以参考本文结尾的参考文章来学习，在这里就不多言了。 12.写写总结代码写的越多，对人生的感悟越多，对代码也产生了敬畏之道。有人说，代码产生的是对用户的作用，不要一言追求重构，新技术。一个小小的功能，也许就是用户继续使用你的App的惟一原因，而不是这一次你重构了多少代码。 所以，在使用CSS时，应该考虑怎么为用户提供优质的搜索结果，而不是竞争或出风头！ 因为用户有权选择不显示应用的搜索结果： 但我在想，我安装了200+应用，有时候都不想显示，苹果没有一个全部关闭的按钮，我想这不是苹果不知道，而是不“为”！就是希望用户保留搜索，一个大数据的时代！！ 当然，我们在使用时，是不是也要关心一直搜索隐私问题，苹果说了(他说了算)： 参考 如何使用iOS 9的Core Spotlight框架 iOS开发之Core Spotlight实战 Core Spotlight Framework Reference App Search Programming Guide/ Search Drives User Engagement Introducing Search APIs - WWDC 2015 - Videos - Apple Developer 快速上手 Core Spotlight iOS9适配 《AdaptationTips》 喜欢的点赞一个，有问题先看代码吧，欢迎留言交流！Demo: CoreSpotlightSearchDemo 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"CoreSpotlightSearch","slug":"CoreSpotlightSearch","permalink":"https://iHTCboy.com/tags/CoreSpotlightSearch/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"彻底删除Mac下iMessage的历史聊天记录","date":"2016-05-18T07:49:16.000Z","path":"2016/05/18/2016_彻底删除Mac下iMessage的历史聊天记录/","text":"最近在用iMessage群发短信，然后就有了正文： 1、清空数据库在Finder桌面时，按住Option键后点“前往”-“资源库”即可，/Users/XXX/Library/Messages/Archive，XXX是当前的用户名。里面就有历史记录的。 2、快速删除单条记录组合键 option+command+delete(大的那个 小键盘不管用) 参考 iMessage推广（群发）技术研究 怎样实现iMessage群发 AppleScript的终极入门手册 彻底删除imessage记录 如何在os x中批量删除iMessage？ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Mac","slug":"Mac","permalink":"https://iHTCboy.com/tags/Mac/"},{"name":"iMessage","slug":"iMessage","permalink":"https://iHTCboy.com/tags/iMessage/"}]},{"title":"草从集1.0【2015年总结】.ipa","date":"2015-12-30T17:54:26.000Z","path":"2015/12/31/2015_最后的总结/","text":"序言这一年，改变很多，从学生角色，完全成为一个职场能人。一路过来，不及思考，不及选择，不及放弃。现在回想，也就如此，也值一谈，就此开始！ 第一章 最后的桂林实习想起年初，还在桂林市区实习，从上年10月开始，那日子过的太美好了，以致于现在来看，进步的不够多，也留下了对工作的认知。 说点实在的吧。实习时为了产品上线，曾在公司睡过觉；因为太闲，也曾经跟老板哭诉过；因为年轻，也曾经不估而终。现在想起来，已经没有那么可怕，只是现在如果叫我在加班到12点，已经不可能了，人总是这样，经过好的东西好，坏的东西，就不想在接触。 回顾起来，还是感谢当初公司给我这个实习机会(虽然公司已经倒闭)，然后，公司的同事都很友好，行政妹纸很漂亮，说起来也很感谢我的组长，虽然当时不敢给我做太多东西，现在想想，只是我不主动去问，不主动去学，以致进步那么慢，现在回想，也不明白当初忙什么。 说点其它，就是公司的普遍情况，就是员工总是会偷懒，而老板也没有办法。想起KPI, 超过10个bug扣工资，很多问题，解决方案总是不完美，追求的到底又是什么，有能力，你可以选择。 说到生活，习惯于一个人的生活，一个人的晚餐（乐于苦逼），很大的床，没有断的网和电，没有声音，一切都很安静，还有习惯的早餐：粽子，辞职那个实习生告诉我，他接了私活，1个月赚7k，那时候我知道我也可以，但发现自己没有突破自己，经验是练习出来的，自信也一样。自信点，你OK！ 第二章 最后的大学时光记得很清楚，1月20号回学校，因为连工资都不要了。现在想想，工资也没多少，所以，期待明年，一个有梦的年轻人。说远了，回到学校，还是学校每学期最后的菜———— 生产实习，尽做一些没有技术的工作。但是发现，自己很努力，做了一个LBS的应用，这个其实还是要感谢实习的公司，让我入手了地图这一块东西，让我产生做一个云图的想法。 待在学校，有一个不好，就是懒，没有上班，不想早起，没有压力，不想学习。坚持着最后的跑步，那个时候，其实还是有点太自信，还有想放假的松散，25号就回家了，没有想到，这么快，大学生活真的结束了，真的如此之快，已经在没有机会在图书馆待上一个上午，已经没有机会在操场上跑几圈。 如果现在回想，大学有什么遗憾，我想说，英语是我的第一个做的最差的事，虽然现在英语强了很多，但是还是不够，不知道有生之年能不能说出一口流利的英文？哈哈，其次就是学习的方向，一直在网络和编程纠结，大二大三在网络上用尽心血，导致得大病，其实，我一直保持着乐观的心态，感谢那一次的死神之交。我知道我欠这个世界的东西太多，还不能就这样没有了。也许是太努力了，一直没有想过淡女朋友，也遇到一些喜欢的女孩，无法一见相识吧，现在回想，也没有什么遗憾吧。最好的还在前方等我，只有我努力得足够优秀，她才会看得见我吧！哈哈～ 第三章 最后的论文答辩过完年，就一直在广州实习，根本已经没有了害怕学校的思想，学校不在是避风港，我也要断奶！请了一个星期回来答辩，久别大学，回去时已经是6月，学生还是学生，只是自己已经变了罢。那几天，还是去了图书馆和操场，拍了一组大学照片留念，也就匆匆离去。 想想，那时候还有人帮我改论文格式，大学认识到几个人，还是要感谢一番，长见识的时候，不要害羞，勇敢勇敢！一生没有多少回相聚，此刻一别，又是人间多少年！ 当我把最后的行李箱拉到大门后，我已经没有当初刚入学的喜悦，也没有寒暑假的愉快，惟一难舍的都在校园的每个角落，永远带不走。心走远，人定行。 第四章 实习到工作的大半年从3月到现在的大半年，想想当初，找工作就定下来，虽然在广州长大，但是对广州市区其实一点都不熟悉，从来没有来广州市区玩。好了，开始工作吧！ 现在想想，当初没有经验，找工作很随便，也进很多坑，现在长大了，应该去选择一些不同的世界。先说回工作，当初的想法时，不考虑工资，有机会就把握机会，有学习就多学习，导致其实自己前几个月一分钱都没有，这是教训。这也暴露了我一个一直以来严重的问题，没有清楚认识自己，到底自己值多少钱？还要别人来评价，那么就是不值钱。所以，我想对毕业生说：清楚自己的能力和价格，你才能突破自己，超越自我！ 来点实在的。在公司机会很大，大到只有我一个人负责iOS（这尼玛工资不大呢），是不是机会大大！！确实，这段时间让我成长非常多，要感谢公司的。可惜，在我要走时，我还是不想吐槽一下。因为我们总是说公司福利不好，但是对比公司其它部门，我们的福利已经很好。当然，对我来说，你有能力选择更好的机会，那么无可厚非我会选择更好的！ 说到工作，实在点的，就是工作久了，你就想偷懒，感觉没有激情，生活重复，工作重复。发现公司的种种不是，吐槽公司的每一个角落，八卦公司的花边新闻。当失去信仰时，我应该换一个地方思索了；当无法在吐槽时，我应该换一个地方呼吸了；当累了，休息一下，下一站，更漂亮！ 第五章 生活的一两点看了一下今年的计划： 锻炼 存钱 读书 游玩 锻炼：今年养成了跑步的习惯，虽然一周一次，现在轻松跑个15圈，真的想不到，以前体测什么的，最害怕跑步。当年只顾学习，出来混的总是要还的。锻炼，这个事，在家也可以，每天要让出一些时间来做。加油！ 存钱：存了多少？？哈哈，不多，其实就是自己那么一点，因为当初工薪也不高，慢慢的，靠自己努力吧。明年计划大大的，哈哈！ 读书：没有统一，估计读了20本？30本？反正很忙，但是，读的书都有体会？？明年计划，每一本书都写一个读书笔记，好记忆，不如烂笔头！ 游玩：计划一个月在广州游玩一次，已经实现了，生活中最快乐的，就是游着玩，第一个风景和美食，都有不一样的文化，且听君一言！ 第六章 学习的一两点 iOS android swift python 对于学习这个东西，体会很深刻。以前在学校，想学习什么就学习什么，以为多学习一点，将来可能会用的上，在学校确实不会发现什么不对，因为根本没有机会证明你学习的东西，是否真会用的上。出来工作后，也以为多学习一些，就会利害一些，同时发现，自己只是懂一些皮毛，技术每天都在更新，世界每天都在变。 今年计划学习4门技术，但后来发现，自己东一点，西一点，其实什么都没有精通，想跳槽，却发现自己不行？！所以，学习上，明年还是专注iOS，swift，其它的就是有时间学习一下，不会作为重点要突破，大概就这样，行动吧！ 第七章 2016年计划 锻炼健康 存钱节俭 读书学习 旅游娱乐 锻炼健康 ：除了锻炼，还要多关注自己的体重，由于天天坐办公室，肚子会大，同时加班、熬夜等，要早睡，多吃水果等。 存钱节俭 ：计划每月存固定的钱，绝对不能拿出来用，没有钱就看着办，干等下个朋工资这样。同时，也要节俭，不用卖的东西，绝不要买。 读书学习 ：主要专注iOS相关，还有领导、演讲、博弈、文化、经济等，多个知识体系的大全观。 旅游娱乐 ：长线：上海、杭州、北京、西藏； 短线：深圳、清远、东莞、珠海、（香港、澳门） 2016，马上行动！","tags":[{"name":"2016","slug":"2016","permalink":"https://iHTCboy.com/tags/2016/"},{"name":"年终奖","slug":"年终奖","permalink":"https://iHTCboy.com/tags/年终奖/"},{"name":"年终总结","slug":"年终总结","permalink":"https://iHTCboy.com/tags/年终总结/"},{"name":"草从集","slug":"草从集","permalink":"https://iHTCboy.com/tags/草从集/"}]},{"title":"iOS快速枚举中stop注意事项","date":"2015-12-17T00:03:26.000Z","path":"2015/12/17/2015_iOS快速枚举中stop注意事项/","text":"最近有一个需要，只存储服务器返回数组里最多3个照片，所以遍历数时需要做一个判断： 1.版本11234[picArray enumerateObjectsUsingBlock:^(NSDictionary * dic, NSUInteger idx, BOOL * _Nonnull stop) &#123; if(idx &gt;2) *stop = YES;//最多3张照片 [pics addObject:[dic objectForKey:@\"picture\"]];&#125;]; 2.版本21234[picArray enumerateObjectsUsingBlock:^(NSDictionary * dic, NSUInteger idx, BOOL * _Nonnull stop) &#123; [pics addObject:[dic objectForKey:@\"picture\"]]; if(idx &gt;2) *stop = YES;//最多3张照片 &#125;]; 3.版本312345[picArray enumerateObjectsUsingBlock:^(NSDictionary * dic, NSUInteger idx, BOOL * _Nonnull stop) &#123; if(idx &gt;1) *stop = YES;//最多3张照片 [pics addObject:[dic objectForKey:@\"picture\"]]; //也可以写在这里 if(idx &gt;1) *stop = YES;//最多3张照片 &#125;]; 注意点大家看懂了吗，*stop＝ YES；时，不会马上结束本次遍历，还会执行下面的代码。 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"BOOL * stop","slug":"BOOL-stop","permalink":"https://iHTCboy.com/tags/BOOL-stop/"},{"name":"enumerate","slug":"enumerate","permalink":"https://iHTCboy.com/tags/enumerate/"},{"name":"快速枚举","slug":"快速枚举","permalink":"https://iHTCboy.com/tags/快速枚举/"}]},{"title":"iOS项目添加WatchKit App模块实践","date":"2015-11-02T17:05:26.000Z","path":"2015/11/03/2015_iOS项目添加WatchKit_App模块实践/","text":"最近在公司原来一个项目里增加了Apple Watch模块，遇到了很多坑。首先说明，本人目前对Swift还不深入熟悉，所以还是打算在原项目里用OC来实现。其次，我用了Apple Watch3个月了，还是第一次入门，看了喵神的教程，一步步来的。想想WatchOS 都2了，再不用用都老了。 下面简单说一下这个过程： 0、前言如果在这之前，你没有看过或了解WatchKit相关内容，那么建议你读喵神的两篇文章Apple WatchKit 初探、WWDC15 Session笔记 - 30 分钟开发一个简单的 watchOS 2 app 一、增加watchOS这个步骤就看图带过吧，对于还不知道的新手来说，看图最直接： 1.新建Target 2.选择 watchOS 3.这步骤注意，默认勾选了Notification Scene，要解释一下： Glance Scene ： 如果勾选，就会在Interface.storyboard里默认生成GlanceController的界面，如果原来选中了，后来想不要，就直接在Interface.storyboard里把GlanceController界面删除就可以了。 Complication : 这个就是在系统表盘显示时，滚动 Digital Crown 时，进行一些操作，现在OS2里增加的时间旅行，就是滚动 Digital Crown时，天气和日程表计划跟着变动，这个功能还是有点用的。 4.点击激活吧 5.最后在原来项目里增加了这两个目录App和Extension。 二、一些坑要填1.默认新建的Target版本都是1.0，所以你要改成跟你现在项目的版本一样才行，不然就会报错。App和Extension的Target版本都要改。 2.默认App和Extension的Valid Architectures都是“armv7 armv7s i386 arm64”WatchOS运行的框架要改为armv7k。如果要在模拟器运行，增加i386。 还有一些其实的小问题，不太记得了，相信大家如果遇到自行搜索就能解决。 三、一些代码Watch显示的界面全部由Interface.storyboard里的界面生成，逻辑就是在Extension里写，具体也没什么好写的，由于我是用OC写的，连图片缓存的都不会，参考了喵神原OS1文章： 在 Extension 的 target 中获得图片 (比如从网络下载或者代码动态生成等)，并且需要重复使用的话，最好用 WKInterfaceDevice 的 -addCachedImage:name: 方法将其缓存到手表中。这样，当我们之后再使用这张图片的时候就可以直接通过 -setImageNamed: 来快速地从手表上生成并使用了。每个 app 的 cache 的尺寸大约是 20M，超过的话 WatchKit 将会从最老的数据开始删除，以腾出空间存储新的数据。 现在OS2就出现几个问题： 1.add方法增加的是图片的名字，如果我是从网络下载的，名字怎么取？ 2.如何判断有没有缓存？ 3.OS2默认已经不会自动删除旧的数据了？ WKInterfaceDevice类里的*cachedImages这个属性OS2下报错，不知道为什么？有懂的求留言。1@property (nonatomic, readonly, strong) NSDictionary&lt;NSString*, NSNumber*&gt; *cachedImages WK_AVAILABLE_IOS_ONLY(8.2); // name and size of cached images 在这篇文章Apple Watch应用优化的一些心得技巧总结找到一些图片优化的方法WatchKit用的图片库：Github上的WKImageCache，或者直接用KFSwiftImageLoader,或者有新的库，暂时没有去研究，求补充。 最后提供一个WatchKit下用的NSURLSession方法，网上都是Swift写，OC这样写： 1234567891011121314NSString *requestUrl= @\"http://www.google.com\";NSURLSession * session = [NSURLSession sharedSession];NSURLSessionDataTask * task = [session dataTaskWithURL:[NSURL URLWithString:requestUrl] completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123; if(data!=nil)&#123;// 请求成功 NSDictionary *resultDic = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableLeaves error:nil]; &#125;else&#123;//请求失败 &#125; &#125;];[task resume];// 调用这个方法才会去请求网络 四、审核的一些坑前面提到勾选 include Glance Scene 和 include Complication ，结果在实现时，没有搞好，直接在Glance Scene里显示一个下载链接的二维码，苹果审核员问我二维码是干什么用的？它会变吗？ Glance Scene最好要用一些有意义的数据显示 Complication这个，我是勾选了，第二次又被拒绝，我想说，苹果审核能一次审核全部功能吗？？？？ 取消Complication功能，就是把下图的Data Source Class删除，在把五个勾去掉就可以了： 终于改了，希望审核明天通过吧！！ 五、总结关于Watch App审核，如果你选择了某个功能，但没有实现，那么一定会被拒绝的，大家注意一下这点，坑就来那里～ 用了一个星期，了解了WatchKit的基础功能，实现了基本的需求。其实发现，刚开始很害怕实现不了，或者说，去做时知道一定会遇到很多问题，所以不敢去碰它。作为工程师，我们需要恒心和勇气，才能面对接下来的大数据时代，我们的知道时刻要充电，做好准备吧！ 最后想吐槽一下苹果Watch，不知道是不是只有我遇到这个问题，表盘下面掉漆，这是苹果的技术吗？？？ 参考 Apple WatchKit 初探 WWDC15 Session笔记 - 30 分钟开发一个简单的 watchOS 2 app Apple Watch应用优化的一些心得技巧总结 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Watch App","slug":"Watch-App","permalink":"https://iHTCboy.com/tags/Watch-App/"},{"name":"WatchKit","slug":"WatchKit","permalink":"https://iHTCboy.com/tags/WatchKit/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"第三方登陆图标处理探究","date":"2015-10-18T16:09:26.000Z","path":"2015/10/19/2015_第三方登陆图标处理探究/","text":"很多应用都使用了第三方登陆，但是如果用户没有安装第三方登陆的app，那么怎么处理呢？ 没有安装部分应用的情况 全部安装的情况 探究可以看到，应用在处理一些界面时，不但是要按照设计图来实现，同时也要考虑非正常情况，用户体验就在这里吧，做，或不做，它就在那里，不惊不喜～ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"优雅","slug":"优雅","permalink":"https://iHTCboy.com/tags/优雅/"},{"name":"同步登陆","slug":"同步登陆","permalink":"https://iHTCboy.com/tags/同步登陆/"},{"name":"第三方登陆","slug":"第三方登陆","permalink":"https://iHTCboy.com/tags/第三方登陆/"}]},{"title":"AppStore审核被拒，不能带“屌”","date":"2015-10-18T15:48:24.000Z","path":"2015/10/18/2015_AppStore审核被拒，不能带“屌”/","text":"问题最近app突然被拒，回复里说有 “屌” 字不行？？！！原因说，我的应用是4+评级，所以应用的图标、截图、应用描述不能有“屌”字！！ 讨论应用里有两个地方用到“屌”字 中国互联网屌丝报告 就是这么屌 上面文字，在中国使用应该是正常吧？如果按苹果这个逻辑，是不是AppStore里不能有“屌”字？ 那么问题来了，你一定猜到：这个应用评级一定不是4+！ 是的，你一定也猜到，我找到4+的，并且用“屌”为应用名了： 结论最后，为了尽快上线，我们应用还是删除了相关图片，但是希望，苹果测试能不能“专业”一点，中国国情是什么你懂吗？难道他们就是有一个“敏感词”表，发现这个字，就直接拒绝？？? 希望大家都平时都注意一下～避免意外～ —本文图片来源苹果官方，如有侵权请告知删除。 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"App审核","slug":"App审核","permalink":"https://iHTCboy.com/tags/App审核/"},{"name":"屌","slug":"屌","permalink":"https://iHTCboy.com/tags/屌/"}]},{"title":"QQ和微信同步登陆，AppStore审核被拒4次的坑路","date":"2015-10-16T15:58:26.000Z","path":"2015/10/16/2015_QQ和微信同步登陆，AppStore审核被拒4次的坑路/","text":"最近应用加入了微信和QQ同步登陆，结果被拒绝了4次！！下面就让我带大家回顾这坑路～ 第一次最拒绝第一次以为是苹果测试手机没有安装QQ导致，所以写了代码判断手机是否安装QQ，如果没有安装就隐藏掉QQ登陆图标。 12345678910 //判断是否有qqif (!([QQApiInterface isQQInstalled] &amp;&amp; [QQApiInterface isQQSupportApi])) &#123; view.hideQQ = YES;&#125; //判断是否有微信if (![WXApi isWXAppSupportApi])&#123; view.hideWeixin = YES;&#125; 问题总结 苹果不止用一台设备测试，或者不止一个人测试同一应用 苹果用iPad测试，我觉得因为在iPad上就知道应用支持不支持iPad吧 苹果不允许应用隐藏图标吗？！都没有安装显示毛线啊！ 第二次被拒绝苹果不允许我隐藏图标，那么我就显示出来吧！同时也会判断安装，如果没有安装就提示用户没有安装！这样也不给！！ 第三次被拒绝这次没有办法了，网上的方法说，如果没有key安装QQ的能用web网页登陆～ 腾讯的官方文档翻了个底朝天，友盟的文档也翻了个底朝天，俩demo也翻了个底朝天。经过不懈努力，问题终于解决，原因真是够蛋疼的！！友盟或者QQ互联提供的demo工程是低于xcode6.0创建的，默认工程的info.plist里有Bundle display name和Bundle name两个key。而xcode6.0之后创建的工程的info.plist里没有Bundle display name！！调用腾讯的登录API就弹出个webview界面提示需要安装最新版本QQ。加上这个key就一切正常了，再删掉这个key调用QQ登录绝逼不行！！这tmd腾讯也太操蛋了吧！！！！ 第四次被拒绝最后一次，苹果也有点不耐烦了！！！看到详细说明，如果第三方app没有安装，那么可以用网页授权方式！！终于找到出路了！！但是怎么才能web登陆？？？ 最后，在cocoachina 论坛找到答案： 只要让腾讯客服对appid开通个权限就可以。 总结在这个过程中，也看了一些应用的实现，基本都上面几种方式的一种，但是就能上架，这个苹果的测试人员有很多种吗？？！！不管怎样，就这样走过坑！！应用最终上架了！！ 微信同步登陆如果没有安装微信，微信同步登陆只能通过手机号码，不知道苹果测试员怎么测试呢？！ 参考文章 关于IOS项目QQ空间授权提示安装最新版本的QQ的解决方法 iOS qq第三方登录为什么没有安装qq的时候没有显示登录页面？ - iOS 开发 - 知乎 腾讯aouth提示没有安装QQ软件? android/IOS友盟social对qq/qzone的分享/授权登录支持情况说明表 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"QQ","slug":"QQ","permalink":"https://iHTCboy.com/tags/QQ/"},{"name":"同步登陆","slug":"同步登陆","permalink":"https://iHTCboy.com/tags/同步登陆/"},{"name":"微信","slug":"微信","permalink":"https://iHTCboy.com/tags/微信/"}]},{"title":"iOS开发之让列表滚回最顶端最佳实践","date":"2015-10-01T14:07:22.000Z","path":"2015/10/01/2015_iOS开发之让列表滚回最顶端最佳实践/","text":"原来项目中一直用这个方法滚动回到首页：123NSIndexPath *bottomIndexPath=[NSIndexPath indexPathForItem:0 inSection:0];[self.collectionView scrollToItemAtIndexPath:bottomIndexPath atScrollPosition:UICollectionViewScrollPositionTop animated:YES]; 上面代码是collectionView滚动到第一区第一个，直到有一次应用崩溃，发现第一区没有item!! 尼玛，怎么办！！！ 最后，找到下面代码，这样应用的健壮性又提高了，妈妈在也不用担心数据为空的情况啦！！ 1234567//CGRectMake(0, 0, 1, 1)可以直接返回到UITableView的最顶端[tableview scrollRectToVisible:CGRectMake(0, 0, 1, 1) animated:NO];//CGRectMake(0, 0, 0, 0)设定无效//[tableview scrollRectToVisible:CGRectMake(0, 0, 0, 0) animated:NO]; 上面方法，tableView/collectionView下都有效，直接复用！！！ 参考：iOS开发之让UITableView滚动控制并返回到最顶端 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"TableView","slug":"TableView","permalink":"https://iHTCboy.com/tags/TableView/"},{"name":"collectionView","slug":"collectionView","permalink":"https://iHTCboy.com/tags/collectionView/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"scroll","slug":"scroll","permalink":"https://iHTCboy.com/tags/scroll/"}]},{"title":"Hexo搭建Github Pages博客填坑教程","date":"2015-09-05T17:23:36.000Z","path":"2015/09/06/2015_Hexo搭建Github-Pages博客填坑教程/","text":"目录： 1.安装Hexo 2.部署Hexo 3.Hexo命令 4.一些报错处理 5.博客管理 6.插件（RSS、Sitemap） 7.评论设置 8.404页面 9.统计 10.更新 11.总结 12.参考引用 13.搭建博客相关网站 简述本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌。 1.安装Hexo1$ npm install -g hexo 坑1这里可能安装失败，可以权限不够，在命令前加sudo1$ sudo npm install -g hexo 2.部署Hexo1$ hexo init 注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。执行命令生，会在当前命令的路径下，生成以下文件： 1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json .deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 _drafts：草稿文章 _posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 3.Hexo命令Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。 全局设置 在你博客目录下有一个文件名_config.yml，打开可以配置信息。 局部页面 在你博客目录下 \\themes\\你使用的主题\\_config.yml 写博客相关命令 1234567Hexo常用命令：hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHub 当然，如果每次输入那么长命令，那么一定想到用简写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 其它的，还可以复合命令： 12hexo deploy -ghexo server -g 有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧 1$ hexo clean 当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。 注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。 4.一些报错处理坑2 一 ERROR Plugin load failed: hexo-server原因：Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.解决方法，执行命令：sudo npm install hexo-server 二 执行命令hexo server，有如下提示：Usage: hexo….原因：我认为是没有生成本地服务解决方法，执行命令：npm install hexo-server –save提示：hexo-server@0.1.2 node_modules/hexo-server 三 白板和Cannot GET / 几个字原因:由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： 1234567npm install hexo-renderer-ejs --savenpm install hexo-renderer-stylus --savenpm install hexo-renderer-marked --save这个时候再重新生成静态文件，命令：hexo generate （或hexo g）启动本地服务器：hexo server （或hexo s） 5.博客管理上面命令中，其实生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式： 12345title: Mac提高使用效率的一些方法 #文章的标题，这个才是显示的文章标题，其实文件名不影响date: 2015-09-01 20:33:26 #用命令会自动生成，也可以自己写，所以文章时间可以改categories: technology #文章的分类，这个可以自己定义tags: [Mac,效率,快捷方式] #tag，为文章添加标签，方便搜索--- 当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。 123tags:- tag1- tag2 如果在博客文章列表中，不想全文显示，可以增加 , 后面的内容就不会显示在列表。 1&lt;!--more--&gt; 6.插件 安装插件 1$ npm install &lt;plugin-name&gt; --save 添加RSS1npm install hexo-generator-feed 然后，到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)解决方法：1$ npm install hexo-generator-feed --save 这个命令来自hexo-generator-feed 123456789101112131415Install $ npm install hexo-generator-feed --save Hexo 3: 1.x Hexo 2: 0.xOptions You can configure this plugin in _config.yml. feed: type: atom path: atom.xml limit: 20 type - Feed type. (atom/rss2) path - Feed path. (Default: atom.xml/rss2.xml) limit - Maximum number of posts in the feed (Use 0 or false to show all posts) 其中可以选择：然后在 Hexo 根目录下的 _config.yml 里配置一下 1234567feed: type: atom path: atom.xml limit: 20#type 表示类型, 是 atom 还是 rss2.#path 表示 Feed 路径#limit 最多多少篇最近文章 最后，在 hexo generate之后，会发现public文件夹下多了atom.xml！ 例如要订阅我的blog只要输入ihtc.cc/atom就可以搜寻到啦！ 添加Sitemap Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。 1$ npm install hexo-generator-sitemap --save 这个命令来自hexo-generator-sitemap 1234567891011 Install $ npm install hexo-generator-sitemap --save Hexo 3: 1.x Hexo 2: 0.xOptions You can configure this plugin in _config.yml. sitemap: path: sitemap.xml path - Sitemap path. (Default: sitemap.xml) 同样可以选择：在 Hexo 根目录下的 _config.yml 里配置一下 123sitemap: path: sitemap.xml #path 表示 Sitemap 的路径. 默认为 sitemap.xml. 对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装 1$ npm install hexo-generator-baidu-sitemap --save 然后在 Hexo 根目录下的 _config.yml 里配置一下 12baidusitemap: path: baidusitemap.xml 为了博客有更好的展示率, 最好的方式是通过搜索引擎, 提交 Sitemap文件是一个方式，具体可参考： Hexo 优化与定制(二) | Kang Lu’s Blog ｜Hexo优化｜如何向google提交sitemap（详细） | Fiona’s Blog 其它插件Plugins · hexojs/hexo 7.评论设置在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的多说评论系统。 需要说明的是 short_name:字段，这个字段为你多说填写的站点名字，比如我的域名：ihtcboy.duoshuo.com，那么我的short_name:”ihtcboy” 8.404页面 GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。其实，404页面可以做更多有意义的事，来做个404公益项目吧。 腾讯公益 404.html : 12345678910111213141516171819202122232425&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;404&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;br&gt;&lt;!--&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;公益404 | 不如&lt;/title&gt;&lt;/head&gt;&lt;body&gt;#404 Not found By Bruce&lt;h1&gt;404 Page Not Found&lt;/h1&gt;--&gt;&lt;br&gt;&lt;script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;br&gt;&lt;!--公益404介接入地址益云公益404 http://yibo.iyiyun.com/Index/web404腾讯公益404 http://www.qq.com/404失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw--&gt;&lt;br&gt;&lt;/body&gt;&lt;/html&gt; 复制上面代码，贴粘到目录下新建的404.html即可！ 9.统计 因Google Analytics偶尔被墙，故国内用百度统计 最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：不蒜子本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。 为hexo博客添加访问次数统计功能 | 不如 10.更新 更新hexo： 1npm update -g hexo 更新主题： 12cd themes/你的主题git pull 更新插件： 1npm update 11.总结本文主要是解释了自己搭建过程中遇到的问题，还有综合了其它Hexo教程的总结，还有图床、搜索、CDN加速等内容没有说到，大家用到可以自行百度谷歌！ 12.参考引用如何搭建一个独立博客——简明Github Pages与Hexo教程hexo系列教程：（一）hexo介绍 | Zippera’s bloghexo系列教程：（二）搭建hexo博客 | Zippera’s bloghexo你的博客 | 不如使用hexo搭建博客 | Alimon’s Bloghexo边搭边记 | sunnyxx的技术博客hexo搭建静态博客以及优化 | Joanna’s coding blogHEXO+Github,搭建属于自己的博客 - 简书在hexo自訂rss | kpman | codeRSS/Atom、Sitemap for SEO | Michael Hsu.twHexo 优化与定制(二) | Kang Lu’s BlogHexo | { GoonX }不蒜子 | 不如 13.搭建博客相关网站Hexo官网hexojs/hexoGitHub Pages 14.个人域名添加SSL阿里云版本：Github pages个人域名添加SSL | 温柔小猪 其它版本：为自定义域名的GitHub Pages添加SSL 完整方案 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Github Pages","slug":"Github-Pages","permalink":"https://iHTCboy.com/tags/Github-Pages/"},{"name":"Hexo","slug":"Hexo","permalink":"https://iHTCboy.com/tags/Hexo/"},{"name":"搭建博客","slug":"搭建博客","permalink":"https://iHTCboy.com/tags/搭建博客/"}]},{"title":"草从集0.5.ipa","date":"2015-09-04T15:46:26.000Z","path":"2015/09/04/2015_草从集0.5_ipa/","text":"说多不重，说长不远，也有工作半年啦，而这些，对于我来说，现在回过去总结，总是有点刚刚毕业那些的感动，有点刚刚梦想那种不怕的向上情怀。从心理学上，心智成熟并不是那么重要；从哲学上，明悟并不是那么着急；从肉体上，健康并不是那么锻炼；从智力上，工作并不是那么回事…. 从心开始其实，有点怀旧，并不是说不能一天睡到晚，只是能一天到晚看一本书，已经是一种奢侈。只是工作多了，慢慢接受变不回的学生时代，理解不能改变的事，然而还在乎那些希望，有时候，心太硬，也去行动，更多的是心软，着急于那些河流的奔流，逃亡于那些僵尸的麻木。 半年过去，还是想重心再来，没有太多的想法。回首四年，太多的感动，有非常多，说不出来的默默的感动。有时候我们抱怨，想想那些美好的昨天，可笑的我们都抱怨明天了。有些事太泛，仅仅只于文字，体验不到的，永远只有自己心里知道，哭过的，笑过的，害怕的，孤独的，无奈的，内疚的，太多太多的，我都忘记了。现在看来，都只是开始，承担、负责、成长、奋斗、寂寞、倾城、红灯、绿光、物欲、纵流。更多的，一份成熟，一份努力，一份稳定，一份梦想！ 工作大学的时候，一直不知道自己要做什么，一直在想，这个不会，那个不会，这个难学，那个难掌握，这个没前途，那个还没火！！ 现在看来，都淡于工作之外。终于明白，其实那时的自己，找各种借口，给各种理由，让自己迷茫，然后就继续装逼，继续赶路，然后明天那些幸福的校园，我不反对各种玩，玩出自己的人生大有人在。可惜，我可以告诉你，你都是个例！！个例！！个例！！重要的话要说三遍！ 总结：5W:工作跟学习没有二样，都是做，不同的是， 自己去做，被逼去做 或者 被逼去做，自己去做 ，顺序也是！马云首富今年多少岁？你今年多少岁？你们差距在那里？ how: 只管去做！ 技术其实，真正写代码，也就是近一年的事，没有想到！没有想到！没有想到！真的有很多我自己都不相信，一句话，就是靠那么小点运气，走到今天！如果说，我进步怎样？可以说，这一年，进步很大，如果说，我满意吗? 我只说，没有尽全力。 思想 现在，公司的同事交流，都跟我说一句： “永远不要当一个码农！” 对于技术的优劣，好坏，有一个理解，这就是Thinking in C/C++/Java/OC/Python/…. 理解 写的代码多了，发现码如其人，看一个人的代码，就知道这个人的水平，性格，能力，思想，人品…很多经典的书都是这样，日月、人件、原件… 理解思想只是第一层，理解人与机器的区别会更进一层，理解人与机器与人的整合… 总结 掌握基本MarkDown写作，这个要感谢简书，这个语法真很棒！ iOS开发能力的提高，目前还是处于初级向中级的进阶，真的不能在水的水。 Swift、HTML5/CSS3、Python语言的学习，目前只是语法水平，等下就去实践-。- Java、Android的学习，今年能入门吗？？不要问我～·～ 了解基本的测试用例，自动化测试知识，测试的妹子真的不容易，知识多又碎。。 Git/SVN/GitHub版本管理，还有项目管理等各种偷懒牛逼工具～ 扩展出来的，还有各种算法，数据结构之数学之美！ 生活其实，我不太喜欢说生活，尽管我很开心分享我的生活，只是我的生活都是在学习，生活没有太多东西，就是喜欢看书，跑步，烹饪，风景。当然，还有感情，哈哈，不想多说，人生里遇到父母就足够幸福了，还遇到你们，那就是福上福！当然，也不会满足，希望更多东西可以改变，更多东西可以控制，慢慢的欲望又归来了，生活是什么？没有太明白时，就体验一下别人的生活，你就明白，自己错了太离谱！ 计划 看书学习 每星期锻炼一次以上 每月出去一次看风景 煮饭煲汤 每月回家一次 请参加以上 其它当然，还有很多东西，现在不敢说或不想说的，可能日子长了，慢慢的会想开点，减少自己一些秘密空间，好让自己休息休息。来回，就是上面几个主题之间的平衡中庸～ 展望 希望家友和睦，爸妈安心. 保持自己内心的热量. inner peace yourself. 最后，用《了不起的盖茨比》里的前言，结束半年的一切，迎接下来的半年！ “我年纪还轻，阅历不深的时候，我父亲教导过我一句话，我至今还念念不忘。 “每逢你想要批评任何人的时候，”他对我说，“要记住，这个世界上并非所有的人，都有你拥有的那些优越条件。” Copyright 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"总结","slug":"总结","permalink":"https://iHTCboy.com/tags/总结/"},{"name":"生活","slug":"生活","permalink":"https://iHTCboy.com/tags/生活/"},{"name":"草从集","slug":"草从集","permalink":"https://iHTCboy.com/tags/草从集/"}]},{"title":"如何学到老","date":"2015-09-03T02:33:26.000Z","path":"2015/09/03/2015_如何学到老/","text":"1、怎样学深？ 一万小时定律 2、怎样去学？ 劳逸结合 望闻问切（听说读写看） 3、怎样坚持？ 保持好奇心 服汤：不必再配合其它鸡汤服用，日省三服，学之，老之","tags":[{"name":"Mac","slug":"Mac","permalink":"https://iHTCboy.com/tags/Mac/"},{"name":"快捷方式","slug":"快捷方式","permalink":"https://iHTCboy.com/tags/快捷方式/"},{"name":"效率","slug":"效率","permalink":"https://iHTCboy.com/tags/效率/"}]},{"title":"支付宝手表？YunOSWatch","date":"2015-09-02T12:33:26.000Z","path":"2015/09/02/2015_支付宝手表？YunOSWatch/","text":"今天下载支付宝应用查看里面的数据时，发现了一个YunOSWatch.bundle YunOSWatch目录下，两张图片很显眼： 刚开始以为是苹果手表： 这张很明显是YunOS?! 这张是展望图吧？ 我查看了iOS版支付宝、apple watch上的所有功能，都没有发现上面3张图，是不是支付宝也打算通过手机、手表，打开自己的支付闭环平台？！非常期待！ 支付宝手表？真的有了婊子了？！ ps：如果分析有错，欢迎在评论区讨论～ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"YunOSWatch","slug":"YunOSWatch","permalink":"https://iHTCboy.com/tags/YunOSWatch/"},{"name":"iWatch","slug":"iWatch","permalink":"https://iHTCboy.com/tags/iWatch/"},{"name":"支付宝手表","slug":"支付宝手表","permalink":"https://iHTCboy.com/tags/支付宝手表/"}]},{"title":"人生再歌，只爱今熙","date":"2015-09-01T14:57:17.000Z","path":"2015/09/01/2015_start-to-new/","text":"校园走回那个青春的树底淡出那道池塘的金鱼走进那些动情的书架梦里那年我们的童真","tags":[{"name":"宁夏","slug":"宁夏","permalink":"https://iHTCboy.com/tags/宁夏/"},{"name":"工作","slug":"工作","permalink":"https://iHTCboy.com/tags/工作/"},{"name":"开学","slug":"开学","permalink":"https://iHTCboy.com/tags/开学/"},{"name":"新的开始","slug":"新的开始","permalink":"https://iHTCboy.com/tags/新的开始/"},{"name":"校园","slug":"校园","permalink":"https://iHTCboy.com/tags/校园/"},{"name":"毕业","slug":"毕业","permalink":"https://iHTCboy.com/tags/毕业/"}]},{"title":"Mac提高使用效率的一些方法","date":"2015-09-01T12:33:26.000Z","path":"2015/09/01/2015_Mac提高使用效率的一些方法/","text":"一、我的经验之淡1、全局 command + W 关闭当前窗口 command + Q 完全退出应用 command + delete 删除文件 command + I 显示文件(夹)简介(再按command + W 关闭简介） command + `（反斜线键 - Tab 键的上方） 循环显示同一个应用打开的多个窗口 （Finder、Safari、Chrome、Xcode等都有效） control + 电源键 关机 2、手势 三指：如果点击了文件夹，可以拖动，如果光标在文本，可以选择文本。 触发角：鼠标移动到屏幕的四个角时，触发设置好的动作 3、文本编辑 command + ↑ 到文本头部 command + ↓ 到文本尾部 command + ↑ + shift 选中光标左边起到头部全部文本 command + ↓ + shift 选中光标右边起到尾部全部文本 command + ← + shift 选中光标左边全部文本 command + → + shift 选中光标右边全部文本 delete + command 删除光标左边全部文本 delete + option 如果是英文，则删除左边不是英文为间隔的英文文本 delete + fn 删除光标右边一个文字 3、Finder回到上一级目录 command + [ command + ↑到下一级目录 command + ] command + ↓ 4、Safari command + T 新建标签页 command + shift + H 显示首页 有时候我们打开了很多标签，如下图的： 二、网上总结大全1、31个常用的Safari快捷键标签和网页导航快捷键 8 个 切换到下一个标签页 – Control+Tab 切换到上一个标签页 – Control+Shift+Tab 向下滚动一屏 – 空格 向上滚动一屏 – Shift+空格 焦点移到地址栏 – Command+L 新增标签页 – Command+T 在新标签页打开链接 – Command+点按链接 将链接添加到阅读列表 – Shift+点按链接 阅读和查看网页的快捷键 7 个 去除格式，在阅读器中阅读 – Command+Shift+R 增大文字大小 – Command+加号 减小文字大小 – Command+减号 默认文字大小 – Command+0 进入或退出全屏 – Command+Escape 打开主页 – Command+Shift+H 邮寄当前页面的链接 – Command+Shift+I 缓存、载入页面、源代码和弹出窗口的快捷键 5 个 清空浏览器缓存 – Command+Option+E 重新载入页面 – Command+R 停止载入页面 – Command+. 查看页面源代码 – Command+Option+U 禁止弹出窗口 – Command+Shift+K 查找并在找到的项目中导航的快捷键 3 个 在页面上查找文字 – Command+F 向下浏览找到的项目 – 回车 向上浏览找到的项目 – Shift+回车 工具栏、历史记录和阅读列表的快捷键 8 个 隐藏或显示工具栏 – Command+i 隐藏或显示书签栏 – Command+Shift+B 隐藏或显示状态栏 – Command+/ 隐藏或显示标签页栏 – Command+Shift+T 显示 Top Sites – Command+Option+1 显示历史记录 – Command+Option+2 显示阅读列表 – Command+Shift+L 显示下载内容 – Command+Option+L 附加多点触摸手势 4 个 后退 – 两指向左滑动 前进 – 两指向右滑动 缩小 / 减小文字大小 – 两指捏合 放大 / 增大文字大小 – 两指外张 2、系统截图快捷键大全 首先说一下两种截图 1.保存成png到桌面 Command＋shift＋3: 全屏截图，保存截图到桌面 Command＋shift＋4: 鼠标选定区域截图，保存截图到桌面 2.保存到剪切板 Command＋shift＋Ctrl+3: 全屏截图，保存截图到剪切板 Command＋shift＋Ctrl+4: 鼠标选定区域截图，保存截图到剪切板 3.强大的小技巧 使用Command＋shift＋4后，按下空格键，鼠标会变成一个小相机，这时候你使用鼠标对一个窗口点击一下鼠标左键，你已经对一个窗口进行了截图。 按Command＋shift＋4 后 ,画一个抓取的区域，不要松开鼠标，接着: 1. 按住空格可以移动这个区域 2. 按住 Shift后，将锁定X 或者 Y轴进行拖动 3. 按住 Option后 将按照区域圆心进行放大. 最后所有截图将直接显示在桌面上。 更多内容，不定期更新 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Mac","slug":"Mac","permalink":"https://iHTCboy.com/tags/Mac/"},{"name":"快捷方式","slug":"快捷方式","permalink":"https://iHTCboy.com/tags/快捷方式/"},{"name":"效率","slug":"效率","permalink":"https://iHTCboy.com/tags/效率/"}]},{"title":"Hello World","date":"2015-09-01T10:18:18.000Z","path":"2015/09/01/2015_hello-world/","text":"Welcome to 何天从的博客，今天正式开始新的生活！","tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://iHTCboy.com/tags/Hello-World/"},{"name":"blog","slug":"blog","permalink":"https://iHTCboy.com/tags/blog/"}]},{"title":"友盟iOS微信登陆没有回调的原因","date":"2015-08-06T16:22:16.000Z","path":"2015/08/07/2015_友盟iOS微信登陆没有回调的原因/","text":"1、在友盟文档中这样说：链接 17.4 &#24494;&#20449;&#30331;&#24405;&#10;&#28155;&#21152;&#37197;&#32622;&#25991;&#20214;&#21442;&#32771;&#25991;&#26723;&#65306;&#28155;&#21152;&#24494;&#20449;&#21450;&#26379;&#21451;&#22280;&#65292;&#28155;&#21152;&#30456;&#20851;&#24211;&#25991;&#20214;&#65292;&#37197;&#32622;URL schemes&#21450;&#28155;&#21152;&#31995;&#32479;&#22238;&#35843;&#10;&#10;&#27880;&#24847;&#24494;&#20449;&#30331;&#24405;&#24517;&#39035;&#20808;&#22312;&#24494;&#20449;&#24320;&#25918;&#24179;&#21488;&#30003;&#35831;&#24494;&#20449;&#30331;&#24405;&#26435;&#38480;&#10;&#22312;&#20320;&#30340;&#31243;&#24207;APPdelegate&#20837;&#21475;&#26041;&#27861;&#28155;&#21152;&#19979;&#38754;&#30340;&#20195;&#30721;&#10;&#10; #import &#34;UMSocialWechatHandler.h&#34;&#10; //&#35774;&#32622;&#24494;&#20449;AppId&#12289;appSecret&#65292;&#20998;&#20139;url&#10; [UMSocialWechatHandler setWXAppId:@&#34;wxd930ea5d5a258f4f&#34; appSecret:@&#34;db426a9829e4b49a0dcac7b4162da6b6&#34; url:@&#34;http://www.umeng.com/social&#34;];&#10;&#10;&#22312;&#24494;&#20449;&#30331;&#24405;&#25353;&#38062;&#20013;&#23454;&#29616;&#19979;&#38754;&#30340;&#26041;&#27861;&#10;&#10; UMSocialSnsPlatform *snsPlatform = [UMSocialSnsPlatformManager getSocialPlatformWithName:UMShareToWechatSession];&#10;&#10; snsPlatform.loginClickHandler(self,[UMSocialControllerService defaultControllerService],YES,^(UMSocialResponseEntity *response)&#123;&#10;&#10; if (response.responseCode == UMSResponseCodeSuccess) &#123;&#10;&#10; UMSocialAccountEntity *snsAccount = [[UMSocialAccountManager socialAccountDictionary]valueForKey:UMShareToWechatSession];&#10;&#10; NSLog(@&#34;username is %@, uid is %@, token is %@ url is %@&#34;,snsAccount.userName,snsAccount.usid,snsAccount.accessToken,snsAccount.iconURL);&#10;&#10; &#125;&#10;&#10; &#125;);&#10;&#10;&#22312;&#25480;&#26435;&#23436;&#25104;&#21518;&#35843;&#29992;&#33719;&#21462;&#29992;&#25143;&#20449;&#24687;&#30340;&#26041;&#27861;&#10;&#10;//&#24471;&#21040;&#30340;&#25968;&#25454;&#22312;&#22238;&#35843;Block&#23545;&#35937;&#24418;&#21442;respone&#30340;data&#23646;&#24615;&#10;[[UMSocialDataService defaultDataService] requestSnsInformation:UMShareToWechatsession completion:^(UMSocialResponseEntity *response)&#123;&#10; NSLog(@&#34;SnsInformation is %@&#34;,response.data);&#10; &#125;]; 2、实践使用时：1#pragma mark - &#24494;&#20449;&#30331;&#24405;&#10;- (void)loginViewClickedWeiXiButton&#123;&#10; &#10; [UMSocialData setAppKey:@&#34;55bb141a67e58e9f80001801&#34;];&#10; [UMSocialWechatHandler setWXAppId:@&#34;wx2802d4e49f68996f&#34; appSecret:@&#34;f1bf8a16c5f87570ab07782d3e0ab223&#34; url:@&#34;http://www.umeng.com/social&#34;];&#10; UMSocialSnsPlatform *snsPlatform = [UMSocialSnsPlatformManager getSocialPlatformWithName:UMShareToWechatSession];&#10; snsPlatform.loginClickHandler(self,[UMSocialControllerService defaultControllerService],YES,^(UMSocialResponseEntity *response)&#123;&#10; // &#33719;&#21462;&#24494;&#21338;&#29992;&#25143;&#21517;&#12289;uid&#12289;token&#31561;&#10; if (response.responseCode == UMSResponseCodeSuccess) &#123;&#10; UMSocialAccountEntity *snsAccount = [[UMSocialAccountManager socialAccountDictionary]valueForKey:UMShareToWechatSession];&#10; NSLog(@&#34;username is %@, uid is %@, token is %@ iconUrl is %@&#34;,snsAccount.userName,snsAccount.usid,snsAccount.accessToken,snsAccount.iconURL);&#10; &#125;&#10; &#125;);&#10; &#10;&#125; 3、【坑在这里】没有回调时因为要在应用代理方法中增加：1//sdk&#10;#import &#34;UMSocialSnsService.h&#34;&#10;&#10;- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation&#10;&#123;&#10; return [UMSocialSnsService handleOpenURL:url wxApiDelegate:nil];&#10;&#125;&#10;&#10;- (void)applicationDidBecomeActive:(UIApplication *)application&#10;&#123;&#10; [UMSocialSnsService applicationDidBecomeActive];&#10;&#125; 最后说明 微信的openid对应友盟里叫usid 下面是授权成功的回调数据：1- UMSocial: makeRequestWithPath is /share/token/53290df956240b6b4a0084b3/, parameters is &#123;&#10; &#34;access_token&#34; = &#34;OezXcEiiBSKSxW0eoylIeJDUKD6z6dmr42JANLPjNN56WRFnd-vVJO37ma0gCpKY1v5q8EVEMwdQqzvXoFFpe1jQXUzjqukub9-228J8sjvugvVVQYvzkhyvAgItvkYmMIGD_cE2hAWUm44_qCB-oQ&#34;;&#10; ak = 53290df956240b6b4a0084b3;&#10; de = &#34;iPhone7,1&#34;;&#10; dt = 1438857527939;&#10; ek = 4b37315fd0421b0b3a682a4a5e4487e9;&#10; en = WiFi;&#10; &#34;expires_in&#34; = 7199;&#10; mac = &#34;02:00:00:00:00:00&#34;;&#10; openid = oyAaTjrJMAb3qfCbyDRp3h0NKyew;&#10; openudid = 147ad485c3b80ffd54bfc8689c2d7db1ed88994b;&#10; os = iOS;&#10; pcv = &#34;2.0&#34;;&#10; &#34;refresh_token&#34; = &#34;OezXcEiiBSKSxW0eoylIeJDUKD6z6dmr42JANLPjNN56WRFnd-vVJO37ma0gCpKYHXgyDeQ4Xqm60G-omrGp2u-KbIy7zTP5gV5dnw3RVN-GzkjY8gCWIMC3_cCHcflH6IPexy2c-k46gGG0M07p6g&#34;;&#10; sdkv = &#34;4.2.3&#34;;&#10; to = wxsession;&#10; tp = 0;&#10; uid = 462ae0edb57d53dfd2affb5e4ae36ad;&#10; usid = oyAaTjrJMAb3qfCbyDRp3h0NKyew;&#10;&#125; &#10;[18:38:48.197( 2055)] - UMSocial: actionType is 15 , received json Dic is &#123;&#10; data = &#123;&#10; &#125;;&#10; msg = &#34;no error&#34;;&#10; st = 200;&#10;&#125; - 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"友盟","slug":"友盟","permalink":"https://iHTCboy.com/tags/友盟/"},{"name":"第三方登陆","slug":"第三方登陆","permalink":"https://iHTCboy.com/tags/第三方登陆/"}]},{"title":"同时响应多个UIGestureRecognizer","date":"2015-07-29T15:52:16.000Z","path":"2015/07/29/2015_同时响应多个UIGestureRecognizer/","text":"最近在做产品试戴，效果如下： 使用了多个手势识别器： UIRotationGestureRecognizer UIPinchGestureRecognizer UIPanGestureRecognizer UITapGestureRecognizer 其中的问题是，试戴的图片可以同时旋转和缩放，而系统默认只能响应一个手势。要同时响应多个手势，可以通过UIGestureRecognizerDelegate 代理方法：1&#10;- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer&#123;&#10; return YES;&#10;&#125; 代理方法中，可以设置那些手势可以同时响应操作。 - 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"UIGestureRecognizer","slug":"UIGestureRecognizer","permalink":"https://iHTCboy.com/tags/UIGestureRecognizer/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"分析iOS手机淘宝首页的设计","date":"2015-07-26T14:39:16.000Z","path":"2015/07/26/2015_分析iOS手机淘宝首页的设计/","text":"手机淘宝的首页，信息量非常的大，展现的数据各不相同，所以要处理的逻辑非常多，所以，一直想分析它的设计，目前也找不能相关的资料，下面就是我自己要瞎说，不喜欢就走，禁喷！ 使用的控件 整个首页，不是用UICollectionView，就是UIScrollView构造的，至于实际用那种，简主也不知道。 细节图 分隔线 根据这些图，分隔线又不是单色，应该是图片，但分隔线有小白条，我也不知道是怎么搞的了 底部栏 系统自带的黑线，放大后，可以看到是半透明的黑色，苹果的细节做的也是很好的。最后结论，也就是淘宝是自定义的UITabBar。 层次 可以分析出来，淘宝的每一个栏目分区里，都是一个一个堆起来的，至于是怎么样做逻辑的处理？也就是说，每一个图片，应该跳转到那个业务，是不是写死的，还是后台可以动态设置？ 在6p和5s下，对应的图片，会等比的放大。 技术考虑其实，这里面我认为最难的是，快速滚动时的流畅度： 如果是利用重用的cell，但因为每个区内容样式不一样，每次重用时，又要删除，会导致多区时出现一卡一卡的。 如果不重用的视图，那么视图太长了，占用内存太大，不可行啊。 最后，简主也不知道淘宝如何实现的，今天就到这，等以后明白了，在回来更新～ 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"手机淘宝","slug":"手机淘宝","permalink":"https://iHTCboy.com/tags/手机淘宝/"},{"name":"设计","slug":"设计","permalink":"https://iHTCboy.com/tags/设计/"}]},{"title":"一个工具类的单例模式","date":"2015-07-26T04:07:16.000Z","path":"2015/07/26/2015_一个工具类的单例模式/","text":"最近写了个工具类，用来集成短信、邮件、电话、打开Safari/AppStore、打开相机或相册，但是写 delegate 的时候，发现有警告： Incompatible pointer types assigning to ‘id‘ from ‘Class’ 最后，发现，用单例模式才可以。原因：类方法的self不能充当delegate 下面是stackoverflow里解决方法，构造单例模式：1Utility.h&#10;@interface Utility : NSObject &#60;AVAudioPlayerDelegate&#62;&#10;+ (Utility *)sharedUtility;&#10;@end&#10;Utility.m&#10;&#10;@implementation Utility&#10;+ (Utility *)sharedUtility&#10;&#123;&#10; static Utility *theUtility;&#10; @synchronized(self) &#123;&#10; if (!theUtility)&#10; theUtility = [[self alloc] init];&#10; &#125;&#10; return theUtility;&#10;&#125;&#10;&#10;- (void)playAudioFromFileName:(NSString *)name ofType:(NSString *)type withPlayerFinishCallback:(SEL)callback onObject:(id)callbackObject&#10;&#123;&#10; ... &#10; audioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL: [self getResourceURLForName:name ofType:type] error: nil];&#10; audioPlayer.delegate = self;&#10; ...&#10;&#125;&#10;&#10;@end 1Usage&#10;&#10;[[Utility sharedUtility] playAudioFromFileName:@&#34;quack&#34; ofType:&#34;mp3&#34; withPlayerFinishCallback:@selector(doneQuacking:) onObject:duck]; 最后发现，生成单例的方法各不相同，下面是另外一种，至于用那一种更好，或者都一样？简主暂时也不知道。。1##static id _sharedInstance = nil;&#10;+(instancetype)sharedInstance&#10;&#123;&#10; static dispatch_once_t p;&#10; dispatch_once(&#38;p, ^&#123;&#10; _sharedInstance = [[self alloc] init];&#10; &#125;);&#10; return _sharedInstance;&#10;&#125; 最后 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"单例模式","slug":"单例模式","permalink":"https://iHTCboy.com/tags/单例模式/"}]},{"title":"用autolyout实现子视图对齐等宽排列","date":"2015-07-26T03:39:16.000Z","path":"2015/07/26/2015_用autolyout实现子视图对齐等宽排列/","text":"最终效果 IB中实现 其实，要让三个button三等分，那么一定要找一个view作为参考，所以我在底部加了一个bottomLine（距离左边0，距离右边40，距离底部0，高度为1），重要的是，我设置为隐藏。那么，分别让每个button等于bottomLine的三分之一，那么就等分了。 当然，三分之一的约束只是约束了每一个button的宽度，位置、高度，还要另外针对每一个设置，比如最左边的上架时间（约束：距离左边0，距离顶部0，距离底部0），其它同理之。 最后，三条竖线，位置分别距离左边button为0，顶部、底部留距离，宽度设置为1，设置一个灰色背影就行。 用代码实现约束有了上面的思路，用代码实现应该也是一样的，用Masonry来写约束吧，代码就不写了（Swift还在学，不敢教）。 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"autolyout","slug":"autolyout","permalink":"https://iHTCboy.com/tags/autolyout/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"你若安好，我将不再告诉你我的幸福","date":"2015-07-25T16:49:26.000Z","path":"2015/07/26/2015_你若安好，我将不再告诉你我的幸福/","text":"你若不爱我则会离开离开熟悉的灯光街道离开不在属于我们的约会 我若无缘我则会成长带走那份天真的梦游乐场对自己下狠心不在回头看你二次 心痛的事渐渐的远离和怀疑纯洁的年轮我们只因疯狂而恐惧只因孤独而寂寞 每次给你一个机会就是为了给自己一个机会一个弥补一切的机会事实面前，任何借口显得无力 不在给自己机会不在原谅自己今天对自己狠下心只希望大家各奔幸福","tags":[{"name":"爱情","slug":"爱情","permalink":"https://iHTCboy.com/tags/爱情/"},{"name":"诗歌","slug":"诗歌","permalink":"https://iHTCboy.com/tags/诗歌/"},{"name":"随记","slug":"随记","permalink":"https://iHTCboy.com/tags/随记/"}]},{"title":"建立信任机制","date":"2015-07-25T16:36:16.000Z","path":"2015/07/26/2015-07-26_建立信任机制/","text":"前言当今世界，大数据！什么都要快、专、准 淘宝利用大数据，做出“拍立淘”地图都有热力图，迁徙图支付宝的芝麻分网易云音乐，个性化音乐推荐QQ附近的人，附近群 这些都是大数据的一部分 其实，大数据中最重要的应该叫：“信任！ 信任成本太高支付宝的芝麻分的信任体系，应该是一个好开始。但只是基于熟人体系中，很难发展陌生人圈。 就比如，你用QQ附近的群，微信的附近的人，如果你不是真心想约炮，而是想谈一个正经的人，你一定觉得可笑。 所以，这就是机会 如何利用大数据建立更可靠的信任值？ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"信任成本","slug":"信任成本","permalink":"https://iHTCboy.com/tags/信任成本/"},{"name":"信任机制","slug":"信任机制","permalink":"https://iHTCboy.com/tags/信任机制/"}]},{"title":"iOS8相机授权判断","date":"2015-07-23T15:04:16.000Z","path":"2015/07/23/2015_iOS-8相机授权判断/","text":"最近在做自定义相机，然后就是iOS8要授权才能使用，如果用户拒绝，那么，就不能操作。 问题是，怎么知道用户第一次选择相机，并且应用有打开相机的权限？ 1// &#22312;iOS7 &#26102;&#65292;&#21482;&#26377;&#37096;&#20998;&#22320;&#21306;&#35201;&#27714;&#25480;&#26435;&#25165;&#33021;&#25171;&#24320;&#30456;&#26426;&#10;if (floor(NSFoundationVersionNumber) &#60;= NSFoundationVersionNumber_iOS_7_1) &#123;&#10; // Pre iOS 8 -- No camera auth required.&#10; &#10; &#125;else &#123;&#10; // iOS 8 &#21518;&#65292;&#20840;&#37096;&#37117;&#35201;&#25480;&#26435;&#10; &#10; // Thanks: http://stackoverflow.com/a/24684021/2611971&#10; &#10; AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];&#10; switch (status) &#123;&#10; case AVAuthorizationStatusNotDetermined:&#123;&#10; // &#35768;&#21487;&#23545;&#35805;&#27809;&#26377;&#20986;&#29616;&#65292;&#21457;&#36215;&#25480;&#26435;&#35768;&#21487;&#10; &#10; [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) &#123;&#10; &#10; if (granted) &#123;&#10; //&#31532;&#19968;&#27425;&#29992;&#25143;&#25509;&#21463;&#10; &#125;else&#123;&#10; //&#29992;&#25143;&#25298;&#32477;&#10; &#125;&#10; &#125;];&#10; break;&#10; &#125;&#10; case AVAuthorizationStatusAuthorized:&#123;&#10; // &#24050;&#32463;&#24320;&#21551;&#25480;&#26435;&#65292;&#21487;&#32487;&#32493;&#10; &#10; break;&#10; &#125;&#10; case AVAuthorizationStatusDenied:&#10; case AVAuthorizationStatusRestricted:&#10; // &#29992;&#25143;&#26126;&#30830;&#22320;&#25298;&#32477;&#25480;&#26435;&#65292;&#25110;&#32773;&#30456;&#26426;&#35774;&#22791;&#26080;&#27861;&#35775;&#38382;&#10; &#10; break;&#10; default:&#10; break;&#10; &#125;&#10; &#10; &#125; 最后一个坑：没有解决：而问题的关键是，在第一次授权时，弹出的AlertView，其实，应用已经在后台了。当用户选择其中一个时，会从新回到前台，导致第一次时，如果要打开相机，会非常的慢，暂时还不知道这个问题怎么解决？欢迎在讨论区，谢谢大家！ 补充:2015.7.26发现其它相机应用，刚打开时，就询问打授权，可能这就是目前比较好的解决方案？ 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"iOS8相机授权","slug":"iOS8相机授权","permalink":"https://iHTCboy.com/tags/iOS8相机授权/"}]},{"title":"iOS接收null的处理方法","date":"2015-07-19T15:45:16.000Z","path":"2015/07/19/2015_iOS接收null的处理方法/","text":"经常服务器返回的数据，有null，还有nil，如果在模型层不处理的话，到时候数据展现时，一定会崩啊，最近决心要解决这个问题，所以查看了一些资料后，有答案了： 1- (id) setNoNull:(id)aValue&#123;&#10; if (aValue == nil) &#123;&#10; aValue = @&#34;&#34;;//&#20026;null&#26102;&#65292;&#30452;&#25509;&#36171;&#31354;&#10; &#125; else if ((NSNull *)aValue == [NSNull null]) &#123;&#10; aValue = @&#34;&#34;;&#10; if ([aValue isEqual:nil]) &#123;&#10; aValue = @&#34;&#34;;&#10; &#125;&#10; &#125;&#10; return aValue;&#10;&#125; 这个方法，可以把null和nil赋空值，这样字符串操作时，就不会崩了，同时，如果解析成数值，也可以改写为@0 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"NSNull","slug":"NSNull","permalink":"https://iHTCboy.com/tags/NSNull/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"Xcode打包上传后, AppStore提示“二进制文件无效”","date":"2015-07-06T08:20:16.000Z","path":"2015/07/06/2015_AppStore-打包上传后提示“二进制文件无效”/","text":"搜索了2个小时，上传了5个版本后，终于解决了。网上是这样说的： http://stackoverflow.com/questions/26163856/invalid-swift-support-invalid-implementation-of-swift1、重启Xcode，clean build2、重启Mac OSX3、换个新版本Xcode 最后解决答案是： 不要用私有Api，如果工程里面导入了Reveal.framework 要删除掉重新打包上传。一般情况下你用 application loader 上传，如果使用了，会检测出来，并且提示。如果app特别大，会上传到itunesconnect 才会去检测。检测私有api 可以看看下面这个http://stackoverflow.com/questions/2842357/how-does-apple-know-you-are-using-private-api 最近买的Reveal，结果用了后一直没在意，也不知道有私有方法，这次真又涨姿势了！ 一般无效苹果会发邮箱到开发者邮箱里，有详情原因。 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"二进制文件无效","slug":"二进制文件无效","permalink":"https://iHTCboy.com/tags/二进制文件无效/"}]},{"title":"App Store被拒绝后的解决方案中心(酒精、烟草、或药物的应用评级不能是4+)","date":"2015-07-02T00:30:16.000Z","path":"2015/07/02/2015_App-Store被拒绝后的解决方案中心/","text":"3.8 Details The rating you’ve selected, 4+, is inconsistent with the content of your app. Since your app includes content or features that pertain to alcohol, your ratings must reflect a “Frequent/Intense” setting for “Alcohol, Tobacco, or Drug Use or Reference” in iTunes Connect. 酒精、烟草、或药物的应用评级不能是4+ 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore被拒","slug":"AppStore被拒","permalink":"https://iHTCboy.com/tags/AppStore被拒/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"无法回滚","date":"2015-06-26T11:20:26.000Z","path":"2015/06/26/2015_无法回滚/","text":"无法在回去过去的美好，将永远的暂停过去的心塞，将不再的疼痛无法回流的泪水 当初小小的信任如今已经变成怀疑和恐惧当初不变的坚持如今已经不值一文的谎言 只怪自己太美好美好的世界早已过去我只是在现实的世界只怀念你只是我还沉醉中梦里不愿离开 无法回滚无法在信任的爱掉落2次的围城只是自己太年轻想太多","tags":[{"name":"爱情","slug":"爱情","permalink":"https://iHTCboy.com/tags/爱情/"},{"name":"诗歌","slug":"诗歌","permalink":"https://iHTCboy.com/tags/诗歌/"},{"name":"随记","slug":"随记","permalink":"https://iHTCboy.com/tags/随记/"}]},{"title":"《绝代宠妓》(Dangerous Beauty)观后感","date":"2015-06-22T13:50:16.000Z","path":"2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感/","text":"本片是改编自发生在16世纪时，一个集绝美与堕落于一身的城市威尼斯的真实故事。它是 一部反映了十六世纪的意大利妓女的生活影片。 16世纪的威尼斯是当时最富强的城市。当时的威尼斯非常注重「门当户对」与「女子无才便是德」，唯一能突破这层阻碍的只有……宠妓。 维诺妮卡是一个非常聪慧，又极具有天赋的美丽女子，她生长在一个家世普通的单亲家庭中。维诺妮卡非常喜欢偷读诗书。 由于命运的安排，维诺妮卡和一个英俊挺拔的年轻贵族每马可，陷入了热恋中，但是双方的家庭背景完全不搭，所以两人注定无法成婚，诺妮卡因而伤心欲绝。此时，维诺妮卡的母亲每宝拉却指引她另外一条路，一条可以解决眼下家庭困境，又可与马可结合的方法—-做宠妓。 起先，维诺妮卡坚决不肯，但是在逐渐认清事实，也了解到当宠妓是唯一可以以正当的理由饱读诗书，并和贵族们平起平坐的方法时，维诺妮卡才决定当宠妓。 天资过人的维诺妮卡，很快地就成为威尼斯最炙手可热的宠妓，她悠游的穿梭在贵族中大谈诗书与恋爱，并享有一般女人不可能拥有的一切。维诺妮卡的成功令贵族的老婆，与得不到她的男人们恨之入骨。但是，维诺妮卡却善用自己的魅力,筑起了一道保护 ,使她不受任何干扰。 当威尼斯被邻国企图以武力强占时，维诺妮卡会面临到怎样的危险呢？维诺妮卡要如何运用她的天赋来拯救威尼斯? 维诺妮卡又将如何拯救自己与马可之间的真情？ 观后感 一、知道自己的优点，并能分析自己的缺点，然后靠后天努力去争取 二、第一个爱的首先是自己，第一个靠的也还是自己 三、教你如何迷到一个男人 四、坚持自己的特点是困难的 每一部电影，都有它迷人的地方，很多故事，都可以帮助我们，做一个更棒的自己！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"DangerousBeauty","slug":"DangerousBeauty","permalink":"https://iHTCboy.com/tags/DangerousBeauty/"},{"name":"电影观后感","slug":"电影观后感","permalink":"https://iHTCboy.com/tags/电影观后感/"},{"name":"绝代宠妓","slug":"绝代宠妓","permalink":"https://iHTCboy.com/tags/绝代宠妓/"}]},{"title":"最新Reveal.1.5.1详细配置实战","date":"2015-06-16T16:25:26.000Z","path":"2015/06/17/2015_最新Reveal-1-5-1-详细配置实战/","text":"序最近在唐巧哥的微信看到Reveal中国大优惠，一直听说这个软件很利害，但是对盗版软件的使用很力不从心，所以以前没有用过，果断买下了。 买了后，发现不会配置，看的唐哥的《iOS开发进阶》讲很也不细，像我这样的小白，连vim都不熟悉，还能懂怎么保存？！？！ Reveal公共配置（1）在当前用户目录下，打开终端中新建一个.lldbinit文件,位置是~/.lldbinit。命令是: vim ~/.lldbinit然后粘贴下面代码： 1234567command alias reveal_load_sim expr (void*)dlopen(\"/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib\", 0x2);command alias reveal_load_dev expr (void*)dlopen([(NSString*)[(NSBundle*)[NSBundle mainBundle] pathForResource:@\"libReveal\" ofType:@\"dylib\"] cStringUsingEncoding:0x4], 0x2);command alias reveal_start expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@\"IBARevealRequestStart\" object:nil];command alias reveal_stop expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@\"IBARevealRequestStop\" object:nil]; 按一下esc键，然后输入:wq然后就保存了完成配置的关键一步啦，可以关闭终端了。 连接到模拟器调试在项目代理中的application:didFinishLaunchingWithOptions:方法中，进行以下几步，第一：添加一个断点，并右击编辑第二：单击“Action”右边的“+”，输入“reveal_load_sim”第三：勾选上“Option” 上的选项 “Automatically continue after evaluating”, 然后运行APP在模拟器，打开Reveal就可以看到左上角有个连接调试。 连接到真机调试（1）添加Reveal链接动态库到我们工程：在Reveal菜单“Help”-&gt;”Show Reveal Library in Finder” 找到动态库后拖拽到工程中； （2）注意Xcode默认是将其设置到“Link Binary With Libraries”中，需要删除它，并添加到 “Copy Bundle Resources”下面； (3)选中 Build Settings栏找到Linking下面的Other Linker Flags setting: 1-ObjC -lz -framework Reveal (4）在项目代理中的application:didFinishLaunchingWithOptions:方法中，进行以下几步，第一：添加一个断点，并右击编辑第二：单击“Action”右边的“+”，输入“reveal_load_dev”第三：勾选上“Option” 上的选项 “Automatically continue after evaluating”, 按command+R编译项目，在Reveal中可以看到: 最后说明由于没有越狱的机子，所以没有增加越狱的配置。本文也没有讨论配置和原理的细节，简主也不懂！请自行脑补！其它细节，如有错误，欢迎一起讨论！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"Reveal","slug":"Reveal","permalink":"https://iHTCboy.com/tags/Reveal/"},{"name":"UIView","slug":"UIView","permalink":"https://iHTCboy.com/tags/UIView/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"结束的不仅仅是大学四年，是一个时代","date":"2015-06-08T17:33:26.000Z","path":"2015/06/09/2015_结束的不仅仅是大学四年，是一个时代/","text":"摘下四叶草那一刻，意味着4年结束了每每你们问我四叶草，它只是简单的信念4年的大学，每年收获一个珍桂 《大一》匆匆那年，我们还年轻想起辩论赛，想起军训，想起傻逼的绿军队每每一笑，都是泪水那青涩的脸孔，我总向往着最美的阳光 那回，认真和努力我保持着高考那堆理想，那堆美梦去早起，去读书充满鸡血般在图书馆装逼 喜欢，找一个喜欢读书的妹纸发现，原来读书是最难把到妹哈哈，我也是醉了安安地在图书馆角落里，做我的男美子 读书，本无竞争一年到尾，无战争，考了个第7，拿个3等奖金，然后就继续装逼尼玛，我想说，我不是学霸！接下来，我将回忆，“学霸是如何炼成的！” 《大二》装逼的时代结束了开始去爱好，去发现好玩涨姿势的技能学视频制作，学PS，然后各种醉我能说这是装逼技能吗结果也没有把到妹，只能自己装逼自己飞吧！ 后来发现，其实，我喜欢的是艺术.文学，诗歌，摄像，艺术光学，美术，抽象，哲学，心理学，人文学…说远了，跑题了深深的喜欢艺术！ 没错！最后还是回到正途把图书馆的网络书籍，开始一本本去翻最后查了一下，我当年的借阅数前排大学四年，总排名也有前5吧 渐渐的，不相信爱了哲学告诉我，人必有一落当我在失落时，没有其它人只有我一个人坚持着，最后，我爱上了自己 《大三》表白不在行，浪漫不太懂只会在图书馆装装逼，晒晒书后来，进入疯狂模式决定当网络攻城师没错！就是去城市装逼的攻城狮！ 很用心的一年，拿了几个自以为逼逼的证呵呵，我这是书读多，脑血管堵了吧慢慢的，我又看到装逼界老大决定弃狮从猿 你说，都大三了，一点不长大装逼的最高境界又在图书馆借了百书把图书馆睡了无数片 没错！你猜错了！我真的痛倒了病倒了一个月一个月的时候 每每想起，在住院的日夜我都泪流不止，看着天空，我想过放弃可惜别忘了，我可是装逼过来的！根本没有什么能够阻挡 打着吊瓶，照顾好自己看着生命的尽头，让你重生你一定会充满感激！爱每一个人，充满对世界的爱，羡慕，善良，温柔 就这样，装逼的成功让我对生命，对生活，对自己有了新的期待每每想去爱时，我总感恩，生命的每个人 还是会做错事大学，做事的事情也不少没有好好学英语，装装逼说几句鸡肠文把几个外国语的妹纸吧还是且行且珍惜 旅途总是没有退路人生是场荒芜的旅行，长途跋涉，苦乐在心 《大四》装逼带我飞大四来的突然，大三上的心理学都不够用了整个人都不好了决定去实习，不在被学校装逼 结束了3个月的实习，大四上就玩完乐于前途感谢老师学校那么装逼，不想回去被装逼 最后，就没有最后其实是有的，就是过完年，实习了3个月回了学校 这次，不在装逼不想飞平静的回去然后感谢了那些感恩的同学 大学说了四年会请客的只能请了一些人时间和金钱如果愿意和邀请，有诚有意 感谢那些四年里，带我装逼带我飞的还有那些被我装逼被我飞的，开玩笑的愿祝大家，大学四年开心的，不开心的统统忘记，我是原谅了所有人 剩下的，校园已经远离了四叶草，装逼成功飞走了你我们，四海五湖走远了别忘了，我们永远都还在 别，只是为了下一次更辉耀的重逢离，只是为了下一次更醇香的酒席 永远永远的网络11-1班！你们是最棒的！","tags":[{"name":"四年","slug":"四年","permalink":"https://iHTCboy.com/tags/四年/"},{"name":"大学","slug":"大学","permalink":"https://iHTCboy.com/tags/大学/"},{"name":"生活","slug":"生活","permalink":"https://iHTCboy.com/tags/生活/"}]},{"title":"iOS支付宝SDK回调那坑","date":"2015-05-25T16:46:26.000Z","path":"2015/05/26/2015_iOS支付宝SDK回调那坑/","text":"支付宝钱包支付接口开发包2.0标准版(iOS 2.2.1) ，回调不出来，demo给出的方法是：1234567891011121314151617- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation &#123; if ([url.host isEqualToString:@\"safepay\"]) &#123; [[AlipaySDK defaultService] processAuth_V2Result:url standbyCallback:^(NSDictionary *resultDic) &#123; NSLog(@\"result = %@\",resultDic); NSString *resultStr = resultDic[@\"result\"]; &#125;]; &#125; return YES;&#125; 而事实上的回调是这样的：1234567if ([url.host isEqualToString:@\"safepay\"]) &#123; [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) &#123; NSLog(@\"result = %@\",resultDic); NSString *resultStr = resultDic[@\"memo\"]; NSLog(@\"memo = %@\",resultStr); &#125;];&#125; 这支付宝也真是的，虽然集成过程中很简单，但是这个回调却让人想屎：支付表是这样说的：12345678/*** 处理授权信息Url** @param resultUrl 钱包返回的授权结果url* @param completionBlock 跳授权结果回调，保证跳转钱包授权过程中，即使调用方app被系统```kill```时，能通过这个回调取到支付结果。*/- (void)processAuth_V2Result:(NSURL *)resultUrl standbyCallback:(CompletionBlock)completionBlock; 另附几个状态码：123459000 订单支付成功 8000 正在处理中 4000 订单支付失败 6001 用户中途取消 6002 网络连接出错 这个月把公司的项目重写了一遍，收获很多，等有点时间时，再慢慢分享给大家啊！～nice 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"alipay","slug":"alipay","permalink":"https://iHTCboy.com/tags/alipay/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"支付宝","slug":"支付宝","permalink":"https://iHTCboy.com/tags/支付宝/"}]},{"title":"仅仅只是给你点赞","date":"2015-05-14T14:39:26.000Z","path":"2015/05/14/2015_仅仅只是给你点赞/","text":"给你一个点赞你就胡思乱想她不会是对我有意思？她不会是喜欢我？她不会是爱上我？！ 移动互网络拉近了人的距离让人人在沉醉低头点赞之中也许别人的一个轻点就会让你喜怒哀乐一天也只能让你智商情商更低 轻轻一个点赞它代表的可以重于泰山也可轻于鸿毛在于理解点赞初心 点赞，也许是别人对你的一点赞同但你要容得下反对者点赞，也许是别人对你的一笑而过但你要理智虽然你可能不知道别人点赞后一笑置之但你也要笑眯眯继续产出 点赞只是点赞别太当真别太在意别太得意 生活依然如故我们在书写自己时要把别人的鲜花当成风景点缀如若美丽，便一赏如若牛粪，便赶路","tags":[{"name":"爱情","slug":"爱情","permalink":"https://iHTCboy.com/tags/爱情/"},{"name":"诗歌","slug":"诗歌","permalink":"https://iHTCboy.com/tags/诗歌/"},{"name":"随记","slug":"随记","permalink":"https://iHTCboy.com/tags/随记/"}]},{"title":"我为什么只喜欢你","date":"2015-05-12T16:33:26.000Z","path":"2015/05/13/2015_我为什么只喜欢你/","text":"我才不要你的美貌即便你真的很美也不可能是你的身材即便也是很棒棒的 那我为什么喜欢你是我太寂寞了吗我承认我单身5年很孤独，但不是寂寞我可以把寂寞交给左右手但绝不会随便交给一个女孩 那我为什么喜欢你你这时一定问我图啥这世界，就是赤裸裸的四君子名钱权色名，你现在应该没有出名钱，我不敢轻薄你，因为我喜欢你权，你现在也应该没有色，我承认，你漂亮，至少我眼里你最美 我为什么只喜欢你如果你一定要问一个为什么那我只能答：你不懂我们不是因果关系不是因为，所以我喜欢你恰恰相反只喜欢你，所以我爱你 不是因为你是苹果我肚子饿了所以我要吃苹果没有为什么你是苹果，我喜欢苹果所以我喜欢 喜欢请不要问太多为什么喜欢不是问为什么喜欢就要去感受它感受喜欢就是喜欢别问我为什么喜欢","tags":[{"name":"爱情","slug":"爱情","permalink":"https://iHTCboy.com/tags/爱情/"},{"name":"诗歌","slug":"诗歌","permalink":"https://iHTCboy.com/tags/诗歌/"},{"name":"随记","slug":"随记","permalink":"https://iHTCboy.com/tags/随记/"}]},{"title":"只是爱你爱得太着急","date":"2015-05-10T06:07:26.000Z","path":"2015/05/10/2015_只是爱你爱得太着急/","text":"急躁的社会让我不知所措地跟着急 急于表达我对你的爱 表达我的一见倾心 总想万种思绪倾述于你 只为想证明我有多爱你 一见钟爱 仅此而已 也只因爱你爱得太急速 想要告诉全世界，我爱的你 却根本没能证明 连一句表白也考虑很久 爱你，我想只是爱你 你爱不爱，我都很在乎 在乎你的时候 我却把内心的爱 全把它推给你 让你无法呼吸 无法承受 是我错，只是爱你爱得太着急 爱，需要时间 别爱的太着急 静静思念，不时刻告诉你 不应着急告诉你我爱你 不应爱你爱得着急 去发现我的爱 或接受我的爱 不管接受 或拒绝 我就在你身边，一个拥抱足以感化我 慢慢地追随你 了解你的性格爱好 静静的守望你 记下你的笑脸快乐 爱，不离不弃 爱，不去证明 爱的淡，爱的浓 请不要着急把你的爱全部一次性交给我 慢慢来，我等你 慢慢来，我爱你","tags":[{"name":"爱情","slug":"爱情","permalink":"https://iHTCboy.com/tags/爱情/"},{"name":"诗歌","slug":"诗歌","permalink":"https://iHTCboy.com/tags/诗歌/"},{"name":"随记","slug":"随记","permalink":"https://iHTCboy.com/tags/随记/"}]},{"title":"iOS开发必备HUD(透明指示层)","date":"2015-05-10T03:18:26.000Z","path":"2015/05/10/2015_iOS开发必备HUD(透明指示层)/","text":"1.MBProgressHUDGitHub地址：https://github.com/jdg/MBProgressHUD基本上看到的主流iOS应用都集成了这个，Star 7k了，最近看到很多应用HUD隐藏时，有一个动画过程，我还以为是自己扩展的，后来研究才发现，有这个属性animationType: 1@property (assign) MBProgressHUDAnimation animationType; 12345678typedef NS_ENUM(NSInteger, MBProgressHUDAnimation) &#123;/** Opacity animation */MBProgressHUDAnimationFade,/** Opacity + scale animation */MBProgressHUDAnimationZoom,MBProgressHUDAnimationZoomOut = MBProgressHUDAnimationZoom,MBProgressHUDAnimationZoomIn&#125;; 2. SVProgressHUDGitHub地址：https://github.com/TransitApp/SVProgressHUDSVProgressHUD和MBProgressHUD效果差不多，特点就是不需要使用协议，同时也不需要声明实例。直接通过类方法就可以调用：1[SVProgressHUD method] 1[SVProgressHUD dismiss] 3. JGProgressHUDGitHub地址：https://github.com/JonasGessner/JGProgressHUDJGProgressHUD和MBProgressHUD效果差不多，作为后起之秀，特点就是如果有键盘时，HUD可以自动上移，效果非常棒！另外自定义定制也很灵活。 4. ToastGitHub地址：https://github.com/scalessec/Toast这个Toast非常经典。 1234567891011121314151617// basic usage[self.view makeToast:@\"This is a piece of toast.\"];// toast with duration, title, and position[self.view makeToast:@\"This is a piece of toast with a title.\" duration:3.0 position:CSToastPositionTop title:@\"Toast Title\"];// toast with an image[self.view makeToast:@\"This is a piece of toast with an image.\" duration:3.0 position:[NSValue valueWithCGPoint:CGPointMake(110, 110)] image:[UIImage imageNamed:@\"toast.png\"]];// display toast with an activity spinner[self.view makeToastActivity]; 目前来说，以前4种HUD就能满足基本需求，实际开发中，集成到一个Utility中就更方便，等我完善了在放出来分享啦 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"HUD","slug":"HUD","permalink":"https://iHTCboy.com/tags/HUD/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"透明指示层","slug":"透明指示层","permalink":"https://iHTCboy.com/tags/透明指示层/"}]},{"title":"现实之诚","date":"2015-05-03T13:04:26.000Z","path":"2015/05/03/2015_现实之诚/","text":"永远18将是一个逝去的谎言突然发现后而惊讶不定带走了一些年轻、放肆熟悉的梦总变得成熟 路过村口、街头、巷尾走过湖边、桥上、峰峦面过陌生、无缘、熟男轻盈如风，步履匆匆走过 城市的灯光，给了城市多一点浮躁点亮了一些人的美梦燃烧了一些人的青春刺穿了一些人的酒绿埋葬了一些人的浮躁 如斯而也时间短促，生命有限赶早上的公交追末班的地铁 如风而去青春熙路，人生苦短做朝九晚五之事煮酸甜苦辣之饭 如花恕放金钱无尽，温馨有盪无车无房爱生活有乐有悲乃人生 如此而已无忧天大，知足长乐安静做一个美男子坚持之路必有福相","tags":[{"name":"散文","slug":"散文","permalink":"https://iHTCboy.com/tags/散文/"},{"name":"诗歌","slug":"诗歌","permalink":"https://iHTCboy.com/tags/诗歌/"},{"name":"随记","slug":"随记","permalink":"https://iHTCboy.com/tags/随记/"}]},{"title":"1分钟解决iOS_backBarButtonItem问题","date":"2015-04-27T12:32:16.000Z","path":"2015/04/27/2015_1分钟解决iOS_backBarButtonItem问题/","text":"1、序 iOS导航栏的返回按钮，一直都是开发中比较头痛的问题。 正好在做毕业设计时，想到要设置全局的返回样式，只要图片，不要文字，形式如下： 2、思考过程 网上有很多种方法，但是我都认为太麻烦，所以看能不能简单的设置一个全局样式 （1）开始时，我设置了如下： 12345678910111213141516UINavigationBar * navigationBar = [UINavigationBar appearance];//返回按钮的箭头颜色[navigationBar setTintColor:[UIColor whiteColor]];//设置返回样式图片UIImage *image = [UIImage imageNamed:@\"navigationbar_back\"];image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];navigationBar.backIndicatorImage = image;navigationBar.backIndicatorTransitionMaskImage = image; 以上代码实现了全局的形式如下： （2）讨论：全局下，箭头都是自定义样式了，但是文字怎么去掉？网上的方法很多，有用到时在设置，或全局的利用运行时重载方法，问题都是没有达到简单的方法，后来找到这样一个方法如下： 利用全局的UIBarButtonItem，然后巧妙的设置文字的偏移值，达到“隐藏”效果 12345678UIBarButtonItem *buttonItem = [UIBarButtonItem appearanceWhenContainedIn:[UINavigationBar class], nil];UIOffset offset;offset.horizontal = -500;[buttonItem setBackButtonTitlePositionAdjustment:offset forBarMetrics:UIBarMetricsDefault]; 不知道这个方法是不是最简单，和这个方法是不有什么“bug”，能力有限，欢迎指点！ 3、最后效果如下： 4、快速使用方法123456789101112131415161718192021222324252627282930- (void)setNaviBack&#123;UINavigationBar * navigationBar = [UINavigationBar appearance];//返回按钮的箭头颜色[navigationBar setTintColor:[UIColor colorWithRed:0.984 green:0.000 blue:0.235 alpha:1.000]];//设置返回样式图片UIImage *image = [UIImage imageNamed:@\"navi_back\"];image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];navigationBar.backIndicatorImage = image;navigationBar.backIndicatorTransitionMaskImage = image;UIBarButtonItem *buttonItem = [UIBarButtonItem appearanceWhenContainedIn:[UINavigationBar class], nil];UIOffset offset;offset.horizontal = - 500;offset.vertical = - 500;[buttonItem setBackButtonTitlePositionAdjustment:offset forBarMetrics:UIBarMetricsDefault];&#125; 5、总结在AppDelegate里集成上面代码，应用只要push后，不设置left按钮，默认都是统一的返回图片，快不快！而且保留了系统自带的左滑返回手势 6、Bug感谢 @binMyth 、 @简书坤 提醒，bug: 导航条上的返回按钮 的 相应区域 还是原来那么大 没有变为图片的大小 第一个界面的 title 过长 会影响 跳转到的第二界面 的 title 因为没有去改变系统的backBarButtonItem，所以位置是没有变的。在iPhone 5s上测试： 如果上一级标题没有超过6个中文，那么其实下一级时，返回标题会显示完整，导致下一级标题右移了。 如果上一级标题超过6个中文，系统会设置”返回“,位置相对较少，标题不会右移。 当然，在iPhone 6plus上宽度更大，具有没有测试，对于一般应用，标题不会太长，是可以接受吧。谢谢大家的指正！！如果大家有更好的方法，欢迎指教！ 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"backBarButtonItem","slug":"backBarButtonItem","permalink":"https://iHTCboy.com/tags/backBarButtonItem/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]},{"title":"iOS自定义版本更新检查","date":"2015-04-26T05:01:26.000Z","path":"2015/04/26/2015_iOS自定义版本更新检查/","text":"1、效果图 2、关键点请求http://itunes.apple.com/lookup?id=968615456，就会返回关于这个应用的详细内容的JSON数据，后面就简单了吧 我的应用返回的JSON数据(已经格式化)：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121&#123;\"resultCount\": 1,\"results\": [ &#123; \"advisories\": [ \"Unrestricted Web Access\" ], \"artistId\": 914453386, \"artistName\": \"he tiancong\", \"artistViewUrl\": \"https://itunes.apple.com/us/artist/he-tiancong/id914453386?uo=4\", \"artworkUrl100\": \"http://is5.mzstatic.com/image/pf/us/r30/Purple5/v4/6f/89/92/6f8992e4-5c10-be87-9242-d933ddb0780a/mzl.jxbacfmg.png\", \"artworkUrl512\": \"http://is5.mzstatic.com/image/pf/us/r30/Purple5/v4/6f/89/92/6f8992e4-5c10-be87-9242-d933ddb0780a/mzl.jxbacfmg.png\", \"artworkUrl60\": \"http://is3.mzstatic.com/image/pf/us/r30/Purple3/v4/2e/cc/a9/2ecca990-b82a-a238-793a-a16b59b56389/AppIcon60x60_U00402x.png\", \"bundleId\": \"CampusOfGLUT\", \"contentAdvisoryRating\": \"17+\", \"currency\": \"USD\", \"description\": \"桂林理工大学——校园通正式上线！应用提供：1、学校新闻、通知等动态；2、学校学院、学习等、3、学习 、生活等多栏目，分享和交流平台～ 欢迎大家提供建议和评价！邮件：ihetiancong@qq.comQQ：3027201361\", \"features\": [ \"iosUniversal\" ], \"fileSizeBytes\": \"6436734\", \"formattedPrice\": \"Free\", \"genreIds\": [ \"6017\", \"6012\" ], \"genres\": [ \"Education\", \"Lifestyle\" ], \"ipadScreenshotUrls\": [ \"http://a1.mzstatic.com/us/r30/Purple3/v4/cf/36/c1/cf36c120-3798-303d-6ae6-cb70da8c7b18/screen480x480.jpeg\", \"http://a3.mzstatic.com/us/r30/Purple3/v4/4c/34/19/4c3419c4-c777-f202-0f5a-a1e733bf37a8/screen480x480.jpeg\", \"http://a2.mzstatic.com/us/r30/Purple5/v4/9e/9b/35/9e9b3592-4e93-148b-0fd8-73d8ed389388/screen480x480.jpeg\" ], \"isGameCenterEnabled\": false, \"kind\": \"software\", \"languageCodesISO2A\": [ \"EN\", \"FR\", \"DE\", \"JA\", \"KO\", \"PL\", \"RU\", \"ZH\", \"ES\", \"ZH\", \"UK\" ], \"minimumOsVersion\": \"8.1\", \"price\": 0.0, \"primaryGenreId\": 6017, \"primaryGenreName\": \"Education\", \"releaseDate\": \"2015-03-18T09:34:28Z\", \"releaseNotes\": \"——————那些年，最后一次更新的版本——————1、优化iPhone和iPad下显示效果2、增加话题图标，内容更加醒目3、增加一些可有可无的更新——————那些年，我们一起说过的话题——————1、非常感谢那些年i被拒绝的女孩，她们让我充实成长2、非常感谢那些年i被关照的老师，他们让我无忧学习3、非常感谢那些年i被信任的同学，他们让我珍惜想念4、非常感谢那些年i被坚持的自己，你们让我相信自己——————最后说明——————1、应用为i毕业设计作品，不提供商业信息，感谢大家支持2、应用中的学校新闻只提参考，由于解析原因，可能个别新闻无法显示，真实动态请浏览（www.glut.edu.cn)3、校园话题的意义是希望能将学校的信息通过移动互联网重新整合在一起，这是一个信息未来的趋势4、其它问题请联系：ihetiancong@qq.com——————谢谢大家——————\", \"screenshotUrls\": [ \"http://a2.mzstatic.com/us/r30/Purple1/v4/1f/bf/32/1fbf321a-c22b-f938-0d84-17e65730e7a9/screen1136x1136.jpeg\", \"http://a5.mzstatic.com/us/r30/Purple3/v4/c9/92/ec/c992ec71-7576-6334-3ebb-4aa857880219/screen1136x1136.jpeg\", \"http://a1.mzstatic.com/us/r30/Purple5/v4/72/27/ae/7227aed1-62fa-6946-e63e-52090ce6a021/screen1136x1136.jpeg\", \"http://a4.mzstatic.com/us/r30/Purple2/v4/13/46/d3/1346d396-4126-ab48-ae15-b0038b92bd68/screen1136x1136.jpeg\" ], \"sellerName\": \"he tiancong\", \"sellerUrl\": \"http://weibo.com/iHTCapp\", \"supportedDevices\": [ \"iPhone5c\", \"iPhone6Plus\", \"iPodTouchFifthGen\", \"iPadThirdGen4G\", \"iPad2Wifi\", \"iPadFourthGen\", \"iPhone5s\", \"iPhone4S\", \"iPadThirdGen\", \"iPad23G\", \"iPhone6\", \"iPadFourthGen4G\", \"iPhone5\", \"iPadMini\", \"iPadMini4G\" ], \"trackCensoredName\": \"桂林理工大学---校园通\", \"trackContentRating\": \"17+\", \"trackId\": 968615456, \"trackName\": \"桂林理工大学---校园通\", \"trackViewUrl\": \"https://itunes.apple.com/us/app/gui-lin-li-gong-da-xue-xiao/id968615456?mt=8&amp;uo=4\", \"version\": \"1.3\", \"wrapperType\": \"software\" &#125;]&#125; 3、检查更新Demo 检查更新 123456789101112131415[AFNetworkingUtils getRequestWithUrl:@\"http://itunes.apple.com/lookup?id=968615456\" afterExecute:^(NSDictionary *resultDic) &#123; float version =[[[[resultDic objectForKey:@\"results\"] objectAtIndex:0] valueForKey:@\"version\"] floatValue]; NSDictionary *infoDic=[[NSBundle mainBundle] infoDictionary]; float currentVersion = [[infoDic valueForKey:@\"CFBundleShortVersionString\"] floatValue]; if(version&gt;currentVersion)&#123; NSString *alertTitle=[@\"桂林理工大学-校园通v\" stringByAppendingString:[NSString stringWithFormat:@\"%0.1f\",version]]; NSString *alertMsg=@\"是否要更新？\"; //NSString *alertMsg = [[[resultDic objectForKey:@\"results\"] objectAtIndex:0] valueForKey:@\"releaseNotes\"] UIAlertView *alertView=[[UIAlertView alloc] initWithTitle:alertTitle message:alertMsg delegate:self cancelButtonTitle:@\"稍后更新\" otherButtonTitles:@\"立即更新\", nil]; [alertView show]; &#125; &#125; onError:^&#123; &#125;]; 跳到AppStore更新 12NSString *url = @\"https://itunes.apple.com/us/app/gui-lin-li-gong-da-xue-xiao/id968615456?mt=8&amp;uo=4\";[[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]]; 4、自定义成一个工具 使用时调用这个方法就行 123456789101112131415 #pragma mark - 检查版本更新 -(void) checkUpdate&#123; InformationHandleTool * tool = [InformationHandleTool sharedInfoTool]; [tool checkUpdateWithAppID:@\"968615456\" success:^(NSDictionary *resultDic, BOOL isNewVersion, NSString *newVersion) &#123; if (isNewVersion) &#123; [self showUpdateView:newVersion]; &#125; &#125; failure:^(NSError *error) &#123; ; &#125;];&#125; 网络请求方法-(void)checkUpdateWithAppID:(NSString )appID success:(void (^)(NSDictionary resultDic , BOOL isNewVersion , NSString newVersion))success failure:(void (^)(NSError error))failure 1234567891011121314151617181920212223242526272829303132 #pragma mark - 检查版本更新 - (void)checkUpdateWithAppID:(NSString *)appID success:(void (^)(NSDictionary *resultDic , BOOL isNewVersion , NSString * newVersion))success failure:(void (^)(NSError *error))failure &#123; AFHTTPRequestOperationManager *manager=[AFHTTPRequestOperationManager manager]; manager.requestSerializer=[AFHTTPRequestSerializer serializer]; manager.responseSerializer=[AFHTTPResponseSerializer serializer]; NSString *encodingUrl=[[@\"http://itunes.apple.com/lookup?id=\" stringByAppendingString:appID] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]; [manager GET:encodingUrl parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123; NSDictionary *resultDic=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableLeaves error:nil]; NSString * versionStr =[[[resultDic objectForKey:@\"results\"] objectAtIndex:0] valueForKey:@\"version\"]; float version =[versionStr floatValue]; //self.iTunesLink=[[[resultDic objectForKey:@\"results\"] objectAtIndex:0] valueForKey:@\"trackViewUrl\"]; NSDictionary *infoDic=[[NSBundle mainBundle] infoDictionary]; float currentVersion = [[infoDic valueForKey:@\"CFBundleShortVersionString\"] floatValue]; if(version&gt;currentVersion)&#123; success(resultDic, YES, versionStr); &#125;else&#123; success(resultDic,NO ,versionStr); &#125; &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123; failure(error); &#125;];&#125; 提醒方法- (void)showUpdateView:(NSString )newVersion* 注：这个是iOS8以后的UIAlertController 1234567891011121314151617181920- (void)showUpdateView:(NSString *)newVersion&#123; NSString *alertMsg=[[@\"桂林理工大学-校园通v\" stringByAppendingString:[NSString stringWithFormat:@\"%0.1f\",[newVersion floatValue]]] stringByAppendingString:@\"，赶快体验最新版本吧！\"]; UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"发现新版本\" message:alertMsg preferredStyle:UIAlertControllerStyleAlert]; // 添加按钮 [alert addAction:[UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) &#123; &#125;]]; [alert addAction:[UIAlertAction actionWithTitle:@\"更新\" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) &#123; NSString *str = @\"https://itunes.apple.com/us/app/gui-lin-li-gong-da-xue-xiao/id968615456?mt=8&amp;uo=4\"; [[UIApplication sharedApplication] openURL:[NSURL URLWithString:str]]; &#125;]]; [self presentViewController:alert animated:YES completion:nil];&#125; 5、检查增强 服务器版本跟本地版本可以随意，比如服务器1.4.1 ，本地1.4，也能检查了。 123456789101112131415161718192021NSString * serverVersion =[[[resultDic objectForKey:@\"results\"] objectAtIndex:0] valueForKey:@\"version\"];NSString * localVersion = [SystemUtils getVersionSting];//以\".\"分隔数字然后分配到不同数组NSArray * serverArray = [serverVersion componentsSeparatedByString:@\".\"];NSArray * localArray = [localVersion componentsSeparatedByString:@\".\"];for (int i = 0; i &lt; serverArray.count; i++) &#123; //以服务器版本为基准，判断本地版本位数小于服务器版本时，直接返回（并且判断为新版本，比如服务器1.5.1 本地为1.5） if(i &gt; (localArray.count -1))&#123; //有新版本，提示！ break; &#125; //有新版本，服务器版本对应数字大于本地 if ( [serverArray[i] intValue] &gt; [localArray[i] intValue]) &#123; //有新版本，提示！ break; &#125;&#125; 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"更新","slug":"更新","permalink":"https://iHTCboy.com/tags/更新/"},{"name":"版本","slug":"版本","permalink":"https://iHTCboy.com/tags/版本/"}]},{"title":"推荐GitHub很火的两个视图转换","date":"2015-04-26T04:37:26.000Z","path":"2015/04/26/2015_推荐GitHub很火的两个视图转换/","text":"KNSemiModalViewController 淘宝加入购物车的动画视图就是用这个吧，帅到没朋友～ ZFDragableModalTransition 看动画，效果流得一逼～ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://iHTCboy.com/tags/GitHub/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"视图转换","slug":"视图转换","permalink":"https://iHTCboy.com/tags/视图转换/"}]},{"title":"iOS版本更新判断","date":"2015-04-23T12:03:26.000Z","path":"2015/04/23/2015_iOS版本更新判断/","text":"应用每开发一个新版本时，都可能会有新特性介绍页面。所以在应用里就要判断是不是新版本，并且能判断只有第一次进入应用时，才是新版本。 12345678910111213141516171819//* 在delegate里判断*/ //1、 取出沙盒中存储的上次使用软件的版本号 NSString *key = @\"CFBundleShortVersionString\"; NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; NSString *lastVersion = [defaults stringForKey:key]; // 2、获得当前软件的版本号 NSString *currentVersion = [NSBundle mainBundle].infoDictionary[key]; // 3、判断版本号 if ([currentVersion isEqualToString:lastVersion]) &#123;// 旧版本 &#125;else&#123; // 新版本 // 存储新版本 [defaults setObject:currentVersion forKey:key]; &#125; ##解释 1、CFBundleShortVersionString 标识应用程序的发布版本号 该标志表示就是应用的版本号，一般是由三个整数分隔组成的字符串。第一个整数代表重大修改的版本，如实现新的功能或重大变化的修订。第二个整数表示的修订，实现较突出的特点。第三个整数代表维护版本。 该键的值不同于“CFBundleVersion”标识 2、CFBundleVersion 标识应用的内部版本号 这个版本是内部自己团队使用的一个版本号，一般不对外公开。 3、区别 CFBundleShortVersionString对应Xcode里项目的Version CFBundleVersion 对应Xcode里项目的Build 4、AppStore 发布每发布一个新应用或新版本，苹果都要求你输入一个版本号，这个版本号对应的是 CFBundleShortVersionString ，不要写错哦。并且，如果你上传成功后（未审核，或未通过），然后又修复了bug，或改了功能，那么在打包发布时，CFBundleVersion 必须比上一版本更大。 打个比方，我第一次上传的Version:1.5.1、Build:3.4.2 ,那我这个应用被拒绝，修复好后，我又打包上传时，Version还是1.5.1，但Build必须大于3.4.2，可以是3.4.3 、3.4.5、3.8.5等。 如果Version 1.5.1通过审核后，又发新版本，那个下次上传时，Version要大于1.5.1，但Build可以从新开始，比如1.1.0 。如果Version1.5.1又有问题，我又要上传修改后的应用时，Build必须大于上一个上传成功的Build，即要大于1.1.0。 5、如果还有什么不明白，可能给我留言哦～nice 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"应用版本","slug":"应用版本","permalink":"https://iHTCboy.com/tags/应用版本/"},{"name":"版本更新","slug":"版本更新","permalink":"https://iHTCboy.com/tags/版本更新/"}]},{"title":"iOS判断汉字个数","date":"2015-04-17T16:31:22.000Z","path":"2015/04/18/2015_iOS判断汉字个数/","text":"最近在做注册登陆的认证，需求：用户名为6～12位“字符”也就是说，一个英文是一个字符，一个中文是两个字符，用正则表达式好像不容易实现吧？ 没什么好说的，直接上答案了： 判断字符数123456789101112131415161718 //判断字符串为6～12位“字符” - (BOOL)isValidateName:(NSString *)name&#123; NSUInteger character = 0; for(int i=0; i&lt; [name length];i++)&#123; int a = [name characterAtIndex:i]; if( a &gt; 0x4e00 &amp;&amp; a &lt; 0x9fff)&#123; //判断是否为中文 character +=2; &#125;else&#123; character +=1; &#125; &#125; if (character &gt;=6 &amp;&amp; character &lt;=12) &#123; return YES; &#125;else&#123; return NO; &#125; &#125; 判断邮箱号123456 //如果符合邮箱格式，返回YES -(BOOL)isValidateEmail:(NSString *)email &#123; NSString *emailRegex = @\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]&#123;2,4&#125;\"; NSPredicate *emailTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", emailRegex]; return [emailTest evaluateWithObject:email];&#125; 判断密码为6～20位字符12345- (BOOL)isValidatePassword:(NSString *)password&#123; NSString *regex = @\"^[\\x21-\\x7E]&#123;6,20&#125;$\"; NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex]; return [pred evaluateWithObject:password];&#125; 判断手机格式12345 + (BOOL)checkTel:(NSString *)str&#123; NSString *regex = @\"^[1][3-8]+\\\\d&#123;9&#125;\";//手机号码变化大，所以没有做更精确的判断 NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex]; return [pred evaluateWithObject:str];;&#125; 判断邮编格式为6位数字12345 + (BOOL)checkPostCode:(NSString *)str&#123; NSString *regex = @\"^[0-9]&#123;6&#125;$\"; NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", regex]; return [pred evaluateWithObject:str];&#125; 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"判断汉字","slug":"判断汉字","permalink":"https://iHTCboy.com/tags/判断汉字/"},{"name":"汉字个数","slug":"汉字个数","permalink":"https://iHTCboy.com/tags/汉字个数/"}]},{"title":"基于NSTimer的倒计时","date":"2015-04-17T07:12:26.000Z","path":"2015/04/17/2015_基于NSTimer的倒计时/","text":"今天做手机短信验证码的功能，不用GCD，简单的NSTimer就可以完成,不知道有没有bug,测试中。。。 1#pragma mark - &#20498;&#35745;&#26102;&#10;- (void)startCount&#10;&#123;&#10; /**&#10; * &#28155;&#21152;&#23450;&#26102;&#22120;&#10; */&#10; self.currentCountDown = 120;&#10; self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(countDown) userInfo:nil repeats:YES];&#10; [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];&#10; [self.timer fire];&#10;&#125;&#10;&#10;- (void)countDown&#123;&#10; &#10; if (self.currentCountDown &#62;0) &#123;&#10; //&#35774;&#32622;&#30028;&#38754;&#30340;&#25353;&#38062;&#26174;&#31034; &#26681;&#25454;&#33258;&#24049;&#38656;&#27714;&#35774;&#32622;&#10; [self.captchaBtn setTitle:[NSString stringWithFormat:@&#34;(%ld)&#37325;&#26032;&#33719;&#21462;&#34;,(long)self.currentCountDown] forState:UIControlStateNormal];&#10; //self.captchaBtn.enabled = NO;&#10; self.currentCountDown -= 1;&#10; &#125;else&#123;&#10; [self removeTimer];&#10; &#125; &#10;&#125;&#10;&#10;/**&#10;* &#31227;&#38500;&#23450;&#26102;&#22120;&#10;*/&#10;- (void)removeTimer&#10;&#123;&#10; self.currentCountDown = 0;&#10; [self setCaptchaEnable:YES];&#10; [self.timer invalidate];&#10; self.timer = nil;&#10;&#125;&#10;&#10;&#10;//&#22240;&#20026;iOS 7&#19979; &#25353;&#38062; enabled= NO, &#19981;&#33021;&#35774;&#32622;&#25991;&#23383;&#10;#pragma mark - &#35774;&#32622;&#25353;&#38062;&#29366;&#24577;&#10;- (void)setCaptchaEnable:(BOOL)enabled&#123;&#10; //&#21487;&#20197;&#25353;&#10; if (enabled) &#123;&#10; self.captchaBtn.userInteractionEnabled = YES;&#10; [self.captchaBtn setBackgroundImage:[UIImage imageNamed:@&#34;back_red&#34;] forState:UIControlStateNormal];&#10; [self.captchaBtn setTitle:@&#34;&#33719;&#21462;&#39564;&#35777;&#30721;&#34; forState:UIControlStateNormal];&#10; &#10; &#125;else&#123;&#10; self.captchaBtn.userInteractionEnabled = NO;&#10; [self.captchaBtn setBackgroundImage:[UIImage imageNamed:@&#34;back_gray&#34;] forState:UIControlStateNormal];&#10; &#125;&#10;&#125; 在项目中目前是自己写的一个集成倒计时的按钮，这个思路暂时可以行！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"NSTimer","slug":"NSTimer","permalink":"https://iHTCboy.com/tags/NSTimer/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"倒计时","slug":"倒计时","permalink":"https://iHTCboy.com/tags/倒计时/"}]},{"title":"Xcode真机运行报错：the application could not be verified","date":"2015-04-15T12:30:16.000Z","path":"2015/04/15/2015_iOS报错：linker_command_failed_with_exit_code_1_(use_-v_to_see_invocation)/","text":"Xcode 提示的报错： the application could not be verified. 开发的应用一直真机安装不了，网上查看资料，都是说证书出错，最后在stackoverflow.com 找到原因： I deleted the app from the device, restarted Xcode, and the app subsequently installed on the device just fine without any error message. Not sure if deleting the app was the fix, or the problem was due to “the phase of the moon”.就是把手机上安装了的应用删除掉，在安装就行了！ 分析：我猜测是因为之前我在另一台电脑上安装了这个应用，调试证书导致的错误？还是，最近升级了OS X 10.10.3 、Xcode 6.3 导致的错误？不得而之了。总之，如果下次遇到这个问题，先删掉原来的应用，如果不行，那考虑其它原因就是证书等问题。 ～nice 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"编译报错","slug":"编译报错","permalink":"https://iHTCboy.com/tags/编译报错/"}]},{"title":"你可能永远不知道的iPhone功能！","date":"2015-04-14T14:33:26.000Z","path":"2015/04/14/2015_你可能永远不知道的iPhone功能！/","text":"1、 健康应用最新的iPhoen6、6plus集成气压计，所以可以测量海拔，也就可以测量【已爬楼层】，没错，我正在5楼！ 2、苹果地图这是我有一次坐汽车时，在下拉栏看到的，瞬间心动，请看下图啦。ps:我猜测iPhone平时就会记录你的位置，比较上班和家里的位置，因为这些位置相对固定不变，所以当位置变化很大时，苹果就会～～好吓人～ 3、计算器横竖屏时不同计算器外，左右滑动上输入的数字时，还能删除 4、反转颜色（设置–通用–辅助功能–反转颜色） 这个反转颜色黑底白字，White on Black，说是颜色反转，其实更是高对比度。很 多眼障人群（譬如说高龄老人）对低对比度内容（譬如说白色背景浅色文字）辨识无力。—来自百度 ps: 好像AssistiveTouch这个功能，也是为老人设计吧，但很多人用它，把它当成防止Home按钮损坏的一种办法。别外，开启反转颜色后，截图也会彩色的，不知道苹果底层是不是没有真正的变色？ 5、灰度 （设置–通用–辅助功能–灰度）这个也是针对老人的吗? 我想有至少三个功能： 老人、色弱、色盲 保护眼睛 节能（应该能减少耗电吧？） 6、语言（设置–通用–辅助功能–语言）这个功能屌了！是苹果给不方便看手机的用户提供的！可以读取屏幕上的文字，屌丝功能：在挤公交或地铁时听新闻、小说、只要是文字的都可以，在嗓音里，可以下载高音质的语音。1.使用方法： 两根手指从屏幕顶部向下轻扫 2.提供的功能： 多个低高语速 暂时、继续、下一个 正在读的文字有阴影跟随 3.不足的是： 英文和中文阅读会间隔大 只能从屏幕文字开头读起 ps:设置–通用–辅助功能，还有很多好功能，大家可以自己看看哦 7、访问限制【隐藏应用的好方法】（设置–通用–访问限制）启动访问限制时，需有设置一个独立的密码，然后选择限制的应用，那么在桌面上应用的图标就不见了！起到了隐藏功能 ，里面还有很多功能，大家有需要的可以看看啊 8、键盘（设置–通用–键盘）虽然iOS8后，苹果开放了第三方的键盘输入，但是目前第一次显示第三方键盘的时候会有点卡，强迫证的人可能受不了，我是用笔画和五笔的，对第三方键盘不感冒，其它系统键盘也很好用，笔画啊！第三方键盘存在问题 刚切换出第三方键盘时，会卡一下，或者动画不流畅。这个因为系统级原因，可能永远无法解决？ 联想功能，当输入一个词后，如果删除后，就没有联想了。这个也是系统原因，也可能无法解决。 可能永远无法语音输入。因为解析语音要联网，键盘输入的信息苹果以后应该不开放联网吧？ 系统键盘技巧 用户词典，比如我的gmail邮箱，短语：ihetiancong@gmail.com ，设置输入码：igma，那么当我要输入我的邮箱时，我只要输入igma，就会显示我的完整邮箱，还能iCloud 自动同步。 启用听写，就可以不用打字了，但目前好像只能听英文，中文识别不了。 9、Safari用Safari上www.baidu.com百度时，百度会自动跳转到手机web版,有时候就是想要上电脑版呢，苹果在iOS8中,增加了请求桌面站点功能。 10、查找 iPhone这个应用是苹果开发的，默认出厂好像是没有安装的？不太记得了，这个功能太屌了！ 11、相机相机这个应用非常强大，非常简洁，也非常高效！ 左右滑动切换拍摄模式 单击取景窗口可以对焦，然后上下滑动可以调节爆光 如果长压取景窗口，可以锁定曝光和对焦，作用：用于拍摄近景非常棒，如花朵 如果长按拍摄键，照片模式下是连拍 两指捏合，可以调节变焦倍数 网格,比如3分之1取景等可能用到。（设置–照片与相机–网格） 12、开发者这个就是给苹果开发者使用的，对开发者来说，又是一个利器，降低了开发测试的成本。ps：对于一般用户，也可能会用到哦！下文会说： ##ps：当你不想借手机给别人用时，你就设置Enable 、100% Loss ，那么手机就上不了网了！！懂了吧！！点赞吧！！ ##总结在接触了苹果一年里，发现真的离不开苹果了，我不会说安卓怎样，我只会说，苹果满足了我全部的需求，也超出我的奢求！ 1.苹果这些无微不至的功能，虽然只是为了满足小数用户，但是它做了，并做的很美！2、苹果每个应用都做得尽可能简单、简洁。诚然，很多复杂的功能一般很少用。3.如果你喜欢这篇文章，点赞一个呢！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"iTunes","slug":"iTunes","permalink":"https://iHTCboy.com/tags/iTunes/"}]},{"title":"AppStore付费应用退款流程（2015超级详细版）","date":"2015-04-11T10:38:26.000Z","path":"2015/04/11/2015_App-Store付费应用退款流程（2015超级详细版）/","text":"一、关于退款说明首先说明，苹果允许用户用一切理由来退款，并且是可以退款成功的. 首先登陆苹果“问题报告”网站 https://reportaproblem.apple.com 网站是报告最近 90 天购买的 iTunes Store、App Store、iBooks Store 或 Mac App Store 项目相关问题。 然后找到你想申请退款的应用： 注：这个应用是一个睡眠监听的应用，原理应该是通过录音，夜里发现你是不是有动静，来监测你的睡眠状况。这个应用，最大的问题就在这里，因为要录音，所以它要求夜里手机必须在充电状态，否则不会工作。这个应用是中国1元区刚开始时就下载了，但后来一直没有用，也不会在用，夜里充着电，根本不方便，所以就对不起作者（Northcube AB）了，我要做坏事了，sorry~ 二、退款流程1.点击报告问题 2.选择一个你要退款的理由 3.选择请求退款的选项 4.完成退款 5.最后该应用右边显示已退款 6.退款成功后，苹果还会发邮件告诉你（苹果真的是全心为用户！赞一个！） 三、最后声名我不是鼓励大家有理由没理由的申请退款，或者用这种方式来获得“免费”应用，这种方式，如果退款成功，苹果是不会删除你已经下载了的付费应用，你可以继续使用，但是你删除后，再下载时需要重新付费。 最后给大家看看，我买过的几个应用，我都没有退款，因为它们真的很好用！只是现在有了1元区后，很多应用根本就没有做好功能，就来收费了，这是作为开发者和用户都不应该屈服的。说明：我认为一个应用如果目标定在1元，就有借口说因为收益低，所以做不好，那么我觉得这是在“骗钱”吗！ 1、Runtastic Six Pack六块腹肌软件这个应用真心好，相对于目前那些6元的7分钟系列，这个应用只要30元，提供的版本是iPhone,iPad都可以下载的，提供高清晰的视频跟练，六块腹肌马上出来！效果明显！ 2、The Great Photo App这个应用是一个单反和拍摄介绍的软件，这个软件最大特色就是以全新的方式展示！另外里面部分内容会有内购，但都是良心价。 3、Dash API Docs这个应用不用介绍了，开发者必备，68元是我考虑了一个星期才决定买的，现在来看，是非常值得！ 4、Due ～ 快速提醒＋定时器这个应用提供的是定时提醒功能，设置的每一个提醒事件，提供丰富的功能选项（小睡、重复、多种提示音、同步功能、时间选择也很快捷。）另一功能，就是定时器，可以设置多个定时器。 5、Calendars 5 - 与 Google 日历同步的智能日历及任务这个应用是一个可与系统(iOS/Mac OS X)日历、提醒事项同步的日历和任务APP, 如果不想与系统同步，也可以与Google同步。应用界面非常的高效和条理清晰。是一个非常好的日程安排和提醒任务等功能的好用的应用！ 四、最后呼吁大家：1. 对好的应用一定要收费支持！2. 对于“骗钱”的应用要知道自己是拥有权力的！3. 感谢苹果为我们提供退款的权力！赞一个！4. 如果本文对你有帮助，来赞一个吧！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"AppStore","slug":"AppStore","permalink":"https://iHTCboy.com/tags/AppStore/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"iTunes","slug":"iTunes","permalink":"https://iHTCboy.com/tags/iTunes/"}]},{"title":"iOS错误---“A valid provisioning profile for this executable was not found”","date":"2015-03-23T02:34:16.000Z","path":"2015/03/23/2015_iOS错误---“A-valid-provisioning-profile-for-this-executable-was-not-foun/","text":"linker command failed with exit code 1 (use -v to see invocation) 网上答案： 1、我以前添加开源的.a文件时也遇到过类似的情况，问题大多主要是出现在Ohter Linker Flags 这个属性，找到Build settings-&gt;Linking-&gt;Other Linker Flags，将此属性修改成-all_load 2、把Other Linker Flags下的属性全删除了。 3、错误信息中出现了某个类的名字，去原文件中看看#import了哪些第三方库，把这些库挨个注释排除，找到出错的那个库，然后按照官方提供的步骤重新添加一遍。 4、看看是不是有新添加的文件跟之前文件同名 经过多次排查，最后答案是： 出现这种情况很可能是，项目中引入了多个相同的文件。 删除一个就ok！ 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"编译报错","slug":"编译报错","permalink":"https://iHTCboy.com/tags/编译报错/"}]},{"title":"Xcode真机运行报错：\"the application could not be verified\"","date":"2015-03-11T16:56:16.000Z","path":"2015/03/12/2015_Xcode真机运行报错：the_application_could_not_be_verified/","text":"昨天苹果更新Xcode 6.2 ,升级后项目编译后报错，网上的搜索到的方法试了，结果都不成功，最后在Xcode 设置里重新设置帐号就可以了。1、用“—”删除你的帐号 2、然后重新添加帐号，并刷新帐号，所以按提示就可以编译通过。（ps：1.电脑要有真机调试证书，2.手机已经加入调试设备） 由于急解决，所以过程忘记截图了，也无法在重现了。。。 nice～ 如果有什么疑问，可以在评论区一起讨论； 如果有什么不正确的地方，欢迎指导！ 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"},{"name":"编译报错","slug":"编译报错","permalink":"https://iHTCboy.com/tags/编译报错/"}]},{"title":"iOS单独集成QQ分享功能的苦逼经验","date":"2015-02-27T15:17:26.000Z","path":"2015/02/27/2015_iOS单独集成QQ分享功能的苦逼经验/","text":"这个过程其实很简单，就是腾讯的文档真的不敢恭维！ 如果只是想把一段文字，或一张图片分享到QQ（包括好友、群、讨论组、空间），那么你看文档会感觉到很无助，不知道从那里开始，并且地魔（demo）跑不起来！（ps，腾讯的员工是不是经常跳槽到微信？） （1）首先，把TencentOpenAPI.framework、TencentOpenApi_IOS_Bundle.bundle导入工程中。ps: 我在搜索资料时，看到有人说TencentOpenAPI.framework要放在工程根目录，我在Xcode6下试了一下，结果是不放根目录也行，同时Xcode6下，导入framework就好，其它操作都自动了，官方sdk文档好像好久没更新了，我又想吐槽？不要阻止我！what’s up？ （2）添加SDK依赖的系统库文件。 Security.framework libiconv.dylib SystemConfiguration.framework CoreGraphics.Framework libsqlite3.dylib CoreTelephony.framework libstdc++.dylib libz.dylib （3）在AppDelegate.h中 导入 头文件1#import &lt;TencentOpenAPI/TencentOAuth.h&gt; （4）在AppDelegate.m中向腾讯注册。（ps：只是集成分享功能，所以不用授权）12345 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; [[TencentOAuth alloc] initWithAppId:QQKey andDelegate:nil]; //注册｝ 要特别注意以下3点：1、上面代码中QQkey为APP ID，而不是APP KEY，并且与URL schemes不相同。 2、URL type 里的 URL schemes = tencent + appid。（因为微信、微博的两个值是相同的，所以要注意一下。） 3、这里delegate为空，因为没有授权，所以不用代理。 （5）重写AppDelegate 的handleOpenURL和openURL方法1234567891011- (BOOL)application:(UIApplication*)application openURL:(NSURL *)url sourceApplication:(NSString*)sourceApplication annotation:(id)annotation&#123;return[TencentOAuth HandleOpenURL:url];｝-(BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url&#123;return[TencentOAuth HandleOpenURL:url];&#125; （ps：不用实现TencentSessionDelegate代理方法，手机QQ里分享时，会等到分享成功后，才会跳回原应用，所以不用监听发送情况） （6）设置Bundle display name属性值。如果是Xcode 6.0创建工程时，默认可能没有单独设置Bundle display name属性值。但是因为SDK需要用到Bundle display name的值，所以务必请检查确保这个属性存在，如果没有请添加上。如下图所示： （ps：注意的是，这个名字会用在2个地方：1、应用显示的名字，2、分享到QQ界面时显示的“来自”小尾巴（到空间时，小尾巴是你注册腾讯appid时写的应用名字） （7）在实现分享的ViewCotroller里加入头文件123#import &lt;TencentOpenAPI/QQApi.h&gt;#import &lt;TencentOpenAPI/QQApiInterface.h&gt; （8）实现分享内容的代码（以分享图片为例）12345678910111213141516//用于分享图片内容的对象QQApiImageObject *imgObj = [QQApiImageObject objectWithData:imgDatapreviewImageData:previewImagetitle:self.newsModel.titledescription:@\"由 桂林理工大学-校园通 转码\"];SendMessageToQQReq *req = [SendMessageToQQReq reqWithContent:imgObj];//将内容分享到qqQQApiSendResultCode sent = [QQApiInterface sendReq:req];其它内容，大家还是磨磨官方文档，或者用集成化的sdk吧，同时希望腾讯的iOS开发者不要在打酱油了~.~ 相关连接：QQ SDK 介绍页 QQ SDK IOS_API调用说明 《QQ SDK iOS SDK环境搭建》.doc 下载 《QQ SDK iOS SDK API使用说明.doc》下载 注：本文首发于 iHTCboy’s blog，如若转载，请注来源","tags":[{"name":"QQsdk","slug":"QQsdk","permalink":"https://iHTCboy.com/tags/QQsdk/"},{"name":"QQ分享","slug":"QQ分享","permalink":"https://iHTCboy.com/tags/QQ分享/"},{"name":"iOS","slug":"iOS","permalink":"https://iHTCboy.com/tags/iOS/"}]}]