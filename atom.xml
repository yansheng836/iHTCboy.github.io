<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iHTCboy's blog]]></title>
  <subtitle><![CDATA[Learn something of everything,  Learn everything of something.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://iHTCboy.com/"/>
  <updated>2019-12-28T14:21:39.550Z</updated>
  <id>https://iHTCboy.com/</id>
  
  <author>
    <name><![CDATA[iHTCboy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[GMTC2019 ——— 基于小程序技术栈的微信客户端跨平台实践]]></title>
    <link href="https://iHTCboy.com/2019/12/02/2019-12-02_GMTC2019_%E5%9F%BA%E4%BA%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF%E6%A0%88%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>https://iHTCboy.com/2019/12/02/2019-12-02_GMTC2019_基于小程序技术栈的微信客户端跨平台实践/</id>
    <published>2019-12-02T04:49:16.000Z</published>
    <updated>2019-12-28T14:21:39.550Z</updated>
    <content type="html"><![CDATA[<h3 id="1、简介">1、简介</h3><p>《基于小程序技术栈的微信客户端跨平台实践》<br> 张志坚 / 微信 高级工程师</p>
<ul>
<li><p>演讲简介：</p>
<blockquote>
<p>跨平台开发是为了增加代码复用，减少开发者对多个平台差异适配的工作量，降低开发成本，提高业务专注的同时，提供比Web更好的体验。本专场将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2338" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li>讲师简介：<blockquote>
<p>张志坚，微信高级工程师，2018年加入腾讯微信团队，主要从事跨平台方向，从参与基于C++的跨平台UI框架到基于Flutter的跨平台框架研发，持续推进跨平台方案落地。曾就职于阿里UC浏览器内核团队，主要从事多媒体、浏览器内核方向，经历了UC浏览器内核从U3到U4的过程，先后主导了浏览器内核网络流媒体方面的播放和下载架构设计，持续优化TCP/IP/HTTP2网络模块，帮助提升网页性能。</p>
</blockquote>
</li>
</ul>
<h3 id="2、前言">2、前言</h3><p>关于本文章的原由，在之前的文章 <a href="https://ihtcboy.com/2019/12/01/2019-12-01_GMTC2019beijing/">GMTC全球大前端技术大会（北京站）2019 | iHTCboy’s blog</a>。所有CMTC的内容可在 <a href="https://gmtc.infoq.cn/2019/beijing/schedule" target="_blank" rel="external">GMTC全球大前端技术大会（北京站）2019</a> 网站查看。另外，如果观看视频可以在极客时间App的每日一课中观看（需会员）。</p>
<h3 id="3、演讲简介">3、演讲简介</h3><p>小程序自诞生以来，经过两年多的发展，成为了微信开发者生态中最具有生命力的一环，为外部开发者开辟了全新的想象空间。然而，小程序带来的改变绝不仅限于微信之外，小程序技术栈的确立，又对微信客户端的研发产生了怎样的影响？本次分享将带来微信客户端中基于小程序技术栈的跨平台开发实践。</p>
<p>演讲提纲：</p>
<ol>
<li>微信客户端的跨平台实践尝试</li>
</ol>
<p>（1）微信客户端跨平台技术的应用历程</p>
<pre><code>基础组件的跨平台

业务开发的跨平台
</code></pre><ol>
<li>小程序与微信客户端</li>
</ol>
<p>（1）客户端视角的小程序运行框架简介</p>
<p>（2）小程序技术栈如何为微信客户端业务服务</p>
<ol>
<li>基于小程序技术栈的微信客户端跨平台实践</li>
</ol>
<p>（1）运行效率和研发效率的平衡</p>
<p>（2）如何解决小程序用作客户端功能开发的体验问题</p>
<pre><code>小程序的体验问题根源

类 RN 的原生渲染解决方案

跨平台的 <span class="keyword">LV</span>-CPP 渲染方案

使用 Flutter 优化 <span class="keyword">LV</span>-CPP 跨平台渲染方案
</code></pre><ol>
<li>总结与展望</li>
</ol>
<p>（1）Flutter 在微信中的其他应用</p>
<p>听众收益：</p>
<ol>
<li><p>了解微信和小程序的技术架构</p>
</li>
<li><p>可以拓展 Flutter 在不同层面的应用价值</p>
</li>
<li><p>为跨平台方案提供新的思路，在开发效率和性能体验上提出更高的要求</p>
</li>
</ol>
<h3 id="4、PPT_简介">4、PPT 简介</h3><h3 id="5、思考">5、思考</h3><p>小程序基于flutter，然后用c++跨java和objectiveC，这个思路很棒！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://gmtc.infoq.cn/2019/beijing/schedule" target="_blank" rel="external">GMTC全球大前端技术大会（北京站）2019</a></li>
<li><a href="https://ppt.infoq.cn/list/gmtcbj2019" target="_blank" rel="external">GMTC北京2019PPT下载合集</a></li>
<li><a href="https://gmtc.infoq.cn/2019/beijing/presentation/1846" target="_blank" rel="external">专题演讲嘉宾：杨轶 — GMTC全球大前端技术大会（北京站）2019</a></li>
</ul>
<p><br></p>
<ul>
<li>如有侵权，联系必删！</li>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、简介">1、简介</h3><p>《基于小程序技术栈的微信客户端跨平台实践》<br> 张志坚 / 微信 高级工程师</p>
<ul>
<li><p>演讲简介：</p>
<blockquote>
<p>跨平台开发是为了增加代码复用，减少开发者对多个平台差异适配的工作量，降低开发成本，提高业务专注的同时，提供比Web更好的体验。本专场将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2338">下载</a></p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="GMTC" scheme="https://iHTCboy.com/tags/GMTC/"/>
    
      <category term="GMTC2019" scheme="https://iHTCboy.com/tags/GMTC2019/"/>
    
      <category term="前端全栈" scheme="https://iHTCboy.com/tags/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
      <category term="大前端" scheme="https://iHTCboy.com/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动开发" scheme="https://iHTCboy.com/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GMTC全球大前端技术大会（北京站）2019]]></title>
    <link href="https://iHTCboy.com/2019/12/01/2019-12-01_GMTC2019beijing/"/>
    <id>https://iHTCboy.com/2019/12/01/2019-12-01_GMTC2019beijing/</id>
    <published>2019-12-01T03:11:11.000Z</published>
    <updated>2019-12-28T14:20:03.872Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>工作5年来，一直投身于 iOS 开发，而这5年来移动开发一直再追赶web前端和后端开发的技术栈和思想，近2年大家直接说：“大前端”，移动开发真正变成了“UI”前端的开发，而web前端借助 Node 开始转了后端开发？正是借着这些变化，我一直在思考，一直在疑问，直到看了一些 GMTC 课程，就像命悬一线的人一下子打通了任督二脉，练习武功不再于形式，需要提升认知的境界！这是一个神奇的世界，一个最好的时代！最“坏”的时代！</p>
<a id="more"></a>
<p>GMTC是什么？</p>
<blockquote>
<p>GMTC全球大前端技术大会是由极客邦科技旗下InfoQ中国主办的技术盛会，关注前端、移动、AI应用等多个技术领域，促进全球技术交流，推动国内技术升级。GMTC为期4天，包括两天的会议和两天的培训课，主要面向各行业前端、移动开发、AI技术感兴趣的中高端技术人员，大会聚焦前沿技术及实践经验，旨在帮助参会者了解大前端&amp;移动开发领域的技术趋势与实践案例。</p>
</blockquote>
<h3 id="2、正文">2、正文</h3><p>借知乎 <a href="https://www.zhihu.com/question/330261935/answer/724749304" target="_blank" rel="external">果大</a> 评价GMTC的一句话:</p>
<blockquote>
<p>切身的一个体会就是「让多个人去做同一个项目，先不讨论项目的结果如何，最终项目组里每个人成长差别非常大」，所以大家要不断地去思考做一个项目解决一个问题参加一次会议如何能让自己有更多的收获，思考能力、执行力、沟通能力、竞品分析能力、沉淀分享能力等都是我们需要去关注的点。</p>
</blockquote>
<p>做技术这些年，技术不在是技术，知识不在是知识，不要停留在自己的认知世界里，多看看别人的世界，看技术前沿，看程序圈子趋势。向上，思考问题的层次，向下，编程语言的底层。</p>
<p>目前的国内环境，最后的大前端分享，我想就是 GMTC 了，总体来讲邀请了国内技术公司大牛，分享他们过去和未来对于某个方向技术的实践与探索，每个专场都非常有代表性，最后，学习不止于知识，你的疑问？不可能通过别人有一个完美的回答，不能一鼓子copy到自己行业的业务中，应该是通过讲师的演讲，学习解决问题的思路和方法，了解未来的方向变化，有所启发，有所改进，有所触动，有所融会贯通！</p>
<p>所以，希望把看过的视频，都做一些记录和感想吧，不管懂与否，这都是学习步伐的记录~</p>
<h3 id="3、GMTC_北京_2019">3、GMTC 北京 2019</h3><p>以下内容可在 <a href="https://gmtc.infoq.cn/2019/beijing/schedule" target="_blank" rel="external">GMTC全球大前端技术大会（北京站）2019</a> 网站查看。另外，如果观看视频可以在极客时间App的每日一课中观看（需会员）。</p>
<h4 id="前端工程化">前端工程化</h4><blockquote>
<p>前端工程化是前端业务以及技术架构复杂度提升导致的必行之路，然而工程化并不是普适的技术或者理论，业务类型、场景、技术架构甚至团队组织架构均是决定工程化具体形态的必要因素。换句话讲，工程化是与实践密不可分的。本专场我们通过分享业内一些经过实践检验的工程化方案，希望能够为大家在前端工程化的探索道路上提供借鉴和帮助。</p>
</blockquote>
<h5 id="《Using_webpack_to_make_Apps_fast_at_Microsoft》">《Using webpack to make Apps fast at Microsoft》</h5><p> Sean Larkin  / Microsoft Edge 研发经理 webpack 维护者</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>Sean Larkin 【<strong>廖肖恩 】</strong>is a Program Manager at Microsoft working on Edge DevTools, expert on Web Performance, and maintainer of webpack. Outside of work, he works with Fortune 500 companies helping them change their culture for Web Performance practices, Open Source, and embracing emerging technologies. In his free time he loves spending time with his family, hiking, woodworking, cooking, gardening, Orchid cultivating, playing video games, hacking on IoT, and Streaming his open source work!</p>
<p>Sean Larkin【廖肖恩】是Microsoft的研发经理，负责Edge DevTools；他还是Web性能专家和webpack维护者。在工作之余，他与财富500强公司合作，帮助他们改变他们的文化，以实现Web性能实践、开源和采用新兴技术。在他的空闲时间里，他喜欢和家人共度时光，远足、木工、烹饪、园艺、兰花培养、玩视频游戏、黑客攻击物联网，以及打磨自己的开源作品！</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端工程化是前端业务以及技术架构复杂度提升导致的必行之路，工程化是与实践密不可分的。本专场我们通过分享业内一些经过实践检验的工程化方案，希望能够为大家在前端工程化的探索道路上提供借鉴和帮助。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2371" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《从一到无穷大：前端工程化中的实践与臆测》">《从一到无穷大：前端工程化中的实践与臆测》</h5><p> 王逸威 / 阿里巴巴 高级前端工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>毕业于南开大学，2015年加入去哪儿网，负责民宿客栈业务和Node.js工程化，2017年加入阿里巴巴，现任CBU技术部前端工程负责人。深耕于前端工程化领域，主导了在阿里巴巴B类事业群被多个BU广泛使用的Just工程体系的开发。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端工程化是前端业务以及技术架构复杂度提升导致的必行之路，工程化是与实践密不可分的。本专场我们通过分享业内一些经过实践检验的工程化方案，希望能够为大家在前端工程化的探索道路上提供借鉴和帮助。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2402" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《京东购物小程序工程化之路》">《京东购物小程序工程化之路》</h5><p> 刘慧敏 / 京东 高级前端工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>京东凹凸实验室前端工程师，京东购物小程序前端负责人。曾就职于腾讯，参与过QQ 空间相册、时光轴等核心产品的研发。2014 年加入京东，负责京东购物小程序项目的研发与管理，在前端工程化、小程序、效率提升及性能优化方面有较多的研究和积累。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端工程化是前端业务以及技术架构复杂度提升导致的必行之路，工程化是与实践密不可分的。本专场我们通过分享业内一些经过实践检验的工程化方案，希望能够为大家在前端工程化的探索道路上提供借鉴和帮助。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2416" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h5 id="《快手游戏直播Web站的工程进化之路》">《快手游戏直播Web站的工程进化之路》</h5><p> 俞天翔 / 快手 前端架构师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>快手前端架构师，游戏直播团队前端负责人。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端工程化是前端业务以及技术架构复杂度提升导致的必行之路，工程化是与实践密不可分的。本专场我们通过分享业内一些经过实践检验的工程化方案，希望能够为大家在前端工程化的探索道路上提供借鉴和帮助。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2412" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="性能优化与监控">性能优化与监控</h4><blockquote>
<p>对于端上的性能监控与优化，也一直是热门话题。移动互联网经过近10年的发展，各大APP随着时间和业务的累加变得越来越重，复杂度高的业务模块和数量巨大的第三方插件，导致APP越来越慢、越来越卡，严重影响了用户体验。</p>
<p>因此，对APP进行性能优化就变得尤为重要。性能优化有很多指标，比如Crash率、卡顿、CPU、内存、存储和网络等，建立完善的数据指标并进行有效采集是一项很复杂的任务。除了手动埋点以外，业界对自动化埋点和性能优化监控平台的探索也层出不穷，性能优化在一线大厂得到了高度的重视。</p>
<p>本专场将邀请不同业务场景的一线技术专家分享相关技术实践，希望能给大家带来更多的思考和落地参考。</p>
</blockquote>
<h5 id="《B站的视频体验进化之路》">《B站的视频体验进化之路》</h5><p> 谭兆歆 / bilibili 资深前端工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>在B站任职五年，现负责Web播放相关工作，即HTML5播放器及播放内核开发、弹幕支持和特效研究、用户体验优化方面。参与的项目有HTML5播放器开发及在B站的全面上线、DASH内核调研开发、蒙板弹幕、播放页改版与秒开等。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>对于端上的性能监控与优化，也一直是热门话题。本专场将邀请不同业务场景的一线技术专家分享相关技术实践，希望能给大家带来更多的思考和落地参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2360" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《0-3秒完成渲染！信息流内容页“闪开”优化总结和思考》">《0.3秒完成渲染！信息流内容页“闪开”优化总结和思考》</h5><p> 庞锦贵 / 阿里巴巴 前端技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>现就职于阿里巴巴移动事业部，UC国内信息流前端负责人。有丰富的性能优化、工程化、架构设计经验，UC移动技术核心决策成员。参与了Scrat3架构建设，主导并推动了UCWeex Rax和UCWeex Vue体系的标准化建设；开发并落地了UC新一代大前端工程框架&mdash;&mdash;UFX，主导了UC离线缓存框架&mdash;&mdash;U-cache的设计和开发。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>对于端上的性能监控与优化，也一直是热门话题。本专场将邀请不同业务场景的一线技术专家分享相关技术实践，希望能给大家带来更多的思考和落地参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2361" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《字节跳动线上性能监控体系的建设》">《字节跳动线上性能监控体系的建设》</h5><p> 万里鹏 / 字节跳动 性能监控体系负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>万里鹏，就职于字节跳动客户端基础技术部门，负责Android端性能监控体系，主要包括：异常监控、性能监控、事件监控和日志系统等。主要服务于头条、抖音、西瓜视频、火山小视频、多闪等全公司级移动端产品，为业务开发、异常排查、性能优化和用户反馈提供整套监控体系。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>对于端上的性能监控与优化，也一直是热门话题。本专场将邀请不同业务场景的一线技术专家分享相关技术实践，希望能给大家带来更多的思考和落地参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2366" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《去哪儿网客户端无埋点监控与性能优化实践》">《去哪儿网客户端无埋点监控与性能优化实践》</h5><p> 孟超 / 去哪儿网 公共产品部大前端负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2014 年加入去哪儿网，主要负责客户端混合开发框架相关的工作，先后负责参与去哪儿网 Hybrid 框架、QRN 框架（基于 React Native）、热更新系统、客户端无埋点监控平台等的设计、开发、应用与实践工作，目前专注于 App 性能优化和无埋点监控方向的一体化解决方案。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>对于端上的性能监控与优化，也一直是热门话题。本专场将邀请不同业务场景的一线技术专家分享相关技术实践，希望能给大家带来更多的思考和落地参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2406" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《从重新认识前端渲染开始，小红书的前端性能监控及优化实践》">《从重新认识前端渲染开始，小红书的前端性能监控及优化实践》</h5><p> 李季骏 / 小红书 社区前端工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2016 年底加入小红书至今，目前任职于社区前端组，负责了包括小红书前端工程化、服务端同构、Hybrid 容器层建设（WebView、React Native）等方向。对于跨平台混合开发场景有丰富的实践，并在效率、性能等方向累积了一定的工程化解决方案经验。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>对于端上的性能监控与优化，也一直是热门话题。本专场将邀请不同业务场景的一线技术专家分享相关技术实践，希望能给大家带来更多的思考和落地参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2408" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《手Q_iOS客户端性能监控和优化实践》">《手Q iOS客户端性能监控和优化实践》</h5><p> 罗鑫 / 腾讯 手Q客户端基础平台团队高级工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>罗鑫（rosen），腾讯手Q客户端基础平台团队高级工程师。2015年加入腾讯，一直从事手Q iOS客户端性能相关的监控和优化工作，在卡顿、内存、发热耗电等移动终端性能优化方面有丰富的实践经验，目前负责手Q iOS客户端基础性能监控优化以及编译效率提升的工作。 </p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>对于端上的性能监控与优化，也一直是热门话题。本专场将邀请不同业务场景的一线技术专家分享相关技术实践，希望能给大家带来更多的思考和落地参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2415" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="跨平台技术">跨平台技术</h4><blockquote>
<p>作为开发者，我们总是在追求效率和性能上不断探索和实践，这也是企业生存之道。效率和性能往往是一个矛盾点，为了效率我们探索的通用方案会带来冗余性能损耗、为了性能我们需要针对特定环境专项优化而失去通用性以至于效率折损。跨平台解决方案，以此寻求效率和性能的平衡。对于企业以及团队而言，选择合适的开发语言及框架、跨平台中UI复用、不同平台API高扩展性、基于效率之上性能最优等，都一直围绕着跨平台技术和解决方案展开探索。</p>
<p>相约GMTC 北京2019『跨平台技术』专场，和技术专家一起交流跨平台技术方案及应用实践。</p>
</blockquote>
<h5 id="《基于小程序技术栈的微信客户端跨平台实践》">《基于小程序技术栈的微信客户端跨平台实践》</h5><p> 张志坚 / 微信 高级工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>张志坚，微信高级工程师，2018年加入腾讯微信团队，主要从事跨平台方向，从参与基于C++的跨平台UI框架到基于Flutter的跨平台框架研发，持续推进跨平台方案落地。曾就职于阿里UC浏览器内核团队，主要从事多媒体、浏览器内核方向，经历了UC浏览器内核从U3到U4的过程，先后主导了浏览器内核网络流媒体方面的播放和下载架构设计，持续优化TCP/IP/HTTP2网络模块，帮助提升网页性能。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>跨平台开发是为了增加代码复用，减少开发者对多个平台差异适配的工作量，降低开发成本，提高业务专注的同时，提供比Web更好的体验。本专场将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2338" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《闲鱼基于Flutter技术的架构演进与创新》">《闲鱼基于Flutter技术的架构演进与创新》</h5><p> 于佳（宗心） / 阿里巴巴 闲鱼客户端团队负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>于佳，花名宗心，闲鱼技术团队客户端负责人。2012年应届毕业加入阿里巴巴，经历集团无线化转型的重要时期，参与过集团多款重量级App以及移动中间件的设计与开发，多年客户端老兵。2014年参与了手机淘宝的iOS客户端的架构升级，该架构首次完成了对百人团队并行开发的支持，同年主导了手机天猫客户端基础架构以及交易链路向手淘架构的归一，为手机淘宝作为未来集团无线中台奠定了坚实的基础。2015年加入闲鱼客户端团队负责端架构和团队建设，工作期间完成了基于Flutter混合架构的闲鱼客户端的整体架构设计，在工程体系上完善了针对Flutter的持续集成以及高可用体系的支撑，同时推进了闲鱼主链路业务的Flutter化。未来将持续关注终端技术的演变及发展趋势。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>跨平台开发是为了增加代码复用，减少开发者对多个平台差异适配的工作量，降低开发成本，提高业务专注的同时，提供比Web更好的体验。本专场将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2347" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《基于跨平台框架_Flutter_的动态化平台建设》">《基于跨平台框架 Flutter 的动态化平台建设》</h5><p> 刘志磊 / 美团 大前端技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>刘志磊，美团大前端技术专家。2015 年加入美团，2016 年负责美团性能及 crash 监控相关工作，2017 年开始参与美团Hybrid工作，在终端动态化方向有较多研究和积累。2018年底开始尝试将 Flutter 与动态化相结合，进行 Flutter 平台化的建设。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>跨平台开发是为了增加代码复用，减少开发者对多个平台差异适配的工作量，降低开发成本，提高业务专注的同时，提供比Web更好的体验。本专场将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h5 id="《基于_Electron_的跨平台桌面客户端开发实践》">《基于 Electron 的跨平台桌面客户端开发实践》</h5><p> 王丰 / 字节跳动 Lark前端负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>Lark 前端负责人，负责 Lark 桌面客户端，Web 端，以及 Lark 其他相关 B 端、M 端产品的研发工作。曾就职于百度、网易、滴滴等公司，2018年加入字节跳动。参与过百度音乐、网易新闻客户端、小桔车服等大型项目的开发和前端技术体系建设。在前端工程化、大型 WebApp 架构设计、前端性能优化等领域有丰富的实践经验。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>跨平台开发是为了增加代码复用，减少开发者对多个平台差异适配的工作量，降低开发成本，提高业务专注的同时，提供比Web更好的体验。本专场将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2350" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h4 id="前端框架">前端框架</h4><blockquote>
<p>前端框架逐渐形成了React、Vue、Angular三足鼎立的形势，另外还有一些公司的自研框架，每一个框架都有着自己的拥趸，这些框架有哪些落地实践，让我们为你一一道来。</p>
</blockquote>
<h5 id="《蚂蚁金服前端框架和工程化实践》">《蚂蚁金服前端框架和工程化实践》</h5><p> 陈成（云谦） / 蚂蚁金服 高级技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>陈成，花名云谦，蚂蚁金服高级技术专家，入职阿里已有 10 年。之前在淘宝，负责过淘宝首页、宝贝详情、购物车、下单等很多重要业务的前端部分。然后转岗到支付宝，曾负责 <a href="a href=&quot;https://github.com/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/&lt;/a&gt;spmjs/spm">spm</a>、支付宝开发者工具的开发，以及创建了 <a href="a href=&quot;https://github.com/dvajs/dva/">dva</a>“ rel=”nofollow” target=”_blank”&gt;<a href="https://github.com/dvajs/dva/" target="_blank" rel="external">https://github.com/dvajs/dva/</a>)，<a href="a href=&quot;https://github.com/sorrycc/roadhog">roadhog</a>“ rel=”nofollow” target=”_blank”&gt;<a href="https://github.com/sorrycc/roadhog" target="_blank" rel="external">https://github.com/sorrycc/roadhog</a>)，<a href="a href=&quot;https://github.com/ant-design/babel-plugin-import">babel-plugin-import</a>“ rel=”nofollow” target=”_blank”&gt;<a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="external">https://github.com/ant-design/babel-plugin-import</a>)，<a href="a href=&quot;https://github.com/umijs/umi/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/umijs/umi/&lt;/a">umi</a> 等。擅长的领域有工具、前端框架以及前端性能等，热衷于开源，大家可以在 <a href="https://github.com/sorrycc" rel="nofollow" target="_blank">https://github.com/sorrycc</a> 找到我。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端框架逐渐形成了React、Vue、Angular三足鼎立的形势，另外还有一些公司的自研框架，每一个框架都有着自己的拥趸，这些框架有哪些落地实践，让我们为你一一道来。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2404" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《换个角度看_Vue_组件》">《换个角度看 Vue 组件》</h5><p> 唐金州 / 校宝在线技术专家 Ant Design Vue 作者</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>唐金州，校宝在线 技术专家，Ant Design Vue 作者，极客时间<a href="http://gk.link/a/103Wa" target="_blank" rel="external">《Vue开发实战》</a>视频课讲师。第二届 VueConf 演讲嘉宾，主导开发的 Ant Design Vue 在 GitHub 已有 6000+ Star，并且已经纳入 Ant Design 官方域名下，成为了蚂蚁金服 Ant Design 官方唯一指定的 Vue 版组件库。曾任职于搜狗、蚂蚁金服，并主导研发了多个 UI 框架和前端架构设计，在移动端和中后台都有丰富的开发经验。除了 Vue 之外，对 React 也有多年的开发经验。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端框架逐渐形成了React、Vue、Angular三足鼎立的形势，另外还有一些公司的自研框架，每一个框架都有着自己的拥趸，这些框架有哪些落地实践，让我们为你一一道来。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2403" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《多端适配框架NFES在携程的实践》">《多端适配框架NFES在携程的实践》</h5><p> 魏晓军 / 携程 高级研发经理</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2011年加入携程，主要负责前端框架和基础设施的研发工作，目前重点关注Node.js和前端新技术的落地，以及前端性能优化。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端框架逐渐形成了React、Vue、Angular三足鼎立的形势，另外还有一些公司的自研框架，每一个框架都有着自己的拥趸，这些框架有哪些落地实践，让我们为你一一道来。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2409" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《深入剖析React_Native下一代引擎框架重构》">《深入剖析React Native下一代引擎框架重构》</h5><p> 熊文源 / 京东 架构师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>熊文源，京东架构师，2016年加入京东，目前是技术中台多端融合平台Android端架构师，主要负责京东多端融合框架、引擎的搭建和基础组件的研发和架构设计工作，多端融合Android端的技术架构负责人，对React Native、Flutter、小程序框架有很深入的了解。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>前端框架逐渐形成了React、Vue、Angular三足鼎立的形势，另外还有一些公司的自研框架，每一个框架都有着自己的拥趸，这些框架有哪些落地实践，让我们为你一一道来。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2410" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="UI与图形渲染">UI与图形渲染</h4><blockquote>
<p>从远古时代静态的Web Page，到如今动态的Web App，网站前端的核心竞争从视觉的表现力逐渐过渡为功能的丰富性，而功能的实现也同样需要借助视觉的反馈。所以不论前端技术生态如何演进，UI与图形始终是不变的核心。前端UI与图形渲染有丰富的技术选型：HTML+CSS足以应对大多数常规前端项目；SVG被广泛应用于二维可视化领域；地图、游戏、医学、建筑等涉及三维场景、矢量图形、大数据计算的领域对于WebGL的应用也臻至成熟。本专题邀请拥有多年经验积累的一线讲师与专家，分享各自在不同产业领域和应用场景下针对UI与图形的技术与实践经验。</p>
</blockquote>
<h5 id="《基于Flutter引擎的TypeScript_UI框架在树莓派上的应用》">《基于Flutter引擎的TypeScript UI框架在树莓派上的应用》</h5><p> 徐远同（二同） / 淘宝 前端渲染技术团队负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>徐远同，花名二同，淘宝前端渲染技术团队负责人。此前曾任职于华为、百度，参与过百度地图等重量级App的研发。2016年加入淘宝，负责高性能W3C标准化图形渲染引擎以及工具链的研发。主要研究方向为WebGL/WebGPU标准的自有实现，以及跨平台跨终端的UI渲染体系，以拓展前端边界为目标努力。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>不论前端技术生态如何演进，UI与图形始终是不变的核心。本专题邀请拥有多年经验积累的一线讲师与专家，分享各自在不同产业领域和应用场景下针对UI与图形的技术与实践经验。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2342" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《基于GLES的三维地图渲染技术工程实践》">《基于GLES的三维地图渲染技术工程实践》</h5><p> 王前卫 / 高德 高级地图技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>王前卫，高德高级地图技术专家，客户端地图渲染技术团队负责人。深耕AMAP地图渲染技术多年，深度参与高德AE8、大编译、SDK升级项目等几场硬仗，拥有丰富的一线实践经验。目前在高德负责地图渲染引擎及AR导航黑科技的研发，在这些技术领域有较深的研究和见解。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>不论前端技术生态如何演进，UI与图形始终是不变的核心。本专题邀请拥有多年经验积累的一线讲师与专家，分享各自在不同产业领域和应用场景下针对UI与图形的技术与实践经验。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2420" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h5 id="《结合React与D3进行数据可视化开发》">《结合React与D3进行数据可视化开发》</h5><p> 郭桦 / Twitter 数据科学家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>郭桦，Twitter数据科学家，负责Twitter内部在线互动数据可视化工具的设计与开发，主攻网络可视化与事件序列可视化。2017年获得布朗大学博士学位，就读期间主要研究以人为本的数据可视化设计在脑科学、决策等领域的应用。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>不论前端技术生态如何演进，UI与图形始终是不变的核心。本专题邀请拥有多年经验积累的一线讲师与专家，分享各自在不同产业领域和应用场景下针对UI与图形的技术与实践经验。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h5 id="《基于DOM_的可协作幻灯片编辑器架构模式》">《基于DOM 的可协作幻灯片编辑器架构模式》</h5><p> 刘怡年 / 石墨文档 幻灯片技术负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2017 年加入石墨文档担任前端开发工程师，于 2018 年参与石墨文档幻灯片项目从立项开始的工作，担任技术负责人。主要研究方向为编辑器技术方案设计与数据管理方案实现，在石墨幻灯片开发过程中积累了一定的编辑器相关技术管理和功能实现经验。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>不论前端技术生态如何演进，UI与图形始终是不变的核心。本专题邀请拥有多年经验积累的一线讲师与专家，分享各自在不同产业领域和应用场景下针对UI与图形的技术与实践经验。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2351" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="Node实战">Node实战</h4><blockquote>
<p>Node.js在大前端布局里意义重大，除了基本构建和Web服务外，这里我还想讲2点。首先它打破了原有的前端边界，之前应用开发只分前端和API开发。但通过引入Node.js做BFF这样的API Proxy中间层，使得API开发也成了前端的工作范围，让后端同学专注于开发RPC服务，很明显这样明确的分工是极好的。其次，在前端开发过程中，有很多问题不依赖服务器端是做不到的，比如场景的性能优化，在使用React后，导致bundle过大，首屏渲染时间过长，而且存在SEO问题，这时候使用Node.js做SSR就是非常好的。</p>
<p>当然，前端开发使用Node.js还是存在一些成本，要了解运维等技能，会略微复杂一些，不过也有解决方案，比如Servlerless就可以降级运维成本，又能完成前端开发。直白点讲，在已有Node.js拓展的边界内，降级运维成本，提高开发的灵活性，这一定会是一个大趋势。</p>
<p>本次专场，依然专注于Node主要做的2件事儿：前端辅助 + API封装，会重点倾向于Serverless、TypeScript在Web开发框架里的相关实践、性能、SSR以及架构相关的主题进行组织分享。</p>
</blockquote>
<h5 id="《海量Node-js云服务的DevOps实践》">《海量Node.js云服务的DevOps实践》</h5><p> 王伟嘉 / 腾讯云研发工程师 Node 源码核心贡献者</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>王伟嘉，Starkwang，现腾讯云研发工程师，Node.js Core Collaborator，目前在腾讯云TCB团队负责小程序云开发相关的业务。对Serverless服务的设计与研发、Node.js工程运维开发有比较丰富的经验。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本次专场，依然专注于Node主要做的2件事儿：前端辅助 + API封装，会重点倾向于Serverless、TypeScript在Web开发框架里的相关实践、性能、SSR以及架构相关的主题进行组织分享。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2340" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《网易严选企业级Node及Serverless应用实践》">《网易严选企业级Node及Serverless应用实践》</h5><p> 金炳 / 网易 资深前端开发工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>金炳，网易资深前端开发工程师，网易严选Node负责人。 2016年加入网易，负责过邮箱大师、网易严选等产品前端开发，做过前端、后端、产品设计，是一名全栈工程师。目前致力于Node应用框架研究开发与生态建设，实践Node应用在Serverless、Faas场景下的迁移和落地，探索Service Mesh在Node应用中的价值。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本次专场，依然专注于Node主要做的2件事儿：前端辅助 + API封装，会重点倾向于Serverless、TypeScript在Web开发框架里的相关实践、性能、SSR以及架构相关的主题进行组织分享。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2344" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《基于_TypeScript_的_Node-js_多场景框架设计方案》">《基于 TypeScript 的 Node.js 多场景框架设计方案》</h5><p> 陈仲寅（张挺） / 淘宝 前端技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>长期耕耘于Node.js技术栈，为淘宝和阿里其他BU提供框架和中间件解决方案，负责淘宝整体的Node.js体系基础建设，解决全栈开发的各种维护和稳定性问题，也同时负责 MidwayJs系列内部和社区开源产品，包括Midway、Sandbox、Pandora、Injection等开源产品的开发、维护等工作。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本次专场，依然专注于Node主要做的2件事儿：前端辅助 + API封装，会重点倾向于Serverless、TypeScript在Web开发框架里的相关实践、性能、SSR以及架构相关的主题进行组织分享。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2353" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《使用_Node-js_的_TypeScript_多场景框架和方案实践》">《使用 Node.js  的 TypeScript 多场景框架和方案实践》</h5><p> 陈仲寅（张挺） / 淘宝 前端技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>长期耕耘于Node.js技术栈，为淘宝和阿里其他BU提供框架和中间件解决方案，负责淘宝整体的Node.js体系基础建设，解决全栈开发的各种维护和稳定性问题，也同时负责 MidwayJs系列内部和社区开源产品，包括Midway、Sandbox、Pandora、Injection等开源产品的开发、维护等工作。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本次专场，依然专注于Node主要做的2件事儿：前端辅助 + API封装，会重点倾向于Serverless、TypeScript在Web开发框架里的相关实践、性能、SSR以及架构相关的主题进行组织分享。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<h4 id="未来移动技术">未来移动技术</h4><blockquote>
<p>移动开发中都有哪些技术，如何将新技术在工作中实际使用？本专场包含现在的技术的新的方案和实践，以及未来技术的探索，希望通过一线工程师的技术实践分享，给大家带来更多的思考和经验参考。</p>
</blockquote>
<h5 id="《基于Android_App_Bundles的动态化方案探索_》">《基于Android App Bundles的动态化方案探索 》</h5><p> 陈家伟 / 爱奇艺 资深工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2014年南昌大学毕业，硕士学历，五年移动端开发经验。曾就职于步步高、平安，目前就职于爱奇艺移动架构组，主攻Android动态化相关项目。包括React Native Android端架构设计、Android热修复、Android组件化等，近一年来作为Qigsaw项目负责人开展新一代Android组件化工作。Qigsaw基于Android App Bundle实现，具有维护简单、开发方式灵活、无缝切换至国际版等优点。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>移动开发中都有哪些技术，如何将新技术在工作中实际使用？本专场包含现在的技术的新的方案和实践，以及未来技术的探索，希望通过一线工程师的技术实践分享，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2348" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《JavaScript_in_IoT》">《JavaScript in IoT》</h5><p> 刘亚中 / Rokid 研发工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>开源爱好者，Node.js Collaborator、ShadowNode 作者，目前主攻：Node.js 在 AIoT 领域的应用, 并负责 YodaOS 的社区推广工作。五年 JavaScript 开发经验，曾就职于：SeedMail、Pixbi、阿里巴巴，目前就职于 Rokid 基础平台研发中心，主要工作方向为基于 JavaScript 的物联网操作系统。近年来参与并负责 YodaOS 项目，将 IoT 和 AI 能力开放给 Node.js 社区，并实现了 Node.js 在 IoT 场景的产品级落地。同时也是 Node.js Collaborator、ShadowNode 和 TensorFlow-Node.js 作者，开源发烧友，目前给60个开源项目贡献过代码。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>移动开发中都有哪些技术，如何将新技术在工作中实际使用？本专场包含现在的技术的新的方案和实践，以及未来技术的探索，希望通过一线工程师的技术实践分享，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2345" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《移动_Web_上玩转原生游戏_》">《移动 Web 上玩转原生游戏 》</h5><p> 杨轶 / 上海木鸡网络科技有限公司 联合创始人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>杨轶是上海木鸡网络科技有限公司的联合创始人，目前负责公司技术产品化和开发者技术合作方面的工作，是木鸡科技 WEBIR 技术的布道者。在联合创建木鸡科技之前，杨轶就职于 Intel 软件和服务集团，负责 x86 Android 游戏生态在中国区的技术普及工作，专注于 x86 编译器、游戏底层代码优化、引擎和图形渲染技术。在 Intel 之前，杨轶作为 BSP 高级工程师服务于 Freescale 网络多媒体事业部，专注于解决网络处理器性能优化问题。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>移动开发中都有哪些技术，如何将新技术在工作中实际使用？本专场包含现在的技术的新的方案和实践，以及未来技术的探索，希望通过一线工程师的技术实践分享，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2349" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《Hippy_前终端一体化框架的发展与未来探索》">《Hippy 前终端一体化框架的发展与未来探索》</h5><p> 罗梦砚 / 腾讯 iOS开发高级工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>iOS开发高级工程师，2014年加入腾讯，主要从事QQ浏览器iOS版开发工作。2017年11月开始从事Hippy sdk工作。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>移动开发中都有哪些技术，如何将新技术在工作中实际使用？本专场包含现在的技术的新的方案和实践，以及未来技术的探索，希望通过一线工程师的技术实践分享，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h4 id="小程序">小程序</h4><blockquote>
<p>小程序开发如火如荼，业界都有哪些实战经验？本专场将邀请来自一线的技术专家分享他们的实践和思考。</p>
</blockquote>
<h5 id="《腾讯在线教育小程序开发实践之路》">《腾讯在线教育小程序开发实践之路》</h5><p> 陈超 / 腾讯 高级Web前端工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>陈超，腾讯前端高级工程师，IMWeb团队成员，QCon明星讲师。负责腾讯课堂前端To B、小程序等业务的开发以及在线教育Web音视频的整体架构。对Web前端架构、直播技术等有深入的见解和丰富的实践经验。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>小程序开发如火如荼，业界都有哪些实战经验？本专场将邀请来自一线的技术专家分享他们的实践和思考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2363" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h5 id="《用_React_Hooks_重构你的小程序》">《用 React Hooks 重构你的小程序》</h5><p> 余澈 / 京东 高级前端工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>京东凹凸实验室前端工程师，主要负责基础设施建设和前端性能优化。热爱开源事业，先后作为主要开发者参与了 Vue.js 第一个大型 UI 库 vue-strap、高性能类 React 框架 Nerv、多端统一开发框架 Taro 的开发和维护。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>小程序开发如火如荼，业界都有哪些实战经验？本专场将邀请来自一线的技术专家分享他们的实践和思考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2417" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《苏宁易购小程序同构实践》">《苏宁易购小程序同构实践》</h5><p> 禹立彬 / 苏宁 消费者平台研发中心前端技术总监</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>禹立彬，十年Web前端开发经历，中国最早一批前端开发者，历任西祠胡同前端负责人、途牛旅游网前端架构师等职务。现任苏宁消费者平台研发中心前端技术总监，负责苏宁易购网站前端领域的技术管理工作。在基于Node.js的前后端分离，ReactNative/Weex开发有丰富的技术实践经历。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>小程序开发如火如荼，业界都有哪些实战经验？本专场将邀请来自一线的技术专家分享他们的实践和思考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2362" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="编程语言">编程语言</h4><blockquote>
<p>编程语言专场会关注 JavaScript、Dart、Swift等这些语言的特性和应用，这些是目前大前端领域在用或者趋势性的语言。</p>
</blockquote>
<h5 id="《在分歧中发展——2019，我们能用_Swift_做什么》">《在分歧中发展——2019，我们能用 Swift 做什么》</h5><p> 王巍（喵神） / LINE 高级软件工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>王巍，LINE高级软件工程师，现在是一名专注于 iOS 的职业开发者。他拥有对于 Swift、Objective-C 以及网络程序设计方面的深厚知识及多年实践经验。他将这些技术运用于创建应用程序和通用框架等解决方案，其中包括 Kingfisher 等框架很多都被用户喜爱，并被开发者社区广泛使用来构建其他软件。同时，他是 ObjC 中国组织的发起人和领导者，为将最佳 iOS 实践和进阶技术引入中国而不断努力。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>编程语言专场会关注 JavaScript、Dart、Swift等这些语言的特性和应用，这些是目前大前端领域在用或者趋势性的语言。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2358" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《WebAssembly_—_技术变革，未来已来》">《WebAssembly — 技术变革，未来已来》</h5><p> 于航 / 饿了么 资深前端工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>目前在 阿里巴巴/本地生活 做前端技术工作；FCC 上海社区负责人；2016 年开始研究 WebAssembly 技术，由于当时网络上信息较少，只能通过官方博客和网站发布的信息再结合自己的实践进行研究。2017 年加入 WebAssembly 中国社区，主要负责维护 WebAssembly 相关的实践资源和技术资讯分享。同年注册成为官方 CG 成员，定期参与 CG 组织的各种在线视频研讨会议，在跟进 WebAssembly 最新发展情况的同时也为 WebAssembly 的标准化提出自己的建议和意见。2018 年深入参与到 Emscripten 编译器工具链的项目研发中，同年出版名为《深入浅出 WebAssembly》的国内第一本 Wasm 技术书籍，为推动国内 Wasm 技术的发展和落地实践做出了微小的贡献。研究方向主要为前端技术、 Wasm、编译器以及 LLVM 等相关方向。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>编程语言专场会关注 JavaScript、Dart、Swift等这些语言的特性和应用，这些是目前大前端领域在用或者趋势性的语言。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2368" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《Event_Loop、Future与Isolate_-_单线程模型下的Dart异步编程模式》">《Event Loop、Future与Isolate - 单线程模型下的Dart异步编程模式》</h5><p> 陈航 / 美团点评 高级技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>陈航，专注于大前端开发领域9年。曾就职于雅虎北研和新浪微博，2015年加入美团，经历了外卖用户端和商家端发展的多个阶段，推动了外卖移动端架构演进、线上运维及终端技术栈融合等相关工作。现任美团外卖商家业务终端团队技术负责人，致力于提升终端团队研发效率与交付质量。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>编程语言专场会关注 JavaScript、Dart、Swift等这些语言的特性和应用，这些是目前大前端领域在用或者趋势性的语言。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2359" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="质量保证">质量保证</h4><blockquote>
<p>多变的用户场景、复杂的兼容性需求以及开发技术的迅速更迭都给质量保障和产品安全带来了重大挑战。本专场将重点关注前端测试和安全方向，我们将邀请知名互联网公司的技术专家分享他们独到的解决方案，希望通过本次专场分享给大家在质量保障方向带来更多的借鉴和思考。</p>
</blockquote>
<h5 id="《基于精准测试及AI技术的前端质量保证实践》">《基于精准测试及AI技术的前端质量保证实践》</h5><p> 刘道伟 / 百度 资深测试工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>百度搜索质量部资深测试工程师(T7)，2014年加入百度，成为搜索展现架构测试技术负责人，建设了搜索展现架构移动端质量保证体系。2018年开始作为搜索前端测试技术负责人，主要负责搜索前端的测试技术创新及质量保证工作，针对前端迭代快、回归量大、展现效果难以验证等难点，在测试前、中、后等不同阶段引入精准测试、图像技术、AI技术，实现单纯的UI-自动化向全环节的自动化转变，形成整个测试的闭环。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>多变的用户场景、复杂的兼容性需求以及开发技术的迅速更迭都给质量保障和产品安全带来了重大挑战。本专场将重点关注前端测试和安全方向，我们将邀请知名互联网公司的技术专家分享他们独到的解决方案，希望可以给大家在质量保障方向带来更多的借鉴和思考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2421" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《从代码保护出发详谈业务安全前端对抗》">《从代码保护出发详谈业务安全前端对抗》</h5><p> 刘忠正 / 腾讯 防水墙团队前端负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>毕业于华南师范大学，2017年加入腾讯安全平台部防水墙团队，现任腾讯防水墙团队前端负责人，负责腾讯防水墙产品的前端技术架构及产品研发。研究的方向包括前端数据保护、前端代码混淆、前端执行环境检测等。参与指导过腾讯视频、腾讯文档、微信小程序等项目的代码保护工作，为业务提供Web前端代码保护能力，如今腾讯防水墙每天为腾讯及生态内公司提供上亿次的业务安全安全防护。此前曾任职于阿里巴巴安全部，负责基础安全平台产品的研发工作。而后在51信用卡前端架构团队，负责51信用卡的前端规范制定和基础产品研发。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>多变的用户场景、复杂的兼容性需求以及开发技术的迅速更迭都给质量保障和产品安全带来了重大挑战。本专场将重点关注前端测试和安全方向，我们将邀请知名互联网公司的技术专家分享他们独到的解决方案，希望可以给大家在质量保障方向带来更多的借鉴和思考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2356" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h5 id="《搜狗精准化测试的设计与实践详解》">《搜狗精准化测试的设计与实践详解》</h5><p> 王鹏 / 搜狗 资深高级测试开发工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>王鹏，北京搜狗科技发展有限公司，资深高级测试开发工程师。2008年加入测试行业，2009-2013年在腾讯北京负责搜搜发薪、搜搜工具栏等项目的质量工作，2013年至今担任搜狗社区类项目测试负责人，主要工作内容包括测试工具平台的建设，前端测试体系的建立，精准化测试的探索与落地推广等工作。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>多变的用户场景、复杂的兼容性需求以及开发技术的迅速更迭都给质量保障和产品安全带来了重大挑战。本专场将重点关注前端测试和安全方向，我们将邀请知名互联网公司的技术专家分享他们独到的解决方案，希望可以给大家在质量保障方向带来更多的借鉴和思考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2357" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="深度培训">深度培训</h4><blockquote>
<p>想更深入地学习热点技术吗？GMTC特设为期2天（6月22-23日）的会后深度培训，邀请业内资深专家围绕Flutter、客户端和端内H5的性能问题优化、Android应用深度优化等热门技术，展开从入门到实践的落地分享。</p>
</blockquote>
<h5 id="《Flutter_技术进阶与实战》">《Flutter 技术进阶与实战》</h5><p> 李会超 / 美团点评 技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>李会超，美团点评技术专家。专注于大前端开发领域多年，曾就职于新浪微博，现任美团外卖商家业务iOS负责人，致力于提升研发效率与研发质量，为商家提供稳定可靠的生产力工具。在美团的四年时间，推进了商家业务移动端架构升级和基础设施建设，探索并大规模落地了多端复用的多重可行性方案，对React Native和Flutter拥有深刻的理解及丰富的项目实践经验，是美团点评最早落地Flutter线上大规模应用的实践者和推动者。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>想更深入地学习热点技术吗？GMTC特设为期2天（6月22-23日）的会后深度培训，邀请业内资深专家围绕Flutter、客户端和端内H5的性能问题优化、Android应用深度优化等热门技术，展开从入门到实践的落地分享。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<h5 id="《客户端性能优化、用跨端突破端内H5的性能瓶颈》">《客户端性能优化、用跨端突破端内H5的性能瓶颈》</h5><p> 马华 / 滴滴 司机端iOS团队负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>马华，从事移动端开发9年，前端、客户端、后端技术全栈，先后供职于人人、新浪、百度、滴滴，在iOS安全、iOS操作系统、动态化、跨端、技术架构、Web性能优化方面有深入研究和探索，目前在滴滴负责司机端iOS团队和跨端项目Thanos团队。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>想更深入地学习热点技术吗？GMTC特设为期2天（6月22-23日）的会后深度培训，邀请业内资深专家围绕Flutter、客户端和端内H5的性能问题优化、Android应用深度优化等热门技术，展开从入门到实践的落地分享。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<h5 id="《Android应用深度优化》">《Android应用深度优化》</h5><p> 何定旭 / 美团点评 Android技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>何定旭，美团点评Android技术专家，Android基础设施组负责人，Android热更新Robust作者</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>想更深入地学习热点技术吗？GMTC特设为期2天（6月22-23日）的会后深度培训，邀请业内资深专家围绕Flutter、客户端和端内H5的性能问题优化、Android应用深度优化等热门技术，展开从入门到实践的落地分享。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<h4 id="移动AI">移动AI</h4><blockquote>
<p>AI技术通过各种智能终端离我们的用户更近了，它除了满足用户各种各样的需求，如智能翻译、语音指令等，还能不断提高我们的研发质量，如UI自动化测试框架、图像/视频的智能识别等。在本专题下，我们将看到各个顶尖技术团队是如何结合终端+AI技术，带来更好的用户体验的。</p>
</blockquote>
<h5 id="《百度小游戏中AR的探索和实践》">《百度小游戏中AR的探索和实践》</h5><p> 沈毅 / 百度 资深研发工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2012年浙大毕业加入百度从事前端开发至今，目前担任百度资深研发工程师。主要研究Web图形方向（WebGL、Canvas、SVG）和数据可视化方向，游戏开发民科。是Apache ECharts的核心开发，参与过多次关于WebGL，ECharts和数据可视化的分享，现在主要负责百度的小程序小游戏项目。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>AI技术通过各种智能终端离我们的用户更近了，在本专题下，我们将看到各个顶尖技术团队是如何结合终端+AI技术，带来更好的用户体验的。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2364" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《WebNN_-_将硬件加速的深度学习带入开放式Web平台》">《WebNN - 将硬件加速的深度学习带入开放式Web平台》</h5><p> 张敏 / 英特尔亚太研发有限公司 软件技术经理</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2013-至今，目前担任英特尔亚太研发有限公司 Web Platform Engineering Team 软件技术经理，深度参与到 W3C Web Platform Test 的贡献，参与 Intel 的开源 Crosswalk Web Runtime 的完整生命周期，目前负责的团队参与到 Intel 的 Web Neural Network API, PWA 以及 WebGraphics 等项目。</p>
<p>2007-2013，担任Opera Software 软件经理及产品经理，负责 Opera 浏览器以及欧朋浏览器的软件质量及产品 (客户端运营和关键数据）团队，负责浏览器在 Android、iOS、PC 等所有平台的质量，以及在中国市场的网站兼容性。同时负责浏览器产品的新特性定义和原型，包括 Opera 欧朋 Lite 浏览器 4.x 以及 Opera 欧朋浏览器 7、8 的产品工作。<br></p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>AI技术通过各种智能终端离我们的用户更近了，在本专题下，我们将看到各个顶尖技术团队是如何结合终端+AI技术，带来更好的用户体验的。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2365" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《MNN_-_端侧推理引擎面临的挑战与应对》">《MNN - 端侧推理引擎面临的挑战与应对》</h5><p> 陈以鎏（离青） / 淘宝 无线开发专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2015年加入淘宝，从事无线开发至今，目前担任无线开发专家一职。是阿里巴巴开源的首款端侧推理引擎 MNN (Mobile Neural Network) 的核心开发。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>AI技术通过各种智能终端离我们的用户更近了，在本专题下，我们将看到各个顶尖技术团队是如何结合终端+AI技术，带来更好的用户体验的。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2367" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="架构演进">架构演进</h4><blockquote>
<p>本专场关注架构重构、移动中台等方向，将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
<h5 id="《如何使超大型⼯程矩阵高速运转及⾃下而上的技术演进揭秘》">《如何使超大型⼯程矩阵高速运转及⾃下而上的技术演进揭秘》</h5><p> 吴思振 / 字节跳动 资深工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>毕业于北京邮电大学，先后供职于百度、蘑菇街。2017年加入字节跳动，负责字节跳动无线研发平台，从零主导建设了字节跳动无线技术中台，向公司范围内所有业务线提供组件化通用技术支撑、CI/CD、分布式编译优化方案。现技术中台服务于公司各主要业务线，其自研的分布式编译方案为各业务线提供0成本的编译优化方案，以头条APP为例，以0成本接入方式，实现1500%的编译效率提升。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场关注架构重构、移动中台等方向，将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2405" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《基于_Serverless_的淘宝前端研发模式升级》">《基于 Serverless 的淘宝前端研发模式升级》</h5><p> 吴敏琦（七念） / 淘宝 高级技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>七念，2012年从 IBM 加入淘宝，曾负责淘宝前端数据产品和创新技术产品团队，后负责 Node.js 基础架构团队，并担任阿里巴巴前端委员会 Node.js 方向负责人。推动 Node.js 应用的稳定性治理，推动 Serverless 技术落地前端场景。同时也是 Node 地下铁线下沙龙创始人。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场关注架构重构、移动中台等方向，将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2411" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《滴滴乘客端Android架构演进解密》">《滴滴乘客端Android架构演进解密》</h5><p> 何斌斌 / 滴滴 高级技术专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>何斌斌，至今工作已有10年，一直专注于移动互联网领域研发，2014年加入滴滴，现任高级技术专家，负责滴滴乘客端Android版本、Android公共基础支撑等工作，多次主导并设计了滴滴乘客端架构的演进。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场关注架构重构、移动中台等方向，将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2341" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《腾讯课堂大前端架构演进历程解析》">《腾讯课堂大前端架构演进历程解析》</h5><p> 晏家红 / 腾讯 客户端高级工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>晏家红，腾讯客户端高级工程师，2016年加入腾讯，负责腾讯课堂iOS整体架构设计、跨平台方向以及音视频建设的工作，参与了从React Native、自研跨端框架Plato到基于Flutter的跨平台框架研发，同时从零主导建设了教育自研播放器ARMPlayer。对跨平台、音视频等有丰富的经验。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场关注架构重构、移动中台等方向，将邀请一线技术专家分享相关技术实践，给大家带来更多的思考和经验参考。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2413" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="前端团队管理和个人成长">前端团队管理和个人成长</h4><blockquote>
<p>作为新手管理者，如何平衡业务和管理？前端框架怎么选？如何做好Code Review？个人职业规划上，如何一步步升级打怪，不断晋升？本专场着眼团队管理和个人成长两个方面，将邀请一线技术专家分享其心路成长历程，听听他们的前端职业生涯故事，给大家一些参考和经验。</p>
</blockquote>
<h5 id="《技术驱动型团队的组织建设经验谈》">《技术驱动型团队的组织建设经验谈》</h5><p> 吴亮（月影） / 奇虎360 奇舞团技术总监</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>吴亮（月影），奇虎360奇舞团团长，360技术委员会委员，JavaScript程序员，可视化UI框架SpriteJS作者，知名前端技术专家，w3ctech顾问。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>作为新手管理者，如何平衡业务和管理？个人职业规划上，如何一步步升级打怪，不断晋升？本专场着眼团队管理和个人成长两个方面，将邀请一线技术专家分享其心路成长历程，听听他们的前端职业生涯故事，给大家一些参考和经验。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2414" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《打造通用型高效前端团队》">《打造通用型高效前端团队》</h5><p> 吴子房 / 网易 前端开发专家</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>网易前端开发专家，网易严选ToB前端开发负责人。2005年毕业于浙江大学，2010年加入网易，负责过网易邮箱、邮箱大师、网易严选等产品前端。全栈开发，开发过前端框架、Node应用框架，TypeScript坚定拥护者，目前业务中前后端全面基于TypeScript开发。热衷于新技术的研究与应用，擅长发现与解决前后端开发痛点。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>作为新手管理者，如何平衡业务和管理？个人职业规划上，如何一步步升级打怪，不断晋升？本专场着眼团队管理和个人成长两个方面，将邀请一线技术专家分享其心路成长历程，听听他们的前端职业生涯故事，给大家一些参考和经验。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2400" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《工作10年，我在前端专业成长路上的探索（一）》">《工作10年，我在前端专业成长路上的探索（一）》</h5><p> 张鑫旭 / 《CSS世界》作者 前端开发工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>张鑫旭，前端开发工程师，国内知名前端博客&ldquo;鑫空间-鑫生活&rdquo;博主。先后就职于腾讯社交用户体验设计（ISUX）、阅文集团体验设计部（YUX）。工作已有10年，一直专注于前端开发，在与交互体验关系密切的领域花了大量时间学习与研究，如HTML/CSS/SVG/Canvas等。热衷于知识分享，400＋高质量原创技术文章，翻译撰写众多文档，如Snap.svg、Stylus、Canvas API等，因此在行业有一定的影响力，同时是畅销前端书籍《CSS世界》作者。多年来一直在一线开发，在纯前端专业领域的发展上持续探索。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>作为新手管理者，如何平衡业务和管理？个人职业规划上，如何一步步升级打怪，不断晋升？本专场着眼团队管理和个人成长两个方面，将邀请一线技术专家分享其心路成长历程，听听他们的前端职业生涯故事，给大家一些参考和经验。</p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2418" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h5 id="《工作10年，我在前端专业成长路上的探索（二）》">《工作10年，我在前端专业成长路上的探索（二）》</h5><p> 张鑫旭 / 《CSS世界》作者 前端开发工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>张鑫旭，前端开发工程师，国内知名前端博客&ldquo;鑫空间-鑫生活&rdquo;博主。先后就职于腾讯社交用户体验设计（ISUX）、阅文集团体验设计部（YUX）。工作已有10年，一直专注于前端开发，在与交互体验关系密切的领域花了大量时间学习与研究，如HTML/CSS/SVG/Canvas等。热衷于知识分享，400＋高质量原创技术文章，翻译撰写众多文档，如Snap.svg、Stylus、Canvas API等，因此在行业有一定的影响力，同时是畅销前端书籍《CSS世界》作者。多年来一直在一线开发，在纯前端专业领域的发展上持续探索。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>作为新手管理者，如何平衡业务和管理？个人职业规划上，如何一步步升级打怪，不断晋升？本专场着眼团队管理和个人成长两个方面，将邀请一线技术专家分享其心路成长历程，听听他们的前端职业生涯故事，给大家一些参考和经验。</p>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<p>注：由于讲师所在企业限制，不对外公布</p>
<h4 id="多端提效与质量优化实践_（贝壳找房技术专场）">多端提效与质量优化实践  （贝壳找房技术专场）</h4><blockquote>
<p>在泛前端飞速发展的今天，端上承载业务越来越重，业务在质量、性能、稳定性等方面要求也越来越高。同时，为了响应业务的高速发展，技术的迭代速度和效率需要大大加快。</p>
<p>本专场将重点介绍贝壳找房在To B、To C业务的前端开发中，采取了哪些极限性能优化技术来提升业务体验，在Node服务稳定性方面有哪些实践经验；讲述在Native、Flutter、JS等多场景下的质量监控预警以及快速定位问题方法；同时分享贝壳找房在Flutter跨平台技术的架构设计、自动化集成、多业务解耦协作提效等方面的积累探索。</p>
</blockquote>
<h5 id="《极致前端性能优化探索》">《极致前端性能优化探索》</h5><p> 陈辰 / 贝壳找房 基础平台中心资深工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>陈辰，先后供职联想研究院、百度、阿里巴巴等公司。现任贝壳找房前端架构负责人，负责贝壳前端横向技术建设、标准规范指定、监控稳定性、效能提成等工作。开源项目灯塔负责人；慕课网认证前端性能讲师，著有多门前端性能优化课程；加州格林咨询公司特聘前端讲师；博才世杰咨询公司特聘前端讲师，贝壳前端知乎专栏《前端成长那些事儿》创始人。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场将介绍贝壳找房在前端性能优化、Node服务稳定性的实践经验，在Native、Flutter、JS等多场景下的质量监控预警，以及贝壳找房在Flutter跨平台提效实践等方面的积累探索。                    </p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2343" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《贝壳找房的Node服务稳定性建设实践》">《贝壳找房的Node服务稳定性建设实践》</h5><p> 徐辛承 / 贝壳找房 人店平台中心资深工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>贝壳找房资深工程师，现负责贝壳C端前端团队，2012年毕业于北航，曾就职于：人人网、百度、阿里，著有《Vue移动端实战技巧》一书。有丰富的用户体验优化、架构设计相关经验，近一年专注 Node 全栈方向。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场将介绍贝壳找房在前端性能优化、Node服务稳定性的实践经验，在Native、Flutter、JS等多场景下的质量监控预警，以及贝壳找房在Flutter跨平台提效实践等方面的积累探索。                    </p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2346" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《贝壳找房移动端监控体系建设实践》">《贝壳找房移动端监控体系建设实践》</h5><p> 孙旭东 / 贝壳找房 移动端架构负责人，B端APP开发负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>吉大计算机硕士毕业后，一直从事移动端开发，先后做过MTK、iOS、Android等平台，已经11年有余，2011年加入阿里巴巴担任技术专家，在阿里一干就是7年，积攒了大量的移动端架构和开发经验，2018年加入贝壳，担任移动端架构负责人，B端APP开发负责人。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场将介绍贝壳找房在前端性能优化、Node服务稳定性的实践经验，在Native、Flutter、JS等多场景下的质量监控预警，以及贝壳找房在Flutter跨平台提效实践等方面的积累探索。                    </p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2339" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《Flutter在贝壳的接入实践》">《Flutter在贝壳的接入实践》</h5><p> 张华峰 / 贝壳找房 移动端资深工程师</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2018年加入贝壳，入职主要负责贝壳 Android 插件化和持续集成相关工作，2019年在 Flutter发布正式版后开始调研将 Flutter 接入到当前的贝壳 APP 中，进行 Flutter 在贝壳的接入方案和平台化工作。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
<p>本专场将介绍贝壳找房在前端性能优化、Node服务稳定性的实践经验，在Native、Flutter、JS等多场景下的质量监控预警，以及贝壳找房在Flutter跨平台提效实践等方面的积累探索。                    </p>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2352" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h4 id="主题演讲">主题演讲</h4><blockquote>
</blockquote>
<h5 id="《大前端的下一站》">《大前端的下一站》</h5><p> 臧秀涛 / 极客邦科技 技术会议负责人</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>臧秀涛，极客邦科技技术会议负责人。曾作为 QCon 全球软件开发大会主编策划了多届大会。2010 年毕业于中国科学院计算技术研究所。曾先后在完美世界等公司从事软件开发工作。2014 年加入InfoQ。业余喜爱读书和翻译，曾翻译出版过《C++ API 设计》、《Groovy 程序设计》和《Java 性能权威指南》等技术图书。业余也维护了一个微信公众号&ldquo;开发资讯（dev-news）&rdquo;，欢迎关注。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2335" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《GMTC的正确参会姿势》">《GMTC的正确参会姿势》</h5><p> 孟夕 / 极客邦科技 会议主编</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>孟夕，极客邦科技的会议主编，主要负责公司垂直会议的内容策划和讲师邀请。2016 年加入 InfoQ，关注大前端、人工智能、云计算、运维、架构等多个技术领域，致力于为推动技术社区的发展贡献自己的力量。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
</blockquote>
</li>
<li><p>PPT链接：无</p>
</li>
</ul>
<h5 id="《前端路上的思考》">《前端路上的思考》</h5><p> 郑叶飞（圆心） / 阿里巴巴集团 前端委员会主席</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>2007年加入淘宝，曾参与天猫、快乐淘宝、聚划算等创业团队。现负责淘宝终端技术团队与淘宝基础链路团队，推进了淘宝前端工程化、无线化、全栈化、智能化的快速演进。现任阿里巴巴集团前端委员会主席，致力于推进阿里前端的健康发展与价值体现，坚信可用端技术为体验创造无限可能。作为D2前端技术论坛发起人之一，一直乐于推进国内前端技术的交流与发展。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2336" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《Flutter：最新进展和未来展望》">《Flutter：最新进展和未来展望》</h5><p> 董韬 / Google Flutter 团队 高级研究员</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>董韬，高级研究员，Google Flutter 团队。董韬博士在 Google 总部负责 Flutter 及相关开发工具和编程语言的使用者体验研究。在该岗位上，他致力于实施以用户为中心的迭代设计方法，深入研究开发者需求和使用习惯，帮助改善开发工具的UI设计，提高API和编程语言的可用性。除在 Google 的工作外，他还经常担任国际计算机学会（ACM）顶尖会议和期刊的论文审稿人。董韬拥有密歇根大学安娜堡分校的人机交互博士学位。他还拥有复旦大学信息系统学士学位。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2337" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h5 id="《前端开发编程语言的过去、现在和未来》">《前端开发编程语言的过去、现在和未来》</h5><p> 贺师俊（Hax） / 百姓网 技术顾问</p>
<ul>
<li><p>讲师简介：</p>
<blockquote>
<p>贺师俊（网名Hax），百姓网技术顾问，十多年来一直活跃在前端和JavaScript社区。对多项Web标准有微小贡献，对Groovy语言并间接对Swift语言有微小贡献，近年来参与了诸多ECMAScript新草案的讨论。曾设计和实现Jedi语言并用于生产环境，对自研编程语言略有一点实践经验。三次担任QCon出品人并获得「优秀出品人」荣誉，也经常在其他众多技术活动中担任讲师、嘉宾和主持人。</p>
</blockquote>
</li>
<li><p>演讲简介：</p>
<blockquote>
</blockquote>
</li>
<li><p>PPT链接：<a href="http://ppt.geekbang.org/slide/download?cid=42&amp;pid=2355" target="_blank" rel="external">下载</a></p>
</li>
</ul>
<h3 id="4、思考">4、思考</h3><p>正如上述，观看演讲和PPT时，至少要看懂题目，如果没有看懂，就提前准备相关知识，否则有一些技术或专场可能完全听不懂！渐渐的学习未知的世界~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://gmtc.infoq.cn/2019/beijing/schedule" target="_blank" rel="external">GMTC全球大前端技术大会（北京站）2019</a></li>
<li><a href="https://ppt.infoq.cn/list/gmtcbj2019" target="_blank" rel="external">GMTC北京2019PPT下载合集</a></li>
<li><a href="https://myslide.cn/events/24468" target="_blank" rel="external">GMTC 2019 全球前端技术大会 | MySlide - 专注PPT分享，追随SlideShare和SpeakerDeck的脚步</a></li>
<li><a href="https://www.zhihu.com/question/330261935" target="_blank" rel="external">参加 GMTC 2019 全球大前端技术大会你有什么收获？ - 知乎</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源<br><br></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>工作5年来，一直投身于 iOS 开发，而这5年来移动开发一直再追赶web前端和后端开发的技术栈和思想，近2年大家直接说：“大前端”，移动开发真正变成了“UI”前端的开发，而web前端借助 Node 开始转了后端开发？正是借着这些变化，我一直在思考，一直在疑问，直到看了一些 GMTC 课程，就像命悬一线的人一下子打通了任督二脉，练习武功不再于形式，需要提升认知的境界！这是一个神奇的世界，一个最好的时代！最“坏”的时代！</p>]]>
    
    </summary>
    
      <category term="GMTC" scheme="https://iHTCboy.com/tags/GMTC/"/>
    
      <category term="GMTC2019" scheme="https://iHTCboy.com/tags/GMTC2019/"/>
    
      <category term="前端全栈" scheme="https://iHTCboy.com/tags/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
      <category term="大前端" scheme="https://iHTCboy.com/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动开发" scheme="https://iHTCboy.com/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 Alfred Workflow 实现聊天内容快速引用回复]]></title>
    <link href="https://iHTCboy.com/2019/11/17/2019-11-17_%E4%B8%80%E4%B8%AAAlfred%E7%9A%84Workflow%E8%81%8A%E5%A4%A9%E5%86%85%E5%AE%B9%E5%BC%95%E7%94%A8%E6%B6%88%E6%81%AF/"/>
    <id>https://iHTCboy.com/2019/11/17/2019-11-17_一个Alfred的Workflow聊天内容引用消息/</id>
    <published>2019-11-17T12:22:01.000Z</published>
    <updated>2019-11-23T16:46:30.211Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>在微信 Mac/PC 端消息有个「引用消息」的功能，用于针对某个特定消息回复，而其它 App 没有该功能，或者有，比如 QQ / Telegram 都有实现回复（reply）功能，但是都是针对一条消息回复，如果需要对多条消息统一做回复，自带的功能也许真不够自定义的好。当然，最主要是我司现在用的 <code>企业QQ for macOS</code> 版本不支持这个功能，于是就想到自己做一个 workflow 可以读取当前复制的内容，然后生成一个带引用格式的文本，并完成后粘贴到 App，从而实现引用回复~</p>
<p>传送门下载：<a href="https://github.com/iHTCboy/macOSConfig/blob/master/Alfred/Reply%20Message%20v1.0.alfredworkflow" target="_blank" rel="external">Reply Message v1.0.alfredworkflow</a></p>
<a id="more"></a>
<h3 id="2、已实现的效果">2、已实现的效果</h3><p>目前已经实现了几个功能：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/11/Alfred-Reply-Message-alfredworkflow.png" alt="Alfred-Reply-Message-alfredworkflow.png"></p>
<ol>
<li><p><code>自动模板</code>：复制内容，打开 Alfred 输入 <code>R</code> 键后回车，就会自动粘贴到聊天软件中<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/11/Alfred-Copy-Template.png" alt="Alfred-Copy-Template.png"></p>
</li>
<li><p><code>回复内容</code>：复制内容，打开 Alfred 输入 <code>R</code> 键，空格后输入要回复的内容，完成后回车就会自动粘贴到聊天软件中<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/11/Alfred-Copy-Template-Reply.png" alt="Alfred-Copy-Template-Reply.png"></p>
</li>
<li><p><code>快捷符模板</code>：复制内容后，在聊天软件中输入 <code>\\rp</code>，会自动粘贴回复的模板到聊天框<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/11/Alfred-Shortcuts-Key.gif" alt="Alfred-Shortcuts-Key.gif"></p>
</li>
<li><p><code>自定义快捷键</code>：如果觉得还不够快？可以自定义一个自己喜欢的快捷键，快速生成回复模板<br>这个就不演示了，自己配置快捷键就可以啊</p>
</li>
</ol>
<p>注意说明：<br>1、以上说的快捷键，大家都可以自己定义，不是固定的啊。<br>2、快捷符模板需要开启 Alfred 监听键盘权限：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/11/Alfred-Automatically-expand-snippets.png" alt="Alfred-Automatically-expand-snippets.png"><br>3、本次使用到 Alfred 相关的功能试用版不支持，需要付费的正版才支持，或者使用xx版本。当然对于有条件的朋友建议购买正版，这也是一个提高效率的方式~</p>
<p>下载地址：<a href="https://github.com/iHTCboy/macOSConfig/blob/master/Alfred/Reply%20Message%20v1.0.alfredworkflow" target="_blank" rel="external">Reply Message v1.0.alfredworkflow</a></p>
<h3 id="3、背后的简单原理">3、背后的简单原理</h3><p>其实，原理非常的简单，就是二行代码的事：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clipboardtext=`pbpaste`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> -n <span class="string">"「 <span class="variable">$&#123;clipboardtext&#125;</span> 」\n- - - - - - - - - - - - - - -\n\n：&#123;query&#125;"</span></span><br></pre></td></tr></table></figure>
<p>就是用 shell 的 macOS 命令 <code>pbpaste</code> 获取剪切版的内容，然后拼接生成需要的格式，最后内容通过 <code>{query}</code> 传递给 Alfred。至于前期的快捷键、键盘监听，后续的推送通知、粘贴内容到输入框，全部是 Alfred 软件全自动封装好的完成，不需要我们用户关心！！！</p>
<p>上面的二行代码很短，但是有很多知识，大家明白了吗？</p>
<p>到这里，是不是感受到 Alfred 功能的强大啦！！！</p>
<p>备注：（<code>-e</code> 表示echo命令内容<code>\n</code>不转义， <code>-n</code>表示 echo 命令后不自动添加换行。）</p>
<h3 id="4、总结">4、总结</h3><p>上一年写的《程序员的macOS系列》文章，还有一篇《高效Alfred进阶》没有写！！！</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>所以，相信大家能感受到 Alfred 很强大，用的好，效率是成倍成倍的提高，希望我今年还有时间的话，补一下这个文章吧，当然，最好大家自行也可以搜索一些资料自己学习，制作自己需要的 workflow 提高效率是最棒的！知识的价值是无价，经验更加是无价（当然，我会尽量的全面简单而深入浅出，我认为文章能简单或深入的点到为止，这才是写文章的乐趣，让大多数人都能学习到~），Alfred版本也从3.x升到了4.x，同时最新的 macOS 10.15 也有很多调整，真不幸，现在写总结，生命有效时间也越来越短了，知识保质期短，文章还没有写已经过期了，太难了。好吧，这次先到这里，下回聊，加油~</p>
<h3 id="5、参考">5、参考</h3><ul>
<li><a href="http://louiszhai.github.io/2018/05/31/alfred/" target="_blank" rel="external">Alfred神器使用手册 | louis blog</a></li>
<li><a href="https://sspai.com/post/47710" target="_blank" rel="external">从 0 到 1 写一个 Alfred Workflow - 少数派</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源<br><br></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>在微信 Mac/PC 端消息有个「引用消息」的功能，用于针对某个特定消息回复，而其它 App 没有该功能，或者有，比如 QQ / Telegram 都有实现回复（reply）功能，但是都是针对一条消息回复，如果需要对多条消息统一做回复，自带的功能也许真不够自定义的好。当然，最主要是我司现在用的 <code>企业QQ for macOS</code> 版本不支持这个功能，于是就想到自己做一个 workflow 可以读取当前复制的内容，然后生成一个带引用格式的文本，并完成后粘贴到 App，从而实现引用回复~</p>
<p>传送门下载：<a href="https://github.com/iHTCboy/macOSConfig/blob/master/Alfred/Reply%20Message%20v1.0.alfredworkflow">Reply Message v1.0.alfredworkflow</a></p>]]>
    
    </summary>
    
      <category term="Alfred" scheme="https://iHTCboy.com/tags/Alfred/"/>
    
      <category term="Workflow" scheme="https://iHTCboy.com/tags/Workflow/"/>
    
      <category term="引用回复" scheme="https://iHTCboy.com/tags/%E5%BC%95%E7%94%A8%E5%9B%9E%E5%A4%8D/"/>
    
      <category term="引用消息" scheme="https://iHTCboy.com/tags/%E5%BC%95%E7%94%A8%E6%B6%88%E6%81%AF/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在旧的Mac上使用随航(Sidecar)]]></title>
    <link href="https://iHTCboy.com/2019/10/12/2019-10-12_%E5%9C%A8%E6%97%A7%E7%9A%84Mac%E4%B8%8A%E4%BD%BF%E7%94%A8%E9%9A%8F%E8%88%AASidecar/"/>
    <id>https://iHTCboy.com/2019/10/12/2019-10-12_在旧的Mac上使用随航Sidecar/</id>
    <published>2019-10-12T15:01:16.000Z</published>
    <updated>2019-10-20T07:35:10.360Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>6月 <code>WWDC2019</code> 上苹果发布新的 <code>macOS 10.15</code>，同时发布 <code>Sidecar</code>（随航）功能，可以把 <code>macOS</code> 界面转发到 <code>iPad</code> 上，但是对于旧的 Mac 电脑，不支持随航功能！我的 <code>MacBook Pro (Retina, 13-inch, Mid 2014)</code> 哭晕在厕所~</p>
<a id="more"></a>
<h3 id="2、Sidecar（随航）">2、Sidecar（随航）</h3><p>按苹果的介绍：</p>
<blockquote>
<p>Sidecar: Expand Mac Workspace and Creativity with iPad </p>
<p>The new Sidecar feature extends a user’s Mac workspace by using iPad as a second display, allowing them to spread out their work. With Sidecar, you can use an iPad display for tablet input to draw, sketch or write with Apple Pencil in any Apple or third-party Mac app that supports stylus input. Sidecar runs on a wired connection so users can charge their iPad as they work, or on a wireless connection for greater mobility, using everything from illustration apps and video editing apps to 3D apps, like Photoshop, Illustrator and ZBrush.</p>
</blockquote>
<p>翻译过来就是：</p>
<blockquote>
<p>Sidecar：扩展 Mac 的工作空间和用 iPad 创作</p>
<p>新的 Sidecar 功能通过使用 iPad 作为第二显示器，让他们把她们的工作延长了用户的 Mac 工作区。边三轮，您可以使用 iPad 显示屏的平板电脑输入画，素描或与苹果铅笔在任何苹果或支持手写笔输入的第三方 Mac 应用程序编写。三轮有线连接上运行，以便为他们工作的用户可以收取他们的 iPad 或对流动性较大的无线连接，使用一切从插图的应用程序和视频编辑应用到3D 应用程序，如 Photoshop，Illustrator 和 ZBrush的。</p>
</blockquote>
<h3 id="2、解决的方法">2、解决的方法</h3><h4 id="前述">前述</h4><p>在 macOS10.15 beta 版本时，旧版的Mac电脑，可以通过下面的命令开启 Sidecar：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.sidecar.display AllowAllDevices -bool true;&#10;defaults write com.apple.sidecar.display hasShownPref -bool true;&#10;open /System/Library/PreferencePanes/Sidecar.prefPane</span><br></pre></td></tr></table></figure>
<p>然而，在正式版 macOS 10.15 上面的命令已经失败，被列入黑名单了。执行命令后提示：<code>您无法打开“随航”偏好设置面板，因为该面板此时不可用。</code></p>
<p>其实，这个原因，还是回到问题本身，为什么苹果限制为旧的 Mac 上使用 Sidecar（随航）？</p>
<p>按照网上讨论的解释：</p>
<blockquote>
<p>Sidecar功能依赖于 <code>HEVC</code>，而 HEVC 一个高效率的视频编解码器。与 Intel 的<code>SKYLAKE</code> 架构 CPU 处理器开始，增加了内置支持的这种编解码器。</p>
</blockquote>
<h4 id="后述">后述</h4><p>当然，这样的情况下，还是有大神做了一个脚本，执行后，可以修改 SidecarCore 苹果私有框架（SidecarCore.framework）从黑名单中移除您的Mac机型。</p>
<p>具体脚本见：<a href="http://dev.zeppel.eu/luca/SidecarCorePatch" target="_blank" rel="external">luca/SidecarCorePatch: Enables Sidecar support on MacOS Catalina 10.15 Beta on non Apple supported devices. - Zeppel</a></p>
<blockquote>
<ol>
<li>Backup /System/Library/PrivateFrameworks/SidecarCore.framework/Versions/A/SidecarCore in case something goes wrong.</li>
<li>Disable SIP. Check status with $ csrutil status</li>
<li>clone this repo $ git clone <a href="http://dev.zeppel.eu/luca/SidecarCorePatch.git" target="_blank" rel="external">http://dev.zeppel.eu/luca/SidecarCorePatch.git</a></li>
<li>run the patch as root $ sudo swift patch.swift</li>
<li>reboot your mac</li>
</ol>
</blockquote>
<ol>
<li>备份 /System/Library/PrivateFrameworks/SidecarCore.framework/Versions/A/SidecarCore 以备无防.</li>
<li>关闭 SIP. 通过这个命令检查是否关闭： <code>$ csrutil status</code></li>
<li>克隆本仓库 <code>$ git clone http://dev.zeppel.eu/luca/SidecarCorePatch.git</code></li>
<li>使用管理员权限执行脚本：<code>$ sudo swift patch.swift</code></li>
<li>重启 mac</li>
</ol>
<p>注：关于 <a href="https://en.wikipedia.org/wiki/System_Integrity_Protection" target="_blank" rel="external">SIP</a>（System Integrity Protection, 系统完整性保护）这里就不多说，可以<a href="https://www.jianshu.com/p/fe78d2036192" target="_blank" rel="external">自行搜索</a>。要关闭 SIP，需要进入恢复系统模式的终端下执行 <code>csrutil disable</code>。</p>
<p>在这里就不多说了，因人而异。</p>
<p><strong>需要补充说明一下，虽然这个方法可以让旧的 Mac 实现 Sidecar（随航），但是会出现闪屏！！闪屏！！闪屏！！</strong></p>
<p>所以，如果只是想体验的，可以试试，否则，还是放弃吧…</p>
<h3 id="3、最佳的情况">3、最佳的情况</h3><p>按 <a href="https://www.apple.com/macos/catalina/docs/Sidecar_Tech_Brief_Oct_2019.pdf" target="_blank" rel="external">苹果的文档</a> Sidecar 对设备的要求：</p>
<h4 id="Macs">Macs</h4><p>MacBook introduced in 2016 or later<br>MacBook Air introduced in 2018 or later<br>MacBook Pro introduced in 2016 or later<br>Mac mini introduced in 2018 or later<br>iMac introduced in late 2015 or later<br>iMac Pro introduced in 2017 or later<br>Mac Pro introduced in 2019</p>
<h4 id="iPads">iPads</h4><p>12.9-inch iPad Pro<br>11-inch iPad Pro<br>10.5-inch iPad Pro<br>9.7-inch iPad Pro<br>iPad (6th generation or later)<br>iPad mini (5th generation)<br>iPad Air (3rd generation)</p>
<h4 id="环境要求">环境要求</h4><ol>
<li>必须登录同一个 Apple ID 的两台设备上（一台Mac，一台iPad）</li>
<li>Apple ID 开启了双重因素身份验证，必须在iPad和Mac上启用</li>
<li>必须是设备上开启蓝牙</li>
<li>如果以无线方式连接，确保两个设备连接到同一个WiFi网络</li>
<li>Mac 系统为 <code>macOS 10.15</code> 以上，iPad 系统为 <code>iPadOS 13</code> 以上</li>
</ol>
<h3 id="3、总结">3、总结</h3><p>按照苹果的技术水平，我们有理由充分相信苹果的技术是做了努力，所以苹果会让尽多的旧设备支持最新的体验。现在硬件的淘汰比技术的淘汰还要快，更不要说前端的技术更新很快，硬件的更新如果不快一点，大家就吐槽说没有创新！21世纪的前20年，感受了技术的爆发式增长，希望接下来的20年，依然让人心潮澎湃！</p>
<p>当然，如果真想在旧Mac上使用分屏多屏，还是有办法的，比如使用著名的第三方软件 <code>Duet</code>！但是我依然觉得太卡（可能是我设备太旧的….iPad mini 2）~ 它支持多系统平台，如果需要可以试试。</p>
<p>总的来说，又多了一个理由换 MBP! 对于程序员，写代码的环境，总是觉得屏幕不够大！如果是在空，我或许建议买一个显示器，如果是经常移动办公，或者喜欢去咖啡馆的朋友，可能有需要。而且，我相信，分屏的场景会越来越多，比如2个人用一个电脑，一个工作，一个显示肥皂剧~</p>
<p>结合最近看的<code>WWDC 2019</code>视频，多个session都表示，苹果希望打造一个OS生态，把iOS 应用带到 macOS，是一个伟大而现实的一步。苹果这几年来的创新，应该就是对生态系统的整合，从 <code>Handoff</code> 到收购 <code>workflow</code>，变成 <code>Shortcuts</code>, iOS 到 iPadOS，企图壮大<code>macOS</code>！当然，从家长监控软件，到<code>Duet</code>，大家都是觉得苹果<code>抄</code>他们的生活的绝路，也许绝路才是最好的前路！也许，这就是残酷的现实，像19世界汽车出现让多数马夫很愤怒，而现在的我们已经没有<code>感知</code>，我们所期待的苹果，总有替代更新，也许是这样的规律~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.apple.com/macos/catalina/docs/Sidecar_Tech_Brief_Oct_2019.pdf" target="_blank" rel="external">Sidecar_Tech_Brief_Oct_2019 - Apple</a></li>
<li><a href="https://www.reddit.com/r/apple/comments/bx3eet/sidecar_support_on_older_macs/" target="_blank" rel="external">Sidecar support on older Macs : apple</a></li>
<li><a href="https://appletoolbox.com/sidecar-not-working-in-ipados-and-macos-how-to-fix-sidecar-problems/" target="_blank" rel="external">Sidecar not working in iPadOS and macOS? How to fix Sidecar problems - AppleToolBox</a></li>
<li><a href="https://www.engadget.com/2019/10/08/apple-macos-sidecar-newer-macs/" target="_blank" rel="external">Apple’s Sidecar feature only works on newer Macs</a></li>
<li><a href="https://www.jianshu.com/p/fe78d2036192" target="_blank" rel="external">Mac开启关闭SIP（系统完整性保护） - 简书</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源<br><br></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>6月 <code>WWDC2019</code> 上苹果发布新的 <code>macOS 10.15</code>，同时发布 <code>Sidecar</code>（随航）功能，可以把 <code>macOS</code> 界面转发到 <code>iPad</code> 上，但是对于旧的 Mac 电脑，不支持随航功能！我的 <code>MacBook Pro (Retina, 13-inch, Mid 2014)</code> 哭晕在厕所~</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="https://iHTCboy.com/tags/Mac/"/>
    
      <category term="Sidecar" scheme="https://iHTCboy.com/tags/Sidecar/"/>
    
      <category term="macOS" scheme="https://iHTCboy.com/tags/macOS/"/>
    
      <category term="随航" scheme="https://iHTCboy.com/tags/%E9%9A%8F%E8%88%AA/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS包重签名技术知识]]></title>
    <link href="https://iHTCboy.com/2019/07/30/2019-07-30_iOS%E5%8C%85%E9%87%8D%E7%AD%BE%E5%90%8D%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86/"/>
    <id>https://iHTCboy.com/2019/07/30/2019-07-30_iOS包重签名技术知识/</id>
    <published>2019-07-30T13:22:16.000Z</published>
    <updated>2019-12-02T14:51:53.882Z</updated>
    <content type="html"><![CDATA[<h3 id="1、简介">1、简介</h3><p>利用Xcode的命令 <code>security</code> 和 <code>codesign</code> 重签ipa文件。重签名与Xcode里用build打包时进行的签名操作是一个原理，具体来说，先了解一下iOS相关的证书类型。</p>
<p><strong>证书类型：</strong></p>
<table>
<thead>
<tr>
<th>证书类型</th>
<th style="text-align:left">使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>开发(Development)证书和描述文件</td>
<td style="text-align:left">用于开发测试，在Xcode中打包后，可在真机环境调试、安装</td>
</tr>
<tr>
<td>发布(Distribution)证书和描述文件</td>
<td style="text-align:left">用于提交Appstore，在Xcode中打包后，可使用Xcode、Application Loader提交到Appstore审核发布</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><strong>证书作用：</strong></p>
<table>
<thead>
<tr>
<th>证书</th>
<th style="text-align:left">文件后缀</th>
<th style="text-align:left">文件类型</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Provisioning Profile</td>
<td style="text-align:left">.mobileprovision</td>
<td style="text-align:left">描述文件</td>
<td style="text-align:left">Provisioning Profiles文件（配置文件）， 作用是绑定设备UDID，所以在申请开发描述文件之前，先添加调试的设备。双击时打开Xcode安装在电脑上的描述文件，用命令行可以查看安装的描述文件，可以过滤掉过期的描述文件。</td>
</tr>
<tr>
<td>Signing Certificate</td>
<td style="text-align:left">.cer/.p12</td>
<td style="text-align:left">证书文件</td>
<td style="text-align:left">有开发和发布的证书，可以在钥匙串查看安装的可用的证书，过期时间等。p12是一个加密的文件，只要知道其密码，就可以供给所有的 Mac 设备使用，是这个应用的唯一标识证书和开发者，用于对应 bundleID 的应用开发和打包测试。</td>
</tr>
</tbody>
</table>
<p>注：</p>
<ul>
<li>描述文件保存在 macOS 路径：<code>~/Library/MobileDevice/Provisioning\ Profiles/</code></li>
<li>查看安装的证书使用命令：<code>security find-identity -p codesigning -v</code></li>
</ul>
<p>如果是团队开发，一般会生成p12证书提供给组员使用，这样更加好管理证书。</p>
<table>
<thead>
<tr>
<th>证书名字</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>adhocXXX.mobileprovision</td>
<td style="text-align:left">描述文件。用于生成 adhoc 包时，描述可以安装ipa包的设备UDID和证书关系。（包含推送、apple pay等权限声明内容）</td>
</tr>
<tr>
<td>devXXX.mobileprovision</td>
<td style="text-align:left">描述文件。用于生成 dev 包时，描述可以安装ipa包的设备UDID和证书关系。（包含推送、apple pay等权限声明内容）</td>
</tr>
<tr>
<td>devXXXPushXXX.p12</td>
<td style="text-align:left">推送证书。用于 dev 包推送时，认证和关联 应用bundleID 的证书关系。</td>
</tr>
<tr>
<td>devXXX.p12</td>
<td style="text-align:left">开发证书。用于打包App时，生成 dev 的 ipa 包需要的开发者信息。</td>
</tr>
<tr>
<td>disXXX.mobileprovision</td>
<td style="text-align:left">描述文件。用于生成 dis 包时，描述应用bundleID与证书的关系。（包含推送、apple pay等权限声明内容）</td>
</tr>
<tr>
<td>disXXXPushXXX.p12</td>
<td style="text-align:left">推送证书。用于 dis（或adhoc） 包推送时，认证和关联 应用bundleID 的证书关系。</td>
</tr>
<tr>
<td>disXXX.p12</td>
<td style="text-align:left">发布证书。用于打包App时，生成 dis (或adhoc) 的 ipa 包需要的开发者信息。</td>
</tr>
</tbody>
</table>
<p>注：</p>
<ul>
<li>如果需要添加新的设备UDID，其实只需要更新 .mobileprovision 描述文件就可以；</li>
<li>如果证书超过了有效期，.p12 和 .mobileprovision 文件需要重新生成，如果 revoke 生成新的证书，旧的证书和证书对应的ipa包不能再安装在设备上。</li>
</ul>
<p><strong>关于证书类型说明：</strong></p>
<table>
<thead>
<tr>
<th>用途</th>
<th style="text-align:left">dev</th>
<th style="text-align:left">adhoc</th>
<th style="text-align:left">dis</th>
<th style="text-align:left">企业证书</th>
</tr>
</thead>
<tbody>
<tr>
<td>能否用于送审</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">不能</td>
</tr>
<tr>
<td>不越狱且不添加到证书的设备能否安装</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">能</td>
</tr>
<tr>
<td>不越狱但添加到证书的设备能否安装</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">能</td>
</tr>
<tr>
<td>越狱设备能否安装</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
</tr>
<tr>
<td>能否用于沙盒储值测试</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
</tr>
<tr>
<td>越狱设备(模拟器)能否用于沙盒储值测试</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
</tr>
<tr>
<td>能否用于送审 TestFlight</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">不能</td>
</tr>
<tr>
<td>不越狱能否打开应用的“Documents、Library、tmp”目录</td>
<td style="text-align:left">能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
<td style="text-align:left">不能</td>
</tr>
<tr>
<td>越狱设备能否打开应用的“Documents、Library、tmp”目录</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
<td style="text-align:left">能</td>
</tr>
</tbody>
</table>
<p><strong>添加设备UDID到证书：</strong><br><a href="https://www.jianshu.com/p/c44d5c3424be" target="_blank" rel="external">iPhone手机轻松获取UDID的六种方式 - 简书</a></p>
<h3 id="2、重签名流程">2、重签名流程</h3><p><strong>1.添加p12证书</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import items into a keychain.</span></span><br><span class="line">$ security import inputfile [-k keychain] [-t <span class="built_in">type</span>] [<span class="operator">-f</span> format] [-w] [-P passphrase] [options...]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ security import /Users/htc/Desktop/distest.p12 -P <span class="string">'123456'</span></span><br></pre></td></tr></table></figure>
<p><strong>2.解压ipa包</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ unzip yourApp.ipa</span><br><span class="line">查找 .app目录，删除系统临时文件</span><br><span class="line">$ rm -rf ./Payload/yourAppName.app/.DS_Store</span><br></pre></td></tr></table></figure>
<p><strong>3.修改内容</strong><br>修改Payload/yourName.app中的icon图标、Info.plist文件的信息等，如有需要也可以更改比如版本号，应用名称等。</p>
<p><strong>4.删除之前的签名 <code>_CodeSignature</code></strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf ./Payload/yourAppName.app/_CodeSignature</span><br></pre></td></tr></table></figure>
<p><strong>5.用包里的描述文件生成<code>entitlements.plist</code>文件</strong></p>
<p>查看描述文件内容的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ security cms -D -i <span class="string">"xxx.mobileprovision"</span></span><br></pre></td></tr></table></figure></p>
<p>上面命令会输出内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">plist</span> <span class="attribute">version</span>=<span class="value">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>AppIDName<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">string</span>&gt;</span>iLeetCode<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>ApplicationIdentifierPrefix<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">string</span>&gt;</span>28PV6G96R7<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>CreationDate<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">date</span>&gt;</span>2019-10-01T12:57:15Z<span class="tag">&lt;/<span class="title">date</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>Platform<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>iOS<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>IsXcodeManaged<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">true</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>DeveloperCertificates<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">data</span>&gt;</span><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">array</span>&gt;</span>						</span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>Entitlements<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">key</span>&gt;</span>application-identifier<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>28PV6G96R7.com.iHTCboy.iLeetCoder<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">key</span>&gt;</span>keychain-access-groups<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">string</span>&gt;</span>28PV6G96R7.*<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">array</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">key</span>&gt;</span>get-task-allow<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">true</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">key</span>&gt;</span>com.apple.developer.team-identifier<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>28PV6G96R7<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">key</span>&gt;</span>aps-environment<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>development<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>ExpirationDate<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">date</span>&gt;</span>2020-09-30T12:57:15Z<span class="tag">&lt;/<span class="title">date</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>Name<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">string</span>&gt;</span>iOS Team Provisioning Profile: com.iHTCboy.iLeetCoder<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>ProvisionedDevices<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>c286167280be0083fd23e59aaa805e1f3fbdwsd0<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>TeamIdentifier<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>28PV6G96R7<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>TeamName<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">string</span>&gt;</span>he tiancong<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>TimeToLive<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">integer</span>&gt;</span>365<span class="tag">&lt;/<span class="title">integer</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>UUID<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">string</span>&gt;</span>9f1fb7b7-2549-4fc6-8893-344f4ddb3580<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>Version<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="title">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">plist</span>&gt;</span>%</span><br></pre></td></tr></table></figure>
<p>可以用命令 <code>&gt;</code> 保存成 plist 文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ security cms -D -i embedded.mobileprovision &gt; entitlement_full.plist</span><br></pre></td></tr></table></figure></p>
<p>如果只保留 <code>Entitlements</code> 属性内容，则可以使用<code>PlistBuddy</code>命令，我们重签只需要 Entitlements 属性：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/libexec/PlistBuddy -x -c \<span class="string">'Print:Entitlements\'</span> entitlement_full.plist &gt; entitlement.plist</span><br></pre></td></tr></table></figure></p>
<p>注：本步骤的 Entitlements 属性内容非常重要，不能多字段，或者字段设置true或false错误，都会导致异常情况，否则重签是有效，但导致ipa包安装失败~</p>
<p><strong>6.替换描述文件</strong><br>把新的描述文件复制替换到解压后的目录中，这个需要看自己需要，旧包的描述权限与新证书的权限，是需要那些，上一步骤中 <code>Entitlements</code> 就是在重签时还可以在指定。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ./embedded.mobileprovision ./Payload/yourAppName.app/embedded.mobileprovision</span><br></pre></td></tr></table></figure></p>
<p>如果需要查看系统中已经保存的描述文件：<code>~/Library/MobileDevice/Provisioning\ Profiles/</code></p>
<p><strong>7.给 MachO 文件添加执行权限</strong><br>解压ipa文件时，app里面的 MachO 文件可能没有执行权限，导致重签的包安装时提示失败。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x .<span class="regexp">/Payload/y</span>ourAppName.app<span class="regexp">/yourAppName</span></span><br></pre></td></tr></table></figure>
<p>注，如果Python脚本有对应的库可以查看 MachO，如果是 Shell 脚本，可以利用 Info.plist 文件中已经有 MachO 对应的文件名，可以通过下面命令读取：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MachO_BINARY=`plutil -convert xml1 -o - <span class="variable">$TARGET_APP_PATH</span>/Info.plist|grep -A1 Exec|tail -n1|cut <span class="operator">-f</span>2 <span class="operator">-d</span>\&gt;|cut <span class="operator">-f</span>1 <span class="operator">-d</span>\&lt;`</span><br></pre></td></tr></table></figure>
<p>当然，一般路径下app的名字与 MachO 一样 <code>Payload/yourAppName.app/yourAppName</code>。具体方式大家自行选择~</p>
<p><strong>8.获取证书内容</strong><br>这一步需要读取钥匙串中的开发者证书，可以用以下命令查看下有哪些证书：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ security find-identity -p codesigning -v</span><br></pre></td></tr></table></figure></p>
<p>上面命令输出：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) <span class="keyword">A</span><span class="number">80A1543C48</span>DBCB<span class="number">85F4F185B2</span>D<span class="number">38E7A25E5</span>A48E5 "iPhone Developer: ihtcboy@htc.com (8RRC787ZH2)"</span><br><span class="line">2) D<span class="number">7A8D149</span>DCCFB882BEDFA<span class="number">68913B50623</span>D38C8C49 "iPhone Distribution: Guangzhou HTC Internet Technology Co.,LTD"</span><br><span class="line">3) 900EC6AC<span class="number">6961B824</span>BBAED<span class="number">3303E036</span><span class="keyword">A</span><span class="number">2F5421935</span><span class="keyword">A</span> "iPhone Developer: iHTCboy (2HT78BY87T)"</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>注意，下面的重签命令，需要使用上面的 “iPhone Developer: ihtcboy@htc.com (8RRC787ZH2)” 参数</p>
<p><strong>9.重新签名</strong></p>
<p>先重签名framework和dylib（不重签的话，就删除无法签名的插件文件： <code>Framework</code>、<code>PlugIns</code> 文件夹、<code>Watch</code> 文件夹）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sign</span></span><br><span class="line">codesign <span class="operator">-s</span> identity [-fv*] [-o flags] [-r reqs] [-i ident] path ... </span><br><span class="line"></span><br><span class="line"><span class="comment"># verify</span></span><br><span class="line">codesign -v [-v*] [-R=&lt;req string&gt;|-R &lt;req file path&gt;] path|[+]pid ... </span><br><span class="line"></span><br><span class="line"><span class="comment"># display contents</span></span><br><span class="line">codesign <span class="operator">-d</span> [options] path ... </span><br><span class="line"></span><br><span class="line"><span class="comment"># display hosting paths</span></span><br><span class="line">codesign -h pid ...</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/codesign --force --sign <span class="string">"iPhone Distribution:xxxxx"</span> /Payload/XX.app/Frameworks/xxx.framework</span><br></pre></td></tr></table></figure>
<p>再签名.app：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/codesign <span class="operator">-f</span> <span class="operator">-s</span> <span class="string">"iPhone Distribution:xxxxx"</span>  --entitlements entitlements.plist ./Desktop/Payload/yourAppName.app</span><br></pre></td></tr></table></figure></p>
<p>注意：签名app需要添加参数 <code>--entitlements entitlements.plist</code></p>
<p>重签成功后提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Payload/yourAppName.app: replacing existing signature.</span><br></pre></td></tr></table></figure></p>
<p><strong>10.压缩Payload 生成最终 .ipa 文件</strong><br>用 <code>zip</code> 文件压缩生成最终的重签后的ipa文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip -ry ABC.ipa Payload</span><br></pre></td></tr></table></figure></p>
<p><strong>11.验证签名有效性（可选）</strong><br>macOS 10.11 后，<code>codesign</code> 命令增加了验证签名正确性，当然验证签名信息在真机上进行安装可安装就说明可以用。</p>
<p>验证签名正确性：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ codesign -v Payload/XX.app</span><br></pre></td></tr></table></figure></p>
<p>查看app的签名信息:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ codesign -vv -<span class="keyword">d</span> Payload/XX.<span class="keyword">app</span></span><br></pre></td></tr></table></figure></p>
<p><strong>12.删除安装的p12证书（可选）</strong><br>如果是公共设备环境，可能执行删除命令，删除步骤1中导入的证书。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ security <span class="operator"><span class="keyword">delete</span>-certificate -<span class="keyword">c</span> <span class="string">"iPhone Distribution: Guangzhou HTC Internet Technology Co.,LTD"</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong>13.其它可能使用到的命令（可选）</strong></p>
<p>检查一下是否安装了AppleWWDRCA.cer：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">security <span class="built_in">find</span>-certificate -<span class="built_in">c</span> <span class="string">"Apple Worldwide Developer Relations Certification Authority"</span></span><br></pre></td></tr></table></figure></p>
<p>查看 app 的 entitlements：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --entitlements :- -<span class="keyword">d</span> Payload/yourAppName.<span class="keyword">app</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3、总结">3、总结</h3><p>关于 iOS 重签名流程就这样简单和清晰的列出来了，但是有非常多的知识点可以深入，需要大家自行实践，还有很多坑点，这里只是简单提一下，深入的命令使用和证书知识、证书安全、命令的注意事项等，需要大家实践见真知！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/HanProjectCoder/ResignForiOS" target="_blank" rel="external">HanProjectCoder/ResignForiOS: ipa resign</a></li>
<li><a href="https://github.com/fastlane/fastlane/tree/master/sigh" target="_blank" rel="external">fastlane/sigh at master · fastlane/fastlane</a></li>
<li><a href="https://github.com/cjsliuj/Scalpel" target="_blank" rel="external">cjsliuj/Scalpel: A MacOS app with resign, dylib link injection/delete, ipa metadata edit.</a></li>
<li><a href="https://blog.csdn.net/jerryandliujie/article/details/84845162" target="_blank" rel="external">Scalpel的实现：一款集动态库注入与删除、IPA重签名、IPA元数据修改为一体的MacOS App</a></li>
<li><a href="https://gist.github.com/FredCox3/0617eba0818a3ba957b7" target="_blank" rel="external">cfgutil man page</a></li>
<li><a href="https://stackoverflow.com/questions/7485806/install-p12-or-cer-in-console-macos" target="_blank" rel="external">shell - install .p12 or .cer in console macos - Stack Overflow</a></li>
<li><a href="https://github.com/hongbaoshi/reSignature/blob/master/reSignature/TFSignature.py" target="_blank" rel="external">reSignature/TFSignature.py at master · hongbaoshi/reSignature</a></li>
<li><a href="https://www.jianshu.com/p/ce2893d99bd4" target="_blank" rel="external">iOS开发中的应用打包方式及重签名的一些总结 - 简书</a></li>
<li><a href="https://blog.0x5e.cn/2016/09/25/ios-codesign-things/" target="_blank" rel="external">iOS代码签名与重签名 · 0x5e的博客</a></li>
<li><a href="https://github.com/DanTheMan827/ios-app-signer" target="_blank" rel="external">DanTheMan827/ios-app-signer: This is an app for OS X that can (re)sign apps and bundle them into ipa files that are ready to be installed on an iOS device.</a></li>
<li><a href="http://dantheman827.github.io/ios-app-signer/" target="_blank" rel="external">iOS App Signer - Instructions</a></li>
<li><a href="https://www.jianshu.com/p/c44d5c3424be" target="_blank" rel="external">iPhone手机轻松获取UDID的六种方式 - 简书</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html" target="_blank" rel="external">About Code Signing</a></li>
<li><a href="https://stackoverflow.com/questions/39078983/re-signing-an-ipa-that-contains-a-framework" target="_blank" rel="external">ios - Re-signing an IPA that contains a Framework - Stack Overflow</a></li>
<li><a href="https://stackoverflow.com/questions/20205162/user-interaction-is-not-allowed-trying-to-sign-an-osx-app-using-codesign" target="_blank" rel="external">“User interaction is not allowed” trying to sign an OSX app using codesign</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源<br><br></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、简介">1、简介</h3><p>利用Xcode的命令 <code>security</code> 和 <code>codesign</code> 重签ipa文件。重签名与Xcode里用build打包时进行的签名操作是一个原理，具体来说，先了解一下iOS相关的证书类型。</p>
<p><strong>证书类型：</strong></p>
<table>
<thead>
<tr>
<th>证书类型</th>
<th style="text-align:left">使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>开发(Development)证书和描述文件</td>
<td style="text-align:left">用于开发测试，在Xcode中打包后，可在真机环境调试、安装</td>
</tr>
<tr>
<td>发布(Distribution)证书和描述文件</td>
<td style="text-align:left">用于提交Appstore，在Xcode中打包后，可使用Xcode、Application Loader提交到Appstore审核发布</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="codesign" scheme="https://iHTCboy.com/tags/codesign/"/>
    
      <category term="iOS" scheme="https://iHTCboy.com/tags/iOS/"/>
    
      <category term="证书" scheme="https://iHTCboy.com/tags/%E8%AF%81%E4%B9%A6/"/>
    
      <category term="重签名" scheme="https://iHTCboy.com/tags/%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Python库pyOpenSSL读取iOS的p12证书]]></title>
    <link href="https://iHTCboy.com/2019/06/28/2019-06-28_Python%E5%BA%93pyOpenSSL%E8%AF%BB%E5%8F%96p12%E8%AF%81%E4%B9%A6/"/>
    <id>https://iHTCboy.com/2019/06/28/2019-06-28_Python库pyOpenSSL读取p12证书/</id>
    <published>2019-06-28T15:19:16.000Z</published>
    <updated>2019-07-27T11:28:12.544Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>本文主要是讲解如何用python读取<code>p12</code>的信息。</p>
<p>如果有过iOS团队开发经验的朋友，一定对<code>p12</code>有所了解，因为苹果开发者网站制作的cer证书，只能用生成 <code>CSR</code>（Certificate Signing Request）文件 ———<code>CertificateSigningRequest.certSigningRequest</code> 的macOS系统安装，因为生成<code>CSR</code>时，私钥保存地本地电脑中，同时，普通个人开发账号最多可注册iOS Development/Distribution 证书各2个。所以，<code>p12</code> 就是解决在多个电脑之间共享证书的一种方式。本文不会详解iOS证书相关知识，想了解更多，可以查看本文末提供的参考文章。</p>
<a id="more"></a>
<h3 id="2、p12证书">2、p12证书</h3><p>在讲解之前，先给大家说说原理。 <code>p12</code> — KCS12 file holds the private key and certificate。 macOS系统查看时显示的p12名字为：个人信息交换（personal information exchange file）</p>
<p><code>p12</code> 存放了证书和私钥，使用的是DER编码。那什么是DER呢? 这里就要讲讲证书的知识：</p>
<h4 id="证书标准">证书标准</h4><p><code>X.509</code>：是一种证书标准，主要定义了证书中应该包含哪些内容。其详情可以参考<code>RFC5280</code>，<code>SSL</code> 使用的就是这种证书标准。</p>
<h4 id="编码格式">编码格式</h4><p>同样的<code>X.509</code>证书，可能有不同的编码格式，目前有以下两种编码格式：</p>
<ul>
<li><p><code>DER</code>：Distinguished Encoding Rules，打开看是二进制格式，不可读.</p>
</li>
<li><p><code>PEM</code>：Privacy Enhanced Mail，打开看文本格式，以”—–BEGIN…”开头，”—–END…”结尾,内容是BASE64编码。</p>
</li>
</ul>
<p>因为<code>p12</code>是<code>DER</code>编码，所以要查看<code>p12</code>的内容，当然最好从<code>DER</code>编码转换成<code>PEM</code>格式。那么因为这是一种证书标准的格式，就需要实现了这种标准的工具就能解析：</p>
<ul>
<li><code>OpenSSL</code>：是<code>SSL</code>的一个实现，SSL只是一种规范。理论上来说，SSL这种规范是安全的，目前的技术水平很难破解，但SSL的实现就可能有些漏洞，如著名的”心脏出血”。OpenSSL还提供了一大堆强大的工具软件，强大到90%我们都用不到。</li>
</ul>
<p>所以，使用 <code>OpenSSL</code> 就可以读取<code>p12</code>的信息，可以通过以下命令把<code>p12</code>转换为<code>pem</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -in XXX.p12  -out XXX.pem -nodes</span><br></pre></td></tr></table></figure>
<p>执行命令后，会要求输入<code>p12</code>文件的密码，如果密码错误：<code>Mac verify error: invalid password?</code> ，如果密码正确：<code>MAC verified OK</code>。</p>
<p>示例：</p>
<p>p12：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/06/20190628-HTC.p12.png" alt="20190628-HTC.p12.png"></p>
<p>pem：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/06/20190628-HTC.pem.png" alt="20190628-HTC.pem.png"></p>
<h3 id="pyOpenSSL_使用">pyOpenSSL 使用</h3><p><code>pyOpenSSL</code> 库简介：</p>
<blockquote>
<p>High-level wrapper around a subset of the OpenSSL library<br>pyOpenSSL now works with OpenSSL 1.1.1</p>
</blockquote>
<p>所以，python 解析 <code>p12</code> 可以使用 <code>pyOpenSSL</code> ，<code>pyOpenSSL</code> 是<code>OpenSSL</code>的封装，19.0.0 版本支持 OpenSSL 1.1.1。 这里就没有什么多说的，看代码就好，或者看看文档 <a href="https://pypi.org/project/pyOpenSSL/" target="_blank" rel="external">pyOpenSSL · PyPI</a>。</p>
<p>先安装 <code>pyOpenSSL</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyOpenSSL</span><br></pre></td></tr></table></figure>
<p><code>p12</code>文件读取，Python3 示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load OpenSSL.crypto</span></span><br><span class="line"><span class="keyword">from</span> OpenSSL <span class="keyword">import</span> crypto</span><br><span class="line"></span><br><span class="line"><span class="comment"># open it, using password. Supply/read your own from stdin.</span></span><br><span class="line">p12 = crypto.load_pkcs12(open(<span class="string">"/Users/HTC/Desktop/HTC.p12"</span>, <span class="string">'rb'</span>).read(), <span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line">cer = p12.get_certificate()     <span class="comment"># (signed) certificate object</span></span><br><span class="line">pkey = p12.get_privatekey()      <span class="comment"># private key.</span></span><br><span class="line">ca_cer = p12.get_ca_certificates() <span class="comment"># ca chain.</span></span><br><span class="line">print(cer, pkey, ca_cer)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'版本'</span>, cer.get_version())</span><br><span class="line">print(<span class="string">'签名算法'</span>, cer.get_signature_algorithm())</span><br><span class="line">print(<span class="string">'序列号：'</span>, cer.get_serial_number())</span><br><span class="line">print(<span class="string">'证书是否过期：'</span>, cer.has_expired())</span><br><span class="line">print(<span class="string">'在此之前无效：'</span>, cer.get_notBefore())</span><br><span class="line">print(<span class="string">'在此之后无效'</span>, cer.get_notAfter())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#主题名称</span></span><br><span class="line">subject = cer.get_subject()</span><br><span class="line">s_components = subject.get_components()</span><br><span class="line">print(s_components)</span><br><span class="line"></span><br><span class="line">key_dict = &#123;<span class="string">'UID'</span>: <span class="string">'用户 ID'</span>,</span><br><span class="line">			<span class="string">'CN'</span>: <span class="string">'常用名称'</span>,</span><br><span class="line">			<span class="string">'OU'</span>: <span class="string">'组织单位'</span>,</span><br><span class="line">			<span class="string">'O'</span>: <span class="string">'组织'</span>,</span><br><span class="line">			<span class="string">'C'</span>: <span class="string">'国家或地区'</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> s_components:</span><br><span class="line">	print(key, value)</span><br><span class="line">	print(key_dict.get(key.decode(), key))</span><br><span class="line"></span><br><span class="line"><span class="comment">#签发者名称</span></span><br><span class="line">suer = cer.get_issuer()</span><br><span class="line">print(suer.get_components())</span><br><span class="line"></span><br><span class="line"><span class="comment">#证书扩展信息</span></span><br><span class="line">print(<span class="string">'扩展数：'</span>, cer.get_extension_count())</span><br><span class="line">print(<span class="string">'扩展1：'</span>, cer.get_extension(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<h3 id="总结">总结</h3><p>现在 Xcode8 之后，已经可以通过登陆开发者账号，自动下载和管理证书，从而减少开发者配置证书遇到的各位问题，非常的方便。当然，如果是多人开发或跨域团队，或者不想让开发人员拿到最高权限，使用<code>p12</code>还是目前最好的方式！因为如果一个主账号下的子账号都可以操作证书，其实影响和安全性很难保证，所以，苹果也有一定道理，很难在Xcode的账号中，分权限管理吧。</p>
<p>关于证书，这里只是介绍的说说<code>p12</code>的简单知识，证书体系有非常多的标准和知识，还需要多学习多实战，等有时间在整理总结一下啊，大家一起加油啊！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/6345786/python-reading-a-pkcs12-certificate-with-pyopenssl-crypto/6346268#6346268" target="_blank" rel="external">cryptography - Python: reading a pkcs12 certificate with pyOpenSSL.crypto - Stack Overflow</a></li>
<li><a href="https://codeday.me/bug/20181207/432700.html" target="_blank" rel="external">Python：用pyOpenSSL.crypto读取pkcs12证书 - 代码日志</a></li>
<li><a href="https://blog.csdn.net/phj_88/article/details/53045748" target="_blank" rel="external">关于开发证书配置（Certificates &amp; Identifiers &amp; Provisioning Profiles）IOS发布 - 前端栈开发 - CSDN博客</a></li>
<li><a href="http://nuoerlz.is-programmer.com/posts/47670.html" target="_blank" rel="external">iOS开发者证书-详解/生成/使用 - Echo’s Blog -</a></li>
<li><a href="https://www.jianshu.com/p/7b84f95bdf6f" target="_blank" rel="external">Python查看ipa UDID和其他基本信息 - 简书</a></li>
<li><a href="https://www.cnblogs.com/guogangj/p/4118605.html" target="_blank" rel="external">那些证书相关的玩意儿(SSL,X.509,PEM,DER,CRT,CER,KEY,CSR,P12等) - guogangj - 博客园</a></li>
<li><a href="https://pypi.org/project/pyOpenSSL/" target="_blank" rel="external">pyOpenSSL · PyPI</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源<br><br></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>本文主要是讲解如何用python读取<code>p12</code>的信息。</p>
<p>如果有过iOS团队开发经验的朋友，一定对<code>p12</code>有所了解，因为苹果开发者网站制作的cer证书，只能用生成 <code>CSR</code>（Certificate Signing Request）文件 ———<code>CertificateSigningRequest.certSigningRequest</code> 的macOS系统安装，因为生成<code>CSR</code>时，私钥保存地本地电脑中，同时，普通个人开发账号最多可注册iOS Development/Distribution 证书各2个。所以，<code>p12</code> 就是解决在多个电脑之间共享证书的一种方式。本文不会详解iOS证书相关知识，想了解更多，可以查看本文末提供的参考文章。</p>]]>
    
    </summary>
    
      <category term="Python" scheme="https://iHTCboy.com/tags/Python/"/>
    
      <category term="iOS" scheme="https://iHTCboy.com/tags/iOS/"/>
    
      <category term="p12" scheme="https://iHTCboy.com/tags/p12/"/>
    
      <category term="pyOpenSSL" scheme="https://iHTCboy.com/tags/pyOpenSSL/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[说说 iOS 非 AppStore 安装App的方法]]></title>
    <link href="https://iHTCboy.com/2019/05/07/2019-05-07_%E8%AF%B4%E8%AF%B4iOS%E9%9D%9EAppStore%E5%AE%89%E8%A3%85App%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://iHTCboy.com/2019/05/07/2019-05-07_说说iOS非AppStore安装App的方法/</id>
    <published>2019-05-07T14:49:16.000Z</published>
    <updated>2019-06-30T02:39:54.768Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>关于 iOS 安装 App 的方法，相信熟悉 iOS 的朋友都知道，如果是越狱设备，随便搞。但是，现实中，大部分用户都是小白，不会自己去越狱，安全是一方面。所以，普通情况下，AppStore 一家独大，企业账号可以玩一玩的情况，这也是苹果优秀的地方！ 今天就是想说说，关于新出的玩法~</p>
<a id="more"></a>
<h3 id="2、账号证书类型">2、账号证书类型</h3><table>
<thead>
<tr>
<th>账号类型</th>
<th>价格</th>
<th>发布到AppStore？</th>
<th>支持安装设置数量</th>
<th>申请条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>个人账号</td>
<td>$99</td>
<td>可以</td>
<td>100</td>
<td>无限制</td>
</tr>
<tr>
<td>公司账号</td>
<td>$99</td>
<td>可以</td>
<td>100</td>
<td>DUNS编码</td>
</tr>
<tr>
<td>企业账号</td>
<td>$299</td>
<td>不可以</td>
<td>无限制</td>
<td>DUNS编码</td>
</tr>
<tr>
<td>教育账号</td>
<td>$0</td>
<td>可以</td>
<td>100</td>
<td>教育机构</td>
</tr>
</tbody>
</table>
<p>通过这个表，就知道普通情况下，如果让用户安装App，只能是企业账号可行，而企业账号苹果当初只是想让那些只流通在企业内部使用的App使用，现在发展成了，非AppStore渠道的安装方式！ 灰产和各大第三方渠道xx装机xx助手。当然，这个不是今天的主题，以后有机会在慢慢说~</p>
<h3 id="3、新安装方式">3、新安装方式</h3><p>通过上面的表格，除了企业账号，其它类型的账号，也是可以安装App到设备上，缺点有2个：</p>
<ul>
<li>要先添加 UDID 到证书</li>
<li>一年只能添加一百台设备且删除不恢复</li>
</ul>
<p>基于这2点，正常情况下，没有人会想到用这样的方法提供安装App，但现在的情况不一样，苹果今天的审核已经很严格，基本过不了审核，另一方面企业账号，被苹果封杀和难申请，已经15万元都买不到！</p>
<p>现在，这终于成为新的安装方式！那就要解决上面说到的 2 个缺点， UDID 获取，如果让普通用户自己获取，然后提交在，在添加证书，在，，，， 这个流程太长！！ 所以，还是有解决方案！ 而，100台设备限制无解，只能多准备n个开发者账号啊！！</p>
<p>原理：</p>
<blockquote>
<p>通过网页，用户接受授权就拿到iOS设备的<code>UDID</code> ,然后把你的<code>UDID</code>添加到他们的证书里面，用这个新证书重新签名原来的IPA包，此时，你的<code>UDID</code>在IPA包的证书里面，这样，你的iOS设备就能下载这个IPA包啊</p>
</blockquote>
<h3 id="4、UDID_获取">4、UDID 获取</h3><p><code>UDID</code> (Unique Device Identifier)，唯一标示符,是iOS设备的一个唯一识别码，每台iOS设备都有一个独一无二的编码，UDID其实也是在设备量产的时候,生成随机的UUID写入到iOS设备硬件或者某一块存储器中,所以变成了固定的完全不会改变的一个标识，用来区别每一个唯一的iOS设备，包括 iPhones, iPads, 以及 iPod touches。</p>
<h4 id="MDM">MDM</h4><p>iOS支持企业级的MDM（Mobile Device Managment），也就是所谓的移动设备管理，目的就是让企业能够方便的管理 iPhone、iPad等移动设备。具体的做法是通过在系统中安装配置文件（Profiles）的方式实现各种功能，设备管理，设备安全，获取设备信息，设备配置，备份和恢复等几类功能，可以根据不同应用场景实现很多具体小功能。</p>
<h4 id="通过_Safari_浏览器获取iOS设备UDID步骤">通过 Safari 浏览器获取iOS设备UDID步骤</h4><p>苹果公司允许开发者通过iOS设备和Web服务器之间的某个操作（其实就是MDM的获取设备信息功能），来获得IOS设备的UDID(包括其他的一些参数)。以下为简要概述：<br>1、在你的Web服务器上创建一个.mobileconfig的XML格式的描述文件；<br>2、用户在所有操作之前必须通过某个点击操作完成.mobileconfig描述文件的安装；<br>3、服务器需要的数据，比如：UDID，需要在.mobileconfig描述文件中配置好，以及服务器接收数据的URL地址；<br>4、当用户设备完成数据的手机后，返回提示给客户端用户；</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/05/20190507-Device-registration-process-ota_developer_flow_chart.jpg" alt="20190507-Device-registration-process-ota_developer_flow_chart.jpg"></p>
<p>具体流程可参考文章：</p>
<p><a href="http://www.skyfox.org/safari-ios-device-udid.html" target="_blank" rel="external">通过Safari浏览器获取iOS设备UDID(设备唯一标识符)-天狐博客</a></p>
<p>具体后台开发代码可参考：</p>
<p><a href="https://github.com/shaojiankui/iOS-UDID-Safari" target="_blank" rel="external">shaojiankui/iOS-UDID-Safari: iOS-UDID-Safari,（不能上架Appstore！！！）通过Safari获取iOS设备真实UDID，use safari and mobileconfig get ios device real udid</a></p>
<h4 id="添加_UDID_到证书">添加 UDID 到证书</h4><ul>
<li><a href="https://github.com/fastlane/fastlane/tree/master/spaceship" target="_blank" rel="external">fastlane/spaceship at master · fastlane/fastlane</a></li>
</ul>
<p>TODO</p>
<h4 id="IPA_包重签名">IPA 包重签名</h4><ul>
<li><a href="https://github.com/fastlane/fastlane/tree/master/sigh" target="_blank" rel="external">fastlane/sigh at master · fastlane/fastlane</a></li>
</ul>
<p>TODO</p>
<h4 id="从_Safari_安装_IPA_包">从 Safari 安装 IPA 包</h4><ul>
<li><a href="https://github.com/atelierdumobile/appdeploy" target="_blank" rel="external">atelierdumobile/appdeploy: 🚀 AppDeploy is the fastest way to get info on your mobile app &amp; deploy it OTA without specific server configuration</a></li>
</ul>
<p>TODO</p>
<h3 id="总结">总结</h3><p>其实，这个作为一个<code>创新</code>的安装 App 的方式，不掉包！ 已经是企业证书无法比的，而且，不需要用户到设置里点击<code>验证</code>证书！ 完全在 Safari 里完成整个安装流程，确实是举足轻重的一步，未来将怎么样发展？期待吧！</p>
<ul>
<li>2019.05.26 更新<br>因为之前比较忙部分文章内容没有给出方案，博主想打算继续写完时，发现已经有同志完成了，<a href="https://juejin.im/post/5cdeb72151882525cc707729?utm_source=gold_browser_extension" target="_blank" rel="external">超级签名-原理/机制/技术细节-完全解析 - 掘金</a>，所以，本文就不在重复给出方案啦（当然，可以自己根据实现需要定制自己的签名流，以后有机会做这一块在给大家分享吧），大家有什么不明白的，讨论区一起交流~</li>
</ul>
<h3 id="参考">参考</h3><ul>
<li><a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/ConfigurationProfileExamples/ConfigurationProfileExamples.html" target="_blank" rel="external">Configuration Profile Examples</a></li>
<li><a href="https://github.com/shaojiankui/iOS-UDID-Safari" target="_blank" rel="external">shaojiankui/iOS-UDID-Safari: iOS-UDID-Safari,（不能上架Appstore！！！）通过Safari获取iOS设备真实UDID，use safari and mobileconfig get ios device real udid</a></li>
<li><a href="https://blog.csdn.net/FengHongSeXiaoXiang/article/details/82825046" target="_blank" rel="external">通过Safari浏览器获取iOS设备UDID(设备唯一标识符) - FengHongSeXiaoXiang的博客 - CSDN博客</a></li>
<li><a href="http://www.skyfox.org/safari-ios-device-udid.html" target="_blank" rel="external">通过Safari浏览器获取iOS设备UDID(设备唯一标识符)-天狐博客</a></li>
<li><a href="https://juejin.im/post/5cdeb72151882525cc707729?utm_source=gold_browser_extension" target="_blank" rel="external">超级签名-原理/机制/技术细节-完全解析 - 掘金</a></li>
<li><a href="https://github.com/fastlane/fastlane/tree/master/spaceship" target="_blank" rel="external">fastlane/spaceship at master · fastlane/fastlane</a></li>
<li><a href="https://github.com/fastlane/fastlane/tree/master/sigh" target="_blank" rel="external">fastlane/sigh at master · fastlane/fastlane</a></li>
<li><a href="https://github.com/atelierdumobile/appdeploy" target="_blank" rel="external">atelierdumobile/appdeploy: 🚀 AppDeploy is the fastest way to get info on your mobile app &amp; deploy it OTA without specific server configuration</a></li>
<li><a href="https://www.pgyer.com/udid" target="_blank" rel="external">蒲公英 | 一步快速获取 iOS 设备的UDID</a></li>
<li><a href="https://www.pgyer.com/app/superSignature" target="_blank" rel="external">蒲公英 - 超级签名</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源<br><br></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>关于 iOS 安装 App 的方法，相信熟悉 iOS 的朋友都知道，如果是越狱设备，随便搞。但是，现实中，大部分用户都是小白，不会自己去越狱，安全是一方面。所以，普通情况下，AppStore 一家独大，企业账号可以玩一玩的情况，这也是苹果优秀的地方！ 今天就是想说说，关于新出的玩法~</p>]]>
    
    </summary>
    
      <category term="AppStore" scheme="https://iHTCboy.com/tags/AppStore/"/>
    
      <category term="IPA" scheme="https://iHTCboy.com/tags/IPA/"/>
    
      <category term="iOS" scheme="https://iHTCboy.com/tags/iOS/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[macOS 使用 Sparkle 检查软件自更新]]></title>
    <link href="https://iHTCboy.com/2019/05/04/2019-05-04_macOS%E4%BD%BF%E7%94%A8Sparkle%E8%BF%9B%E8%A1%8C%E8%BD%AF%E4%BB%B6%E8%87%AA%E6%9B%B4%E6%96%B0/"/>
    <id>https://iHTCboy.com/2019/05/04/2019-05-04_macOS使用Sparkle进行软件自更新/</id>
    <published>2019-05-04T06:49:16.000Z</published>
    <updated>2019-05-29T13:38:41.949Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>其实，本篇文章应该是上一年就打算写的，结果呢，最近才有时间整理。开发 macOS 软件也有一段时间，对于软件更新，之前是自己手动编写增加 API 接口来提示是否有新版本，但一直觉得不智能，界面也不友好，而且下载的是压缩包，需要解压后自动手动替换 App，甚是痛苦。所以，看了很多开源项目，看到了一个 macOS 专用的更新库 <code>Sparkle</code>, 然而现有网上的教程，已经非常陈旧，花了点时间才悟，所以，写一个总结吧。另外，也有其它的更新库，大家需要可以自行了解，以主流库为主，维护更好，这也是项目选型考虑的条件之一，也许是强者更强，好像<code>劣币驱逐良币现象</code>在开源界没有发生过吧~</p>
<a id="more"></a>
<h3 id="2、Sparkle">2、Sparkle</h3><blockquote>
<p>Sparkle的原理是根据提前配置好的xml文件地址，每次启动后解析xml，看看有没有比当前版本新的数据，有的话提示更新。<br>xml文件可以存在任何可以访问xml元数据的服务器，包括 GitHub 仓库。</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190414-Sparkle.png" alt="20190414-Sparkle.png"></p>
<p>2.1 使用 Cocopods 在项目中集成：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> <span class="string">'Sparkle'</span></span><br></pre></td></tr></table></figure>
<p>也可以通过下载源代码进行集成（<a href="https://github.com/sparkle-project/Sparkle）。" target="_blank" rel="external">https://github.com/sparkle-project/Sparkle）。</a></p>
<p>2.2 配置 storyboard 更新 action</p>
<ol>
<li>打开 Main.storyboard（如果是很旧的项目则为 MainMenu.xib）</li>
<li>选择 View -&gt; Libraries -&gt; Show Library （快捷键为 <code>shift + command + L</code>）</li>
<li>在搜索栏中搜索 Object 并将 Object 拖入左侧跟 <code>App Delegate</code> 同级层</li>
<li>选中刚添加的 Object 对象</li>
<li>选择 View -&gt; Inspectors -&gt; Show Identity Inspector（快捷键为 <code>option + command + 3</code>）</li>
<li>修改 Custom Class 为 <code>SUUpdater</code></li>
<li>如果需要，可以添加一个检查更新的菜单项，设置它的 target 为刚才的 <code>SUUpdater</code> 实例，action 为 <code>checkForUpdates:</code></li>
</ol>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190414-AddObjectToMenu.png" alt="20190414-AddObjectToMenu.png"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190414-SUUpdaterObject.png" alt="20190414-SUUpdaterObject.png"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190414-AddActionToUpdaterObject.png" alt="20190414-AddActionToUpdaterObject.png"></p>
<p>2.3 数字签名</p>
<p><code>Sparkle</code> 能够下载软件并进行替换，所以为了保证安全，确保全程是软件作者行为，给出了3点建议：</p>
<blockquote>
<p>由于 Sparkle 正在将可执行代码下载到用户的系统, 因此您必须非常小心安全性。为了让 Sparkle 知道下载的更新没有损坏（修改）, 并且来自您 (而不是恶意攻击者), 我们建议:</p>
<p>1、通过 HTTPS 提供更新。<br>   除非你遵守 Apple 的应用传输安全要求, 否则你的应用不会在 macos 10.11 或更高版本上 HTTP 请求将被系统拒绝。<br>2、通过 Apple 的开发人员 ID 程序对应用程序进行签名。<br>3、使用 Sparkle 的 EdDSA (ed25519) 签名对已发布的更新存档进行签名。</p>
</blockquote>
<p>所以，建议使用 <code>Sparkle</code> 的签名认证机制，保证更新的合法性。 需要注意的是，<code>Sparkle</code>v1.21 之后使用全新的 EdDSA (ed25519) 签名，而之前的旧版本使用 使用DAS SHA-1 数字签名，则是另一种配置方式。</p>
<h4 id="Sparklev1-21_以上配置："><code>Sparkle</code>v1.21 以上配置：</h4><p>首先，双击运行 <code>Sparkle/bin/generate_keys</code> 命令工具，会自动打开终端应用，显示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ /Users/HTC/Downloads/Sparkle-<span class="number">1.21</span>.<span class="number">3</span>/bin/generate_keys ; <span class="built_in">exit</span>;</span><br><span class="line">This tool uses macOS Keychain to store the Sparkle private key.</span><br><span class="line">If the Keychain prompts you <span class="keyword">for</span> permission, please allow it.</span><br><span class="line">OK! Read the existing key saved <span class="keyword">in</span> the Keychain.</span><br><span class="line"></span><br><span class="line">In your app<span class="string">'s Info.plist set SUPublicEDKey to:</span><br><span class="line">c6KSLEMfs7YqD5M0FZ8McEUi1x9gGdbXSem2T+lCgjA=</span></span><br></pre></td></tr></table></figure>
<p><strong>配置 SUPublicEDKey</strong></p>
<p>注意，这个步骤只要运行一次，然后记录下运行的结果，在 <code>Info.plist</code> 增加一个key-value 键值对，<code>SUPublicEDKey</code> 对应的公钥(base64 编码的字符串)。</p>
<p>注：这个步骤做了两件事:<br>1、生成一个私钥, 并将其保存在登录钥匙串中。您不需要对其执行任何操作, 但不要失去对 Mac 钥匙串的访问权限。如果您丢失了它, 您可能无法发出任何新的更新!<br>2、打印您的公钥到终端应用程序上显示。</p>
<p><strong>配置 SUFeedURL</strong></p>
<p>在 <code>Info.plist</code> 添加 <code>SUFeedURL</code> 属性字段，其值设置为将应用更新的 URL, 例如<a href="https://xxx.com/appcast.xml" target="_blank" rel="external">https://xxx.com/appcast.xml</a></p>
<p>appcast.xml 内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">rss</span> <span class="attribute">version</span>=<span class="value">"2.0"</span> <span class="attribute">xmlns:sparkle</span>=<span class="value">"http://www.andymatuschak.org/xml-namespaces/sparkle"</span> <span class="attribute">xmlns:dc</span>=<span class="value">"http://purl.org/dc/elements/1.1/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">channel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>应用名称<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">description</span>&gt;</span>Most recent changes with links to updates.<span class="tag">&lt;/<span class="title">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">language</span>&gt;</span>en<span class="tag">&lt;/<span class="title">language</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">title</span>&gt;</span>Version 1.4.14<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">sparkle:releaseNotesLink</span>&gt;</span></span><br><span class="line">                http://xxx.com/release-note.html</span><br><span class="line">            <span class="tag">&lt;/<span class="title">sparkle:releaseNotesLink</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">pubDate</span>&gt;</span>Wed, 10 Apr 2019 19:58:11 +0000<span class="tag">&lt;/<span class="title">pubDate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">enclosure</span></span><br><span class="line">                <span class="attribute">url</span>=<span class="value">"https://xxx.com/app.zip"</span></span><br><span class="line">                <span class="attribute">sparkle:shortVersionString</span>=<span class="value">"1.4.14"</span></span><br><span class="line">                <span class="attribute">sparkle:version</span>=<span class="value">"2019.05.04"</span></span><br><span class="line">                <span class="attribute">length</span>=<span class="value">"6605799"</span></span><br><span class="line">                <span class="attribute">type</span>=<span class="value">"application/octet-stream"</span></span><br><span class="line">                <span class="attribute">sparkle:edSignature</span>=<span class="value">"MEYCIQCQaUqxcrhhEABlWxk+1At5QSwty+Li8d6Sr3q6jJF1JgIhAOWGpIkYLwXC</span><br><span class="line">                RFfaA8uz34Dy7CXCczpmSyCOQ5+rfOFL"</span></span><br><span class="line">            /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">sparkle:minimumSystemVersion</span>&gt;</span>10.11<span class="tag">&lt;/<span class="title">sparkle:minimumSystemVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">rss</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>releaseNotesLink</code>: 更新日志的说明网页，最好是html<br><code>url</code>: zip压缩包下载地扯<br><code>length</code>: zip压缩文件大小（字节）<br><code>edSignature</code>: ed签名</p>
<p><strong>生成签名</strong><br>可以使用<code>generate_appcast</code>工具进行应用强制转换时, 将自动生成签名。也可以手动生成签名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sparkle/bin/sign_update path_to_your_update.zip</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ /Users/HTC/Downloads/Sparkle-<span class="number">1.21</span>.<span class="number">3</span>/bin/sign_update /Users/HTC/Downloads/Sparkle-<span class="number">1.21</span>.<span class="number">3</span>.zip</span><br><span class="line">sparkle:edSignature=<span class="string">"j4Mq6yLPlTb1/lGxGiW6BRsYoWBvPkIKc+ACstG87FJJBtjm5StuC07eT2EU4mRVAB0c9Y7ib36lQI8Zft3rCQ=="</span> length=<span class="string">"17748993"</span></span><br></pre></td></tr></table></figure>
<p>生成的 <code>edSignature</code> 和 <code>length</code> 填写到上面的 <code>appcast.xml</code></p>
<p>这样就可以啦，其中 <code>appcast.xml</code> 是需要能通过网络访问，不然无法更新。当然，如果是企业内部使用，部署到内网的服务器就可以。</p>
<p>还有很多配置，只下载不更新、多语言本地化、增量更新等，这里就不说了，大家如果有特殊需要，可以自己看文档配置啊 <a href="https://sparkle-project.org/documentation/publishing/#publishing-an-update" target="_blank" rel="external">Publishing an update - Sparkle: open source software update framework for macOS</a></p>
<h4 id="Sparklev1-21_之前旧版本的配置："><code>Sparkle</code>v1.21 之前旧版本的配置：</h4><p>如果是 1.21 之前的  <code>DSA</code> 签名的SDK，现在更新的SDK，已经放到了bin目录的的下目录 <code>old_dsa_scripts</code></p>
<p><strong>生成数字签名</strong><br>使用 <code>generate_dsa_keys_macos_10.12_only</code> 命令生成 dsa_priv.pem（私钥）和dsa_pub.pem（公钥）两个文件。其中私钥千万不能丢，否则将无法签署升级包。</p>
<p>然后，把dsa_pub.pam添加到项目中。</p>
<p><strong>配置公钥</strong><br>在 <code>Info.plist</code> 添加 <code>SUPublicDSAKeyFile</code> 属性字段，其值设置为 <code>dsa_pub.pem</code>  公钥的文件名。</p>
<p><strong>配置更新信息</strong><br>在 <code>Info.plist</code> 添加 <code>SUFeedURL</code> 属性字段，其值设置为将应用更新的 URL, 例如<code>https://xxx.com/appcast.xml</code>，下文有xml文件内容说明，与上面 EdDSA 有一些区别。</p>
<p><strong>更新版本签名</strong><br>把新版本生成的程序打包成zip。因为这个是升级包，因此我们要对升级包进行数字签名。方法很简单：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sparkle/bin/old_dsa_scripts/sign_update path_to_your_update.zip ~/.ssh/dsa_priv.pem</span><br></pre></td></tr></table></figure>
<p>记录下返回的字符串，这就是升级包的签名。使用填下到 <code>appcast.xml</code> 中。</p>
<p>appcast.xml 内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">rss</span> <span class="attribute">version</span>=<span class="value">"2.0"</span> <span class="attribute">xmlns:sparkle</span>=<span class="value">"http://www.andymatuschak.org/xml-namespaces/sparkle"</span> <span class="attribute">xmlns:dc</span>=<span class="value">"http://purl.org/dc/elements/1.1/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">channel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>应用名称<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">description</span>&gt;</span>Most recent changes with links to updates.<span class="tag">&lt;/<span class="title">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">language</span>&gt;</span>en<span class="tag">&lt;/<span class="title">language</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">title</span>&gt;</span>Version 1.4.14<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">sparkle:releaseNotesLink</span>&gt;</span></span><br><span class="line">                http://xxx.com/release-note.html</span><br><span class="line">            <span class="tag">&lt;/<span class="title">sparkle:releaseNotesLink</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">pubDate</span>&gt;</span>Wed, 10 Apr 2019 19:58:11 +0000<span class="tag">&lt;/<span class="title">pubDate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">enclosure</span></span><br><span class="line">                <span class="attribute">url</span>=<span class="value">"https://xxx.com/app.zip"</span></span><br><span class="line">                <span class="attribute">sparkle:shortVersionString</span>=<span class="value">"1.4.14"</span></span><br><span class="line">                <span class="attribute">sparkle:version</span>=<span class="value">"2019.05.04"</span></span><br><span class="line">                <span class="attribute">length</span>=<span class="value">"6605799"</span></span><br><span class="line">                <span class="attribute">type</span>=<span class="value">"application/octet-stream"</span></span><br><span class="line">                <span class="attribute">sparkle:dsaSignature</span>=<span class="value">"MEYCIQCQaUqxcrhhEABlWxk+1At5QSwty+Li8d6Sr3q6jJF1JgIhAOWGpIkYLwXC</span><br><span class="line">                RFfaA8uz34Dy7CXCczpmSyCOQ5+rfOFL"</span></span><br><span class="line">            /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">sparkle:minimumSystemVersion</span>&gt;</span>10.11<span class="tag">&lt;/<span class="title">sparkle:minimumSystemVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">rss</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>releaseNotesLink</code>: 更新日志的说明网页，最好是html<br><code>url</code>: zip压缩包下载地扯<br><code>length</code>: zip压缩文件大小（字节）<br><code>dsaSignature</code>: 升级包的数据签名</p>
<h3 id="一些问题&amp;坑点">一些问题&amp;坑点</h3><h4 id="web服务器">web服务器</h4><p>上面说明的 <code>http://xxx.comappcast.xml</code> 更新信息文件，还是 <code>http://xxx.com/release-note.html</code> 更新说明页面，还是应用的zip文件下载链接，都是需要通过服务器进行访问。</p>
<p>这里比较简单的方法，就是上传到 <code>GitHub</code> 上，就以访问到文件或链接。</p>
<p>如果是本地调试，也可以利用 macOS 自带的 <code>python</code> 创建一个本地的文件服务器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br><span class="line">或者 </span><br><span class="line">python -m http.server</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ python -m SimpleHTTPServer</span><br><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">8000</span> ...</span><br></pre></td></tr></table></figure>
<p>然后就可以通过 <code>http://0.0.0.0:8000</code> 就能访问电脑的所有文档和文件目录。</p>
<h4 id="HTTPS">HTTPS</h4><p>macOS 10.11 起苹果默认开启 App Transport Security ，也就是应用只能访问 HTTPS 的链接，HTTP 的默认不能访问。</p>
<p>建议当然是使用https，如果没有能力部署，也可以在应用的 <code>Info.plist</code> 配置允许访问http:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="版本号">版本号</h4><p>注意，版本号是 <code>shortVersionString</code>；不是 <code>version</code> 字段。但是这2个字段都配置了的话，2个都需要大于旧应用的对应版本号，否则，<code>Sparkle</code> 认为没有新版本。</p>
<h4 id="AppStore版本">AppStore版本</h4><p>如果是上架 AppStore，则不能使用 <code>Sparkle</code> ，因为苹果审核禁止检查更新和自动更新，需要更新，要求用户使用 AppStore。</p>
<h4 id="编译报错">编译报错</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>SparkleDemo-macOS<span class="regexp">/Pods/</span>Target Support Files<span class="regexp">/Pods-macOSDemo/</span>Pods-macOSDemo-frameworks.<span class="string">sh:</span> line <span class="number">104</span>: <span class="string">EXPANDED_CODE_SIGN_IDENTITY:</span> unbound variable</span><br><span class="line">Command PhaseScriptExecution failed with a nonzero exit code</span><br></pre></td></tr></table></figure>
<p>在Xcode菜单栏选择 <code>File</code> -&gt; <code>Workspace Setting</code> 就会弹出一个界面，看出 Xcode10 是默认选中的最新的 <code>New Build System(Default)</code>，在这个编译系统的环境下，编译脚本一直会报错。把 build system 切换到 <code>Legacy Build System</code>，使用旧的编译系统就正常运行。怀疑是新的编译系统，流程有变动，这个问题，后续在深研吧。</p>
<h3 id="总结">总结</h3><p>其实，官方文档已经给出了很好的教程。这里为什么还写教程的原因:</p>
<p>其一是，官方的文档比较旧，针对 Xcode10，一些操作已经发生了比较大的变化，对于新入门的苹果开发者，可以比较懵。</p>
<p>其二，对于英文或者想快速的入门使用的同学，提供一个最简洁的教程，节省大家的时间，对大家都好的事件，应该做！</p>
<p>其三，对于刚刚入门 macOS 软件开发的同学，可能还不知道有这样优秀的第三方更新软件库，所以，心若所诚，力行心从！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/sparkle-project/Sparkle" target="_blank" rel="external">sparkle-project/Sparkle: A software update framework for macOS</a></li>
<li><a href="https://github.com/macmade/GitHubUpdates" target="_blank" rel="external">macmade/GitHubUpdates: Cocoa framework to install application updates from GitHub releases.</a></li>
<li><a href="http://www.cocoachina.com/mac/20100920/2111.html" target="_blank" rel="external">为你的Cocoa应用程序加入更新支持：Sparkle 简介 - CocoaChina</a></li>
<li><a href="http://cocoa.venj.me/blog/auto-update-apps-with-sparkle/" target="_blank" rel="external">用Sparkle为Cocoa程序增加自动升级 - Cocoa学习</a></li>
<li><a href="https://sparkle-project.org/documentation/" target="_blank" rel="external">Documentation - Sparkle: open source software update framework for macOS</a></li>
<li><a href="https://sparkle-project.org/documentation/publishing/#publishing-an-update" target="_blank" rel="external">Publishing an update - Sparkle: open source software update framework for macOS</a></li>
<li><a href="https://sparkle-project.org/documentation/upgrading/" target="_blank" rel="external">Upgrading from previous versions of Sparkle - Sparkle: open source software update framework for macOS</a></li>
<li><a href="https://blog.csdn.net/CSDNxck/article/details/80006835" target="_blank" rel="external">两款Mac软件自动升级开源开发框架 - CSDNxck的博客 - CSDN博客</a></li>
<li><a href="https://meniny.cn/posts/sparkle_1_setup/" target="_blank" rel="external">Sparkle 1: Setup | Elias’s Cave</a></li>
<li><a href="http://blog.martianz.cn/article/2012-05-26-use-sparkle-to-set-up-check-update-system" target="_blank" rel="external">MartianZ! - 使用Sparkle为OS X App添加自动更新功能</a></li>
<li><a href="https://blog.csdn.net/weixin_34174322/article/details/88485224" target="_blank" rel="external">使用 最新版本Sparkle 进行自更新 - weixin_34174322的博客 - CSDN博客</a></li>
<li><a href="https://lapcatsoftware.com/articles/app-translocation.html" target="_blank" rel="external">App Translocation</a></li>
<li><a href="https://github.com/potionfactory/LetsMove/" target="_blank" rel="external">potionfactory/LetsMove: A sample that shows how to move a running Mac application to the /Applications directory</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>其实，本篇文章应该是上一年就打算写的，结果呢，最近才有时间整理。开发 macOS 软件也有一段时间，对于软件更新，之前是自己手动编写增加 API 接口来提示是否有新版本，但一直觉得不智能，界面也不友好，而且下载的是压缩包，需要解压后自动手动替换 App，甚是痛苦。所以，看了很多开源项目，看到了一个 macOS 专用的更新库 <code>Sparkle</code>, 然而现有网上的教程，已经非常陈旧，花了点时间才悟，所以，写一个总结吧。另外，也有其它的更新库，大家需要可以自行了解，以主流库为主，维护更好，这也是项目选型考虑的条件之一，也许是强者更强，好像<code>劣币驱逐良币现象</code>在开源界没有发生过吧~</p>]]>
    
    </summary>
    
      <category term="GitHubUpdates" scheme="https://iHTCboy.com/tags/GitHubUpdates/"/>
    
      <category term="Sparkle" scheme="https://iHTCboy.com/tags/Sparkle/"/>
    
      <category term="macOS" scheme="https://iHTCboy.com/tags/macOS/"/>
    
      <category term="软件检查更新" scheme="https://iHTCboy.com/tags/%E8%BD%AF%E4%BB%B6%E6%A3%80%E6%9F%A5%E6%9B%B4%E6%96%B0/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GMTC2019 ——— 移动 Web 上玩转原生游戏]]></title>
    <link href="https://iHTCboy.com/2019/04/20/2019-12-03_GMTC2019_%E7%A7%BB%E5%8A%A8Web%E4%B8%8A%E7%8E%A9%E8%BD%AC%E5%8E%9F%E7%94%9F%E6%B8%B8%E6%88%8F/"/>
    <id>https://iHTCboy.com/2019/04/20/2019-12-03_GMTC2019_移动Web上玩转原生游戏/</id>
    <published>2019-04-20T07:49:16.000Z</published>
    <updated>2019-12-28T13:51:34.318Z</updated>
    <content type="html"><![CDATA[<h3 id="1、xxxx">1、xxxx</h3><p>xxxxx</p>
<a id="more"></a>
<h3 id="2、xxxx">2、xxxx</h3><h3 id="参考">参考</h3><p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源<br><br></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、xxxx">1、xxxx</h3><p>xxxxx</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="https://iHTCboy.com/tags/Mac/"/>
    
      <category term="iMessage" scheme="https://iHTCboy.com/tags/iMessage/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[django 定时任务 django-crontab 的使用]]></title>
    <link href="https://iHTCboy.com/2019/04/14/2019-04-14_django%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1django-crontab%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://iHTCboy.com/2019/04/14/2019-04-14_django定时任务django-crontab的使用/</id>
    <published>2019-04-14T11:19:16.000Z</published>
    <updated>2019-05-06T14:15:54.228Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>在做 django 开发需求时，多多少少都会遇到需要定时任务的功能，比如定时执行任务，检查订单之类的。可能是一段时间，比如每隔 10分钟执行一次，也可能是定点时间，比如 14:00 执行，也可能是长时间，比如每周几，每个月的哪一天等。查看了一下相关资料， django 定时任务 <code>django-crontab</code> 库比较多教程和资料，虽然 star 数才五百，但是 API 接口比较简单，接入也很方便，功能也很全面，当然，也存在一此无法解决的问题，使用时需要注意的。</p>
<a id="more"></a>
<h3 id="2、使用教程">2、使用教程</h3><p>1.安装:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-crontab</span><br></pre></td></tr></table></figure>
<p>2.添加配置到 settings.py <code>INSTALLED_APPS</code> 中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    <span class="string">'django_crontab'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>3.编写定时函数:</p>
<blockquote>
<p>定时任务可以分成两种，一种是执行自定义的 <code>mange.py</code> 的命令，另一种是执行自定义函数。</p>
</blockquote>
<p>在django的app中新建一个myapp/cron.py文件，把需要定时执行的代码放进去</p>
<p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_scheduled_job</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>4.在 settings.py 中增加<code>CRONJOBS</code>配置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CRONJOBS = [</span><br><span class="line">    (<span class="string">'*/5 * * * *'</span>, <span class="string">'myapp.cron.my_scheduled_job'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>也可以定义一些关键字参数，有2种格式：</p>
<p>格式1：</p>
<ul>
<li>要求：cron计时通常格式（有关更多示例，请参阅 <a href="http://en.wikipedia.org/wiki/Cron#Format" target="_blank" rel="external">Wikipedia</a> 和 <a href="https://crontab.guru/examples.html" target="_blank" rel="external">crontab.guru</a>）</li>
<li>要求：python模块路径下待执行定时任务</li>
<li>可选：特定于定时任务的后缀（例如，将 <code>out/err</code> 重定向到文件，默认值为’’）</li>
</ul>
<p>示例：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CRONJOBS = [</span><br><span class="line">    ('<span class="keyword">*</span>/1 <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span>', 'appname.test_crontab.test','&gt;&gt;/home/python/test_crontab.log')</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>注意： <code>&gt;&gt;</code> 表示追加写入，<code>&gt;</code> 表示覆盖写入。</p>
<p>格式2：</p>
<ul>
<li>要求：cron计时通常格式</li>
<li>要求：python模块路径下待执行定时任务</li>
<li>可选：方法的位置参数列表（默认值：[]）</li>
<li>可选：方法的关键字参数的dict（默认值：{}）</li>
<li>可选：特定于定时任务的后缀（例如，将 <code>out/err</code> 重定向到文件，默认值为’’）</li>
</ul>
<p>示例：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">CRONJOBS</span> = [</span><br><span class="line">    (<span class="string">'*/5 * * * *'</span>, <span class="string">'myapp.cron.other_scheduled_job'</span>, [<span class="string">'arg1'</span>, <span class="string">'arg2'</span>], &#123;<span class="string">'verbose'</span>: <span class="number">0</span>&#125;),</span><br><span class="line">    (<span class="string">'0   4 * * *'</span>, <span class="string">'django.core.management.call_command'</span>, [<span class="string">'clearsessions'</span>]),</span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>对于熟悉 Linux 中定时任务<code>crontab</code> 的同学可能对上面第一个参数的语法很亲切。上面表示每隔1分钟执行一次代码。</p>
<p>Linux 中的定时任务<code>crontab</code>的语法如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*  *  *  *  * command&#10;&#20998;&#38047;(0-59) &#23567;&#26102;(0-23) &#27599;&#20010;&#26376;&#30340;&#21738;&#19968;&#22825;(1-31) &#26376;&#20221;(1-12) &#21608;&#20960;(0-6) shell&#33050;&#26412;&#25110;&#32773;&#21629;&#20196;</span><br></pre></td></tr></table></figure>
<p>有几个特殊的符号：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 代表所有的取值范围的数字</span><br><span class="line">/ 代表每的意思，*/<span class="number">5</span>就是每<span class="number">5</span>个单位</span><br><span class="line">- 代表从某个数字到某个数字</span><br><span class="line">, 分开几个离散的数字</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#27599;&#20004;&#20010;&#23567;&#26102;    0 */2 * * *&#10;&#26202;&#19978;11&#28857;&#21040;&#26089;&#19978;8&#28857;&#20043;&#38388;&#27599;&#20004;&#20010;&#23567;&#26102;&#65292;&#26089;&#19978;8&#28857;    0 23-7,8 * * *&#10;&#27599;&#20010;&#26376;&#30340;4&#21495;&#21644;&#27599;&#20010;&#31036;&#25308;&#30340;&#31036;&#25308;&#19968;&#21040;&#31036;&#25308;&#19977;&#30340;&#26089;&#19978;11&#28857;    0 11 4 * 1-3&#10;1&#26376;1&#26085;&#26089;&#19978;4&#28857;    0 4 1 1 *</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 6 * * * commands &#62;&#62; /tmp/test.log # &#27599;&#22825;&#26089;&#19978;6&#28857;&#25191;&#34892;, &#24182;&#23558;&#20449;&#24687;&#36861;&#21152;&#21040;test.log&#20013;&#10;0 */2 * * * commands # &#27599;&#38548;2&#23567;&#26102;&#25191;&#34892;&#19968;&#27425;</span><br></pre></td></tr></table></figure>
<p>有兴趣的小伙伴可以深入研究下 Linux 的<code>crontab</code>定时任务。如果不了解和不熟悉可以想看： <a href="https://www.jianshu.com/p/c6a729c81a24" target="_blank" rel="external">cron语法格式学习</a></p>
<p>5.添加并启动定时任务</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加并启动定时任务</span></span><br><span class="line">python manage.py crontab add</span><br></pre></td></tr></table></figure>
<p>其它命令：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示当前的定时任务</span></span><br><span class="line">python manage.py crontab show</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有定时任务</span></span><br><span class="line">python manage.py crontab remove</span><br></pre></td></tr></table></figure>
<h3 id="一些问题">一些问题</h3><p>如果配置成这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;CRONJOBS = [&#10;(&#39;0 7 * * 1-5&#39;, &#39;api.cron.email_to_late_docs&#39;, &#39;&#62;&#62; &#123;&#125;&#39;.format(BASE_DIR + &#39;/logs/log_&#123;:%d_%m_%Y&#125;.log&#39;.format(time.now()))),&#10;(&#39;0 7 * * 1-5&#39;, &#39;api.cron.email_ten_days_before&#39;, &#39;&#62;&#62; &#123;&#125;&#39;.format(BASE_DIR + &#39;logs/log_&#123;:%d_%m_%Y&#125;.log&#39;.format(time.now())))&#10;]</span><br></pre></td></tr></table></figure>
<p>上述代码的目的是，希望对任务的输出和错误日志，进行 <code>log_ddmmYY</code> 格式进行文件每天分开保存。</p>
<p><strong>但是这个任务，在第二天时，就不会在执行啦！！</strong></p>
<p>因为，<code>CRONJOBS</code> 生成任务时，会生成对应的哈希值（hashes），标识每个任务。所以，当文件名变更时，<code>CRONJOBS</code> 中的值每天都在变化，导致不同的定时任务哈希值（hashes）。</p>
<p>针对这种情况，解决方法是，日志文件名称固定，然后创建一个任务，用来每天把日志文件重命名（move）成想要的格式名称，这样就可以啦！</p>
<h3 id="总结">总结</h3><p>通过这个需求，可以看到很多知识点其实是串联起来的，从<code>python</code>到<code>django</code>到<code>Linux</code>的<code>crontab</code>，所以，学习无止境，知识学习只会越来越多，如果你提前掌握了某些知识，那么学习新（旧）知识的成本就会降低很多，或者理解成本，比如你学习了 <code>Linux</code>， 了解过 <code>cron</code> ，那么对于学习这个 <code>django</code> 的定时任务会轻松很多！永远不要认为有些知识你永远用不上，所以现在就不学，可能现在的永远距离已经很短啦！加油~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/kraiz/django-crontab" target="_blank" rel="external">kraiz/django-crontab: dead simple crontab powered job scheduling for django.</a></li>
<li><a href="https://segmentfault.com/a/1190000016515891" target="_blank" rel="external">django开发-定时任务的使用 - wyzane - SegmentFault 思否</a></li>
<li><a href="http://www.voidcn.com/article/p-tgyycvyp-bqm.html" target="_blank" rel="external">django-crontab 定时执行任务方法 - 程序园</a></li>
<li><a href="https://www.leipengkai.com/article/8/" target="_blank" rel="external">django-crontab实现Django定时任务</a></li>
<li><a href="https://www.jianshu.com/p/27f003149090" target="_blank" rel="external">django使用django-crontab实现定时任务 - 简书</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1121891" target="_blank" rel="external">使用django-crontab实现定时任务 - 腾讯云</a></li>
<li><a href="https://www.jianshu.com/p/c6a729c81a24" target="_blank" rel="external">cron语法格式学习 - 简书</a></li>
<li><a href="https://github.com/kraiz/django-crontab/issues/76" target="_blank" rel="external">django-crontab is missing job hash after one day · Issue #76 · kraiz/django-crontab</a></li>
<li><a href="http://en.wikipedia.org/wiki/Cron#Format" target="_blank" rel="external">Cron Format - Wikipedia</a></li>
<li><a href="https://crontab.guru/examples.html" target="_blank" rel="external">crontab.guru</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>在做 django 开发需求时，多多少少都会遇到需要定时任务的功能，比如定时执行任务，检查订单之类的。可能是一段时间，比如每隔 10分钟执行一次，也可能是定点时间，比如 14:00 执行，也可能是长时间，比如每周几，每个月的哪一天等。查看了一下相关资料， django 定时任务 <code>django-crontab</code> 库比较多教程和资料，虽然 star 数才五百，但是 API 接口比较简单，接入也很方便，功能也很全面，当然，也存在一此无法解决的问题，使用时需要注意的。</p>]]>
    
    </summary>
    
      <category term="django" scheme="https://iHTCboy.com/tags/django/"/>
    
      <category term="django-crontab" scheme="https://iHTCboy.com/tags/django-crontab/"/>
    
      <category term="python" scheme="https://iHTCboy.com/tags/python/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈一谈 IPA 上传到 App Store Connect 的几种方法]]></title>
    <link href="https://iHTCboy.com/2019/04/07/2019-04-07_%E4%B8%8A%E4%BC%A0IPA%E5%88%B0AppStoreConnet%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://iHTCboy.com/2019/04/07/2019-04-07_上传IPA到AppStoreConnet的几种方法/</id>
    <published>2019-04-07T07:49:16.000Z</published>
    <updated>2019-05-05T14:33:54.877Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>关于上传 ipa 包到 App Store Connect 的方法，相信有 iOS 开发经验的同学，一定知道完成 App 开发后，一般都是用 Xcode 的 Archive 打包后上传到苹果后台。所以，这个就是今天要写的水文？显示不是吧！答案肯定不是啊，本文将给大家一个相对全面介绍。苹果开发的知识点非常多，官方文档也很多，能够学好学完，不一定人人能够做到。在我的理解，iOS进阶，不是说你必须掌握很高深的技术，而是了解全面的知识，能够做出不一样的产品、体验，这个才是优秀的开发者！</p>
<a id="more"></a>
<h3 id="2、Xcode">2、Xcode</h3><p>利用 Xcode 的 Archive 生成 app 包后，选择 Distribute App ，将 App 通过 Xcode 上传到  App Store Connect 后台，这个就不多说的，iOS 开发都需要经历一下。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190407-Xcode-Distribute-App.png" alt="20190407-Xcode-Distribute-App.png"></p>
<h3 id="3、Application_Loader">3、Application Loader</h3><p>当然，Xcode 这种方式，是需要有源代码情况下，才能上传。所以，就会有没有源代码的情况，怎么上传的情况啦！</p>
<p>Application Loader 就是这样一种方式：</p>
<blockquote>
<p>Application Loader 是一款 Apple 工具能够帮助您将 App 的二进制文件上传至 App Store。</p>
<p>Application Loader 上传速度快、连接稳定并且具备早期验证警告功能。</p>
</blockquote>
<p>登陆界面：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190407-Application-Loader-Login.png" alt="20190407-Application-Loader-Login.png"></p>
<p>主界面：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190407-Application-Loader-Upload.png" alt="20190407-Application-Loader-Upload.png"></p>
<p>其实，如果了解 Xcode 历史的同学，会知道现在的 Application Loader App 的功能已经被苹果弱化了，以前还能够批量创建提交内购品项等，现在新版本已经去掉了。另外，以前在苹果开发者官网，有单独的页面，可以下载独立版本的 Application Loader 软件，现在也已经去掉了。</p>
<p>可能的原因，在我看来有几点。第1点是，单独维护这样一个软件，需要人力，因为，如果不依赖于 Xcode，在一台电脑只安装了 Application Loader，那个肯定需要安装 <code>Command Line Tools</code> 这个命令行工具，如果是安装 Xcode 默认也带上，如果更新了 Xcode 版，也会跟随升级，所以，维护 Application Loader 软件，不只是单独的一个应用入口，当然，也是因为这个 Application Loader 做了一些早期验证警告：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/04/20190407-Application-Loader-Error.png" alt="20190407-Xcode-Distribute-App.png"></p>
<p>上传 ipa 包时，工具会检查一些要求和内容格式等，如果不符合，就会报错，所以，这些初步的检查报错，也是 Application Loader 需要维护的。</p>
<p>第2点，Application Loader 需要的人并不多，站在开发者环境，大多数开发者负责上传 ipa 包，另外，批量上传内购品项，一定很多人不知道，所以，苹果也去掉了。开发者后台也去掉了，所以，Application Loader 现在是集成在 Xcode 中，说不定，那天就直接去掉。</p>
<p>第3点，越来越多的声音，希望苹果能通过 App Store Connect 后台能直接上传 ipa 包、批量创建内购品项等功能。但根据我观察这几年的 WWDC，苹果对 App Store Connect 后台进行了比较大的改变，2018年就是对 App Store Connect 和 Apple Developer 后台，2个账号体系合并，主线上，还是整个系统性上，对于功能和UI界面上，不知道有没有相关计划。我的猜测，还是有希望的。因为近年来，跨平台开发， React Native/ Weex / Flutter，其实，可以不需要依赖 Xcode、macOS 进行开发，打包上传 ipa 却需要一台 macOS 和 Xcode，有一点不可理解？（当然，也不排除苹果希望大家因此，能多卖出几台 Mac 电脑，也许我的猜测是错的吧，但愿~）</p>
<p>具体关于 Application Loader 使用方法，大家可以看看官方使用文档，已经非常详细，而且这几年，苹果很多文档都已经有翻译中文版本啦！Application Loader 介绍（中文）：<a href="https://help.apple.com/itc/apploader/" target="_blank" rel="external">https://help.apple.com/itc/apploader/</a></p>
<h3 id="4、altool">4、altool</h3><blockquote>
<p>您可以使用 Application Loader 的命令行工具 altool，验证 App 二进制文件并将其上传至 App Store。</p>
</blockquote>
<p>所以，Application Loader 应用界面下，也是基于 altool 命令来处理 ipa 文件。明白了这点，对于命令行就没有什么问题啦。</p>
<blockquote>
<p>若要在上传之前验证构建版本或将有效构建版本自动上传至 App Store，您可在您的持续集成系统中包含 altool。altool 位于以下文件夹中：<br><code>Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/</code></p>
</blockquote>
<p>对于这点，如果有做过自动化打包、上传发布或 shell 脚本命令的同学，应该就知道，我们很多时候，希望自动上传，而不是人工操作UI，一步一傻瓜的操作，这不是程序员的工作方式！所以，用命令行的目的就在这里。需要说明一下，刚才也提到 Application Loader 是有早期验证警告功能，也就是说，可以检查这个 ipa 包的内容或格式，是不是符合苹果的规定和要求。</p>
<p>所以，若要运行 altool，请在命令行指定以下一项操作，可以是检查（<code>--validate-app</code>），或者上传（<code>--upload-app</code>）操作：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ altool --validate-app -f file -u username [-p password] [--output-format xml]&#10;$ altool --upload-app -f file -u username [-p password] [--output-format xml]</span><br></pre></td></tr></table></figure>
<p>命令参数说明：</p>
<table>
<thead>
<tr>
<th>参数命令</th>
<th>详细说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>–validate-app</td>
<td>您要验证指定的 App。</td>
</tr>
<tr>
<td>–upload-app</td>
<td>您要上传指定的 App。</td>
</tr>
<tr>
<td>-f file</td>
<td>正在验证或上传的 App 的路径和文件名。</td>
</tr>
<tr>
<td>-u username</td>
<td>您的用户名。</td>
</tr>
<tr>
<td>-p password</td>
<td>您的用户密码。</td>
</tr>
<tr>
<td>–output-format [xml / normal]</td>
<td>您想让 Application Loader 以结构化的 XML 格式还是非结构化的文本格式返回输出信息。默认情况下，Application Loader 以文本格式返回输出信息。</td>
</tr>
</tbody>
</table>
<h3 id="5、Transporter">5、Transporter</h3><p>也许，对于一般的开发者来说，<code>altool</code> 已经能满足基本的上传 ipa 文件的需求。但是，正好前面说的，如果你需要进行批量创建内购品项，还有其它操作，可能大多数开发者不知道，苹果除了 iOS，还有非常多的服务， iTunes Connect 帐户（图书发行商或音乐提供商）、 iTunes Store、Apple Books，尽管我们中国地区有些服务或者非常少用。</p>
<p>所以，苹果提供 <code>Transporter</code> 来处理大量和差异化数据的操作的工具（可以在 macOS、Windows 和 Linux 操作系统上安装和运行 Transporter。）：</p>
<blockquote>
<p>Transporter 是 Apple 基于 Java 的命令行工具，用于进行大量目录交付。您可以使用 Transporter 将预生成的内容以 Store 数据包的形式交付至 iTunes Store、Apple Books 和 App Store。</p>
<p>不论您使用 iTunes Connect 帐户（图书发行商或音乐提供商）、App Store Connect 帐户（App 开发者）或是编码工作室帐户来交付图书、视频、音乐或 App 内容，您都可以使用 Transporter 以确保您的元数据和素材（例如音频、视频、图书和 App 文件）适当地交付至 iTunes Store、Apple Books 或 App Store，并根据 Apple 的规范验证 Store 数据包。</p>
</blockquote>
<p>这里，只会介绍用 <code>Transporter</code> 命令来上传 ipa 文件，更多的功能和说明，大家可以查看官方文档（中文）：<a href="https://help.apple.com/itc/transporteruserguide/" target="_blank" rel="external">https://help.apple.com/itc/transporteruserguide/</a></p>
<p><strong>注意：</strong> 下面命令中的 <code>iTMSTransporter</code> 是一个变量名，<a href="https://help.apple.com/itc/transporteruserguide/#/apdAbeb95d60" target="_blank" rel="external">【重要事项】</a> 作为一名 App 开发者，您可以在已安装 Xcode 或 Application Loader 的情况下使用 Transporter，或者您也可以手动下载 Transporter。有关如何为 App 开发者安装 Transporter 的信息，<a href="https://help.apple.com/itc/transporteruserguide/#/apdAbeb95d60" target="_blank" rel="external">请参见 App 开发者的安装说明</a>。</p>
<p>因为我们默认都安装了 Xcode，所以 <code>Transporter</code> 命令，我们引用 Xcode 中的 Application Loader 里的 <code>iTMSTransporter</code>, 在 .bash_profile 添加了一个别名，这样可以在任何目录路径调用 <code>iTMSTransporter</code> 命令:</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> iTMSTransporter='`xcode-<span class="keyword">select</span> <span class="comment">--print-path`/../Applications/Application\ Loader.app/Contents/MacOS/itms/bin/iTMSTransporter'</span></span><br></pre></td></tr></table></figure>
<p>注： </p>
<ul>
<li>1、其中 <code>xcode-select --print-path</code>： print the path of the active developer directory（打印当前使用的Xcode版本软件的开发人员目录的路径），然后在当前使用的 Xcode 版本对应的 Application Loader 下的 <code>iTMSTransporter</code>。</li>
<li>2、当然，也可能通过设置全局环境变量来直接使用命令，添加 TRANSPORTER_HOME 环境变量。要添加 TRANSPORTER_HOME 环境变量，请在您的 .bash_profile 中添加以下行：export TRANSPORTER_HOME=<file path="" to="" transporter="">。例如，如果您安装了 Xcode，则该行应如下所示：</file></li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TRANSPORTER_HOME=`xcode-select --<span class="keyword">print</span>-path`<span class="regexp">/../</span>Applications<span class="regexp">/Application\ Loader.app/</span>Contents<span class="regexp">/MacOS/i</span>tms<span class="regexp">/bin</span></span><br></pre></td></tr></table></figure>
<p>其中，我们除了刚才说的检查和上传模式外，可能会用于这个命令的几种模式，</p>
<ul>
<li>Lookup Metadata 模式</li>
</ul>
<blockquote>
<p>检索您之前上传的某个 App 当前的元数据。如果您之前上传的是 .itmsp 数据包且 Apple 在您初次上传后修改了元数据，您需要先检索修改后的元数据，再重新发送元数据更新的数据包。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iTMSTransporter -m lookupMetadata -u [user] -p [password] -apple_id(-apple_ids) -destination [output_path]</span><br></pre></td></tr></table></figure>
<ul>
<li>Provider 模式</li>
</ul>
<blockquote>
<p>确定您有权限为哪些帐户交付内容。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">iTMSTransporter</span> <span class="tag">-m</span> <span class="tag">provider</span> <span class="tag">-u</span> <span class="attr_selector">[user]</span> <span class="tag">-p</span> <span class="attr_selector">[password]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Verify 模式</li>
</ul>
<blockquote>
<p>验证您的 .itmsp 数据包，并在交付前确保元数据和素材符合技术要求，以保证上传数据包前解决任何潜在的问题。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">iTMSTransporter</span> <span class="tag">-m</span> <span class="tag">verify</span> <span class="tag">-u</span> <span class="attr_selector">[user]</span> <span class="tag">-p</span> <span class="attr_selector">[password]</span> <span class="tag">-f</span> <span class="attr_selector">[itmsp_path]</span> <span class="attr_selector">[-vp &lt;text | json&gt;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Upload 模式</li>
</ul>
<blockquote>
<p>检查您的素材和 .itmsp 数据包，验证它们是否准备就绪以供交付，然后向 App Store 上传内容和元数据。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">iTMSTransporter</span> <span class="tag">-m</span> <span class="tag">upload</span> <span class="tag">-u</span> <span class="attr_selector">[user]</span> <span class="tag">-p</span> <span class="attr_selector">[password]</span> <span class="tag">-f</span> <span class="attr_selector">[itmsp_path]</span></span><br></pre></td></tr></table></figure>
<p>关于这些模式的参数，苹果文档有非常详细的说明，虽然需要花一点的脑子去理解（文档真的很~），好了。下面简单说明一下，上传命令怎么使用吧</p>
<ul>
<li>上传 ipa 示例：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iTMSTransporter -m upload -u xxx@xxx.com -p xxx -f /Users/HTC/Desktop/Upload.itmsp</span><br></pre></td></tr></table></figure>
<p><code>xxx@xxx.com</code> ：App Store Connect 账号<br><code>xxx</code> ：App Store Connect 账号的密码<br><code>/Users/HTC/Desktop/Upload.itmsp</code> ：这个一个目录，<code>Upload.itmsp</code> 是一个文件夹名字，不是文件，里面包含2个文件，一个就是要上传的 ipa 文件，另一个是一个 xml ，描述这个 ipa 文件的信息。</p>
<p>ipa_metadata.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">package</span> <span class="attribute">version</span>=<span class="value">"software5.10"</span> <span class="attribute">xmlns</span>=<span class="value">"http://apple.com/itunes/importer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">software_assets</span> <span class="attribute">apple_id</span>=<span class="value">"&#123;apple_id&#125;"</span> <span class="attribute">app_platform</span>=<span class="value">"&#123;app_platform&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">asset</span> <span class="attribute">type</span>=<span class="value">"&#123;archive_type&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">data_file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">size</span>&gt;</span>&#123;file_size&#125;<span class="tag">&lt;/<span class="title">size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">file_name</span>&gt;</span>&#123;file_name&#125;<span class="tag">&lt;/<span class="title">file_name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">checksum</span> <span class="attribute">type</span>=<span class="value">"md5"</span>&gt;</span>&#123;file_md5&#125;<span class="tag">&lt;/<span class="title">checksum</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">data_file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">asset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">software_assets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要修改 xml 中的一些参数：</p>
<p><code>{apple_id}</code> ：这个 ipa 文件对应的app的 apple id<br><code>{app_platform}</code> ： app的平台，填写<code>ios</code><br><code>{archive_type}</code> ：归档类型，填写<code>bundle</code><br><code>{file_size}</code> ：ipa 文件的大小<br><code>{file_name}</code> ：ipa 文件的名字<br><code>{file_md5}</code>： ipa 文件的md5值</p>
<ul>
<li>一些重要参数说明：</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-itc_provider <shortname></shortname></td>
<td>检查和上传时建议加子账号的团队id，但测试发现不用 也行，先不带，因为获取很麻烦</td>
</tr>
<tr>
<td>-errorLogs <path></path></td>
<td>存储错误日志的目录</td>
</tr>
<tr>
<td>-loghistory <path></path></td>
<td>记录成功上传的数据包</td>
</tr>
<tr>
<td>-outputFormat xml</td>
<td>以 XML 格式返回输出信息</td>
</tr>
<tr>
<td>-throughput</td>
<td>显示成功上传数据包的总传输时间以及数据包大小和每秒字节数</td>
</tr>
<tr>
<td>[-o <output>]</output></td>
<td>记录输出信息</td>
</tr>
<tr>
<td>[-v <verbosity>]</verbosity></td>
<td>日志级别，默认eXtreme，详细</td>
</tr>
<tr>
<td>-vp <text json=""></text></td>
<td>在验证或上传数据包文件时显示进度信息</td>
</tr>
<tr>
<td>[-Xmx4096m]</td>
<td>指定 4 GB  Java 虚拟机 (JVM) 堆栈内存</td>
</tr>
</tbody>
</table>
<h3 id="总结">总结</h3><p>最后，这就是几种上传ipa包的方法，当然，如果经验丰富的开发者，可能使用过 <code>fastlane</code> 、<code>shenzhen</code> 这样的自动化工具命令，也是可以上传 ipa 文件，如果你研究过它们的源代码，你就会发现，他们使用的命令就是 <code>iTMSTransporter</code>，这也正是，我想写这篇文章的原因。现在大家在开发过程中，一直想提升自己，想进阶，想成为高手，然而找不到途径？我希望，大家不要忽视开发过程的每一个重要的环节，这就是进阶的途径！愿大家都能感悟达到~</p>
<p>最后的最后，想说一下最近不怎么更新博客的原因？除了比较忙外（什么时候闲！），写好一篇文章，需要去考查相关的资料和知识，对每一行文字，都要精斟细酌，因为当我看到博客的访问量越来越多人时，为了不误导大家，所以需要承担的责任感觉也大了。这也是写文章的好处吧，除了整理思维，体系构建，表达自己，还有分享，责任，担当中国IT技术传承的一份子，安乐~</p>
<p>finally，五一快乐！致敬劳动者！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://help.apple.com/xcode/mac/current/" target="_blank" rel="external">Xcode Help</a></li>
<li><a href="https://help.apple.com/itc/apploader/#/" target="_blank" rel="external">使用 Application Loader</a></li>
<li><a href="https://help.apple.com/itc/apploader/#/apdATD1E53-D1E1A1303-D1E53A1126" target="_blank" rel="external">通过 altool 上传 App 的二进制文件 - 使用 Application Loader</a></li>
<li><a href="https://help.apple.com/itc/transporteruserguide/#/itc0d5b535bf" target="_blank" rel="external">Transporter 是什么？ - Transporter 用户指南 1.13</a></li>
<li><a href="https://help.apple.com/itc/podcasts_connect/#/itcc0e1eaa94" target="_blank" rel="external">Podcasts Connect 概览 - Podcasts Connect 帮助</a></li>
<li><a href="https://help.apple.com/itc/apploader/#/apdATD1E887-D1E1A1303-D1E887A1126" target="_blank" rel="external">支持的格式 - 使用 Application Loader</a></li>
<li><a href="https://stackoverflow.com/questions/16582119/how-use-itmstransporter" target="_blank" rel="external">How use iTMSTransporter?</a></li>
<li><a href="https://github.com/fastlane/fastlane" target="_blank" rel="external">GitHub - fastlane</a></li>
<li><a href="https://docs.fastlane.tools/actions/deliver/" target="_blank" rel="external">fastlane deliver 上传app到App Store</a></li>
<li><a href="https://github.com/nomad/shenzhen/blob/master/lib/shenzhen/plugins/itunesconnect.rb" target="_blank" rel="external">GitHub - shenzhen</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>关于上传 ipa 包到 App Store Connect 的方法，相信有 iOS 开发经验的同学，一定知道完成 App 开发后，一般都是用 Xcode 的 Archive 打包后上传到苹果后台。所以，这个就是今天要写的水文？显示不是吧！答案肯定不是啊，本文将给大家一个相对全面介绍。苹果开发的知识点非常多，官方文档也很多，能够学好学完，不一定人人能够做到。在我的理解，iOS进阶，不是说你必须掌握很高深的技术，而是了解全面的知识，能够做出不一样的产品、体验，这个才是优秀的开发者！</p>]]>
    
    </summary>
    
      <category term="ApplicationLoader" scheme="https://iHTCboy.com/tags/ApplicationLoader/"/>
    
      <category term="IPA" scheme="https://iHTCboy.com/tags/IPA/"/>
    
      <category term="Transporter" scheme="https://iHTCboy.com/tags/Transporter/"/>
    
      <category term="Xcode" scheme="https://iHTCboy.com/tags/Xcode/"/>
    
      <category term="altool" scheme="https://iHTCboy.com/tags/altool/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xcode10再坑之framework not found CoreServices for architecture armv7]]></title>
    <link href="https://iHTCboy.com/2019/03/15/2019-03-15_iOS-framework-not-found-xxx-for-architecture-armv7/"/>
    <id>https://iHTCboy.com/2019/03/15/2019-03-15_iOS-framework-not-found-xxx-for-architecture-armv7/</id>
    <published>2019-03-15T13:19:16.000Z</published>
    <updated>2019-03-30T15:43:48.767Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>前段时间，升级了 Xcode10 后，提供给第三方用户的SDK，客户反馈说报错：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld: framework not found CoreServices <span class="keyword">for</span> architecture armv7</span><br></pre></td></tr></table></figure>
<p><strong>为什么 iOS SDK 拖入项目中就报错”ld: framework not found IOSurface for architecture arm64”？</strong></p>
<p>其实，翻开之前写的文章已经说过解决方案： <a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a></p>
<p>当时，反复确认后，网上有些第三方的SDK提供商说升级 Xcode10 吧！！！慌张~ 你们就只能让别人升级啦！解决不了，重启，升级！但，NO，最后发现是新项目是使用 <code>CocoaPods</code> 导致的坑，一个地方进2次，还真不简单！</p>
<a id="more"></a>
<p>其中，看到有赞云这样说：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190315-youzanyun-sdk.png" alt="20190315-youzanyun-sdk.png"></p>
<p>我只能说，坑的一个算一个，第三方用户就是这样，希望技术真的改变生活！包括技术的生活！</p>
<h3 id="2、问题原因">2、问题原因</h3><p>因为我们新的项目使用 <code>CocoaPods</code> 组件化，所以最后打SDK的项目是CocoaPods集成的，问题就出在这里！上一个文章说到解决方法很简单：（<a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a>）</p>
<blockquote>
<p>Build Settings 中 Link Frameworks Automatically 把默认Yes 改成 No </p>
</blockquote>
<p>但是，如果用 <code>CocoaPods</code> 集成，默认是 <code>Yes</code>！！！ 尼玛！！！</p>
<p>知道原因，解决就好办啦！但是，突然想到，以后 <code>pod install</code> 或 <code>pod update</code> 时，难道要人工的设置一次？？？ 不可能！不可能！不可能！</p>
<p>最后，还是在 <code>CocoaPods</code> 官方文档找到答案 <a href="https://guides.cocoapods.org/syntax/podfile.html#post_install" target="_blank" rel="external">CocoaPods Guides - post_install</a>：</p>
<p>在 <code>Podfile</code> 文件最后，添加下面代码：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> |installer|</span><br><span class="line">    installer.pods_project.targets.each <span class="keyword">do</span> |target|</span><br><span class="line">        target.build_configurations.each <span class="keyword">do</span> |config|</span><br><span class="line">            config.build_settings[<span class="string">'CLANG_MODULES_AUTOLINK'</span>] = <span class="string">'NO'</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这个是一个勾子<code>hook</code>，在pod安装完成前，允许更改配置或做些别的事件！</p>
<h3 id="3、总结">3、总结</h3><p>这个问题，2次进坑，解决的问题本质就是一个，只是自己开始不相信！所以，遇到问题，还是要学会找到原因，只是通往答案的道路各不相同，只要不放弃，不抛弃，一定能为大家提供优质的服务！相信科技的力量！不然，只能让别人升级环境来适配你，这可不好哦！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a></li>
<li><a href="https://www.youzanyun.com/support/faq/3476?qa_id=9026" target="_blank" rel="external">SDK引入_常见问题 - 有赞云</a></li>
<li><a href="https://developer.apple.com/documentation/coreservices" target="_blank" rel="external">Core Services | Apple Developer Documentation</a></li>
<li><a href="https://stackoverflow.com/questions/22736056/error-when-trying-to-link-fat-binary-with-64-bit-simulator-target/53280331#53280331" target="_blank" rel="external">ios - Error when trying to link fat binary with 64-bit simulator target - Stack Overflow</a></li>
<li><a href="https://github.com/facebook/react-native/issues/21768" target="_blank" rel="external">ld: framework not found CoreServices for architecture x86_64 · Issue #21768 · facebook/react-native</a></li>
<li><a href="https://blog.appsee.com/xcodes-new-link-frameworks-automatically-how-to-fix-framework-not-found-metal-for-architecture-armv7/" target="_blank" rel="external">XCode’s New “Link Frameworks Automatically” &amp; How to Fix “framework not found Metal for architecture armv7”</a></li>
<li><a href="https://github.com/CocoaPods/cocoapods-packager/issues/48" target="_blank" rel="external">Add option to set “LINK FRAMEWORKS AUTOMATICALLY” to NO · Issue #48 · CocoaPods/cocoapods-packager</a></li>
<li><a href="https://guides.cocoapods.org/syntax/podfile.html#post_install" target="_blank" rel="external">CocoaPods Guides - Podfile Syntax Reference <span>v1.7.0.beta.2</span></a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>前段时间，升级了 Xcode10 后，提供给第三方用户的SDK，客户反馈说报错：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld: framework not found CoreServices <span class="keyword">for</span> architecture armv7</span><br></pre></td></tr></table></figure>
<p><strong>为什么 iOS SDK 拖入项目中就报错”ld: framework not found IOSurface for architecture arm64”？</strong></p>
<p>其实，翻开之前写的文章已经说过解决方案： <a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a></p>
<p>当时，反复确认后，网上有些第三方的SDK提供商说升级 Xcode10 吧！！！慌张~ 你们就只能让别人升级啦！解决不了，重启，升级！但，NO，最后发现是新项目是使用 <code>CocoaPods</code> 导致的坑，一个地方进2次，还真不简单！</p>]]>
    
    </summary>
    
      <category term="CoreServices" scheme="https://iHTCboy.com/tags/CoreServices/"/>
    
      <category term="Framework not found" scheme="https://iHTCboy.com/tags/Framework-not-found/"/>
    
      <category term="IOSurface" scheme="https://iHTCboy.com/tags/IOSurface/"/>
    
      <category term="Xcode10" scheme="https://iHTCboy.com/tags/Xcode10/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧7 - git提高效率的一些用法]]></title>
    <link href="https://iHTCboy.com/2019/03/14/2019-03-14_shell%E6%8A%80%E5%B7%A77-git%E6%9B%B4%E6%96%B0%E7%AD%89%E6%95%88%E7%8E%87%E8%84%9A%E6%9C%AC/"/>
    <id>https://iHTCboy.com/2019/03/14/2019-03-14_shell技巧7-git更新等效率脚本/</id>
    <published>2019-03-14T14:20:16.000Z</published>
    <updated>2019-06-30T02:33:47.514Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>经过前面那么多节的脚本使用技巧，相信大家一定已经掌握了基本的shell脚本编写，但是可能还是没有想明白，或者想到说平时工作生活中，有什么作用？今天，写写我自己在工作中，一些提高效率的脚本一起来看看吧~</p>
<a id="more"></a>
<h3 id="2、git_pull_更新">2、git pull 更新</h3><p>工作中，我们都知道，更新工作代码库：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> pull</span><br></pre></td></tr></table></figure></p>
<p>但是，有没有想过，如果你有10个库呢？是不是要命令行切换目录输出10次？或者你有Sourcetree，在界面也要切换10次吧？</p>
<p>所以，有没有想过，如果用脚本，能不能一次的把全部的库，都<code>git pull</code>下来？想到这样，相信大家已经知道，肯定可以啊！</p>
<p>直接上代码（具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a>）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># 定义用到的变量</span></span><br><span class="line">directory_path=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义读取输入字符的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getDirectoryPath</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter directory path: "</span> directory_path</span><br><span class="line">	<span class="comment"># 如果为空值，从新监听</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"directory_path"</span>; <span class="keyword">then</span></span><br><span class="line">		getDirectoryPath</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">read</span>_dir <span class="variable">$&#123;directory_path&#125;</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">read_dir</span></span>()&#123;</span><br><span class="line">	<span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$1</span>`       <span class="comment">#注意此处这是两个反引号，表示运行系统命令</span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> ]  <span class="comment">#注意此处之间一定要加上空格，否则会报错</span></span><br><span class="line">		<span class="keyword">then</span></span><br><span class="line">			<span class="comment">#在此处处理目录即可</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"-----------------------------\n"</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"check directory:《"</span> <span class="variable">$file</span> <span class="string">"》"</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"message:"</span></span><br><span class="line">			<span class="built_in">cd</span> <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span></span><br><span class="line">			git pull</span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"\n"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取第一个参数</span></span><br><span class="line">getDirectoryPath</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n------- finish processing -------"</span></span><br></pre></td></tr></table></figure>
<p>使用方法非常简单，执行脚本，输入在你所有库的根目录，然后脚本会循环所有目录<code>git pull</code>。当然，如果是公司电脑，那你可以用别名<code>alias</code>定义一个通用命令来执行，明天早上上班，执行一下，效率满满的！！！</p>
<h3 id="3、git_clone_下载">3、git clone 下载</h3><p>有时候，你换了新电脑，或者像我不小心，电脑挂了，重装系统，新的电脑，需要一个一个库的拉取下来，这时候，你也可以写一个脚本来统一执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iHTCboy/OneMindMap.git;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iHTCboy/NotesEveryDay.git;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iHTCboy/macOSConfig.git;</span><br></pre></td></tr></table></figure>
<p> 编写自己的库或公司库脚本，放到git仓库，是不是又学到一招！</p>
<h3 id="4、git_commit">4、git commit</h3><p>这个大家应该想到了吧？可以放到 <code>.bash_profile</code> 或 <code>.zshrc</code> 当成一个别名使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">glazy</span></span>() &#123;</span><br><span class="line">    git add .</span><br><span class="line">    git commit <span class="operator">-a</span> -m <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    git push</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方法很简单：<br><code>glazy &#39;XXXX&#39;</code> 就可以一步到位：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  iShell git:(master) ✗ glazy <span class="string">'shell技巧6 - iOS最大构建版本文件大小'</span></span><br><span class="line">[master <span class="number">15</span>a0b97] shell技巧<span class="number">6</span> - iOS最大构建版本文件大小</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">72</span> insertions(+)</span><br><span class="line"> create mode <span class="number">100644</span> Shell/calculate_Mach-<span class="number">0</span>__Text-Size .sh</span><br><span class="line">Counting objects: <span class="number">4</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">4</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), <span class="number">1.52</span> KiB | <span class="number">1.52</span> MiB/s, done.</span><br><span class="line">Total <span class="number">4</span> (delta <span class="number">2</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving deltas: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), completed with <span class="number">2</span> <span class="built_in">local</span> objects.</span><br><span class="line">To https://github.com/iHTCboy/iShell.git</span><br><span class="line">   <span class="number">6</span>f39dfe..<span class="number">15</span>a0b97  master -&gt; master</span><br></pre></td></tr></table></figure>
<h3 id="5、备份文件">5、备份文件</h3><p>为了避免数据掉失，我会经常定时备份博客的文档，如果需要人工手动，重复，反复，一个一个，切换目录，其实，写一个脚本就搞定：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">blog_dir=<span class="string">"/Users/HTC/Documents/Personal/P-Project/iHTCBlog/source/"</span></span><br><span class="line">backup_dir=<span class="string">"/Users/HTC/Documents/Personal/P-Project/macOSConfig/iHTCboy_Blog/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy files</span></span><br><span class="line">cp -r <span class="string">"<span class="variable">$&#123;blog_dir&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;backup_dir&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete drafts file</span></span><br><span class="line">rm -rf <span class="string">"<span class="variable">$&#123;backup_dir&#125;</span>/_drafts"</span></span><br></pre></td></tr></table></figure>
<p>当然，为了方便，不可能每次都打开终端才执行，如果Mac或Linux，可以用 Unix 可执行文件，直接点击，会自动打开终端执行。</p>
<p>比如脚本叫 <code>backup_sh.sh</code> 改为 <code>backup_sh</code> 名字，然后在终端为文件添加可执行权限：<br><code>chmod +x /Users/HTC/Desktop/backup_sh</code> </p>
<p>以后，直接双击<code>backup_sh</code>这个文件，就会自动在终端执行，备份完成！</p>
<p>注：其它方法可参考 <a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a> 第5小节。</p>
<h3 id="6、总结">6、总结</h3><p>关于shell脚本就讲到这里，更多技巧和提交效率的方式，希望大家能举一反三，这都是授鱼不如授渔！ 关键，还是大家要熟悉学习和掌握<code>shell</code>编码，就能在工作生活中提高效率。</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>经过前面那么多节的脚本使用技巧，相信大家一定已经掌握了基本的shell脚本编写，但是可能还是没有想明白，或者想到说平时工作生活中，有什么作用？今天，写写我自己在工作中，一些提高效率的脚本一起来看看吧~</p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="效率" scheme="https://iHTCboy.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="脚本" scheme="https://iHTCboy.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧6 - iOS最大构建版本文件大小]]></title>
    <link href="https://iHTCboy.com/2019/03/13/2019-03-13_shell%E6%8A%80%E5%B7%A76-iOS%E6%9C%80%E5%A4%A7%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/"/>
    <id>https://iHTCboy.com/2019/03/13/2019-03-13_shell技巧6-iOS最大构建版本文件大小/</id>
    <published>2019-03-13T13:20:16.000Z</published>
    <updated>2019-03-17T14:36:10.952Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>在上传提交ipa文件成功后，发现AppStoreConnect后台一直不显示构建版本，最后邮箱收到：</p>
<blockquote>
<p>App Store Connect</p>
<p>Dear Developer,</p>
<p>We identified one or more issues with a recent delivery for your app, “XXX”. Please correct the following issues, then upload again.<br>Invalid Executable Size - The size of your app’s executable file ‘XXX.app/XXX’ is 90374144 bytes, which exceeds the maximum allowed size of 80 MB.<br>Best regards,<br>The App Store Team</p>
</blockquote>
<a id="more"></a>
<h3 id="2、原因">2、原因</h3><p><code>Executable Size</code> ？<code>executable file</code> ？这2个是什么东西？Executable 是可执行的意思，所以就是可执行的大小、可执行的文件。<br>每个 Mach-O 可执行文件（例如，app_name.app/app_name）不得超过这些正文段（<strong>TEXT）文件大小的上限。具体 Mach-O 和 </strong>TEXT 是什么，大家可以看看：<a href="https://objccn.io/issue-6-3/" target="_blank" rel="external">ObjC 中国 - Mach-O 可执行文件</a>。</p>
<p>那从苹果文档<a href="https://help.apple.com/app-store-connect/#/dev611e0a21f" target="_blank" rel="external">最大构建版本文件大小 - App Store Connect 帮助</a>，可以得到如下：</p>
<table>
<thead>
<tr>
<th>OS 版本</th>
<th>最大可执行文件大小</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>iOS 9.0 或更高版本<br>Apple TVOS 9.0 或更高版本</td>
<td>500 MB</td>
<td>针对二进制文件中所有“__TEXT”部分的总和。</td>
</tr>
<tr>
<td>iOS 7.X 至 iOS 8.X</td>
<td>60 MB</td>
<td>针对每个 Architecture Slice（架构片段）中的“__TEXT”部分。</td>
</tr>
<tr>
<td>低于 iOS 7.0</td>
<td>80 MB</td>
<td>针对二进制文件中所有“__TEXT”部分的总和。</td>
</tr>
</tbody>
</table>
<ul>
<li>注：<strong>Architecture Slice</strong>（架构片段）是针对特定架构的胖二进制布局文件的一部分。例如，一个胖二进制文件可能会包含针对 32 位和 64 位架构的片段。</li>
</ul>
<p>综上，<code>executable file &#39;XXX.app/XXX&#39; is 90374144 bytes, which exceeds the maximum allowed size of 80 MB.</code> 就是说，当前可执行文件“__TEXT”部分的总和为 <code>90374144 bytes</code>，超过了 <code>80 MB</code>。</p>
<ul>
<li><p>是什么？<br>当前可执行文件“__TEXT”部分的总和大小超过80MB！</p>
</li>
<li><p>为什么？<br>Mach-O可执行文件中包含<code>__TEXT</code>区域，<code>__TEXT</code>包含了被执行的代码，即编译所得到的机器码。所以，也就是我们的应用中代码量或引用的第三方库过大导致。</p>
</li>
<li><p>怎么办？<br>因为苹果限制，所以，</p>
<ul>
<li>第1步是减少第三方库或删除无用的代码。</li>
<li>第2步是要找到什么计算<code>__TEXT</code>的大小？ </li>
</ul>
</li>
</ul>
<h3 id="3、__TEXT大小计算">3、<code>__TEXT</code>大小计算</h3><p>怎么计算 <code>__TEXT</code>的 <code>size</code> ？ 在终端用 <code>size XXX</code>就可以打印当前应用的二进制的<code>__TEXT</code>字段大小：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat </span><br><span class="line">__TEXT	__DATA	__OBJC	others	dec	hex</span><br><span class="line"><span class="number">53329920</span>	<span class="number">7929856</span>	<span class="number">0</span>	<span class="number">3162112</span>	<span class="number">64421888</span>	<span class="number">3</span>d70000	/Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat (<span class="keyword">for</span> architecture armv7)</span><br><span class="line"><span class="number">57475072</span>	<span class="number">13647872</span>	<span class="number">0</span>	<span class="number">4298047488</span>	<span class="number">4369170432</span>	<span class="number">1046</span>c4000	/Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat (<span class="keyword">for</span> architecture arm64)</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>
<p>注：如果应用支持<code>armv7</code>、<code>arm64</code>多种架构，就会显示多个，不会有<code>i386</code>、<code>x86_64</code>是因为dis正式包已经移除模拟器架构。像现在新的应用，只支持<code>arm64</code>就不会显示具体架构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/Weixin/Payload/WeChat.app/WeChat</span><br><span class="line">__TEXT	__DATA	__OBJC	others	dec	hex</span><br><span class="line"><span class="number">65355776</span>	<span class="number">15040512</span>	<span class="number">0</span>	<span class="number">4298145792</span>	<span class="number">4378542080</span>	<span class="number">104</span>fb4000</span><br></pre></td></tr></table></figure>
<p>那么知道了计算公式，根据上面苹果给出的文档要求，需要做应用最低支持系统版本判断计算方式：</p>
<ol>
<li>iOS 7.X 至 iOS 8.X 每个架构最大为 60 MB</li>
<li>iOS 9.0 或更高版本    500 MB    针对二进制文件中所有“__TEXT”部分的总和。</li>
<li>低于 iOS 7.0         80 MB     针对二进制文件中所有“__TEXT”部分的总和。</li>
</ol>
<p>根据这个要求，会出现如下2种计算方式：</p>
<ul>
<li>计算所有“__TEXT”部分的总和</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size app | awk <span class="string">'&#123;print $1&#125;'</span> | grep -E <span class="string">'[0-9]'</span> | awk <span class="string">'&#123;sum += $1&#125;; END &#123;print sum&#125;'</span></span><br></pre></td></tr></table></figure>
<p>运行示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat | awk <span class="string">'&#123;print $1&#125;'</span> | grep -E <span class="string">'[0-9]'</span> | awk <span class="string">'&#123;sum += $1&#125;; END &#123;print sum&#125;'</span></span><br><span class="line"><span class="number">110804992</span></span><br></pre></td></tr></table></figure>
<p><strong>脚本说明</strong>：首先是用<code>size</code> 列出全部的架构的<code>__TEXT</code>大小，然后用 <code>awk</code> （<a href="https://opengers.github.io/linux/awk-format-print/" target="_blank" rel="external">awk文本处理实战 | opengers</a>）过滤出第一列的内容输出，然后用<code>grep</code> -E（扩展的正则表达式）过滤数字的行，最后是计算各行数字相加的和输出。</p>
<ul>
<li>分别列出各架构的大小</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size app | awk <span class="string">'&#123;print $1 "," $10&#125;'</span> | tail -n +<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p> 运行示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat | awk <span class="string">'&#123;print $1 "," $10&#125;'</span> | tail -n +<span class="number">2</span></span><br><span class="line"><span class="number">53329920</span>,armv7)</span><br><span class="line"><span class="number">57475072</span>,arm64)</span><br></pre></td></tr></table></figure>
<p><strong>脚本说明</strong>：首先是用<code>size</code> 列出全部的架构的<code>__TEXT</code>（第1列）大小和架构名（第10列），之前用分号<code>,</code>间隔，然后输出，然后用 <code>tail</code> 输出从第2行开始的内容。</p>
<p>以上就是本文的核心内容，具体shell的技巧就不深讲啦，大家有兴趣可以搜索，<code>awk</code>、<code>tail</code> 命令了解更多，<a href="https://opengers.github.io/linux/awk-format-print/" target="_blank" rel="external">awk文本处理实战 | opengers</a>、<a href="http://www.runoob.com/linux/linux-comm-tail.html" target="_blank" rel="external">Linux tail 命令 | 菜鸟教程</a></p>
<h3 id="4、shell_编程实现">4、shell 编程实现</h3><p>需要注意一下，上面输出的是bytes，而macOS是用1000来转换成MB。</p>
<p><a href="https://zh.wikipedia.org/wiki/Mebibyte" target="_blank" rel="external">Mebibyte - 维基百科，自由的百科全书</a>：</p>
<blockquote>
<p>所有版本的Windows系统都会将一个2^20 bytes的文件显示为“1.00MB”，而10^6 bytes的文件显示为976kB。在Mac OS X 10.6之后将文件和磁盘大小都用Megabytes来表示，即将10^6 bytes的文件显示为1MB。</p>
</blockquote>
<p>最终效果示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">================================================&#10; Enter Mach-O executable file path: /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat&#10;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#10;1&#10;executable file size: 110.805 MB&#10;&#11093;&#65039; [Success] 110.805 MB&#65292; &#31526;&#21512;&#33529;&#26524; iOS9 &#23567;&#20110; 500 MB &#30340;&#35201;&#27714;&#65281;&#10;&#10;================================================&#10; Enter Mach-O executable file path: /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat&#10;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#10;2&#10;executable file size: 110.805 MB&#10;&#10060; [Error] 110.805 MB&#65292; &#19981;&#31526;&#21512;&#33529;&#26524; iOS7 &#23567;&#20110; 80 MB &#30340;&#35201;&#27714;&#65281;&#10;&#10;================================================&#10; Enter Mach-O executable file path: /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat&#10;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#10;3&#10;armv7 executable file size: 53.3299 MB&#10;&#11093;&#65039; [Success] armv7 size: 53.3299 MB&#65292; &#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;&#10;arm64 executable file size: 57.4751 MB&#10;&#11093;&#65039; [Success] arm64 size: 57.4751 MB&#65292; &#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;</span><br></pre></td></tr></table></figure>
<p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<p><code>calculate_Mach-0__Text-Size .sh</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;ExecutableFilePath=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;getExecutableFilePath() &#123;&#10;&#9;# &#36755;&#20986;&#25442;&#34892;&#65292;&#26041;&#20415;&#26597;&#30475;&#10;&#9;echo &#34;================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34; Enter Mach-O executable file path: &#34; ExecutableFilePath&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#10;&#9;if test -z &#34;$ExecutableFilePath&#34;; then&#10;&#9;&#9;echo &#34;Error! Should enter file path &#34;&#10;&#9;&#9;getExecutableFilePath&#10;&#9;fi&#10;&#125;&#10;&#10;getExecutableFilePath&#10;&#10;echo &#34;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#34;&#10;&#10;read number&#10;while([[ $number != 1 ]] &#38;&#38; [[ $number != 2 ]] &#38;&#38; [[ $number != 3 ]])&#10;do&#10;echo &#34;Error! Should enter 1 or 2 or 3&#34;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;read number&#10;done&#10;&#10;&#10;if [ $number != 3 ];then&#10;&#9;app_size=$(echo `size $&#123;ExecutableFilePath&#125; | awk &#39;&#123;print $1&#125;&#39; | grep -E &#39;[0-9]&#39; | awk &#39;&#123;sum += $1&#125;; END &#123;print sum/1000/1000&#125;&#39;`)&#10;&#9;echo &#39;executable file size:&#39; $&#123;app_size&#125; &#39;MB&#39;&#10;&#9;if [ $number == 1 ];then&#10;&#9;&#9;#iOS 9.0 &#25110;&#26356;&#39640;&#29256;&#26412;    500 MB    &#38024;&#23545;&#20108;&#36827;&#21046;&#25991;&#20214;&#20013;&#25152;&#26377;&#8220;__TEXT&#8221;&#37096;&#20998;&#30340;&#24635;&#21644;&#12290;&#10;&#9;&#9;#&#22240;&#20026;bc&#21644;awk&#37117;&#25903;&#25345;&#28014;&#28857;&#25968;&#65292;&#21487;&#20197;&#20351;&#29992;bc&#36827;&#34892;&#22788;&#29702;&#65306;&#10;&#9;&#9;if [ `echo &#34;$app_size &#62; 500&#34; | bc` -eq 1 ];then&#10;&#9;&#9;&#9;echo &#39;&#10060; [Error]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#19981;&#31526;&#21512;&#33529;&#26524; iOS9 &#23567;&#20110; 500 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;else&#10;&#9;&#9;&#9;echo &#39;&#11093;&#65039; [Success]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#31526;&#21512;&#33529;&#26524; iOS9 &#23567;&#20110; 500 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;fi&#10;&#9;else&#10;&#9;&#9;#&#20302;&#20110; iOS 7.0         80 MB     &#38024;&#23545;&#20108;&#36827;&#21046;&#25991;&#20214;&#20013;&#25152;&#26377;&#8220;__TEXT&#8221;&#37096;&#20998;&#30340;&#24635;&#21644;&#12290;&#10;&#9;&#9;if [ `echo &#34;$app_size &#62; 80&#34; | bc` -eq 1 ];then&#10;&#9;&#9;&#9;echo &#39;&#10060; [Error]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#19981;&#31526;&#21512;&#33529;&#26524; iOS7 &#23567;&#20110; 80 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;else&#10;&#9;&#9;&#9;echo &#39;&#11093;&#65039; [Success]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#31526;&#21512;&#33529;&#26524; iOS7 &#23567;&#20110; 80 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;fi&#10;&#9;fi&#10;else&#10;&#9;app_size=$(echo `size &#34;$ExecutableFilePath&#34; | awk &#39;&#123;print $1 &#34;,&#34; $10&#125;&#39; | tail -n +2`)&#10;&#9;# iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB&#10;&#9;# echo $app_size &#10;&#9;# 53329920,armv7) 57475072,arm64)&#10;&#9;arch_arr=(`echo $app_size | tr &#39; &#39; &#39; &#39;`) &#10;&#9;for each in $&#123;arch_arr[@]&#125;&#10;&#9;do&#10;&#9;&#9;size=`echo $each | awk -F&#39;,&#39; &#39;&#123;print $1&#125;&#39; | awk &#39;&#123;sum += $1&#125;; END &#123;print sum/1000/1000&#125;&#39;`&#10;&#9;&#9;arch=`echo $each | awk -F&#39;,&#39; &#39;&#123;print $2&#125;&#39;`&#10;&#9;&#9;# echo $&#123;arch/%)/&#125;  # &#22914;&#26524;&#23383;&#31526;&#20018;arch&#20197;)&#32467;&#23614;&#65292;&#21017;&#29992;&#31354;&#26367;&#25442;&#23427;&#10;&#9;&#9;echo $&#123;arch/%)/&#125; &#39;executable file size:&#39; $&#123;size&#125; &#39;MB&#39;&#10;&#9;&#9;if [ `echo &#34;$size &#62; 60&#34; | bc` -eq 1 ];then&#10;&#9;&#9;&#9;echo &#39;&#10060; [Error]&#39; $&#123;arch/%)/&#125; &#39;size:&#39; $&#123;size&#125; &#39;MB&#65292;&#39; &#39;&#19981;&#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;else&#10;&#9;&#9;&#9;echo &#39;&#11093;&#65039; [Success]&#39; $&#123;arch/%)/&#125; &#39;size:&#39; $&#123;size&#125; &#39;MB&#65292;&#39; &#39;&#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;fi&#10;&#9;done&#10;fi</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>本次脚本又顺利提高了效率！本文用到非常多的脚本命令，大家不必说记住，主要是知道用来做什么的，或者有需求时要搜索也可以，通过本次脚本编写，大家应该能发现shell脚本的强大而洁的语法，要学到以用，还需要多实践！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://help.apple.com/app-store-connect/#/dev611e0a21f" target="_blank" rel="external">最大构建版本文件大小 - App Store Connect 帮助</a></li>
<li><a href="https://blog.csdn.net/qq_19411159/article/details/75045114" target="_blank" rel="external">ipa上传app store的大小限制 - 逸轻紫的博客 - CSDN博客</a></li>
<li><a href="https://forums.developer.apple.com/thread/74705" target="_blank" rel="external">How can i reduce __TEXT segment size? |Apple Developer Forums</a></li>
<li><a href="https://stackoverflow.com/questions/43036810/how-can-i-reduce-text-segment-size-in-ios-app" target="_blank" rel="external">xcode - How can i reduce __TEXT segment size in iOS App? - Stack Overflow</a></li>
<li><a href="https://www.desgard.com/iosre-1/" target="_blank" rel="external">Mach-O 文件格式探索 · 瓜地</a></li>
<li><a href="https://stackoverflow.com/questions/22995744/how-to-measure-the-code-i-e-data-text-size-of-a-static-library/23301371#23301371" target="_blank" rel="external">ios - How to measure the code (i.e. data + text) size of a static library? - Stack Overflow</a></li>
<li><a href="https://opengers.github.io/linux/awk-format-print/" target="_blank" rel="external">awk文本处理实战 | opengers</a></li>
<li><a href="http://www.runoob.com/linux/linux-comm-tail.html" target="_blank" rel="external">Linux tail 命令 | 菜鸟教程</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Mebibyte" target="_blank" rel="external">Mebibyte - 维基百科，自由的百科全书</a></li>
<li><a href="https://blog.csdn.net/wetest_tencent/article/details/52624137" target="_blank" rel="external">iOS预审总被拒？腾讯教你提升iOS审核通过率！ - wetest_tencent的博客 - CSDN博客</a></li>
<li><a href="https://www.cnblogs.com/breezey/p/6806385.html" target="_blank" rel="external">shell比较浮点数和整数 - breezey - 博客园</a></li>
<li><a href="https://blog.csdn.net/Jerry_1126/article/details/83930956" target="_blank" rel="external">Shell中将分隔符的字符串转为数组的几种方法 - 杰瑞的专栏 - CSDN博客</a></li>
<li><a href="https://blog.csdn.net/wojiuguowei/article/details/84402890" target="_blank" rel="external">shell 字符串转数组 数组转字典 - 波波诸葛伟 - CSDN博客</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>在上传提交ipa文件成功后，发现AppStoreConnect后台一直不显示构建版本，最后邮箱收到：</p>
<blockquote>
<p>App Store Connect</p>
<p>Dear Developer,</p>
<p>We identified one or more issues with a recent delivery for your app, “XXX”. Please correct the following issues, then upload again.<br>Invalid Executable Size - The size of your app’s executable file ‘XXX.app/XXX’ is 90374144 bytes, which exceeds the maximum allowed size of 80 MB.<br>Best regards,<br>The App Store Team</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Architecture" scheme="https://iHTCboy.com/tags/Architecture/"/>
    
      <category term="__TEXT" scheme="https://iHTCboy.com/tags/TEXT/"/>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="iOS" scheme="https://iHTCboy.com/tags/iOS/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《商业模式新生代（个人篇）》读书笔记]]></title>
    <link href="https://iHTCboy.com/2019/03/03/2019-03-03_%E3%80%8A%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3%EF%BC%88%E4%B8%AA%E4%BA%BA%E7%AF%87%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2019/03/03/2019-03-03_《商业模式新生代（个人篇）》读书笔记/</id>
    <published>2019-03-03T14:49:16.000Z</published>
    <updated>2019-05-06T13:45:20.717Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>引用 推荐序：</p>
<blockquote>
<p>这世界越来越疯狂。对企业而言，顾客在变，供应商在变，竞争对手在变，企业在不停地变化。对于个人而言，环境在变，能力在变，兴趣在变，关系在变。这些变化多数都超越了大部分组织及个人的掌控范围。<br>因为无法改变整体大环境，组织及个人为了持续生存及发展，就必须不断评估及尝试改变自己的商业模式，有时甚至要创建新的模式。这是一个瞄准、射击、再瞄准的时代，我们需要适应快速变化的世界，以全新的思考方式来指导规划我们的人生。商业模式思维是适应快速变化世界的最佳系统思考方式。</p>
</blockquote>
<p>从上一篇 <a href="https://ihtcboy.com/2019/02/27/2019-02-27_《商业模式新生代》读书笔记/">《商业模式新生代》读书笔记</a> ，一直在理解商业模式，然而，对于企业，对于个人，模式从来都没有固定不变，所有东西在变化，而如果能抓住其中规律，那就能面对变化而不变？上一本书给了画布的9大构造块，其实已经给了相当于固定的规律，而能不能从这里面，找到属于自己不变，或者变化的，创意的，创新的世界，就是本书的愿景！</p>
<p>就像《摔跤吧！爸爸》里曾经的摔跤冠军辛格，女儿摔跤训练需要使用专业的护垫，去找体育局求赞助，结果被腐败官员拒绝。爸爸，因此难受，但是却被人一句话点醒，再专业的护垫依旧是垫子，为什么不能用普通的？因为一个问题想太久，可能被旁人一句话点醒，很多人都有这样的经历，关键是坚持想问题，不放弃，背后的原因是对信念的坚持。有时候，我也在想，腐败是现在，如果大家都一直，永远的，认为腐败，那么这个时代，后世界，也将如此。但只要有人保持，愿意相信，我也相信，世界也可以变得美好！</p>
<a id="more"></a>
<h3 id="思维导图">思维导图</h3><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-book-《商业模式新生代（个人篇）》思维导图.png" alt="20190303-book-《商业模式新生代（个人篇）》思维导图.png"></p>
<h3 id="画布">画布</h3><blockquote>
<p>学习如何利用关键工具描述分析组织和个人商业模式</p>
</blockquote>
<h4 id="商业模式思维：适应快速变化的世界">商业模式思维：适应快速变化的世界</h4><ul>
<li>理解和描述你的商业模式很重要</li>
<li>重新进行思考，对职业道路加以规划、积累和发展</li>
<li>独特的竞争优势</li>
</ul>
<h4 id="商业模式画布">商业模式画布</h4><blockquote>
<p>商业模式（business model） 指的是一个组织在财务上维持自给自足的方式，简而言之就是企业维持生存的方式。</p>
</blockquote>
<ul>
<li>商业模式<ul>
<li>（1）我们的客户是谁？</li>
<li>（2）客户需要我们完成哪些工作？</li>
</ul>
</li>
</ul>
<h4 id="商业模式的九大组成模块">商业模式的九大组成模块</h4><ul>
<li>客户群体<blockquote>
<p>客户群体是组织机构赖以生存的基础，没有付费客户，任何组织机构都无法长期生存。</p>
</blockquote>
</li>
</ul>
<ul>
<li>不同的客户群体需要不同的价值服务、渠道通路和客户关系。</li>
<li>客户群体有付费和免费之别。</li>
<li>同样是付费客户群体，对组织机构的收入贡献可能有天壤之别。</li>
</ul>
<ul>
<li>价值服务<blockquote>
<p>价值服务可以视为组织机构为客户群体提供的产品或服务利益。能否提供优质价值服务的能力是决定客户选择某个组织机构的重要原因。</p>
</blockquote>
</li>
</ul>
<ul>
<li>便利性</li>
<li>价格</li>
<li>设计</li>
<li>品牌或市场地位</li>
<li>成本削减</li>
<li>风险降低</li>
</ul>
<ul>
<li><p>渠道通路<br> 作用</p>
<ul>
<li>（1）创建对服务或产品的市场意识；</li>
<li>（2）帮助潜在客户评估产品或服务；</li>
<li>（3）促成客户采购；</li>
<li>（4）向客户交付价值；</li>
<li>（5）保证售后满意度。</li>
</ul>
</li>
<li><p>常见通路</p>
<ul>
<li>面谈或电话沟通；</li>
<li>现场或店内沟通；</li>
<li>实物交付；</li>
<li>电子交付（社交媒体、博客、电子邮件等）；</li>
<li>传统媒体交付（电视、广播、报纸等）。</li>
</ul>
</li>
<li><p>客户关系</p>
<blockquote>
<p>组织机构必须明确定义客户侧重的关系类型，是个性化、自动化还是自助式服务？是单次交易还是订购式服务？<br>组织机构还应当明确客户关系的基本目标，是为了吸引新客户、维持现有客户还是从现有客户群体中挖掘更多收入？</p>
</blockquote>
</li>
<li><p>收入来源<br>  前提:</p>
<ul>
<li>①弄清楚客户愿意为哪些价值服务付费；</li>
<li><p>②接受客户喜欢的支付方式。</p>
<p>分类:</p>
</li>
<li>①一次性收费；</li>
<li>②针对产品、服务、售后维修或支持等项目的连续性收费。</li>
</ul>
</li>
<li><p>核心资源</p>
<ul>
<li>人力资源</li>
<li>实体资产</li>
<li>知识资产</li>
<li>金融资产</li>
</ul>
</li>
<li><p>关键业务</p>
<blockquote>
<p>我们倾向于把组织机构的工作解释为任务，即关键业务 ，而非这些业务提供的价值 。不过，当客户在选择组织机构时，他们更感兴趣的是这些机构能提供哪些价值 ，而不是它们经营的业务本身。</p>
</blockquote>
<ul>
<li>制造</li>
<li>销售</li>
<li>支持</li>
</ul>
</li>
</ul>
<ul>
<li><p>重要合作</p>
<blockquote>
<p>重要合作指的是保证商业模式有效运行的人际关系。</p>
</blockquote>
</li>
<li><p>成本结构</p>
<blockquote>
<p>获得核心资源，实施关键业务，展开重要合作，这些都会让组织机构产生成本。</p>
</blockquote>
</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-商业模式的九大组成模块.jpg" alt="20190303-商业模式的九大组成模块.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-画布01.jpg" alt="20190303-画布01.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-画布02.jpg" alt="20190303-画布02.jpg"></p>
<h4 id="个人版商业模式画布">个人版商业模式画布</h4><h5 id="核心资源（我是谁，我拥有什么）">核心资源（我是谁，我拥有什么）</h5><ul>
<li><p>我是谁</p>
<ul>
<li>兴趣</li>
<li>技能</li>
<li>个性</li>
<li>价值观、智力水平、幽默感、教育程度、人生目的等</li>
</ul>
</li>
<li><p>我拥有什么</p>
<ul>
<li>知识</li>
<li>经验</li>
<li>人际关系</li>
<li>其他有形和无形的资源或资产</li>
</ul>
</li>
</ul>
<h5 id="关键业务（我要做什么）">关键业务（我要做什么）</h5><ul>
<li>日常工作中经常做的事情</li>
<li>列出你的工作任务</li>
</ul>
<h5 id="客户群体（我能帮助谁）">客户群体（我能帮助谁）</h5><ul>
<li>你的老板、上司以及其他向你支付报酬的人都在此列</li>
<li>是否在企业内部为他人服务？是否和同事密切合作？</li>
<li>谁依赖你的工作？谁会从你的工作中获益？</li>
</ul>
<h5 id="价值服务（我怎样帮助他人）">价值服务（我怎样帮助他人）</h5><ul>
<li>客户请我完成什么工作？</li>
<li>完成这些工作会给客户带来什么好处?</li>
<li>①只有确定价值服务才能宣传价值服务；</li>
<li>②只有宣传价值服务才能销售价值服务；</li>
<li>③只有销售价值服务才能赢得回报。</li>
</ul>
<h5 id="渠道通路（怎样宣传自己和交付服务）">渠道通路（怎样宣传自己和交付服务）</h5><ul>
<li>（1）潜在客户怎样才能知道你能帮助他们？</li>
<li>（2）潜在客户怎样才能决定是否购买你的产品或服务？</li>
<li>（3）潜在客户怎样实现购买？</li>
<li>（4）你怎样交付客户购买的产品或服务？</li>
<li>（5）你怎样保证满意的售后？</li>
</ul>
<h5 id="客户关系（怎样和对方打交道）">客户关系（怎样和对方打交道）</h5><ul>
<li>你和客户群体是怎样打交道的呢？</li>
<li>你喜欢面对面的直接沟通还是邮件书信之类的间接联系？</li>
<li>你们之间的合作关系是一锤子买卖还是持续性服务？</li>
<li>你关注的目标是扩大客户数量（拓展）还是满足现有客户的需求（维持）？</li>
</ul>
<h5 id="重要合作（谁可以帮我）">重要合作（谁可以帮我）</h5><ul>
<li>支持你的工作，帮助你顺利完成任务的人</li>
<li>提供行为动机、良好建议和成长机会。</li>
<li>提供完成某些任务所需的其他资源。包括工作中的同事和导师、职业圈内的成员、家人朋友和专业顾问</li>
</ul>
<h5 id="收入来源（我能得到什么）">收入来源（我能得到什么）</h5><ul>
<li>如工资、合同费或专业服务费、股票期权、版税以及其他现金收入。</li>
<li>收益内容，如健康保险、养老金、学费补助等。</li>
<li>还可以加入一些“软”收益，如满足感、成就感和社会贡献等</li>
</ul>
<h5 id="成本结构（我要付出什么）">成本结构（我要付出什么）</h5><ul>
<li>成本指的是你在工作中的付出，包括时间、精力和金钱。</li>
<li>无法返还的硬成本。培训费、交通费或社交费；服装费、水电费用。</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-个人版商业模式画布.jpg" alt="20190303-个人版商业模式画布.jpg"></p>
<h3 id="思考">思考</h3><blockquote>
<p>反思人生方向，协调个人期望和职业发展</p>
</blockquote>
<h4 id="我是谁">我是谁</h4><blockquote>
<p>“我们每个人的内心都深藏一个渴望，一个随着年华老去逐渐变成悲伤的渴望。我们每个人的渴望都与众不同，因为它正是长久以来我们希望把自己塑造成的模样。只有当我们做到听从内心的声音时，我们的人生才会充满意义和价值。”<br>——乔治·金德（George Kinder）</p>
</blockquote>
<h5 id="认识自我">认识自我</h5><ul>
<li>克里斯修改个人商业模式的过程<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-克里斯修改个人商业模式的过程.jpg" alt="20190303-克里斯修改个人商业模式的过程.jpg"></li>
</ul>
<h5 id="工作之外的生活">工作之外的生活</h5><ul>
<li>生活之轮<ul>
<li>保健健身</li>
<li>职业发展</li>
<li>财富金钱</li>
<li>个人成长</li>
<li>娱乐游戏</li>
<li>情感生活</li>
<li>亲戚朋友</li>
<li>创意表达</li>
<li>家居环境</li>
<li>生活方式</li>
</ul>
</li>
</ul>
<ul>
<li>生活之轮<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-生活之轮.jpg" alt="20190303-生活之轮.jpg"></li>
</ul>
<h5 id="回答“我是谁”">回答“我是谁”</h5><h5 id="寻找失去的兴趣">寻找失去的兴趣</h5><h5 id="多重角色">多重角色</h5><h5 id="多重画布">多重画布</h5><ul>
<li>克里斯蒂娜的个人商业模式 — 我是谁<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-克里斯蒂娜的个人商业模式-我是谁.jpg" alt="20190303-克里斯蒂娜的个人商业模式-我是谁.jpg"></li>
</ul>
<h5 id="生命线探索">生命线探索</h5><ul>
<li>第一步：绘制生命线高低潮</li>
<li>第二步：对事件进行说明</li>
<li>第三步：确定兴趣</li>
<li>第四步：描述技能</li>
<li>第五步：“十大”和“五爱”</li>
<li>第六步：明确能力和期望</li>
</ul>
<ul>
<li>生命线探索—职业“蜜罐区”<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-生命线探索---职业“蜜罐区”.jpg" alt="20190303-生命线探索---职业“蜜罐区”.jpg"></li>
</ul>
<h5 id="个性与环境">个性与环境</h5><h6 id="霍兰德的六种个性倾向">霍兰德的六种个性倾向</h6><ul>
<li><p>A　艺术型</p>
<blockquote>
<p>这种倾向喜欢利用有形或形材料创作艺术作品或产品，注重艺术、语言和音乐能力，应避免结构化活动或传统式职业。</p>
</blockquote>
</li>
<li><p>S　社交型</p>
<blockquote>
<p>这种倾向喜欢和他人合作以告知、开发、协助或消除问题，注重沟通和教育能力，应避免现实型职业或活动。</p>
</blockquote>
</li>
<li><p>I　学者型</p>
<blockquote>
<p>这种倾向喜欢调查研究自然、生物或文化现象，注重科研和数学能力，应避免事业型职业或活动。</p>
</blockquote>
</li>
<li><p>E　事业型</p>
<blockquote>
<p>这种倾向喜欢影响或领导他人以实现组织目标或经济利益，注重领导和说服能力，应避免学者型职业或活动。</p>
</blockquote>
</li>
<li><p>C　传统型</p>
<blockquote>
<p>这种倾向喜欢组织或处理结构化数据，注重文秘和计算能力，应避免模棱两可的、随意的、非结构化职业或活动。</p>
</blockquote>
</li>
<li><p>R　现实型</p>
<blockquote>
<p>这种倾向喜欢利用工具、机器或动物进行户外工作，注重机械和运动能力，应避免社交型职业或活动。</p>
</blockquote>
</li>
</ul>
<ul>
<li>霍兰德的六种个性倾向<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-霍兰德的六种个性倾向.jpg" alt="20190303-霍兰德的六种个性倾向.jpg"></li>
</ul>
<h5 id="确定你的个性倾向">确定你的个性倾向</h5><blockquote>
<p>思维抽象、擅长学术、易于接受、表达准确、事业感强、注重行动、适应性强、喜欢冒险、感情深厚、胆小怕事、进取心强、爱发牢骚、超然度外、野心勃勃、开心喜乐、善于分析、爱发脾气、讨人嫌弃、焦虑不安、善于感恩、担心忧虑、善于表达、窘迫惭愧、固执武断、精明机敏、爱摆架子、胆怯害羞、惹人讨厌、气量宽宏、商业派头、冷静镇定、无忧无虑、谨小慎微、有同情心、小心认真、三心二意、有号召力、容易上当、缺乏热情、善挖商机、效忠尽责、能力突出、有竞争力、非常自信、容易困惑、保守守旧、表里如一、容易满足、反应冷淡、善于合作、勇敢无畏、疯狂狂热、富有创意、值得信任、好奇心强、关注客户、大胆莽撞、坚决果断、容易击败、恭敬顺从、目中无人、深思熟虑、非常可靠、爱依赖人、情绪低落、注重细节、意志坚定、勤勉用功、圆滑世故、容易失落、自律性强、小心谨慎、趾高气扬、惊慌不安、条理性差、控制欲强、脚踏实地、精力充沛、悠闲自在、效率性高、影响深刻、感情用事、理解他人、精力旺盛、事业心强、满腔热情、与众不同、令人兴奋、自私自利、经验丰富、专家里手、立场坚定、态度灵活、做事专注、愚不可及、宽容大度、坦诚直率、待人友好、易受挫折、爱找乐子、慷慨大方、温文尔雅、阴郁沮丧、讨人喜欢、做事稳重、戒备心强、快乐开心、爱帮助人、无助无靠、充满敌意、易受羞辱、幽默风趣、歇斯底里、理想主义、想象丰富、缺乏耐心、容易冲动、优柔寡断、独立自主、漠不关心、个人主义、勤劳刻苦、影响力强、积极主动、善于创新、见解深刻、理智理性、善于内省、嫉妒心强、愉悦满足、目光敏锐、善解人意、知识渊博、胸无大志、轻率大意、知书达理、活泼好动、逻辑分明、迷失自我、充满爱心、忠心耿耿、就事论事、成熟稳重、井然有序、温和适中、爱惹麻烦、谦虚谨慎、动机强烈、客观公正、完全开放、一丝不苟、讲究条理、友好开朗、杰出卓越、过于敏感、惊弓之鸟、耐心细致、发火易怒、明察秋毫、感觉敏锐、不屈不挠、坚持不懈、循循善诱、开路先锋、洋洋自得、积极向上、注重实效、好管闲事、拘泥陈规、缺乏新意、注重隐私、先发制人、注重保护、自尊自豪、严格守时、爱提问题、头脑敏捷、安静腼腆、善于推理、被动反应、现实主义、喜欢沉思、易受否定、值得信赖、情绪放松、容易懊悔、愤世嫉俗、言行节制、能屈能伸、足智多谋、可靠负责、积极响应、勇担风险、忧愁郁闷、容易满足、怀疑成性、傲慢轻蔑、沉着自信、克己自制、严于律己、自我推动、独断专行、自以为是、感觉敏感、平静安宁、严肃认真、畏缩怕羞、轻浮愚蠢、真心实意、反应迟钝、喜欢交际、久经世故、悲伤痛苦、可怜遗憾、本能自发、扎实稳定、善于激励、直截了当、战略思维、坚强有力、功成名就、闷闷不乐、积极支持、大惊小怪、疑心重重、同情怜悯、机智圆滑、天赋异禀、滔滔不绝、注重任务、团队建设、团队参与、顽强不屈、软弱温柔、焦急紧张、纸上谈兵、麻木不仁、敏感易怒、细致周到、有条不紊、怯懦犹豫、大度宽容、做派传统、易中圈套、耀武扬威、相信他人、谦逊朴实、理解力强、独树一帜、犹豫不决、不同寻常、复仇心强、多才多艺、品行不端、精神饱满、不切实际、温暖热情、小心机警、软弱无力、固执任性、机智风趣、忧心忡忡</p>
</blockquote>
<h5 id="定义工作，解读自我">定义工作，解读自我</h5><h6 id="工作对你意味着什么">工作对你意味着什么</h6><ul>
<li><p>工作是发展方向</p>
<blockquote>
<p>将工作视为职业，这种观点的前提是工作者的动力源自于对成功、成就和身份地位的渴望。鲍迈斯特认为，此类工作者对工作的态度并不是热情眷恋，而是“强调努力工作对自我的回馈，对职业型工作者来说，工作是一种创造、定义、表达、证明和美化自我的方式”。将工作视为发展方向是实现人生意义和获得满足感的一个重要来源。</p>
</blockquote>
</li>
<li><p>工作是使命召唤</p>
<blockquote>
<p>如下面案例中卡罗尔的经历所示，“天职”这个词源自于“天将降大任于斯人也”这一理念。这种“天意”可以是外在动力，如上帝旨意或社区需要；也可以是内在动力，如需要向世人展现的天赋使命。鲍迈斯特称，这种工作强调的是“个人的义务、责任或命运”。<br>除了上述三种传统的工作定义外，我们认为还有第四种定义，即工作是自我实现。</p>
</blockquote>
</li>
<li><p>工作是自我实现</p>
<blockquote>
<p>对这种观点最好的解释是，它一方面体现了工作高度强调兴趣驱动的特征，另一方面淡化了咄咄逼人的“天命”特征。追求自我实现的工作者会选择不同寻常的职业道路，这些选择强调的是个人兴趣而非经济回报或名声威望。这种思考方式也是获得人生意义的一个重要来源。</p>
</blockquote>
</li>
</ul>
<h6 id="给缺乏信心者的建议">给缺乏信心者的建议</h6><h6 id="你平时有哪些爱好？">你平时有哪些爱好？</h6><h5 id="我的人生目标是什么">我的人生目标是什么</h5><h6 id="明确你的人生目标">明确你的人生目标</h6><ul>
<li>我的封面故事</li>
</ul>
<blockquote>
<pre><code>它能激发我们的想象力，帮助练习者在个人目标和主要兴趣之间建立关联。
这是哪家媒体？选择一份你喜欢的杂志、报纸或电视节目。
</code></pre><p>这篇报道讲的什么内容？为什么有你的特写报道？<br>    写下媒体在访谈中引用你的话语。你可以做出引用内容、补充报道、杂志照片或图表，把它们拼成一幅媒体快照。</p>
</blockquote>
<ul>
<li>三个问题</li>
</ul>
<blockquote>
<p>回想一下你曾经感到过满足的情形（参考此处 的生命线练习以帮助回忆），当时你做了些什么？你为什么感觉非常良好？尽可能准确地描述你当时经历的情况。<br>举出一两个你的人生偶像。你最佩服谁？为什么？用几个词描绘一下这个人。例如，我们的一位论坛成员说纳尔逊·曼德拉是她的偶像。在做这个练习时，她对偶像的描述是“善良、面对逆境时坚持不懈、名誉和地位”，这些词暗示出她对自我和他人最看重的品质。<br>你希望朋友们怎样缅怀你？假设你已经不在人世，你希望别人用怎样的表达纪念你？</p>
</blockquote>
<ul>
<li>我的新生活</li>
</ul>
<blockquote>
<p>第一年，第一项任务<br>你应当利用这一年学习新东西。你不可以到大学院校学习，也不能参加任何正式教育，只能利用你的时间和精力专注于掌握一项新知识。你会怎么做？你该怎样发展自己？<br>第二年，第二项任务<br>找到一个可以支持的目标。你有一年的时间去调查、参与和选择一个关注的目标或项目，一个有助于改善民生的目标或项目（如改善社区、城市、国家、世界、自然环境等）。 </p>
</blockquote>
<h6 id="目标声明">目标声明</h6><ul>
<li><p>活动</p>
<blockquote>
<p>说明你最喜欢从事的3～4项活动。</p>
</blockquote>
</li>
<li><p>伙伴</p>
<blockquote>
<p>说明你希望和哪些人或哪些群体一起打发时间。</p>
</blockquote>
</li>
<li><p>支持</p>
<blockquote>
<p>你会怎样帮助他人？用3～4个动词具体说明你是怎样帮助他人的。</p>
</blockquote>
</li>
</ul>
<h6 id="实践你的目标">实践你的目标</h6><ul>
<li>目标声明的内容是不断变化的</li>
<li>目标和目的之别</li>
<li>决定性测验</li>
</ul>
<h3 id="修订">修订</h3><blockquote>
<p>利用画布和个人分析调整或重建你的工作生活</p>
</blockquote>
<h4 id="准备好调整自己">准备好调整自己</h4><ul>
<li>改变你的观点</li>
<li>当人类思考时，重构事实可以改变现实</li>
<li>超越你的思维模式</li>
<li>构思更美好的现实</li>
</ul>
<h4 id="重新设计个人版商业模式">重新设计个人版商业模式</h4><ol>
<li>按照对自己最新的了解设计个人商业模式</li>
<li>指出你的软肋</li>
<li>询问诊断性问题<ul>
<li>我是谁，我拥有什么（核心资源） </li>
<li>我要做什么（关键业务）</li>
<li>我能帮助谁（客户群体）</li>
<li>我怎样帮助他人（价值服务）</li>
<li>怎样宣传自己和交付服务（渠道通路）</li>
<li>怎样和对方打交道（客户关系）</li>
<li>谁可以帮我（重要合作）</li>
<li>我能得到什么（收入来源）</li>
<li>我要付出什么（成本结构）</li>
</ul>
</li>
<li>修改模块并评估效果</li>
<li>重设商业模式</li>
</ol>
<h3 id="行动">行动</h3><blockquote>
<p>让我们付诸实践</p>
</blockquote>
<h4 id="计算你的商业价值">计算你的商业价值</h4><h5 id="工资单的秘密">工资单的秘密</h5><h5 id="利润和收入">利润和收入</h5><ul>
<li>利润表<ul>
<li>①挣到的钱；销售所得</li>
<li>②花出的钱；费用开支</li>
<li>③到手的钱。经营收入</li>
</ul>
</li>
<li>销售所得－费用开支＝经营收入</li>
</ul>
<h5 id="企业支出分析">企业支出分析</h5><ul>
<li>实得工资（到手的钱）的真正含义</li>
<li>关于商业经营的惊人事实</li>
</ul>
<h5 id="计算你的价值">计算你的价值</h5><ul>
<li>员工工资的实现方式取决于客户</li>
<li>确定你的价值</li>
<li>为什么经营成本如此之高</li>
<li>你对组织机构的价值</li>
</ul>
<h5 id="需要牢记的内容">需要牢记的内容</h5><ul>
<li>所得：即挣到的钱</li>
<li>费用：即花出的钱</li>
<li>收入或利润：即挣到的钱和花出的钱的差额，等同于利润</li>
<li>利润表：是指定期对组织机构收支状况所做的总结，通常3个月或1年总结一次</li>
<li>销售所得：指销售产品或服务实现的收入</li>
<li>收益：指销售加利息收入、租赁收入、版税收入和其他被动收入</li>
<li>毛利或盈余：指销售收入扣减产品或服务销售成本后所得（通常以销售额百分比形式体现）</li>
<li>产品成本或销售成本：指产品或服务销售方的直接成本。</li>
<li>盈亏平衡：指收入所得等于费用支出。</li>
<li>全额（工资）成本：指除工资之外，包括健康保险、退休金、各州保险或税捐等项目在内的员工工资全面成本。</li>
</ul>
<h5 id="在市场中测试你的商业模式">在市场中测试你的商业模式</h5><ul>
<li>你的商业模式是否和客户需求吻合</li>
<li>如何测试商业模式</li>
<li>验证每个模块中的假设</li>
<li>自信面对未来</li>
</ul>
<ul>
<li>画布中的每个模块都必须经过客户测试<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-画布中的每个模块都必须经过客户测试.jpg" alt="20190303-画布中的每个模块都必须经过客户测试.jpg"></li>
</ul>
<h5 id="结束语">结束语</h5><blockquote>
<p>职业变化有时候是在不知不觉中出现的。当组织机构修订其商业模式时，员工通常也必须调整个人商业模式。</p>
</blockquote>
<h3 id="总结">总结</h3><p>本来是打算写一下各章节的总结，但是发现再添加，就是画蛇添足，文章已经简单易懂、步骤分明，是我读取的非常优秀的书本，不带功利，只求实际，虽然我读书不是很多。重点要是说一下，书本反复强调，不要把关键业务当成价值服务，文中列举了很多例子，比如把日文翻译成英文法律文件的工作，不要把自己能给客户的价值简单的看成翻译工作，因为翻译只是关键业务，不是真正带给客户价值的价值服务！真正的价值是翻译后的文件带来的证据和最后的胜诉。其实，从上文中的个人画布中，也能看出来，关键业务+核心资源 指向 价值服务，希望每个人都思考一下，自己的价值服务到底是什么，这样才更有利于自己对自己的清晰认识，定位更具体和更有效的目标，从而给客户提供最好的价值，实现最好的收入来源！</p>
<p>这本书是《商业模式新生代》的续集，还不如说是升级版本，可以说个人篇不只是企业版的升级，而是升华，对于个人，应该也要像经营企业一样，所以，画布的9大模块也适配于个人，书中给了非常详细方法实践论和宝贵的案例，应该能够解答自己和大家对于人生目标的一些答案吧！</p>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
<p><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>引用 推荐序：</p>
<blockquote>
<p>这世界越来越疯狂。对企业而言，顾客在变，供应商在变，竞争对手在变，企业在不停地变化。对于个人而言，环境在变，能力在变，兴趣在变，关系在变。这些变化多数都超越了大部分组织及个人的掌控范围。<br>因为无法改变整体大环境，组织及个人为了持续生存及发展，就必须不断评估及尝试改变自己的商业模式，有时甚至要创建新的模式。这是一个瞄准、射击、再瞄准的时代，我们需要适应快速变化的世界，以全新的思考方式来指导规划我们的人生。商业模式思维是适应快速变化世界的最佳系统思考方式。</p>
</blockquote>
<p>从上一篇 <a href="https://ihtcboy.com/2019/02/27/2019-02-27_《商业模式新生代》读书笔记/">《商业模式新生代》读书笔记</a> ，一直在理解商业模式，然而，对于企业，对于个人，模式从来都没有固定不变，所有东西在变化，而如果能抓住其中规律，那就能面对变化而不变？上一本书给了画布的9大构造块，其实已经给了相当于固定的规律，而能不能从这里面，找到属于自己不变，或者变化的，创意的，创新的世界，就是本书的愿景！</p>
<p>就像《摔跤吧！爸爸》里曾经的摔跤冠军辛格，女儿摔跤训练需要使用专业的护垫，去找体育局求赞助，结果被腐败官员拒绝。爸爸，因此难受，但是却被人一句话点醒，再专业的护垫依旧是垫子，为什么不能用普通的？因为一个问题想太久，可能被旁人一句话点醒，很多人都有这样的经历，关键是坚持想问题，不放弃，背后的原因是对信念的坚持。有时候，我也在想，腐败是现在，如果大家都一直，永远的，认为腐败，那么这个时代，后世界，也将如此。但只要有人保持，愿意相信，我也相信，世界也可以变得美好！</p>]]>
    
    </summary>
    
      <category term="商业模式新生代" scheme="https://iHTCboy.com/tags/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3/"/>
    
      <category term="读书笔记" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读后感" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="life" scheme="https://iHTCboy.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《商业模式新生代》读书笔记]]></title>
    <link href="https://iHTCboy.com/2019/02/27/2019-02-27_%E3%80%8A%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2019/02/27/2019-02-27_《商业模式新生代》读书笔记/</id>
    <published>2019-02-27T00:49:16.000Z</published>
    <updated>2019-05-06T13:43:26.036Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>今年读的第一本书，时间节奏快，还是要在细细读第二次！非常优秀的实践指导书，值得每一个创业者，都读一下，不管是已经创业失败，还是准备创业，或者正在创业的小伙伴们，都赶紧来读读吧！</p>
<h3 id="框架">框架</h3><p>读一本书，不是为了知识而知识，需要总结或吸收书中的知识框架，以便成为自己的知识体系！</p>
<a id="more"></a>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-book-《商业模式新生代》-思维导图.png" alt="20190227-book-《商业模式新生代》-思维导图.png"></p>
<h3 id="画布_canvas">画布 canvas</h3><h4 id="9个构造块_Building_Blocks">9个构造块 Building Blocks</h4><ol>
<li><p>CS 客户细分（Customer Segments）</p>
<blockquote>
<p>企业或机构所服务的一个或多个客户分类群体。</p>
</blockquote>
<ul>
<li>大众市场（Mass market）</li>
<li>利基市场（Niche market）</li>
<li>区隔化市场（Segmented）</li>
<li>多元化市场（Diversified）</li>
<li>多边平台或多边市场（Multi-sided platforms/multi-sided markets）</li>
</ul>
</li>
<li><p>VP 价值主张（Value Propositions）</p>
<blockquote>
<p>通过价值主张来解决客户难题和满足客户需求。</p>
</blockquote>
<ul>
<li>新颖（Newness）</li>
<li>定制化（Customization）</li>
<li>设计（Design）</li>
<li>品牌/身份地位（Brand/status）</li>
<li>价格（Price）</li>
<li>成本削减（Cost reduction）</li>
<li>风险抑制（Risk reduction）</li>
<li>可达性（Accessibility）</li>
<li>便利性/可用性（Convenience/usability）</li>
</ul>
</li>
<li><p>CH 渠道通路（Channels）</p>
<blockquote>
<p>通过沟通、分销和销售渠道向客户传递价值主张。</p>
</blockquote>
<ul>
<li>渠道类型<ul>
<li>自有渠道<ul>
<li>销售团队</li>
<li>在线销售</li>
<li>自有店铺</li>
</ul>
</li>
<li>合作伙伴渠道 （非直接渠道）<ul>
<li>合作伙伴店铺</li>
<li>批发商</li>
</ul>
</li>
</ul>
</li>
<li><p>渠道阶段</p>
<ul>
<li>认知</li>
<li>评估</li>
<li>购买</li>
<li>传递</li>
<li>售后</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-01-渠道通路.jpg" alt="20190227-01-渠道通路.jpg"></p>
</li>
</ul>
</li>
<li><p>CR 客户关系（Customer Relationships）</p>
<blockquote>
<p>在每一个客户细分市场建立和维系客户关系。</p>
</blockquote>
<ul>
<li>动机驱动<ul>
<li>客户获取</li>
<li>客户维系</li>
<li>提升销售额（追加销售）</li>
</ul>
</li>
<li>类型<ul>
<li>个人助理（Personal assistance）</li>
<li>专用个人助理（Dedicated personal assistance）</li>
<li>自助服务（Self-service）</li>
<li>自动化服务（Automated services）</li>
<li>社区（Communities）</li>
<li>共同创作（Co-creation）</li>
</ul>
</li>
</ul>
</li>
<li><p>R$ 收入来源（Revenue Streams）</p>
<blockquote>
<p>收入来源产生于成功提供给客户的价值主张。</p>
</blockquote>
<ul>
<li>资产销售（Asset sale）</li>
<li>使用收费（Usage fee）</li>
<li>订阅收费（Subscription fees）</li>
<li>租赁收费（Lending/Renting/Leasing）</li>
<li>授权收费（Licensing）</li>
<li>经纪收费（Brokerage fees）</li>
<li>广告收费（Advertising）</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-02-收入来源-定价机制.jpg" alt="20190227-02-收入来源-定价机制.jpg"></p>
</li>
</ol>
<ol>
<li><p>KR 核心资源（Key Resources）</p>
<blockquote>
<p>核心资源是提供和交付先前描述要素所必备的重要资产…</p>
</blockquote>
<ul>
<li>实体资产（Physical）</li>
<li>知识资产（Intellectual）</li>
<li>人力资源（Human）</li>
<li>金融资产（Financial）</li>
</ul>
</li>
<li><p>KA 关键业务（Key Activities）</p>
<blockquote>
<p>通过执行一些关键业务活动，运转商业模式。</p>
</blockquote>
<ul>
<li>制造产品（Production）</li>
<li>问题解决（Problem solving）</li>
<li>平台/网络 （Platform/network）</li>
</ul>
</li>
<li><p>KP 重要合作（Key Partnership）</p>
<blockquote>
<p>有些业务要外包，而另外一些资源需要从企业外部获得。</p>
</blockquote>
<ul>
<li>类型<ul>
<li>在非竞争者之间的战略联盟关系；</li>
<li>竞合：在竞争者之间的战略合作关系；</li>
<li>为开发新业务而构建的合资关系；</li>
<li>为确保可靠供应的购买方—供应商关系。</li>
</ul>
</li>
<li>动机<ul>
<li>商业模式的优化和规模经济的运用</li>
<li>风险和不确定性的降低</li>
<li>特定资源和业务的获取</li>
</ul>
</li>
</ul>
</li>
<li><p>C$ 成本结构（Cost Structure）</p>
<blockquote>
<p>商业模式上述要素所引发的成本构成。</p>
</blockquote>
<ul>
<li>类型<ul>
<li>成本驱动（Cost-driven）</li>
<li>价值驱动（Value-driven）</li>
</ul>
</li>
<li>特点<ul>
<li>固定成本（Fixed costs）</li>
<li>可变成本（Variable costs）</li>
<li>规模经济（Economies of scale）</li>
<li>范围经济（Economies of scope）</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>这9个商业模式构造块组成了构建商业模式便捷工具的基础，这个工具我们称之为商业模式画布（Business Model Canvas）。</p>
<h4 id="商业模式画布（Business_Model_Canvas）">商业模式画布（Business Model Canvas）</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-03-商业模式画布.jpg" alt="20190227-03-商业模式画布.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-03-商业模式画布2.jpg" alt="20190227-03-商业模式画布2.jpg"></p>
<h3 id="式样_patterns">式样 patterns</h3><ul>
<li>非绑定式商业模式</li>
<li>长尾式商业模式</li>
<li>多边平台式商业模式</li>
<li>免费式商业模式</li>
<li>开放式商业模式</li>
</ul>
<h4 id="非绑定式商业模式">非绑定式商业模式</h4><blockquote>
<p>“非绑定”企业的概念认为，存在三种不同的基本业务类型：客户关系型业务、产品创新型业务和基础设施型业务。每种类型都包含不同的经济驱动因素、竞争驱动因素和文化驱动因素。这三种类型可能同时存在于一家公司里，但是理论上这三种业务“分离”成独立的实体，以便避免冲突或不利的权衡妥协。</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-04-三种核心的业务类型.jpg" alt="20190227-04-三种核心的业务类型.jpg"></p>
<ul>
<li>私人银行商业模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-04-私人银行商业模式.jpg" alt="20190227-04-私人银行商业模式.jpg"></li>
</ul>
<h4 id="长尾式商业模式">长尾式商业模式</h4><blockquote>
<p>长尾式商业模式的核心是多样少量：他们关注于为利基市场提供大量产品，每种产品相对而言卖得都少。利基产品销售总额可以与凭借少量畅销产品产生绝大多数销售额的传统模式相媲美。长尾模式需要低库存成本和强大的平台，并使得利基产品对于兴趣买家来说容易获得。</p>
</blockquote>
<ul>
<li>乐高工厂：客户设计（玩具）套件<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-05-乐高工厂：客户设计（玩具）套件.jpg" alt="20190227-05-乐高工厂：客户设计（玩具）套件.jpg"></li>
</ul>
<p>乐高<br>＋<br>乐高的用户可以自己设计产品并在线订购<br>＝<br>乐高工厂<br>＋<br>乐高允许用户销售自己设计的产品<br>＝<br>乐高的用户产品目录</p>
<h4 id="多边平台式商业模式">多边平台式商业模式</h4><blockquote>
<p>多边平台将两个或者更多有明显区别但又相互依赖的客户群体集合在一起。<br>只有相关客户群体同时存在的时候，这样的平台才具有价值。多边平台通过促进各方客户群体之间的互动来创造价值。多边平台需要提升其价值，直到它达到可以吸引更多用户的程度，这种现象被称为网络效应。</p>
</blockquote>
<ul>
<li><p>Google的商业模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-06-Google的商业模式.jpg" alt="20190227-06-Google的商业模式.jpg"></p>
</li>
<li><p>任天堂 Wii 对决PSP/Xbox<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-07-任天堂 Wii 对决PSP、Xbox-01.jpg" alt="20190227-07-任天堂 Wii 对决PSP、Xbox-01.jpg"></p>
</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-07-任天堂 Wii 对决PSP、Xbox-02.jpg" alt="20190227-07-任天堂 Wii 对决PSP、Xbox-02.jpg"></p>
<h4 id="免费式商业模式">免费式商业模式</h4><blockquote>
<p>免费，在免费式商业模式中，至少有一个庞大的客户细分群体可以享受持续的免费服务。免费服务可以来自多种模式。通过该商业模式的其他部分或其他客户细分群体，给非付费客户细分群体提供财务支持。</p>
</blockquote>
<ul>
<li><p>Metro<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Metro.jpg" alt="20190227-08-免费式商业模式-Metro.jpg"></p>
</li>
<li><p>Flickr<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Flickr.jpg" alt="20190227-08-免费式商业模式-Flickr.jpg"></p>
</li>
<li><p>Red Hat<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-RedHat.jpg" alt="20190227-08-免费式商业模式-RedHat.jpg"></p>
</li>
<li><p>Skype<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Skype-01.jpg" alt="20190227-08-免费式商业模式-Skype-01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Skype-02.jpg" alt="20190227-08-免费式商业模式-Skype-02.jpg"></p>
</li>
<li><p>REGA<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-REGA.jpg" alt="20190227-08-免费式商业模式-REGA.jpg"></p>
</li>
<li><p>免费移动电话的诱钓模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-免费移动电话的诱钓模式.jpg" alt="20190227-08-免费式商业模式-免费移动电话的诱钓模式.jpg"></p>
</li>
<li><p>剃刀与刀片：吉列<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-剃刀与刀片：吉列.jpg" alt="20190227-08-免费式商业模式-剃刀与刀片：吉列.jpg"></p>
</li>
</ul>
<h4 id="开放式商业模式">开放式商业模式</h4><blockquote>
<p>开放式商业模式可以用于那些通过与外部伙伴系统性合作，来创造和捕捉价值的企业。这种模式可以是“由外到内”，将外部的创意引入到公司内部，也可以是“由内到外”，将企业内部闲置的创意和资产提供给外部伙伴。</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-09-开放式商业模式-创新的原则.jpg" alt="20190227-09-开放式商业模式-创新的原则.jpg"></p>
<ul>
<li>Innocentive<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-09-开放式商业模式-Innocentive.jpg" alt="20190227-09-开放式商业模式-Innocentive.jpg"></li>
</ul>
<h4 id="式样总览">式样总览</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-10-式样总览01.jpg" alt="20190227-10-式样总览01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-10-式样总览02.jpg" alt="20190227-10-式样总览02.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-10-式样总览03.jpg" alt="20190227-10-式样总览03.jpg"></p>
<h3 id="设计">设计</h3><blockquote>
<p>商业模式设计方法</p>
</blockquote>
<ul>
<li>客户洞察</li>
<li>创意构思</li>
<li>可视思考</li>
<li>原型制作</li>
<li>故事讲述</li>
<li>情景推测</li>
</ul>
<h4 id="客户洞察">客户洞察</h4><ul>
<li>移情图</li>
</ul>
<blockquote>
<p>移情图（empathy map，感同身受之意）</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-11-移情图.jpg" alt="20190227-11-移情图.jpg"></p>
<p>1.她看到的是什么？</p>
<blockquote>
<p>描述客户在她的环境里看到了什么</p>
</blockquote>
<pre><code><span class="bullet">* </span>环境看起来像什么？
<span class="bullet">* </span>谁在她周围？
<span class="bullet">* </span>谁是她的朋友？
<span class="bullet">* </span>她每天接触什么类型的产品或服务（相对于所有市场产品或服务）？
<span class="bullet">* </span>她遭遇的问题是什么？
</code></pre><p>2.她听到的是什么？</p>
<blockquote>
<p>描述客户所处环境是如何影响客户的</p>
</blockquote>
<pre><code><span class="bullet">* </span>她的朋友说什么？她的配偶呢？
<span class="bullet">* </span>谁能真正影响她？如何影响？
<span class="bullet">* </span>哪些媒体渠道能影响她？
</code></pre><p>3.她真正的想法和感觉是什么？</p>
<blockquote>
<p>设法概述你的客户所想的是什么</p>
</blockquote>
<ul>
<li>对她来说，什么是最重要的（她可能不公开说）？</li>
<li>想象一下她的情感。</li>
<li>什么能感动她？</li>
<li>什么能让她失眠？</li>
<li>尝试着描述她的梦想和愿望。</li>
</ul>
<p>4.她说些什么又做些什么？</p>
<blockquote>
<p>想象这位客户可能会说什么或者在公开场合可能的行为</p>
</blockquote>
<pre><code><span class="bullet">* </span>她的态度是什么？
<span class="bullet">* </span>她会给别人讲什么？
<span class="bullet">* </span>要特别留意在客户所说和她真正想法与感受之间的潜在冲突。
</code></pre><p>5.这个客户的痛苦是什么？</p>
<pre><code><span class="bullet">* </span>她最大的挫折是什么？
<span class="bullet">* </span>在她和她想要事物或需要达到的目标之间有什么障碍？
<span class="bullet">* </span>她会害怕承担哪些风险？
</code></pre><p>6.这个客户想得到什么？</p>
<pre><code><span class="bullet">* </span>她真正想要和希望达到的是什么？
<span class="bullet">* </span>她如何衡量成功？
<span class="bullet">* </span>猜想一些她可能用来实现其目标的策略。
</code></pre><h4 id="创意构思">创意构思</h4><ul>
<li>资源驱动</li>
<li>产品/服务驱动</li>
<li>客户驱动</li>
<li>财务驱动</li>
<li>多中心驱动</li>
</ul>
<h5 id="创意构思的过程">创意构思的过程</h5><ol>
<li>团队构成</li>
<li>全情投入</li>
<li>扩展</li>
<li>条件筛选</li>
<li>“原型制作”</li>
</ol>
<h5 id="一个多样化的商业模式创新团队的成员应该">一个多样化的商业模式创新团队的成员应该</h5><ul>
<li>来自不同业务部门</li>
<li>年龄不同</li>
<li>具备不同领域的专业技能</li>
<li>有不同层次的资历</li>
<li>拥有不同经验阅历</li>
<li>来自不同文化背景</li>
</ul>
<h5 id="头脑风暴的规则">头脑风暴的规则</h5><ul>
<li>保持聚焦</li>
<li>执行规则</li>
<li>可视思考</li>
<li>做好准备</li>
</ul>
<h4 id="可视思考">可视思考</h4><ul>
<li>通过便利贴实现视觉化</li>
<li>通过绘图来实现视觉化</li>
<li>理解本质</li>
<li>促进对话</li>
<li>探索创意</li>
<li>促进交流</li>
<li>针对不同需求的不同类型的视觉化</li>
</ul>
<h4 id="原型制作">原型制作</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-12-原型制作01.jpg" alt="20190227-12-原型制作01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-12-原型制作02.jpg" alt="20190227-12-原型制作02.jpg"></p>
<h4 id="故事讲述">故事讲述</h4><h4 id="情景推测">情景推测</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-13-情景推测01.jpg" alt="20190227-13-情景推测01.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-13-情景推测02.jpg" alt="20190227-13-情景推测02.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-13-情景推测03.jpg" alt="20190227-13-情景推测03.jpg"></p>
<h3 id="战略">战略</h3><ul>
<li>商业模式环境</li>
<li>评估商业模式</li>
<li>商业模式视角下的蓝海战略</li>
<li>管理多个商业模式</li>
</ul>
<h4 id="商业模式环境">商业模式环境</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境.jpg" alt="20190227-14-商业模式环境.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-市场影响因素-市场分析.jpg" alt="20190227-14-商业模式环境-市场影响因素-市场分析.jpg"></p>
<ul>
<li>制药行业环境分析<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析01.jpg" alt="20190227-14-商业模式环境-制药行业环境分析01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析02.jpg" alt="20190227-14-商业模式环境-制药行业环境分析02.jpg"></li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析03.jpg" alt="20190227-14-商业模式环境-制药行业环境分析03.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析04.jpg" alt="20190227-14-商业模式环境-制药行业环境分析04.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析05.jpg" alt="20190227-14-商业模式环境-制药行业环境分析05.jpg"></p>
<h4 id="评估商业模式">评估商业模式</h4><ul>
<li><p>亚马逊在2005年的主要优势和劣势<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-15-亚马逊在2005年的主要优势和劣势.jpg" alt="20190227-15-亚马逊在2005年的主要优势和劣势.jpg"></p>
</li>
<li><p>亚马逊在2006年探索到的机会：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-15-亚马逊在2006年探索到的机会.jpg" alt="20190227-15-亚马逊在2006年探索到的机会.jpg"></p>
</li>
<li><p>详尽地SWOT评估每一个构造块<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-15-详尽地SWOT评估每一个构造块.jpg" alt="20190227-15-详尽地SWOT评估每一个构造块.jpg"></p>
</li>
</ul>
<h4 id="商业模式视角下的蓝海战略">商业模式视角下的蓝海战略</h4><p>金和莫博涅提出了他们称之为“四项行动架构”的分析工具<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-四项行动架构.jpg" alt="20190227-16-四项行动架构.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-价值创意.jpg" alt="20190227-16-价值创意.jpg"></p>
<ul>
<li><p>在商业模式画布中融入蓝海战略框架<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-在商业模式画布中融入蓝海战略框架.jpg" alt="20190227-16-在商业模式画布中融入蓝海战略框架.jpg"></p>
</li>
<li><p>太阳马戏团（Cirque Du Soleil）<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-太阳马戏团（Cirque Du Soleil）01.jpg" alt="20190227-16-太阳马戏团（Cirque Du Soleil）01.jpg"></p>
</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-太阳马戏团（Cirque Du Soleil）02.jpg" alt="20190227-16-太阳马戏团（Cirque Du Soleil）02.jpg"><br>来源：改编自《蓝海战略》</p>
<ul>
<li><p>任天堂的wii<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-任天堂的wii-01.jpg" alt="20190227-16-任天堂的wii-01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-任天堂的wii-02.jpg" alt="20190227-16-任天堂的wii-02.jpg"></p>
</li>
<li><p>用“四项行动构架”来质疑你的商业模式画布<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-用“四项行动构架”来质疑你的商业模式画布.jpg" alt="20190227-16-用“四项行动构架”来质疑你的商业模式画布.jpg"></p>
</li>
</ul>
<h4 id="管理多个商业模式">管理多个商业模式</h4><ul>
<li><p>瑞表（SMH）为斯沃琪（Swatch）选择独立模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-17-瑞表（SMH）为斯沃琪（Swatch）选择独立模式.jpg" alt="20190227-17-瑞表（SMH）为斯沃琪（Swatch）选择独立模式.jpg"></p>
</li>
<li><p>雀巢咖啡业务的商业模式组合<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-17-雀巢咖啡业务的商业模式组合.jpg" alt="20190227-17-雀巢咖啡业务的商业模式组合.jpg"></p>
</li>
<li><p>戴姆勒的“随租随行”（CAR2GO）商业模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-17-戴姆勒的“随租随行”（CAR2GO）商业模式.jpg" alt="20190227-17-戴姆勒的“随租随行”（CAR2GO）商业模式.jpg"></p>
</li>
</ul>
<h3 id="流程">流程</h3><ul>
<li>商业模式设计流程</li>
<li>设计理念</li>
<li>5 个阶段</li>
</ul>
<h4 id="商业模式设计流程">商业模式设计流程</h4><p>商业模式的创新有四大目标：</p>
<ul>
<li>（1）满足被忽视的市场需求；</li>
<li>（2）把新技术、产品和服务推向市场；</li>
<li>（3）通过一个更好的商业模式来改进、颠覆或变革现有的市场；</li>
<li>（4）创造一个全新的市场。</li>
</ul>
<p>挑战</p>
<ul>
<li>找出合适的模式</li>
<li>全面上市之前进行测试模式</li>
<li>推动市场接受新的模式</li>
<li>结合市场反馈，持续不断地调整模式</li>
<li>管理不确定因素</li>
</ul>
<h4 id="设计理念">设计理念</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-18-设计理念.jpg" alt="20190227-18-设计理念.jpg"></p>
<h4 id="5_个阶段">5 个阶段</h4><blockquote>
<p>5个阶段：动员、理解、设计、实施、管理</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-19-5个阶段：动员、理解、设计、实施、管理-01.jpg" alt="20190227-19-5个阶段：动员、理解、设计、实施、管理-01.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-19-5个阶段：动员、理解、设计、实施、管理-02.jpg" alt="20190227-19-5个阶段：动员、理解、设计、实施、管理-02.jpg"></p>
<h3 id="展望">展望</h3><ul>
<li>不以赢利为目的的商业模式</li>
<li>电脑辅助商业模式设计</li>
<li>商业模式和商业计划书<ul>
<li>团队</li>
<li>商业模式</li>
<li>财务分析</li>
<li>外部环境</li>
<li>实施路线图</li>
<li>风险分析</li>
</ul>
</li>
<li>在企业中实施商业模式<ul>
<li>战略</li>
<li>结构</li>
<li>流程</li>
<li>激励</li>
<li>人员</li>
</ul>
</li>
<li>IT 系统配合业务</li>
</ul>
<h4 id="不以赢利为目的的商业模式">不以赢利为目的的商业模式</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-20-不以赢利为目的的商业模式-01.jpg" alt="20190227-20-不以赢利为目的的商业模式-01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-20-不以赢利为目的的商业模式-02.jpg" alt="20190227-20-不以赢利为目的的商业模式-02.jpg"></p>
<h4 id="电脑辅助商业模式设计">电脑辅助商业模式设计</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-21-电脑辅助商业模式设计.jpg" alt="20190227-21-电脑辅助商业模式设计.jpg"></p>
<h4 id="商业模式和商业计划书">商业模式和商业计划书</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-22-商业模式和商业计划书.jpg" alt="20190227-22-商业模式和商业计划书.jpg"></p>
<h4 id="在企业中实施商业模式">在企业中实施商业模式</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-23-在企业中实施商业模式.jpg" alt="20190227-23-在企业中实施商业模式.jpg"></p>
<h4 id="IT_系统配合业务">IT 系统配合业务</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-24-IT系统配合业务.jpg" alt="20190227-24-IT系统配合业务.jpg"></p>
<h3 id="《商业模式新生代》的商业模式画布">《商业模式新生代》的商业模式画布</h3><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-25-《商业模式新生代》的商业模式画布.jpg" alt="20190227-25-《商业模式新生代》的商业模式画布.jpg"></p>
<h3 id="个人总结">个人总结</h3><p>建筑自已对商业模式的认识，有一个清晰的方法论，作者给了全面的9个商业要素，并且本书根据这个画布，组构、分析、优化，并在案例分析和结合其它想维框架，给出很多商业模式的示例，最后，需要读者自已给出自已创新的模式！</p>
<p>平时还真的较少读商业的书，读了这本书之后，其它很多东西没有完全理解，能把商业划分如此，思考+总结+实践，画出公司的商业模式，或自己的商业模式，一定能解答自己一直对公司或自己的理解，有更新更好的认识吧！</p>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>今年读的第一本书，时间节奏快，还是要在细细读第二次！非常优秀的实践指导书，值得每一个创业者，都读一下，不管是已经创业失败，还是准备创业，或者正在创业的小伙伴们，都赶紧来读读吧！</p>
<h3 id="框架">框架</h3><p>读一本书，不是为了知识而知识，需要总结或吸收书中的知识框架，以便成为自己的知识体系！</p>]]>
    
    </summary>
    
      <category term="商业模式新生代" scheme="https://iHTCboy.com/tags/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3/"/>
    
      <category term="读书笔记" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读后感" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="life" scheme="https://iHTCboy.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2019，猪你好！]]></title>
    <link href="https://iHTCboy.com/2019/01/01/2019-01-01_2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://iHTCboy.com/2019/01/01/2019-01-01_2018年终总结/</id>
    <published>2018-12-31T17:49:16.000Z</published>
    <updated>2019-02-08T10:44:40.714Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>尼采说：人年轻时，无论是崇拜还是鄙视，缺乏分寸；善于掌握分寸才是对生命最大的奖赏。</p>
</blockquote>
<h4 id="序言">序言</h4><p>这一年，在生命中又是非常有意义的一年，应该说是毕业以来待过最长的公司，准备2年啦！非常高兴能看到自己的坚持，因为自己的坚持，所以，我相信还有很多事件可以做。<strong>马云说的，员工离职，不是给钱不够，就是心里委屈。</strong> 今天，我想还要加一条吧，<strong>工作不再有挑战性！（或者挑战性太大，自己放弃！）</strong> 因为还有很多挑战！很多东西等待我去战胜，并且我相信，战胜这些问题，让公司和自己都会有质的改变！这也就是所谓的成长空间吧~</p>
<p>今年大家经历了非常多，其中讨论最多的程序员吃年轻饭、中年危机、经济寒冬等，都会跟大家讨论一下。最好的时代，最坏的时代，都在当前，一起记录，迎接2019吧！</p>
<a id="more"></a>
<h4 id="第一章_从公司创建创造，到创新创意">第一章 <strong>从公司创建创造，到创新创意</strong></h4><p>年终总结，首当其冲就是工作总结。当年，因为苹果AppStore条款的变动，我们需要开始研究怎么从被动到主动，借着这样的契机，我们做了自己的预审工具，然后有所启发的，做了自己的AppStore Connect 自动化工具，实现通过网页跨平台形式，送审ipa包、自动送审、查看和检查全部的内购品项、批量创建内购品项，批量上传截图和视频等，这些功能相当苹果后台速度快了一半，真正解决了跨平台问题，同时提高了大家的工作效率，从本质上，解决了一定要我们程序员来上传ipa包的问题，解放了我们部分的生产力！</p>
<p>另一方面，我们自动化平台也在构建中，希望我们的工作流，减少大量重复的打包SDK，配置参数等操作，实现全自动化的工作流程，我认为才是解决大家痛处，也是释放我们程序员生产力的第一步，希望2019年，我们能实现整个工作流的全自动化，然后做更多的事！</p>
<p>另外，还补充一点。就是一些解决方案，刚开始，你也许认为不可行！只是因为你的角色（角度），眼界（水平）没有达到能给出解决方案的能力，需要慢慢多实践，多学习，一定会有新的想法。比如，我在开发 AppStore Connect 自动化工具后，一方面，从技术上对 Python 常用的库有大致了解，一些常见坑也自己填了，另一方面，从解决方案，爬虫看，任何一个网站，你也可以二次封装，做成自己的自动化工具！</p>
<p>再次，我想表达一下，在任何一个公司，大家如果只是墨守成规，默默做自己一亩三分田，那么我认为，这样对自己对公司都没有任何新的价值，一直这样下去，自己肯定会错失很多机会，而公司也许成也许败，但是自己一定失败的。如果一开始就做一局失败的游戏，那人生一定只会更糊涂。</p>
<p>最后，今年能力和精力有限，还有很多东西没有做，很多东西需要学习，希望明年自己能有更多的努力，提出创新创意的法子，一定改变我们技术同事的水平，也提高大家的效率，从而提高大家的工资。非常感谢公司大老们的支持，我们的工作，永远离不开大老们的支持，我相信，只要公司的价值观与我们一致，我们一定一起进步，共赢！</p>
<h4 id="第二章_说走就走的旅行">第二章 <strong>说走就走的旅行</strong></h4><p>年初计划的旅游计划，公司旅游因为业务繁忙，没能去成。最后假节日和女朋友去了一趟厦门，虽然有点遗憾，后2天下雨影响行程，但是也是有所收获，海风很舒服，厦门面向台湾，地理位置有点特别，看海风景优美！</p>
<p>旅游，对我来说，不是简单的朋友圈晒晒照片，恩爱~ 这些东西是别人的感觉，我更注重自己的理解，理解每一个城市，每一座山峰，每一片海水，每一个文化，背后的故事，了解别人的历史，然后影射到自己身上，就会觉得自己的境界还达不到，从而内心也许更平静、更多憧憬，也希望大家旅游，对于自己身心放松和收获更多的，有自己的认知，不为人云也云。</p>
<p>希望今年重签的港澳通行证正式使用啊，去体验更多的世界角落，更美好的东西，更漂亮的东西，更加广阔的眼界。希望2019年，更多的高度和视觉，凤凰涅磐！</p>
<h4 id="第三章_团队协作">第三章 <strong>团队协作</strong></h4><p>团队协作能力，今年 git flow 管理，每做一个git commit 都要考虑清楚， 每一个 release 都要测试全面，不仅仅是对团队的影响，严重的会影响整个项目。如果对项目不能有指标的把控，这是很可怕的事情。一个team，需要大家都遵守规则，才能做的更好，才能感受到团队的力量，并有一起努力做好的愿景，而不是抵制配合。希望，明年可以做一下 code review 和 项目管理相关的研究，给项目、给大家，提供更好的稳定，也提高大家代码质量，这是最好的愿景！</p>
<p>团队管理能力，今年协助组长分担任务，我认为管理，不仅仅是管理，还要敢于当先，努力为团队营造一个良好氛围。我不提倡大家加班加点，我是鼓励大家，努力积极，高效主动完成任务，这样团队才能有精力去做应该做的事，甚至说做更多自己想做的事。一味地拖延，低效地工作，只会伤害自己。我希望再接再厉，管理经验不是学习获得，而是真正的管理，不断改变自己，善待团队，努力当好表帅，能改变大家一点，对大家未来都是好事的一切，希望自己能多做点。</p>
<h4 id="第四章_中年危机？">第四章 <strong>中年危机？</strong></h4><p>拒绝老油条。</p>
<p>我认为，想解决程序员青春饭的问题，首次拒绝当老油条！作为程序员，一定要做好学到老的准备，否则，程序员一定是你的青春饭！</p>
<p>上一年，总结里面说了：</p>
<blockquote>
<p>“人穷志短”实在是太精辟了。最近大家说的『贫穷限制了我的想象力』，我是发现程序员们都越来越限制自己的能力，满足不了自己的工作，满足不了自己的欲望，只是轻声叹息。愿大家，不要把责任都推到公司，多从自己找些原因，然后克服自己，战胜自己！</p>
</blockquote>
<p>今年，还是看到了很多的观点，中年危机的文章，也层出不穷，本质上，也就无法几个点。</p>
<ul>
<li>技术路线</li>
<li>管理路线</li>
<li>老板路线</li>
<li>走为上计</li>
</ul>
<h5 id="技术路线">技术路线</h5><p>先说一下技术路线，大家可能更多的还是希望提高技术，成为更高级的工程师。所以，如何学习呢？ 要从本质上认识对技术：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/01/20190101-程序开发者能力金字塔by安晓辉.jpeg" alt="20190101-程序开发者能力金字塔by安晓辉.jpeg"></p>
<p>从上图可以看出，想要把技术学习好，一定要不断往底层学习积累，如果每天工作外，一直游走在上层的API，那就真的只是一个代码搬运工，copyer一定是青春饭！</p>
<p>至于技术怎么学习，这个就不好说，大家根据自己的认知，努力向自己想要到达的目标，脚踏实地，一定可以的。</p>
<h5 id="管理路线">管理路线</h5><p>成为一下管理者，其实也离不开技术，不说技术非常好，但是技术框架、技术面一定要广，不然很难从更高的层次来对技术进行管理吧。否则，人管好了，技术没有管好，也不是技术管理啊。</p>
<p>另外，我想说，互联网发展到今天，基础的程序员已经非常多，市场缺少的是更多的技术管理。因为如果是非技术管理，其实就是管理人，但是技术管理，除了管人，还要对技术管理。个人认为未来还需要更多这方面的人才。</p>
<p>大家可以看出来，每一个公司，很难给程序员kpi，或者说是考核。是以写代码的行数定工资？还是以项目完成？甚至说，项目做完后，怎么估计这个项目带来的价值？？？ 今天依然没有很好的评估方案，这也许是技术管理的一个困境，如果合理合规和合人性的方式，进行管理，其实大家可以在工作中，多多思考~</p>
<h5 id="老板路线">老板路线</h5><p>老板路线，就是自己创业，或者自己有钱，可以做投资人。这样的胆量或者财力，我相信对于我们这些普通的程序员，可以要早点认清自己吧。如果只是开一家没有什么技术含量的，同时满足市场需要的外包公司，也许比打工上班好一点，这些风险大家自己评估啊，方案是方案，行动是自己的，想好做什么，就是开始的一半了。</p>
<h5 id="走为上计">走为上计</h5><p>36计最后一计，这里大家可以理解为转行！ 但是我想说，转行只是自己真的水平不行就这样做吧。 我这里的意思是想表示，上面的三个方案，其实没有明显划分，谁是谁。大家在工作中，其实都要主动去管理，做技术，做管理，做老板，都不冲突，当自己在苦修或意愿做什么时候，自己也准备好了，就去做！就是这样简单，走为上！</p>
<p>最后，关于中年危机，我就不想多说什么了，文末有几个链接，大家需要可以看看，主要还是自己认清自己，知道自己优势所为，明白中年精力不足，如果补充自己的不足，而发挥长处，方能立于不败吧。</p>
<h4 id="第五章_经济寒冬">第五章 <strong>经济寒冬</strong></h4><p>翻看往年的新闻，每年的年末，都是今年寒冬又到来，xx公司裁员xx人。其实，学会居安思危，但是也不杞人忧天，每次做好自己的目标，我相信看到这些新闻，并不会感觉到紧张，或者害怕吧。</p>
<p>寒冬与我无关，我只想努力，公司裁员，也许不是因为你做不好，而是有人做不好，导致公司业务不好，或者影响到公司业务，无形中慢慢地消耗了这个系统的每针每线，最终在寒冬中，要断腿断脚断臂时，只能伤害到你。所以，跟上面说到的一样，我希望大家努力改变自己，改变同事，改变公司，创造创新创意，为公司做的任何贡献，不会与你无关，而是事事相关，时时相关，不要把自己单独在自己的世界，如果你打算长远在公司养老的话。</p>
<h4 id="第六章_突破自我的准备和未来">第六章 突破自我的准备和未来</h4><p>说了那么多，我想技术的东西不在多谈，做好自己的认知，然后在寒冬中做好准备，明年春天，花朵一定更加绽放灿烂~</p>
<p>2018年，在iOS开发自动化方面，学习了Python/bash/ruby/dart，自己能在脚本自动化方面有所学习和输出，感到非常高兴。希望明年在 Android/Kotlin/Flutter 下点功夫，努力打造移动的自动化，完成从前端到后端的打通，实现移动端工作自动流，提高大家的效率。然后有更多时间和精力，对跨平台、组件化、工程效率、Flutter、APM、插件热修和各种底层技术研究，提高大家技术水平，稳定项目质量，提高可变技术为运营推广，为用户体验做一些努力，足以，知足。</p>
<p>学海无涯，量力而行。</p>
<h4 id="第七章_一些语录">第七章 一些语录</h4><p>今年过的非常快，也许高兴，也许失落，但是学习永远是不变的，摘要一下自己收集的语录，希望能给大家一些不一样的观点：</p>
<ul>
<li>如果你做完一个项目，没有记录，没有总结，没有思考，那么收获为0。</li>
<li>“一流程序员靠数学、二流靠算法、三流靠逻辑、四流靠SDK、五流靠Google和StackOverflow、六流靠百度和CSDN。低端的看高端的就是黑魔法！”</li>
<li>千万不要以为批判性思维就是「批评」和judge。批判和批判性思维是两码事，前者更重要的是否定，后者则是审辨、带有建设性。</li>
<li>沟通成功的三个关键！别人看到了什么(55%)，听到的声音和词气(38%)，说的语言和内容(7%)！</li>
<li>四个时刻要闭嘴：展示自我的时候，评价他人的时候，春风得意的时候，涉及隐私的时候</li>
<li>时间能给你的，仅仅只是时间，没有任何答案，想要答案就只有靠自己不断的去寻找和确定，属于自己的路只有自己走过才知道！坚持走下去路才会渐渐清晰。</li>
<li>要回到自己读书的初衷，或乐趣，或好奇，少一些目的性和功利心。读一本书，不要老想它能用来干什么，而是多思考它在表达什么。不要期望每本书读了都有用，马上就能用的书是菜谱。</li>
<li>1、要无条件自信，即使在做错的时候。2、不要想太多，定时清除消极思想。3、学会忘记痛苦，为阳光记忆腾出空间。4、敢于尝试，敢于丢脸。5、每天都是新的，烦恼痛苦不过夜。6、面对别人的优秀时，发自内心地赞美。7、做人最高境界不是一味低调，也不是一味张扬，而是不卑不亢。</li>
<li>1、发怒，是用别人的错误惩罚自己。2、烦恼，是用自己的过失折磨自己。3、后悔，是用无奈的往事摧残自己。4、忧虑，是用虚拟的风险惊吓自己。5、孤独，是用自制的牢房禁锢自己。6、自卑，是用别人的长处抵毁自己。</li>
<li>1、考虑问题时要换位思考；2、解决问题时要逆向思考；3、要强于总结问题；4、要强于收集信息；5、要强于编写简洁的文书；6、要强于进行书面沟通。</li>
<li>人生的高度，不是你看清了多少事，而是你看轻了多少事。心灵的宽度，不是你认识了多少人，而是你包容了多少人。做人如山，望万物，而容万物。做人似水，能进退，而知进退。</li>
<li>装傻，不是真傻，而是糊里糊涂，不计较。装傻，不是怕，而是心胸宽广，不记仇。有些时候，理，争多了伤情，事，弄懂了心痛。</li>
<li>平静的湖面只有呆板的倒映，奔腾的激流才有美丽的浪花。幸福不是靠别人来布施，而是要自己去赢取。生命的意义在不断挑战自己，战胜自己。</li>
<li>认知的四个阶段:<br>  不知道自己不知道，（自以为是的状态！）<br>  知道自己不知道，（敬畏之心，空杯心态，丰富自己的认知！）<br>  知道自己知道，（抓住事情的规律，提升自己的认知！）<br>  不知道自己知道。（永远保持空杯的状态！）</li>
</ul>
<h4 id="第七章_2019计划">第七章 2019计划</h4><ul>
<li>锻炼&amp;健康</li>
<li>存钱&amp;节俭</li>
<li>读书&amp;学习</li>
<li>旅游&amp;娱乐</li>
</ul>
<p><strong>锻炼健康</strong>：不可否认，身体没有毕业时那样旺盛，但是精力充足还是需要充足睡眠，加油锻炼！</p>
<p><strong>存钱节俭</strong>：好好存钱，有房有家~</p>
<p><strong>读书学习</strong>：快乐学习，多读些书~</p>
<p><strong>旅游娱乐</strong>：长线：张家界、杭州、北京、西藏； 短线：香港、澳门、深圳。</p>
<p>最后，用一句话总结和展望：</p>
<blockquote>
<p>人有三样东西是无法隐瞒的，咳嗽、穷困和爱；你想隐瞒越欲盖弥彰。<br>人有三样东西是不该挥霍的，身体、金钱和爱；你想挥霍却得不偿失。<br>人有三样东西是无法挽留的，时间、生命和爱；你想挽留却渐行渐远。<br>人有三样东西是不该回忆的，灾难、死亡和爱；你想回忆却苦不堪言。</p>
<p>—《洛丽塔》</p>
</blockquote>
<p>2019，一起加油！</p>
<h4 id="参考阅读">参考阅读</h4><ul>
<li><a href="https://mp.weixin.qq.com/s/lLr1g7OfozHf0tkf-seYPQ" target="_blank" rel="external">构建开发者能力金字塔，化解年龄焦虑</a></li>
<li><a href="https://mp.weixin.qq.com/s/jpu9CGCYrUmBdZOIvfgNdw" target="_blank" rel="external">程序员加薪升职之全路径解析</a></li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="http://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>尼采说：人年轻时，无论是崇拜还是鄙视，缺乏分寸；善于掌握分寸才是对生命最大的奖赏。</p>
</blockquote>
<h4 id="序言">序言</h4><p>这一年，在生命中又是非常有意义的一年，应该说是毕业以来待过最长的公司，准备2年啦！非常高兴能看到自己的坚持，因为自己的坚持，所以，我相信还有很多事件可以做。<strong>马云说的，员工离职，不是给钱不够，就是心里委屈。</strong> 今天，我想还要加一条吧，<strong>工作不再有挑战性！（或者挑战性太大，自己放弃！）</strong> 因为还有很多挑战！很多东西等待我去战胜，并且我相信，战胜这些问题，让公司和自己都会有质的改变！这也就是所谓的成长空间吧~</p>
<p>今年大家经历了非常多，其中讨论最多的程序员吃年轻饭、中年危机、经济寒冬等，都会跟大家讨论一下。最好的时代，最坏的时代，都在当前，一起记录，迎接2019吧！</p>]]>
    
    </summary>
    
      <category term="2019" scheme="https://iHTCboy.com/tags/2019/"/>
    
      <category term="年终总结" scheme="https://iHTCboy.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="life" scheme="https://iHTCboy.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员的macOS系列：Mac开发环境配置]]></title>
    <link href="https://iHTCboy.com/2018/09/30/2018-09-30_%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS%E7%B3%BB%E5%88%97%EF%BC%9AMac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://iHTCboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/</id>
    <published>2018-09-30T15:49:16.000Z</published>
    <updated>2019-11-23T02:22:50.309Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在写《程序员的macOS系列》文章，之前写的第一篇 <a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a>，大家都希望楼主尽快更新，结果拖到了2个月后，所以今天终于更新啦！其实macOS开发环境，系统默认自带ruby、php、python2、gcc、g++、bash等环境，并且因为<code>macOS</code>是以<code>Unix</code>为基础，所以有传统<code>Unix/Linux</code>的特性，很适合高效少折腾的开发者。所以，本文主要讲解一些通用开发环境配置，主要是以必须和提高效率为主！也没有什么高深介绍，当然，由于楼主目前主职是iOS，所以其它的开发环境接触不多(谦虚)，当前大家要学以至用，环境搭建都是相似的，熟悉了就不是问题。文章短短不可能详尽也，要学好每一个点也不是那么简单，惟有抛砖引玉，希望大家努力提高！</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》三篇，后续有想法在更新吧~</p>
<a id="more"></a>
<h3 id="2、开发环境配置">2、开发环境配置</h3><p>需要提前说明一下，本文不使用代理源，如果命令无效，大家记得翻墙一下啊。本教程尽量都通过命令行方式完成配置，命令行依然是程序员最高效的环境！如果是通过软件包安装的方式，就不在这里列举了，比如<code>Java</code>的安装可以自行搜索~</p>
<h4 id="Homebrew">Homebrew</h4><p><code>Homebrew</code> 是强大的终端工具，用来管理很多在终端下操作的程序以及软件包的依赖，对于经常需要使用终端应用的程序员来说，是必不可少的第一步！</p>
<p>打开终端，安装命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>上面命令，我希望大家不只是复制粘贴运行就完事，更希望大家能了解更多：</p>
<ul>
<li><code>/usr/bin/ruby -e</code>：使用ruby环境运行</li>
<li><code>curl -fsSL</code>：使用curl命令下载</li>
</ul>
<p>了解了这2点，那么<code>ruby</code>环境、<code>curl</code>命令和参数的作用，相信大家就可以自行搜索深入学习，而不是片面过一次<code>复制粘贴运行</code>，达到学以致用，这才是<code>真学习</code>！</p>
<p><code>brew</code> 一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew search</span><br><span class="line">brew info</span><br><span class="line">brew install</span><br><span class="line">brew remove</span><br><span class="line">brew update</span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure>
<p><code>brew</code> 命令就不多说了，类似linux系统下的<code>apt-get</code>，程序员都要从入门到精通啊~</p>
<h4 id="命令行工具（Command_Line_Tools)">命令行工具（Command Line Tools)</h4><p>如果不是开发 <code>iOS</code> 或 <code>macOS</code> 可能就没有必要安装Xcode，但是可能需要安装一下Xcode 命令行工具，因为很多环境和软件都会使用到和依赖它（下面说到的<code>Carthage</code>、<code>python3</code>就依赖它）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<p><code>xcode-select</code> 这个命令还可以切换 xcode build 的版本（目录），可以 <code>xcode-select --help</code> 查看更多。</p>
<p>这里提醒一下新手，终端的命令，如果记得命令名字，不记得用法，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx --help</span><br></pre></td></tr></table></figure>
<p>也可以用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man xxx</span><br></pre></td></tr></table></figure>
<p><code>--help</code> 和 <code>man</code> 命令的区别，是<code>man</code>命令是详细全面的介绍。</p>
<h4 id="Bash（Zsh）">Bash（Zsh）</h4><p>zsh是一种<code>shell</code>语言，兼容<code>bash</code>，提供强大的命令行功能，比如tab补全，自动纠错功能等。</p>
<p>安装 <code>zsh</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure>
<p>使用 <code>oh-my-zsh</code> 可以将zsh变得更加强大而灵巧：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>另外可以安装 oh-my-zsh 一些插件，比如实现自动跳转：<a href="https://github.com/joelthelion/autojump" target="_blank" rel="external">autojump</a>、<a href="https://github.com/clvv/fasd" target="_blank" rel="external">fasd</a>、命令行自动提示<a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">zsh-autosuggestions</a></p>
<p>个性化配置，包括别名，都在目录 <code>~/.zshrc</code> 下，需要深入教程的大家自动网上搜索啊。这里只是配置入门，修行还是看个人啊！</p>
<p>创建别名的示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc //vim 命令下面会说到</span><br><span class="line"><span class="built_in">alias</span> myblog=<span class="string">'cd /Users/HTC/Documents/iHTCBlog'</span> //快速到达指定目录</span><br><span class="line"><span class="built_in">alias</span> st=<span class="string">'open -a "Sublime Text"'</span> //打开某个app</span><br></pre></td></tr></table></figure>
<h4 id="Node/npm">Node/npm</h4><p><code>Node(Node.js)</code> 是一个基于Chrome V8 引擎、能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript 运行环境。<code>Node.js</code> 使用了一个事件驱动、非阻塞式I/O 的模型，使其轻量又高效。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>安装 Node 后，也会自动安装<code>npm</code>工具。<code>npm</code> 即 node package manager，用来搜索、下载、管理 Node.js 相关的套件。</p>
<p><code>npm</code> 一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">help</span> //查看npm帮助</span><br><span class="line">npm find //查找组件</span><br><span class="line">npm install //安装组件</span><br><span class="line">npm remove //删除组件</span><br><span class="line">npm update //更新组件</span><br></pre></td></tr></table></figure>
<p><code>Node</code> 除了用于前端/后台开发外，<code>react native</code>、<code>Hexo</code>博客也是依赖 <code>Node</code> 环境，更多的 <code>Node</code> 知识，我也还在努力学习中，后续有新认识，再回来更新啊！就不误人子弟啦~</p>
<h4 id="vi(vim)">vi(vim)</h4><p><code>vi</code> 是 <code>visual interface</code> 的缩写，<code>vim</code> 是 <code>vi IMproved</code>(增强版的vi)。vi(vim) 命令繁多，但是如果灵活使用之后将会大大提高效率！从此不用鼠标不是梦！</p>
<p>vi(vim)是 Unix/Linux 终端自带的，所以 macOS 也自带。那么 vi(vim) 要配置什么呢？</p>
<p>就是大家觉得 vi(vim) 好用，但是，还认为可以更好用，所以，有很多的插件（用更少的按键，实现更多更合理的功能），例如实现文件浏览（<a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">NERD Tree</a>），代码补全（<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>），语法检查（<a href="https://github.com/vim-syntastic/syntastic" target="_blank" rel="external">syntastic</a>），文件模糊搜索（<a href="https://github.com/kien/ctrlp.vim" target="_blank" rel="external">ctrlp</a>），显示vim状态栏（<a href="https://github.com/Lokaltog/vim-powerline" target="_blank" rel="external">Vim Powerline</a>）,主题颜色（<a href="https://github.com/tomasr/molokai" target="_blank" rel="external">Molokai</a>）,显示文件结构（<a href="https://github.com/majutsushi/tagbar" target="_blank" rel="external">tagbar</a>）等多种功能</p>
<p>vi(vim) 操作的快捷键教程可以参考楼主之前的文章：<a href="https://ihtcboy.com/2018/07/28/2018-07-28_Vim快捷键小记/">vi(vim)快捷键小记</a></p>
<p>vim 设置编辑文本语法高亮：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> ~/.vimrc</span><br><span class="line"></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure>
<p>更多vi的知识，大家自行搜索学习啊~</p>
<h4 id="Git">Git</h4><p><code>git</code>的作用就不多说了，如果是刚毕业的新手入门，建议自行学习，对你的开发帮助一定非常大~</p>
<p>另外，如果安装了Xcode，默认会安装<code>git</code>，如果没有安装Xcode，可以自己安装：</p>
<p><code>git</code> 安装：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>install git</span><br></pre></td></tr></table></figure>
<p><code>git</code>基本配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#34;iHTCboy&#34;&#10;git config --global user.email &#34;ihetiancong@gmail.com&#34;&#10;git config --global color.ui true&#10;git config --global alias.co checkout  # &#21035;&#21517;&#10;git config --global alias.ci commit&#10;git config --global alias.st status&#10;git config --global alias.br branch&#10;git config --global core.editor &#34;vim&#34;  # &#35774;&#32622;Editor&#20351;&#29992;vim&#10;git config --global core.quotepath false # &#35774;&#32622;&#26174;&#31034;&#20013;&#25991;&#25991;&#20214;&#21517;</span><br></pre></td></tr></table></figure>
<p>用户的git配置文件目录： <code>~/.gitconfig</code></p>
<ul>
<li><a href="https://github.com/jonas/tig" target="_blank" rel="external">tig</a> 高亮美化, 让 git 命令行可视化</li>
</ul>
<p><code>git</code> 更多命令教程，大家自行搜索，如果要达到熟悉，还是要多实践练习啊~ 当然，原理也是必不可少的一步！</p>
<h4 id="python3">python3</h4><p>python3 是未来，所以还是要安装使用和开发的！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure>
<p>查看 <code>python3</code>的版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure>
<p><code>python</code> 能做的事件就不多说了，人工智能，机器学习，大数据分析，爬虫，web，可以说<code>python</code>已经渗透到各个地方~</p>
<h4 id="jenkins">jenkins</h4><p>暂时留存，日后回来写</p>
<h4 id="CocoaPods">CocoaPods</h4><p><code>CocoaPods</code> 是iOS的包管理工具之一，类似于 java 的<code>Maven</code>、Node.js 的 <code>npm</code>、Python 的 <code>pip</code>、PHP 的 <code>Composer</code>、Ruby 的 <code>gem</code>。</p>
<p><code>CocoaPods</code> 基于<code>Ruby</code>开发的，因此安装<code>CocoaPods</code>前需要先安装<code>Ruby</code>环境。而前面提到macOS系统默认自带Ruby环境! 所以，直接用 Ruby 的 <code>gem</code> 环境安装吧~</p>
<p>1.安装命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>
<p>2.配置<code>CocoaPods</code>环境，安装<code>Specs</code>库，由于库很大(几百MB)，需要一些时间和网速：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure>
<p><code>pod</code> 一些常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pod --version //pod版本</span><br><span class="line">pod init //创建Podfile文件</span><br><span class="line">pod install //项目pod安装</span><br><span class="line">pod update //项目pod更新</span><br><span class="line">pod search //搜索库</span><br></pre></td></tr></table></figure></p>
<p>更多使用说明，自行搜索啊~</p>
<h4 id="Carthage">Carthage</h4><p>我们使用包管理，就是为了集成第三方库的时候更加方便，迅速。有时候iOS包管理工具 <code>CocoaPods</code> 处理因包管理而导致的错误又浪费了我们很多时间。而 <code>Carthage</code> 使用的是一种<strong>非侵入性</strong>的哲学，<code>Carthage</code> 不会对我们的项目结构进行任何修改，更不多创建 <code>workspace</code>。它只是根据我们描述文件中配置的第三方库，将它们下载到本地，然后使用 <code>xcodebuild</code> 构建成 <code>framework</code> 文件。</p>
<p>另外 <code>Carthage</code> 除了<strong>非侵入性</strong>，它还是<strong>去中心化</strong>的，它的包管理不像 <code>CocoaPods</code> 那样，有一个<strong>中心服务器(cocoapods.org)</strong>，来管理各个包的元信息，而是依赖于每个第三方库自己的源地址，比如 <code>Github</code>。</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install carthage</span><br></pre></td></tr></table></figure>
<p><code>carthage</code> 一些常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">carthage version //查看版本</span><br><span class="line">brew upgrade carthage //升级carthage</span><br><span class="line">carthage update //安装或更新项目的库</span><br></pre></td></tr></table></figure></p>
<p>更多使用说明，自行搜索啊~</p>
<h4 id="包管理工具">包管理工具</h4><table>
<thead>
<tr>
<th>Package client</th>
<th>Language</th>
<th>Package format</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>npm</td>
<td>JavaScript</td>
<td>package.json</td>
<td>Node package manager</td>
</tr>
<tr>
<td>gem</td>
<td>Ruby</td>
<td>Gemfile</td>
<td>RubyGems package manager</td>
</tr>
<tr>
<td>mvn</td>
<td>Java</td>
<td>pom.xml</td>
<td>Apache Maven project management and comprehension tool</td>
</tr>
<tr>
<td>gradle</td>
<td>Java</td>
<td><code>build.gradle</code> or <code>build.gradle.kts</code></td>
<td>Gradle build automation tool for Java</td>
</tr>
<tr>
<td>docker</td>
<td>N/A</td>
<td>Dockerfile</td>
<td>Docker container management platform</td>
</tr>
<tr>
<td>nuget</td>
<td>.NET</td>
<td>nupkg</td>
<td>NuGet package management for .NET</td>
</tr>
<tr>
<td>pip</td>
<td>Python</td>
<td>requirements.txt</td>
<td>Python package manager</td>
</tr>
<tr>
<td>Composer</td>
<td>PHP</td>
<td>composer.json</td>
<td>PHP package manager</td>
</tr>
<tr>
<td>pod</td>
<td>ObjC/Swift</td>
<td>Podfile</td>
<td>Cocoa application package manager</td>
</tr>
<tr>
<td>carthage</td>
<td>ObjC/Swift</td>
<td>Cartfile</td>
<td>Cocoa app package manager</td>
</tr>
</tbody>
</table>
<p>参考：<a href="https://help.github.com/en/github/managing-packages-with-github-packages/about-github-packages#supported-clients-and-formats" target="_blank" rel="external">About GitHub Packages</a></p>
<h3 id="3、其它环境配置和插件">3、其它环境配置和插件</h3><h4 id="Finder（访达）预览插件">Finder（访达）预览插件</h4><p>用于<code>Finder</code>快速显示文件的内容，这个 GitHub 专门收集了特别的<code>Finder</code>插件：<br><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">https://github.com/sindresorhus/quick-look-plugins</a></p>
<p>安装命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask <span class="operator"><span class="keyword">install</span> qlcolorcode qlstephen qlmarkdown quicklook-<span class="keyword">json</span>  qlimagesize webpquicklook suspicious-<span class="keyword">package</span> quicklookase qlvideo provisionql quicklookapk</span></span><br></pre></td></tr></table></figure>
<p>其中特别的插件说明，详细看<a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">quick-look-plugins</a>：</p>
<ul>
<li>qlcolorcode: 代码文件预览时高亮</li>
<li>qlstephen: 以纯文本的形式预览无拓展名或者未知拓展名的文件</li>
<li>qlmarkdown: 预览渲染后的 markdown 文件</li>
<li>quicklook-json: 预览格式化后的 json 文件</li>
<li>ProvisionQL: ipa文件信息展示</li>
<li>QuickLookAPK：apk文件信息展示</li>
</ul>
<p>用图片来说明一下作用，一看就懂：<br>QuickLookJSON：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QuickLookJSON.png" alt=""></p>
<p>QLMarkdown：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QLMarkdown.png" alt="QLMarkdown.png"></p>
<p>ProvisionQL：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/ProvisionQL.png" alt=""></p>
<p>QuickLookAPK：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QuickLookAPK.png" alt="QuickLookAPK.png"></p>
<h4 id="Hexo_博客">Hexo 博客</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo</span></span><br></pre></td></tr></table></figure>
<p>具体<code>hexo</code>使用，可能参考之前的文章：<a href="https://ihtcboy.com/2015/09/06/2015_Hexo搭建Github-Pages博客填坑教程/">Hexo搭建Github Pages博客填坑教程</a></p>
<p>建议每一个技术人员都搭建自己一个博客，依靠<code>GitHub</code>、<code>oschina</code>或<code>Coding.net</code>提供的免费服务，完全没问题，如果需要自己的域名，购买一个域名也就几百元就10年啦。程序员要多总结。比如你学习了一个技术或做了一个项目，没有一点记录，没有一点总结，没有一点思考，那么你能有收获吗？？？</p>
<h4 id="Safari_Extensions">Safari Extensions</h4><p>Safari 浏览器的插件<br><a href="https://safari-extensions.apple.com" target="_blank" rel="external">Apple - Safari - Safari Extensions Gallery</a></p>
<p>为什么会用<code>Safari</code>？ 不推荐 <code>Google Chrome</code> ？ 一定很多人有这样的疑问，其实， <code>Safari</code> 作为官方浏览器，就像<code>Windows</code>的 <code>IE</code>/<code>Edge</code>一样，自己的儿子，一定更好用。我认为有2点吧，</p>
<ul>
<li>1.Safari 可以完美同步打开的页面、书签、历史到其它<code>macOS/iOS</code>设备，无缝的。</li>
<li>2.Safari 的兼容性和性能，确实是比其它的要好，不管你认不认同-。-。（虽然前端页面兼容开发工程师会踩坑多~）</li>
</ul>
<p>我这里就推荐几个常用的：</p>
<ul>
<li><a href="https://safari-extensions.apple.com/details/?id=com.sidetree.Translate-S64NDGV2C5" target="_blank" rel="external">Translate</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.evernote.safari.clipper-Q79WDW8YH9" target="_blank" rel="external">Evernote Web Clipper</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.breadfm.webqr-2LGL679YYN" target="_blank" rel="external">webQR</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.damiancarrillo.search-alias-RADJYLEN7P" target="_blank" rel="external">Search Alias</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.diigo.safari.awesomescreenshot-5DXNM3K2CT" target="_blank" rel="external">Awesome Screenshot</a></li>
</ul>
<p>另外，macOS 10.14 后，苹果 Safari 浏览器不再支持不安全的扩展。只可以在 App Store 或 Safari 浏览器扩展库中查找经过 Apple 审核的更新扩展。</p>
<h4 id="Finder_访达">Finder 访达</h4><p>很多人可能跟我一样，不喜欢用第三方的文件管理应用，一般苹果自带能用的，我都不会使用第三方，一方便迁移成本高，另一方面系统自带的稳定性和内存占用都是做的较好。</p>
<p>对我来说，经常的痛点是，没有绝对路径显示！！！在 macOS 系统，可以通过 <code>option + command + P</code> 在Finder底部显示完整的当前路径和跳转。其它，还有一个骚操作，就是显示在标题栏：</p>
<ul>
<li>在 Finder 标题栏显示完整路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES;killall Finder</span><br></pre></td></tr></table></figure>
<ul>
<li>还原</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults delete com.apple.finder _FXShowPosixPathInTitle;killall Finder</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180930-Finder-Path.png" alt="20180930-Finder-Path.png"></p>
<h4 id="报错：无法打开已损坏的安装包">报错：无法打开已损坏的安装包</h4><p>遇到打开自己下载的安装包失败时，可执行下面命令解决：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<p>macOS 10.14 后，苹果对安全和隐私保护这一块更加严厉，当然，事件有好的一面，也有不好（不方便）的一面，大家智者见智，我一般是把这个命令当成别名：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> macss=<span class="string">"sudo spctl --master-disable"</span></span><br></pre></td></tr></table></figure>
<p>这里在终端输入 <code>macss</code> 就可以啦~</p>
<h4 id="macOS_Catalina_10-15_第三方软件文件提示已损坏解决办法">macOS Catalina 10.15 第三方软件文件提示已损坏解决办法</h4><p>macOS 10.15 后，苹果加强了对第三方渠道下载软件的证书校验，对于无证书的应用，不允许打开。可以试试使用下面命令：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">sudo</span> <span class="tag">xattr</span> <span class="tag">-r</span> <span class="tag">-d</span> <span class="tag">com</span><span class="class">.apple</span><span class="class">.quarantine</span> <span class="tag">xxx</span><span class="class">.app</span></span><br></pre></td></tr></table></figure>
<h4 id="终端命令">终端命令</h4><p>在终端和vim下，程序员的效率一定提升不少，但对于新手，下面也列出一些重要的终端命令，方便大家重点掌握，更多就大家自动搜索了：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>say xxx</td>
<td>读单词</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前目录的路径名</td>
</tr>
<tr>
<td>ls</td>
<td>查看当前目录下的文件</td>
</tr>
<tr>
<td>ls -al</td>
<td>查看所有文件，包含隐藏文件</td>
</tr>
<tr>
<td>clear</td>
<td>清除屏幕或窗口内容</td>
</tr>
<tr>
<td>cd /xx/yy</td>
<td>跳转到目录/xx/yy</td>
</tr>
<tr>
<td>cd ..</td>
<td>返回上一级目录</td>
</tr>
<tr>
<td>cd /</td>
<td>返回根目录</td>
</tr>
<tr>
<td>cd -</td>
<td>返回到上一步操作目录</td>
</tr>
<tr>
<td>cat xx</td>
<td>查看xx文件的内容</td>
</tr>
<tr>
<td>man xx</td>
<td>查看命令的详细帮助，比如 mac ls</td>
</tr>
<tr>
<td>killall Finder</td>
<td>重启Finder</td>
</tr>
<tr>
<td>touch xxx</td>
<td>创建xxx文件</td>
</tr>
<tr>
<td>mkdir xxx</td>
<td>创建xxx文件夹</td>
</tr>
<tr>
<td>rm xxx</td>
<td>删除文件</td>
</tr>
<tr>
<td>rm -rf xxxx</td>
<td>删除文件夹</td>
</tr>
<tr>
<td>defaults write com.apple.finder AppleShowAllFiles TRUE <br>killall Finder</td>
<td>查看隐藏文件</td>
</tr>
<tr>
<td>defaults write com.apple.finder AppleShowAllFiles FALSE <br>killall Finder</td>
<td>隐藏文件</td>
</tr>
<tr>
<td>↑ ↓</td>
<td>读取上一条或者下一条的命令记录</td>
</tr>
<tr>
<td>sudo vi /private/etc/hosts</td>
<td>编辑hosts文件</td>
</tr>
</tbody>
</table>
<p>还有非常多命令，大家可以自行搜索，比如</p>
<ul>
<li><a href="https://github.com/jingweno/ccat" target="_blank" rel="external">ccat</a> 高亮 cat 内容</li>
</ul>
<h3 id="总结">总结</h3><p>macOS的开发环境大概就讲到这些，如果大家还有不清楚的，网上搜索已经一大片，这里只是总结和归纳一下，让大家有一个系统性的了解和学习，只有大家系统性的全面了解，才能深入每一个知识点学习。这也是本文的目的，授于鱼，不如授于渔，希望大家努力学习~</p>
<p>楼主目前接触前端H5和后台开发时间不长，暂时不知道它们需要在macOS配置一些什么特别的环境，这些后续在补充，下面引用的参考，大家有时间一定要看看哦。这一篇就先这样~ 大家也可以留言反馈。国庆快乐~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://www.npmjs.com" target="_blank" rel="external">npm</a></li>
<li><a href="https://brew.sh" target="_blank" rel="external">The missing package manager for macOS — The missing package manager for macOS</a></li>
<li><a href="https://ihtcboy.com/2018/07/28/2018-07-28_Vim快捷键小记/">vi(vim)快捷键小记 | iHTCboy’s blog</a></li>
<li><a href="https://www.jianshu.com/p/a0b452f8f720" target="_blank" rel="external">Vim配置、插件和使用技巧 - 简书</a></li>
<li><a href="https://ihtcboy.com/2015/09/06/2015_Hexo搭建Github-Pages博客填坑教程/">Hexo搭建Github Pages博客填坑教程 | iHTCboy’s blog</a></li>
<li><a href="https://ihtcboy.com/2018/02/03/2018-02-03_让你的iTerm更Geek!/">让你的iTerm更Geek! | iHTCboy’s blog</a></li>
<li><a href="http://stormzhang.com/git/2014/01/27/git-common-command/" target="_blank" rel="external">Git常用命令备忘 - stormzhang</a></li>
<li><a href="https://bestswifter.gitbook.io/effectivemac/" target="_blank" rel="external">EffectiveMac - bestswifter</a></li>
<li><a href="https://ohmyz.sh" target="_blank" rel="external">Oh My Zsh - a delightful &amp; open source framework for Z-Shell</a></li>
<li><a href="https://leohxj.gitbooks.io/a-programmer-prepares/software/mac/softwares/zsh.html" target="_blank" rel="external">zsh | 程序员的自我修养</a></li>
<li><a href="https://github.com/jonas/tig" target="_blank" rel="external">tig</a></li>
<li><a href="https://github.com/jingweno/ccat" target="_blank" rel="external">ccat</a></li>
<li><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers</a></li>
<li><a href="https://cocoapods.org" target="_blank" rel="external">CocoaPods.org</a></li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage/Carthage: A simple, decentralized dependency manager for Cocoa</a></li>
<li><a href="http://swiftcafe.io/2015/10/25/swift-daily-carthage-package" target="_blank" rel="external">Carthage 包管理工具，另一种敏捷轻快的 iOS &amp; MAC 开发体验 - SwiftCafe 享受代码的乐趣</a></li>
<li><a href="https://safari-extensions.apple.com" target="_blank" rel="external">Apple - Safari - Safari Extensions Gallery</a></li>
<li><a href="https://help.github.com/en/github/managing-packages-with-github-packages/about-github-packages#supported-clients-and-formats" target="_blank" rel="external">About GitHub Packages - GitHub Help</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在写《程序员的macOS系列》文章，之前写的第一篇 <a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a>，大家都希望楼主尽快更新，结果拖到了2个月后，所以今天终于更新啦！其实macOS开发环境，系统默认自带ruby、php、python2、gcc、g++、bash等环境，并且因为<code>macOS</code>是以<code>Unix</code>为基础，所以有传统<code>Unix/Linux</code>的特性，很适合高效少折腾的开发者。所以，本文主要讲解一些通用开发环境配置，主要是以必须和提高效率为主！也没有什么高深介绍，当然，由于楼主目前主职是iOS，所以其它的开发环境接触不多(谦虚)，当前大家要学以至用，环境搭建都是相似的，熟悉了就不是问题。文章短短不可能详尽也，要学好每一个点也不是那么简单，惟有抛砖引玉，希望大家努力提高！</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》三篇，后续有想法在更新吧~</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="https://iHTCboy.com/tags/Mac/"/>
    
      <category term="macOS" scheme="https://iHTCboy.com/tags/macOS/"/>
    
      <category term="开发环境" scheme="https://iHTCboy.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="程序员的macOS" scheme="https://iHTCboy.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hopper Disassembler 逆向西数硬盘 WD My Passport 的失败经历]]></title>
    <link href="https://iHTCboy.com/2018/09/27/2018-09-27-Hopper%E9%80%86%E5%90%91WD-MyPassport%E7%9A%84%E5%A4%B1%E8%B4%A5%E7%BB%8F%E5%8E%86/"/>
    <id>https://iHTCboy.com/2018/09/27/2018-09-27-Hopper逆向WD-MyPassport的失败经历/</id>
    <published>2018-09-27T13:49:16.000Z</published>
    <updated>2018-09-30T13:49:42.623Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>一直以来都是使用西数的移动硬盘，最开始256G的 <code>My Passport</code>，当时也不知道，在电脑城就买了，回家发现可以设置密码，当然，我记得有密码的存储设备，是台电的U盘，当年16G的加密U盘，我也买了3个（因为当年最大16G容量），所以，之后就与加密的存储设备相惜相爱，现在西数的移动硬盘也是几代后的AES 256位硬件加密。加密功能的存储设备越来越受喜爱，除了大部分网盘破产外，就是隐私的问题，大家都希望有自己的小空间。</p>
<p>几天前，购买了4T的 WD My Passport 加密移动硬盘，设置了一个新密码，然后过完中秋，发现！密码记不起来了！！！反复尝试，只能看到破解！！！</p>
<a id="more"></a>
<h3 id="2、怎么办？">2、怎么办？</h3><p>先说一下，WD怎么打开硬盘，密码位数不限制，字符、数字和特殊符号都可以，然后，只能点击界面上的 <code>硬盘解锁</code> 才能解锁。按回车没有反应：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive.jpg" alt="20180927-WD-unlock-drive.jpg"></p>
<p>如果尝试密码超过5次，只能把USB拨出，重新插入才能重新尝试：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive-max.jpg" alt="20180927-WD-unlock-drive-max.jpg"></p>
<p>知道了这个流程，就想到几个思路，找到点击<code>硬盘解锁</code> 点击的处理方法，返回成功就可以了？</p>
<p>Hopper Disassembler ：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive-hopper.jpg" alt="20180927-WD-unlock-drive-hopper.jpg"></p>
<p>从上面的图片，可以找到这个方法，非常明显示了！</p>
<p>然后打开伪代码界面，里面的第一个判断是，如果 <code>rax==0x7</code> ，就会进入到失败的逻辑处理中，所以这样要修复它为不等于（!=），下面在说怎么修改：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-if1.jpg" alt="20180927-hopper-processUnlockDrive-if1.jpg"></p>
<p>下面这个判断是 如果 <code>rax==0x6</code> ，就是密码正确，可以打开硬盘！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-if2.jpg" alt="20180927-hopper-processUnlockDrive-if2.jpg"></p>
<p>下图，可以看出<code>cmp eax, 0x7</code>，就是上面说的比较是否相等，因此选中<code>cmp eax, 0x7</code>一行，选择菜单栏 <code>Modify -&gt; Assemble Instruction</code>，然后后面的0x7为其它值，这样就不相等了<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-fix1.jpg" alt="20180927-hopper-processUnlockDrive-fix1.jpg"></p>
<p>然后，这个也是相似，如果要让他相等，那么这个值改为<code>0x7</code>，因为失败时就是走上一个if判断中了，所以改一下这个值指向，应该就可以相等了吧？<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-fix2.jpg" alt="20180927-hopper-processUnlockDrive-fix2.jpg"></p>
<p>最后，选择 <code>File -&gt; Produce New Executable</code> 来生成新的可执行文件，替换掉原来的文件即可。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-copy-new.jpg" alt="20180927-hopper-processUnlockDrive-copy-new.jpg"></p>
<p>但是，想复制新的可执行文件替换失败：<code>Read-only file system</code>！！！</p>
<p>最后，查了一些方法，也没有办法修改这个硬盘的这个目录属性，唉，这个方法不知道有没有效果？？？ 最后，还是乱输入时，记起了密码！！！然后就没有然后了。</p>
<p>剩下的，就看大家有能力的，来补充一下啊~ 或者，若干年后有能力罢。</p>
<h3 id="总结">总结</h3><p>总结。西数硬盘这个5次失败密码要重新链接的功能，让破解密码变得复杂，当然，能一直尝试密码也是有好处，也是弱处。</p>
<p>最后，发现会一点逆向技术，不管是正向的开发，还是逆向的开发，都会对提高自己开发的系统的安全性，有更好的思考！！！另外，真的需要有时候，回来学习一下汇编语言，是提高逆向内功的必经之路，在这里，先立个目录，回头尝尝，大家一起加油~ 监督！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/c04ac36c6641" target="_blank" rel="external">最简单的Hopper Disassembler玩转Mac逆向 - 简书</a></li>
<li><a href="http://www.blogfshare.com/ioss-hopper.html" target="_blank" rel="external">iOS安全–使用Hopper修改程序逻辑跳过验证</a></li>
<li><a href="https://bestswifter.com/app-crack/" target="_blank" rel="external">一个数字的魔法——破解Mac上198元的Paw</a></li>
<li><a href="https://www.jianshu.com/p/33e40af6e328" target="_blank" rel="external">Mac OSX 之自己动手初步学习破解软件入门 - 简书</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>一直以来都是使用西数的移动硬盘，最开始256G的 <code>My Passport</code>，当时也不知道，在电脑城就买了，回家发现可以设置密码，当然，我记得有密码的存储设备，是台电的U盘，当年16G的加密U盘，我也买了3个（因为当年最大16G容量），所以，之后就与加密的存储设备相惜相爱，现在西数的移动硬盘也是几代后的AES 256位硬件加密。加密功能的存储设备越来越受喜爱，除了大部分网盘破产外，就是隐私的问题，大家都希望有自己的小空间。</p>
<p>几天前，购买了4T的 WD My Passport 加密移动硬盘，设置了一个新密码，然后过完中秋，发现！密码记不起来了！！！反复尝试，只能看到破解！！！</p>]]>
    
    </summary>
    
      <category term="Disassembler" scheme="https://iHTCboy.com/tags/Disassembler/"/>
    
      <category term="Hopper" scheme="https://iHTCboy.com/tags/Hopper/"/>
    
      <category term="MyPassport" scheme="https://iHTCboy.com/tags/MyPassport/"/>
    
      <category term="WD" scheme="https://iHTCboy.com/tags/WD/"/>
    
      <category term="西数硬盘" scheme="https://iHTCboy.com/tags/%E8%A5%BF%E6%95%B0%E7%A1%AC%E7%9B%98/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AppStore 拒绝审核原因：PLA 2.3]]></title>
    <link href="https://iHTCboy.com/2018/09/24/2018-09-24_%E8%8B%B9%E6%9E%9C%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92PLA_2.3/"/>
    <id>https://iHTCboy.com/2018/09/24/2018-09-24_苹果审核被拒PLA_2.3/</id>
    <published>2018-09-24T06:49:16.000Z</published>
    <updated>2018-09-24T13:20:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近更新了一下之前开源的一些iOS App，适配了一下iPhone X / Xs / XR / Xs Max，然后收到这样的拒审信：</p>
<blockquote>
<p>2018年9月24日 上午1:08<br>发件人 Apple</p>
<ol>
<li>10.0 Before You Submit: Program License Agreement<br>PLA 2.3</li>
</ol>
<p>Your app or its metadata contains references to a pre-release version of Apple software or hardware. Apps with compatibility references to a pre-GM version of iOS SDK or pre-released Apple hardware are not in compliance with the Apple Developer Program License Agreement.</p>
<p>Specifically, section 2.3 states:</p>
<p>“Apple may provide You with pre-release versions of the Apple Software or related services that constitute Apple Confidential Information and are subject to the confidentiality obligations of this Agreement.”</p>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple software and hardware from your app and its metadata.</p>
<p>Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata, visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, reply to this message in Resolution Center and we will continue the review.</p>
</blockquote>
<a id="more"></a>
<h3 id="2、解决">2、解决</h3><p>刚开始以为自己使用了 Xcode GM 版本提交应用，但反复检查就是正式的Xcode Version 10.0 (10A255)!</p>
<p>最后，还是通过网络搜索找到答案：</p>
<blockquote>
<p>此版本的新增内容:</p>
<ul>
<li>v5.0.0 适配iPhoneX、XR、Xmax ；</li>
<li>修复新闻列表闪退问题；</li>
<li>优化一些功能细节体验</li>
</ul>
</blockquote>
<p>引用网友的话：</p>
<blockquote>
<p>你的发布介绍里提到了苹果没开卖的iPadPro，删掉重新审核就行，不用重新上传包。回复大概这意思</p>
</blockquote>
<p>然后搜索iPhone Xs上市时间?</p>
<blockquote>
<p>将在9月14日周五开启预售，9月21日正式上市</p>
</blockquote>
<p>没毛病！！！今天已经2018年9月24号啦！<br>最后，还是发现，字母拼写错啦！！！</p>
<blockquote>
<ul>
<li>v5.0.0 适配 iPhone X、XR、XS Max；</li>
<li>修复新闻列表闪退问题；</li>
<li>优化一些功能细节体验</li>
</ul>
</blockquote>
<ul>
<li>最后发现，还是被坑了一波：</li>
</ul>
<blockquote>
<p>iPhone X🅁 即将到来iPhone XR 即将到来<br>北京时间 10 月 19 日下午 3:01 起开始预购。</p>
</blockquote>
<p>苹果拒审信：</p>
<blockquote>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple hardware from your app’s metadata such as iPhone XR.</p>
</blockquote>
<p>最后苹果友善回复：</p>
<blockquote>
<p>2018年9月24日 下午8:49<br>发件人 Apple<br>0 . 10.0 Before You Submit: Program License Agreement<br>Hello,</p>
<p>Thank you for making these changes. We will continue the review, and we will notify you if there are any further issues.</p>
<p>Best regards,</p>
<p>App Store Review</p>
</blockquote>
<h3 id="3、总结">3、总结</h3><p>还是第一次遇到这样的情况，苹果不允许发布无上线的硬件或软件产品，也就是说，不能写错名字！！！确实，这样的要求，完全合理！！！</p>
<p>经过这事，苹果的审核确实还是存在很多问题，经过这几年，审核速度可以给予肯定，从原来一个星期，变快到1~2天，但是“审核质量” 却一直没有得到提升，导致开发者和审核员一直来回被拒来拒绝，相互怀疑和猜测，导致效率并没有真正的提高。希望，后续苹果能提供更优质的审核机制和流程标准。像谷歌play那样的机器审核也未必不行，后续在抽查，发现违反的，直接下架。这样对于开发者，都没有什么要向老板交待，直接了当！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="http://swiftcn.io/topics/48?reply=185" target="_blank" rel="external">最近被拒，不知道什么原因，内容是 PLA 2.3 - Swift中国</a></li>
<li><a href="https://www.apple.com/cn/shop/buy-iphone/iphone-xr" target="_blank" rel="external">购买 iPhone XR - Apple (中国)</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近更新了一下之前开源的一些iOS App，适配了一下iPhone X / Xs / XR / Xs Max，然后收到这样的拒审信：</p>
<blockquote>
<p>2018年9月24日 上午1:08<br>发件人 Apple</p>
<ol>
<li>10.0 Before You Submit: Program License Agreement<br>PLA 2.3</li>
</ol>
<p>Your app or its metadata contains references to a pre-release version of Apple software or hardware. Apps with compatibility references to a pre-GM version of iOS SDK or pre-released Apple hardware are not in compliance with the Apple Developer Program License Agreement.</p>
<p>Specifically, section 2.3 states:</p>
<p>“Apple may provide You with pre-release versions of the Apple Software or related services that constitute Apple Confidential Information and are subject to the confidentiality obligations of this Agreement.”</p>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple software and hardware from your app and its metadata.</p>
<p>Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata, visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, reply to this message in Resolution Center and we will continue the review.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="AppStore" scheme="https://iHTCboy.com/tags/AppStore/"/>
    
      <category term="PLA2.3" scheme="https://iHTCboy.com/tags/PLA2-3/"/>
    
      <category term="review-guidelines" scheme="https://iHTCboy.com/tags/review-guidelines/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
</feed>
