<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iHTCboy's blog]]></title>
  <subtitle><![CDATA[Learn something of everything, Learn everything of something.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://iHTCboy.com/"/>
  <updated>2018-10-01T01:12:59.556Z</updated>
  <id>https://iHTCboy.com/</id>
  
  <author>
    <name><![CDATA[iHTCboy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[程序员的macOS系列：Mac开发环境配置]]></title>
    <link href="https://iHTCboy.com/2018/09/30/2018-09-30_%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS%E7%B3%BB%E5%88%97%EF%BC%9AMac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://iHTCboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/</id>
    <published>2018-09-30T15:49:16.000Z</published>
    <updated>2018-10-01T01:12:59.556Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在写《程序员的macOS系列》文章，之前写的第一篇 <a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a>，大家都希望尽快更新，今天开始写第二篇，其实macOS开发环境，系统默认自带ruby、python2、gcc、g++、bash等环境，并且因为macOS是以Unix为基础，所以有传统Unix/Linux的特性，很适合高效少折腾的开发者。所以，本文主要讲解一些通用开发环境配置，主要是以必须和提高效率为主！其它也没有什么高深介绍，当然，由于楼主目前主职是iOS，所以其它的开发环境接触不多(谦虚)，当前大家要学以至用，环境搭建都是相似的，熟悉了就不是问题。文章短短不可能详尽也，要学好每一个点也不是那么简单，惟有抛砖引玉，希望大家努力提高！</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》三篇，后续有想法在更新吧~</p>
<a id="more"></a>
<h3 id="2、开发环境配置">2、开发环境配置</h3><p>需要提前说明一下，本文不使用代理源，如果命令无效，大家记得翻墙一下啊。另外，如果是通过软件包安装的方式，就不在这里列举了，比如<code>Java</code>的安装、<code>MySQL</code>的安装这些自行搜索~</p>
<h4 id="Homebrew">Homebrew</h4><p><code>Homebrew</code> 是强大的终端工具，用来管理很多在终端下操作的程序以及软件包的依赖，对于经常需要使用终端应用的程序员来说，是必不可少的第一步！</p>
<p>打开终端，安装命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>上面命令，我希望大家不只是复制粘贴运行就完事，更希望大家能了解更多：</p>
<ul>
<li><code>/usr/bin/ruby</code>：使用ruby环境运行</li>
<li><code>curl -fsSL</code>：使用curl命令下载</li>
</ul>
<p>了解了这2点，那么<code>ruby</code>环境、<code>curl</code>命令和参数的作用，这些大家就可以自行搜索深入学习，而不是片面过一次，达到学以致用，这才是<code>真学习</code>！</p>
<p><code>brew</code> 一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew search</span><br><span class="line">brew info</span><br><span class="line">brew install</span><br><span class="line">brew remove</span><br><span class="line">brew update</span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure>
<p><code>brew</code> 命令就不多说了，类似linux系统下的<code>apt-get</code>，程序员都要从入门到精通啊~</p>
<h4 id="命令行工具（Command_Line_Tools)">命令行工具（Command Line Tools)</h4><p> 如果不是开发 <code>iOS</code> 或 <code>macOS</code> 可能就没有必要安装Xcode，但是可能需要安装一下Xcode 命令行工具，因为很多环境和软件都会使用到和依赖它（下面说到的<code>Carthage</code>、<code>python3</code>就依赖它）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<p><code>xcode-select</code> 这个命令还可以切换xcode build的版本（目录），可以 <code>xcode-select --help</code> 查看更多。</p>
<p>这里提醒一下新手，终端的命令，如果记得命令名字，不记得用法，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx --help</span><br></pre></td></tr></table></figure>
<p>也可以用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man xxx</span><br></pre></td></tr></table></figure>
<p><code>--help</code> 和 <code>man</code> 命令的区别，是<code>man</code>命令是详细全面的介绍。</p>
<h4 id="Bash（Zsh）">Bash（Zsh）</h4><p>安装 <code>zsh</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure>
<p>使用 <code>oh-my-zsh</code> 可以将zsh变得更加强大而灵巧：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>另外可以安装 oh-my-zsh 一些插件，比如实现自动跳转：<a href="https://github.com/joelthelion/autojump" target="_blank" rel="external">autojump</a>、<a href="https://github.com/clvv/fasd" target="_blank" rel="external">fasd</a></p>
<p>个性化配置，包括别名，都在目录 <code>~/.zshrc</code> 下，需要深入教程的大家自动网上搜索啊。这里只是配置入门，修行还是看个人啊！</p>
<p>创建别名的示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc //vim 命令下面会说到</span><br><span class="line"><span class="built_in">alias</span> myblog=<span class="string">'cd /Users/HTC/Documents/iHTCBlog'</span> //快速到达指定目录</span><br><span class="line"><span class="built_in">alias</span> st=<span class="string">'open -a "Sublime Text"'</span> //打开某个app</span><br></pre></td></tr></table></figure>
<h4 id="node/npm">node/npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>安装node后，也会自动安装npm工具。npm 即 node package manager，用来搜索、下载、管理 node.js 相关的套件。</p>
<p><code>npm</code> 一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">help</span> //查看npm帮助</span><br><span class="line">npm find //查找组件</span><br><span class="line">npm install //安装组件</span><br><span class="line">npm remove //删除组件</span><br><span class="line">npm update //更新组件</span><br></pre></td></tr></table></figure>
<p>node除了<code>node.js</code>后台开发外，<code>react native</code>、<code>Hexo</code>博客也是依赖node环境，更多的node知识，我也还在努力学习中，后续有新认识，再回来更新啊！就不误人子弟啦~</p>
<h4 id="vi(vim)">vi(vim)</h4><p>vi是“visual interface”的缩写，vim是 vi IMproved(增强版的vi)。vi(vim)命令繁多，但是如果灵活使用之后将会大大提高效率！从此不用鼠标不是梦！</p>
<p>vi(vim)是Unix/Linux终端自带的，所以macOS也自带。那么vi(vim)要配置什么呢？</p>
<p>就是大家觉得vi(vim)好用，但是，还认为可以更好用，所以，有很多的插件（用更少的按键，实现更多更合理的功能），例如实现文件浏览（<a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">NERD Tree</a>），代码补全（<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>），语法检查（<a href="https://github.com/vim-syntastic/syntastic" target="_blank" rel="external">syntastic</a>），文件模糊搜索（<a href="https://github.com/kien/ctrlp.vim" target="_blank" rel="external">ctrlp</a>），显示vim状态栏（<a href="https://github.com/Lokaltog/vim-powerline" target="_blank" rel="external">Vim Powerline</a>）,主题颜色（<a href="https://github.com/tomasr/molokai" target="_blank" rel="external">Molokai</a>）,显示文件结构（<a href="https://github.com/majutsushi/tagbar" target="_blank" rel="external">tagbar</a>）等多种功能</p>
<p>vi(vim)操作的快捷键教程可以参考楼主之前的文章：<a href="https://ihtcboy.com/2018/07/28/2018-07-28_Vim快捷键小记/">vi(vim)快捷键小记</a></p>
<p>更多vi的知识，大家自行搜索学习啊~</p>
<h4 id="Git">Git</h4><p><code>git</code>的作用就不多说了，如果是刚毕业的新手入门，建议自行学习，对你的开发帮助一定非常大~</p>
<p><code>git</code> 安装：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>install git</span><br></pre></td></tr></table></figure>
<p><code>git</code>基本配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#34;iHTCboy&#34;&#10;git config --global user.email &#34;ihetiancong@gmail.com&#34;&#10;git config --global color.ui true&#10;git config --global alias.co checkout  # &#21035;&#21517;&#10;git config --global alias.ci commit&#10;git config --global alias.st status&#10;git config --global alias.br branch&#10;git config --global core.editor &#34;vim&#34;  # &#35774;&#32622;Editor&#20351;&#29992;vim&#10;git config --global core.quotepath false # &#35774;&#32622;&#26174;&#31034;&#20013;&#25991;&#25991;&#20214;&#21517;</span><br></pre></td></tr></table></figure>
<p>用户的git配置文件目录： <code>~/.gitconfig</code></p>
<p><code>git</code> 更多命令教程，大家自行搜索，如果要达到熟悉，还是要多实践练习啊~ 当然，原理也是必不可少的一步！</p>
<h4 id="python3">python3</h4><p>python3是未来，所以还是要安装使用和开发的！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure>
<p>查看 <code>python3</code>的版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure>
<p><code>python</code> 能做的事件就不多说了，人工智能，机器学习，大数据分析，爬虫，web，已经可以说，<code>python</code>已经渗透到各个地方~</p>
<h4 id="jenkins">jenkins</h4><p>暂时留存，日后回来写</p>
<h4 id="CocoaPods">CocoaPods</h4><p><code>CocoaPods</code> 是iOS的包管理工具，类似于 java 的<code>Maven</code>、Node.js 的 <code>npm</code>、Python 的 <code>pip</code>、Ruby 的 <code>gem</code>。</p>
<p><code>CocoaPods</code> 基于<code>Ruby</code>开发的，因此安装<code>CocoaPods</code>前需要先安装<code>Ruby</code>环境。而前面提到macOS系统默认自带Ruby环境! 所以，直接安装吧~</p>
<p>安装命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>
<p>配置<code>CocoaPods</code>环境，安装<code>Specs</code>库，由于库很大，需要一些时间和网速：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure>
<p><code>pod</code> 一些常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pod --version //pod版本</span><br><span class="line">pod init //创建Podfile文件</span><br><span class="line">pod install //项目pod安装</span><br><span class="line">pod update //项目pod更新</span><br><span class="line">pod search //搜索库</span><br></pre></td></tr></table></figure></p>
<p>更多使用说明，自行搜索啊~</p>
<h4 id="Carthage">Carthage</h4><p>我们使用包管理，就是为了集成第三方库的时候更加方便，迅速。有时候 <code>CocoaPods</code>处理因包管理而导致的错误又浪费了我们很多时间。而 <code>Carthage</code> 使用的是一种<strong>非侵入性</strong>的哲学，<code>Carthage</code> 不会对我们的项目结构进行任何修改，更不多创建 <code>workspace</code>。它只是根据我们描述文件中配置的第三方库，将它们下载到本地，然后使用 <code>xcodebuild</code> 构建成 <code>framework</code> 文件。</p>
<p>另外 <code>Carthage</code> 除了<strong>非侵入性</strong>，它还是<strong>去中心化</strong>的，它的包管理不像 <code>CocoaPods</code> 那样，有一个<strong>中心服务器(cocoapods.org)</strong>，来管理各个包的元信息，而是依赖于每个第三方库自己的源地址，比如 <code>Github</code>。</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install carthage</span><br></pre></td></tr></table></figure>
<p><code>carthage</code> 一些常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">carthage version //查看版本</span><br><span class="line">brew upgrade carthage //升级carthage</span><br><span class="line">carthage update //安装或更新项目的库</span><br></pre></td></tr></table></figure></p>
<p>更多使用说明，自行搜索啊~</p>
<h3 id="3、其它环境配置和插件">3、其它环境配置和插件</h3><h4 id="Finder（访达）预览插件">Finder（访达）预览插件</h4><p>用于<code>Finder</code>快速显示文件的内容，这个Github专门收集了特别的<code>Finder</code>插件：<br><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">https://github.com/sindresorhus/quick-look-plugins</a></p>
<p>安装命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask <span class="operator"><span class="keyword">install</span> qlcolorcode qlstephen qlmarkdown quicklook-<span class="keyword">json</span> qlimagesize webpquicklook suspicious-<span class="keyword">package</span> quicklookase qlvideo</span></span><br></pre></td></tr></table></figure>
<p>其中特别的插件说明，详细看<a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">quick-look-plugins</a>：</p>
<ul>
<li>qlcolorcode: 代码文件预览时高亮</li>
<li>qlstephen: 以纯文本的形式预览无拓展名或者未知拓展名的文件</li>
<li>qlmarkdown: 预览渲染后的 markdown 文件</li>
<li>quicklook-json: 预览格式化后的 json 文件</li>
<li>ProvisionQL: ipa文件信息展示</li>
<li>QuickLookAPK：apk文件信息展示</li>
</ul>
<p>用图片来说明一下作用，一看就懂：<br>QuickLookJSON：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QuickLookJSON.png" alt=""></p>
<p>QLMarkdown：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QLMarkdown.png" alt="QLMarkdown.png"></p>
<p>ProvisionQL：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/ProvisionQL.png" alt=""></p>
<p>QuickLookAPK：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QuickLookAPK.png" alt="QuickLookAPK.png"></p>
<h4 id="Hexo_博客">Hexo 博客</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo</span></span><br></pre></td></tr></table></figure>
<p>具体<code>hexo</code>使用，可能参考之前的文章：<a href="https://ihtcboy.com/2015/09/06/2015_Hexo搭建Github-Pages博客填坑教程/">Hexo搭建Github Pages博客填坑教程</a></p>
<p>建议每一个技术人员都搭建自己一个博客，依靠<code>GitHub</code>、<code>oschina</code>或<code>Coding.net</code>提供的免费服务，完全没问题，如果需要自己的域名，购买一个域名也就几百元就10年啦。程序员要多总结。比如你学习了一个技术或做了一个项目，没有一点记录，没有一点总结，没有一点思考，那么你能有收获吗？？？</p>
<h4 id="Safari_Extensions">Safari Extensions</h4><p>Safari 浏览器的插件<br><a href="https://safari-extensions.apple.com" target="_blank" rel="external">Apple - Safari - Safari Extensions Gallery</a></p>
<p>我这里就推荐几个常用的：</p>
<ul>
<li><a href="https://safari-extensions.apple.com/details/?id=com.sidetree.Translate-S64NDGV2C5" target="_blank" rel="external">Translate</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.evernote.safari.clipper-Q79WDW8YH9" target="_blank" rel="external">Evernote Web Clipper</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.breadfm.webqr-2LGL679YYN" target="_blank" rel="external">webQR</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.damiancarrillo.search-alias-RADJYLEN7P" target="_blank" rel="external">Search Alias</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.diigo.safari.awesomescreenshot-5DXNM3K2CT" target="_blank" rel="external">Awesome Screenshot</a></li>
</ul>
<p>另外，macOS 10.14 后，苹果 Safari 浏览器不再支持不安全的扩展。只可以在 App Store 或 Safari 浏览器扩展库中查找经过 Apple 审核的更新扩展。</p>
<h4 id="报错：无法打开已损坏的安装包">报错：无法打开已损坏的安装包</h4><p>遇到打开自己下载的安装包失败时，可执行下面命令解决：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<p>macOS 10.14 后，苹果对安全和隐私保护这一块更加严厉，当然，事件有好的一面，也有不好（不方便）的一面，大家智者见智，我一般是把这个命令当成别名：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> macss=<span class="string">"sudo spctl --master-disable"</span></span><br></pre></td></tr></table></figure>
<p>这里在终端输入 <code>macss</code> 就可以啦~</p>
<h4 id="终端命令">终端命令</h4><p>在终端和vim下，程序员的效率一定提升不少，但对于新手，下面也列出一些重要的终端命令，方便大家重点掌握，更多就大家自动搜索了：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>say xxx</td>
<td>读单词</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前目录的路径名</td>
</tr>
<tr>
<td>ls</td>
<td>查看当前目录下的文件</td>
</tr>
<tr>
<td>ls -al</td>
<td>查看所有文件，包含隐藏文件</td>
</tr>
<tr>
<td>clear</td>
<td>清除屏幕或窗口内容</td>
</tr>
<tr>
<td>cd /xx/yy</td>
<td>跳转到目录/xx/yy</td>
</tr>
<tr>
<td>cd ..</td>
<td>返回上一级目录</td>
</tr>
<tr>
<td>cd /</td>
<td>返回根目录</td>
</tr>
<tr>
<td>cd -</td>
<td>返回到上一步操作目录</td>
</tr>
<tr>
<td>man xx</td>
<td>查看命令的详细帮助，比如 mac ls</td>
</tr>
<tr>
<td>killall Finder</td>
<td>重启Finder</td>
</tr>
<tr>
<td>touch xxx</td>
<td>创建xxx文件</td>
</tr>
<tr>
<td>mkdir xxx</td>
<td>创建xxx文件夹</td>
</tr>
<tr>
<td>rm xxx</td>
<td>删除文件</td>
</tr>
<tr>
<td>rm -rf xxxx</td>
<td>删除文件夹</td>
</tr>
<tr>
<td>defaults write com.apple.finder AppleShowAllFiles TRUE <br>killall Finder</td>
<td>查看隐藏文件</td>
</tr>
<tr>
<td>defaults write com.apple.finder AppleShowAllFiles FALSE <br>killall Finder</td>
<td>隐藏文件</td>
</tr>
<tr>
<td>↑ ↓</td>
<td>读取上一条或者下一条的命令记录</td>
</tr>
<tr>
<td>sudo vi /private/etc/hosts</td>
<td>编辑hosts文件</td>
</tr>
</tbody>
</table>
<h3 id="总结">总结</h3><p>macOS的开发环境大概就讲到这些，如果大家还有不清楚的，网上搜索已经一大片，这里只是总结和归纳一下，让大家有一个系统性的了解和学习，只有大家系统性的全面了解，才能深入每一个知识点学习。这也是本文的目的，授于鱼，不如授于渔，希望大家努力学习~</p>
<p>楼主目前接触前端H5和后台开发时间不长，暂时不知道它们需要在macOS配置一些什么特别的环境，这些后续在补充，下面引用的参考，大家有时间一定要看看哦。这一篇就先这样~ 大家也可以留言反馈。国庆快乐~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://www.npmjs.com" target="_blank" rel="external">npm</a></li>
<li><a href="https://brew.sh" target="_blank" rel="external">The missing package manager for macOS — The missing package manager for macOS</a></li>
<li><a href="https://ihtcboy.com/2018/07/28/2018-07-28_Vim快捷键小记/">vi(vim)快捷键小记 | iHTCboy’s blog</a></li>
<li><a href="https://www.jianshu.com/p/a0b452f8f720" target="_blank" rel="external">Vim配置、插件和使用技巧 - 简书</a></li>
<li><a href="https://ihtcboy.com/2015/09/06/2015_Hexo搭建Github-Pages博客填坑教程/">Hexo搭建Github Pages博客填坑教程 | iHTCboy’s blog</a></li>
<li><a href="https://ihtcboy.com/2018/02/03/2018-02-03_让你的iTerm更Geek!/">让你的iTerm更Geek! | iHTCboy’s blog</a></li>
<li><a href="http://stormzhang.com/git/2014/01/27/git-common-command/" target="_blank" rel="external">Git常用命令备忘 - stormzhang</a></li>
<li><a href="https://bestswifter.gitbook.io/effectivemac/" target="_blank" rel="external">EffectiveMac - bestswifter</a></li>
<li><a href="https://ohmyz.sh" target="_blank" rel="external">Oh My Zsh - a delightful &amp; open source framework for Z-Shell</a></li>
<li><a href="https://leohxj.gitbooks.io/a-programmer-prepares/software/mac/softwares/zsh.html" target="_blank" rel="external">zsh | 程序员的自我修养</a></li>
<li><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers</a></li>
<li><a href="https://cocoapods.org" target="_blank" rel="external">CocoaPods.org</a></li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage/Carthage: A simple, decentralized dependency manager for Cocoa</a></li>
<li><a href="http://swiftcafe.io/2015/10/25/swift-daily-carthage-package" target="_blank" rel="external">Carthage 包管理工具，另一种敏捷轻快的 iOS &amp; MAC 开发体验 - SwiftCafe 享受代码的乐趣</a></li>
<li><a href="https://safari-extensions.apple.com" target="_blank" rel="external">Apple - Safari - Safari Extensions Gallery</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在写《程序员的macOS系列》文章，之前写的第一篇 <a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a>，大家都希望尽快更新，今天开始写第二篇，其实macOS开发环境，系统默认自带ruby、python2、gcc、g++、bash等环境，并且因为macOS是以Unix为基础，所以有传统Unix/Linux的特性，很适合高效少折腾的开发者。所以，本文主要讲解一些通用开发环境配置，主要是以必须和提高效率为主！其它也没有什么高深介绍，当然，由于楼主目前主职是iOS，所以其它的开发环境接触不多(谦虚)，当前大家要学以至用，环境搭建都是相似的，熟悉了就不是问题。文章短短不可能详尽也，要学好每一个点也不是那么简单，惟有抛砖引玉，希望大家努力提高！</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》三篇，后续有想法在更新吧~</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="https://iHTCboy.com/tags/Mac/"/>
    
      <category term="macOS" scheme="https://iHTCboy.com/tags/macOS/"/>
    
      <category term="开发环境" scheme="https://iHTCboy.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="程序员的macOS" scheme="https://iHTCboy.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hopper Disassembler 逆向西数硬盘 WD My Passport 的失败经历]]></title>
    <link href="https://iHTCboy.com/2018/09/27/2018-09-27-Hopper%E9%80%86%E5%90%91WD-MyPassport%E7%9A%84%E5%A4%B1%E8%B4%A5%E7%BB%8F%E5%8E%86/"/>
    <id>https://iHTCboy.com/2018/09/27/2018-09-27-Hopper逆向WD-MyPassport的失败经历/</id>
    <published>2018-09-27T13:49:16.000Z</published>
    <updated>2018-09-30T13:49:42.623Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>一直以来都是使用西数的移动硬盘，最开始256G的 <code>My Passport</code>，当时也不知道，在电脑城就买了，回家发现可以设置密码，当然，我记得有密码的存储设备，是台电的U盘，当年16G的加密U盘，我也买了3个（因为当年最大16G容量），所以，之后就与加密的存储设备相惜相爱，现在西数的移动硬盘也是几代后的AES 256位硬件加密。加密功能的存储设备越来越受喜爱，除了大部分网盘破产外，就是隐私的问题，大家都希望有自己的小空间。</p>
<p>几天前，购买了4T的 WD My Passport 加密移动硬盘，设置了一个新密码，然后过完中秋，发现！密码记不起来了！！！反复尝试，只能看到破解！！！</p>
<a id="more"></a>
<h3 id="2、怎么办？">2、怎么办？</h3><p>先说一下，WD怎么打开硬盘，密码位数不限制，字符、数字和特殊符号都可以，然后，只能点击界面上的 <code>硬盘解锁</code> 才能解锁。按回车没有反应：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive.jpg" alt="20180927-WD-unlock-drive.jpg"></p>
<p>如果尝试密码超过5次，只能把USB拨出，重新插入才能重新尝试：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive-max.jpg" alt="20180927-WD-unlock-drive-max.jpg"></p>
<p>知道了这个流程，就想到几个思路，找到点击<code>硬盘解锁</code> 点击的处理方法，返回成功就可以了？</p>
<p>Hopper Disassembler ：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive-hopper.jpg" alt="20180927-WD-unlock-drive-hopper.jpg"></p>
<p>从上面的图片，可以找到这个方法，非常明显示了！</p>
<p>然后打开伪代码界面，里面的第一个判断是，如果 <code>rax==0x7</code> ，就会进入到失败的逻辑处理中，所以这样要修复它为不等于（!=），下面在说怎么修改：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-if1.jpg" alt="20180927-hopper-processUnlockDrive-if1.jpg"></p>
<p>下面这个判断是 如果 <code>rax==0x6</code> ，就是密码正确，可以打开硬盘！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-if2.jpg" alt="20180927-hopper-processUnlockDrive-if2.jpg"></p>
<p>下图，可以看出<code>cmp eax, 0x7</code>，就是上面说的比较是否相等，因此选中<code>cmp eax, 0x7</code>一行，选择菜单栏 <code>Modify -&gt; Assemble Instruction</code>，然后后面的0x7为其它值，这样就不相等了<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-fix1.jpg" alt="20180927-hopper-processUnlockDrive-fix1.jpg"></p>
<p>然后，这个也是相似，如果要让他相等，那么这个值改为<code>0x7</code>，因为失败时就是走上一个if判断中了，所以改一下这个值指向，应该就可以相等了吧？<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-fix2.jpg" alt="20180927-hopper-processUnlockDrive-fix2.jpg"></p>
<p>最后，选择 <code>File -&gt; Produce New Executable</code> 来生成新的可执行文件，替换掉原来的文件即可。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-copy-new.jpg" alt="20180927-hopper-processUnlockDrive-copy-new.jpg"></p>
<p>但是，想复制新的可执行文件替换失败：<code>Read-only file system</code>！！！</p>
<p>最后，查了一些方法，也没有办法修改这个硬盘的这个目录属性，唉，这个方法不知道有没有效果？？？ 最后，还是乱输入时，记起了密码！！！然后就没有然后了。</p>
<p>剩下的，就看大家有能力的，来补充一下啊~ 或者，若干年后有能力罢。</p>
<h3 id="总结">总结</h3><p>总结。西数硬盘这个5次失败密码要重新链接的功能，让破解密码变得复杂，当然，能一直尝试密码也是有好处，也是弱处。</p>
<p>最后，发现会一点逆向技术，不管是正向的开发，还是逆向的开发，都会对提高自己开发的系统的安全性，有更好的思考！！！另外，真的需要有时候，回来学习一下汇编语言，是提高逆向内功的必经之路，在这里，先立个目录，回头尝尝，大家一起加油~ 监督！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/c04ac36c6641" target="_blank" rel="external">最简单的Hopper Disassembler玩转Mac逆向 - 简书</a></li>
<li><a href="http://www.blogfshare.com/ioss-hopper.html" target="_blank" rel="external">iOS安全–使用Hopper修改程序逻辑跳过验证</a></li>
<li><a href="https://bestswifter.com/app-crack/" target="_blank" rel="external">一个数字的魔法——破解Mac上198元的Paw</a></li>
<li><a href="https://www.jianshu.com/p/33e40af6e328" target="_blank" rel="external">Mac OSX 之自己动手初步学习破解软件入门 - 简书</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>一直以来都是使用西数的移动硬盘，最开始256G的 <code>My Passport</code>，当时也不知道，在电脑城就买了，回家发现可以设置密码，当然，我记得有密码的存储设备，是台电的U盘，当年16G的加密U盘，我也买了3个（因为当年最大16G容量），所以，之后就与加密的存储设备相惜相爱，现在西数的移动硬盘也是几代后的AES 256位硬件加密。加密功能的存储设备越来越受喜爱，除了大部分网盘破产外，就是隐私的问题，大家都希望有自己的小空间。</p>
<p>几天前，购买了4T的 WD My Passport 加密移动硬盘，设置了一个新密码，然后过完中秋，发现！密码记不起来了！！！反复尝试，只能看到破解！！！</p>]]>
    
    </summary>
    
      <category term="Disassembler" scheme="https://iHTCboy.com/tags/Disassembler/"/>
    
      <category term="Hopper" scheme="https://iHTCboy.com/tags/Hopper/"/>
    
      <category term="MyPassport" scheme="https://iHTCboy.com/tags/MyPassport/"/>
    
      <category term="WD" scheme="https://iHTCboy.com/tags/WD/"/>
    
      <category term="西数硬盘" scheme="https://iHTCboy.com/tags/%E8%A5%BF%E6%95%B0%E7%A1%AC%E7%9B%98/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AppStore 拒绝审核原因：PLA 2.3]]></title>
    <link href="https://iHTCboy.com/2018/09/24/2018-09-24_%E8%8B%B9%E6%9E%9C%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92PLA_2.3/"/>
    <id>https://iHTCboy.com/2018/09/24/2018-09-24_苹果审核被拒PLA_2.3/</id>
    <published>2018-09-24T06:49:16.000Z</published>
    <updated>2018-09-24T13:20:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近更新了一下之前开源的一些iOS App，适配了一下iPhone X / Xs / XR / Xs Max，然后收到这样的拒审信：</p>
<blockquote>
<p>2018年9月24日 上午1:08<br>发件人 Apple</p>
<ol>
<li>10.0 Before You Submit: Program License Agreement<br>PLA 2.3</li>
</ol>
<p>Your app or its metadata contains references to a pre-release version of Apple software or hardware. Apps with compatibility references to a pre-GM version of iOS SDK or pre-released Apple hardware are not in compliance with the Apple Developer Program License Agreement.</p>
<p>Specifically, section 2.3 states:</p>
<p>“Apple may provide You with pre-release versions of the Apple Software or related services that constitute Apple Confidential Information and are subject to the confidentiality obligations of this Agreement.”</p>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple software and hardware from your app and its metadata.</p>
<p>Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata, visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, reply to this message in Resolution Center and we will continue the review.</p>
</blockquote>
<a id="more"></a>
<h3 id="2、解决">2、解决</h3><p>刚开始以为自己使用了 Xcode GM 版本提交应用，但反复检查就是正式的Xcode Version 10.0 (10A255)!</p>
<p>最后，还是通过网络搜索找到答案：</p>
<blockquote>
<p>此版本的新增内容:</p>
<ul>
<li>v5.0.0 适配iPhoneX、XR、Xmax ；</li>
<li>修复新闻列表闪退问题；</li>
<li>优化一些功能细节体验</li>
</ul>
</blockquote>
<p>引用网友的话：</p>
<blockquote>
<p>你的发布介绍里提到了苹果没开卖的iPadPro，删掉重新审核就行，不用重新上传包。回复大概这意思</p>
</blockquote>
<p>然后搜索iPhone Xs上市时间?</p>
<blockquote>
<p>将在9月14日周五开启预售，9月21日正式上市</p>
</blockquote>
<p>没毛病！！！今天已经2018年9月24号啦！<br>最后，还是发现，字母拼写错啦！！！</p>
<blockquote>
<ul>
<li>v5.0.0 适配 iPhone X、XR、XS Max；</li>
<li>修复新闻列表闪退问题；</li>
<li>优化一些功能细节体验</li>
</ul>
</blockquote>
<ul>
<li>最后发现，还是被坑了一波：</li>
</ul>
<blockquote>
<p>iPhone X🅁 即将到来iPhone XR 即将到来<br>北京时间 10 月 19 日下午 3:01 起开始预购。</p>
</blockquote>
<p>苹果拒审信：</p>
<blockquote>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple hardware from your app’s metadata such as iPhone XR.</p>
</blockquote>
<p>最后苹果友善回复：</p>
<blockquote>
<p>2018年9月24日 下午8:49<br>发件人 Apple<br>0 . 10.0 Before You Submit: Program License Agreement<br>Hello,</p>
<p>Thank you for making these changes. We will continue the review, and we will notify you if there are any further issues.</p>
<p>Best regards,</p>
<p>App Store Review</p>
</blockquote>
<h3 id="3、总结">3、总结</h3><p>还是第一次遇到这样的情况，苹果不允许发布无上线的硬件或软件产品，也就是说，不能写错名字！！！确实，这样的要求，完全合理！！！</p>
<p>经过这事，苹果的审核确实还是存在很多问题，经过这几年，审核速度可以给予肯定，从原来一个星期，变快到1~2天，但是“审核质量” 却一直没有得到提升，导致开发者和审核员一直来回被拒来拒绝，相互怀疑和猜测，导致效率并没有真正的提高。希望，后续苹果能提供更优质的审核机制和流程标准。像谷歌play那样的机器审核也未必不行，后续在抽查，发现违反的，直接下架。这样对于开发者，都没有什么要向老板交待，直接了当！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="http://swiftcn.io/topics/48?reply=185" target="_blank" rel="external">最近被拒，不知道什么原因，内容是 PLA 2.3 - Swift中国</a></li>
<li><a href="https://www.apple.com/cn/shop/buy-iphone/iphone-xr" target="_blank" rel="external">购买 iPhone XR - Apple (中国)</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近更新了一下之前开源的一些iOS App，适配了一下iPhone X / Xs / XR / Xs Max，然后收到这样的拒审信：</p>
<blockquote>
<p>2018年9月24日 上午1:08<br>发件人 Apple</p>
<ol>
<li>10.0 Before You Submit: Program License Agreement<br>PLA 2.3</li>
</ol>
<p>Your app or its metadata contains references to a pre-release version of Apple software or hardware. Apps with compatibility references to a pre-GM version of iOS SDK or pre-released Apple hardware are not in compliance with the Apple Developer Program License Agreement.</p>
<p>Specifically, section 2.3 states:</p>
<p>“Apple may provide You with pre-release versions of the Apple Software or related services that constitute Apple Confidential Information and are subject to the confidentiality obligations of this Agreement.”</p>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple software and hardware from your app and its metadata.</p>
<p>Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata, visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, reply to this message in Resolution Center and we will continue the review.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="AppStore" scheme="https://iHTCboy.com/tags/AppStore/"/>
    
      <category term="PLA2.3" scheme="https://iHTCboy.com/tags/PLA2-3/"/>
    
      <category term="review-guidelines" scheme="https://iHTCboy.com/tags/review-guidelines/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧5 - 全自动打包ipa]]></title>
    <link href="https://iHTCboy.com/2018/09/17/2018-09-17_shell%E6%8A%80%E5%B7%A75_%E5%85%A8%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90ipa/"/>
    <id>https://iHTCboy.com/2018/09/17/2018-09-17_shell技巧5_全自动打包生成ipa/</id>
    <published>2018-09-17T03:22:16.000Z</published>
    <updated>2018-09-28T15:22:42.259Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在研究上传ipa文件自动上传到苹果后台（后续有时间也分享给大家啊），然后，就需要制作大量的ipa文件啊！如果手工的<code>Archive</code> 那不就死啦，整个步骤，大概要5分钟过程，而且不是一步到位等5分钟，所以就研究了一下项目如何自动打ipa，最后找到了 <a href="https://www.jianshu.com/p/9792b704b18f" target="_blank" rel="external">iOS项目之自动化打包 - 简书</a> 这篇文件，然后根据需求，扩展做了全能自动化的，app-store、ad-hoc、dev 三种类型证书，另外项目如果是用cocoapod，需要用 <code>-workspace</code>，否则用 <code>-project</code>，都做了相当自能化的改造，下面就来看看吧！</p>
<p>ps: <code>fastlane</code> 当然能做到这些事情，但是这个工具太重，需要的配置也需要熟悉，对于刚毕业或陌生的同学有点难，学习一下<code>ruby</code>也是好事，大家有兴趣可以自行研究一下~</p>
<a id="more"></a>
<h3 id="2、使用说明">2、使用说明</h3><p>本文，也不打算讲 <code>xcodebuild</code> 命令的原理，大家需要自动搜索，网上很多教程了。所以，我们先过一下，怎么打包吧！</p>
<ul>
<li><p>把 <code>build_ipa_shell</code> 脚本和证书配置文件夹复制到项目</p>
<p>  <img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Shell-copy-script-to-project.png" alt="20180917-Shell-copy-script-to-project.png"></p>
</li>
<li><p>根据要求修改项目名字和配置</p>
<p>  <img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Shell-build-setting.png" alt="20180917-Shell-build-setting.png"></p>
</li>
<li><p>在终端执行 <code>sh build_ipa.sh</code>，不要求切换到项目的目录啊，然后选择打包的类型，然后等待就好！</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ &#62; sh /Users/HTC/Desktop/BuildIPAExample/build_ipa_shell/build_ipa.sh &#10;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>编译打包成功后，会自动打开ipa文件的目录！<br>  <img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Shell-build-success-ipa.png" alt="20180917-Shell-build-success-ipa.png"></li>
</ul>
<p>如果配置好后，只要执行一下命令，就自动打ipa包，并且成功后自己打开ipa包的目录，简直不能在简单了！</p>
<h3 id="3、配置说明">3、配置说明</h3><p>上面已经说了 <code>build_ipa.sh</code>的配置，就是 <code>ExportOptions-appstore.plist</code> /<code>ExportOptions-dev.plist</code> / <code>ExportOptions-adhoc.plist</code> 三个证书的配置没有说，其实也很简单，自己配置，或者让Xcode生成配置！</p>
<p>自己配置的就不说了，自己搜索一下教程就好，让Xcode生成，就是要 <code>Archive</code> 项目，然后选择 <code>Export...</code>：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Build-Archives.png" alt="20180917-Xcode-Build-Archives.png"></p>
<p>上面三个文件，就对应下面的三个选项:<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-Select-Method.png" alt="20180917-Xcode-Archives-Select-Method.png"></p>
<p>如果选择手动，就是使用本地的证书（如果是选择自动，就是Xcode中登陆了开发者账号，自动生成和匹配证书）：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-Select-Manually.png" alt="20180917-Xcode-Archives-Select-Manually.png"></p>
<p>等待Xcode生成ipa包，选择 <code>Export</code>，Xcode就会自动生成ipa文件和证书配置文件，跟我们的脚本一样的：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-Select-Automatically.png" alt="20180917-Xcode-Archives-Select-Automatically.png"></p>
<p>最后，导出的文件中，更改<code>ExportOptions.plist</code> 文件名字为对应的 <code>ExportOptions-appstore.plist</code> /<code>ExportOptions-dev.plist</code> / <code>ExportOptions-adhoc.plist</code>，然后复制到  <code>build_ipa_shell</code> 脚本目录就可以啦！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-ExportOptions-plist.png" alt="20180917-Xcode-Archives-ExportOptions-plist.png"></p>
<h3 id="4、一些坑点">4、一些坑点</h3><p>打包时，遇到下面报错：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">09</span>-<span class="number">17</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">23.068</span> xcodebuild[<span class="number">11322</span>:<span class="number">5883826</span>] [MT] IDEDistribution: Step failed: &lt;IDEDistributionPackagingStep: <span class="number">0x7ff88e7ab7c0</span>&gt;: Error Domain=NSCocoaErrorDomain Code=<span class="number">3840</span> <span class="string">"No value."</span> UserInfo=&#123;NSDebugDescription=No value., NSFilePath=/var/folders/<span class="number">12</span>/yqg0r8s508lfmzw6b91nh97m0000gn/T/ipatool-json-filepath-vo804k&#125;</span><br><span class="line">error: exportArchive: The data couldn’t be read because it isn’t in the correct format.</span><br><span class="line"></span><br><span class="line">Error Domain=NSCocoaErrorDomain Code=<span class="number">3840</span> <span class="string">"No value."</span> UserInfo=&#123;NSDebugDescription=No value., NSFilePath=/var/folders/<span class="number">12</span>/yqg0r8s508lfmzw6b91nh97m0000gn/T/ipatool-json-filepath-vo804k&#125;</span><br><span class="line"></span><br><span class="line">** EXPORT FAILED **</span><br></pre></td></tr></table></figure></p>
<p>解决方法：<br>将对应打包的证书plist文件的<code>compileBitcode</code>内容由 <code>true</code> 改为 <code>false</code> 就可以：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>compileBitcode<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">false</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5、源代码">5、源代码</h3><p>具体的代码，也可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://github.com/iHTCboy/BuildIPAExample" target="_blank" rel="external">iHTCboy/BuildIPAExample: Build IPA file Example</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;#&#33719;&#21462;&#33050;&#26412;&#25191;&#34892;&#30446;&#24405;&#10;scrip_path=&#34;$( cd &#34;$( dirname &#34;$&#123;BASH_SOURCE[0]&#125;&#34; )&#34; &#38;&#38; pwd )&#34;&#10;&#10;#&#24037;&#31243;&#32477;&#23545;&#36335;&#24452;&#10;project_path=$(dirname &#34;$scrip_path&#34;)&#10;&#10;#&#24037;&#31243;&#21517; &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;&#24037;&#31243;&#21517;&#10;project_name=BuildIPAExample&#10;&#10;#scheme&#21517; &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;sheme&#21517;&#10;scheme_name=BuildIPAExample&#10;&#10;#project_type &#39033;&#30446;&#22914;&#26524;&#26159;&#29992;cocoapod&#65292;&#23601;&#25913;&#20026; xcworkspace&#65292;&#21542;&#21017;&#29992; xcodeproj&#10;project_type=xcodeproj&#10;&#10;#&#25171;&#21253;&#27169;&#24335; Debug/Release&#10;development_mode=Debug&#10;&#10;#build&#25991;&#20214;&#22841;&#36335;&#24452;&#10;build_path=$&#123;project_path&#125;/build&#10;&#10;#plist&#25991;&#20214;&#25152;&#22312;&#36335;&#24452;&#10;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-dev.plist&#10;&#10;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;&#10;read number&#10;while([[ $number != 1 ]] &#38;&#38; [[ $number != 2 ]] &#38;&#38; [[ $number != 3 ]])&#10;do&#10;echo &#34;Error! Should enter 1 or 2 or 3&#34;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;read number&#10;done&#10;&#10;if [ $number == 1 ];then&#10;&#9;development_mode=Release&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-appstore.plist&#10;&#10;elif [ $number == 2 ];then&#10;&#9;development_mode=Release&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-adhoc.plist&#10;else&#10;&#9;development_mode=Debug&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-dev.plist&#10;fi&#10;&#10;#&#23548;&#20986;.ipa&#25991;&#20214;&#25152;&#22312;&#36335;&#24452;&#10;exportIpaPath=$&#123;project_path&#125;/ipa_files/$&#123;development_mode&#125;&#10;&#10;# &#29983;&#25104;&#20445;&#23384;ipa&#25991;&#20214;&#30340;&#30446;&#24405;&#10;if [ ! -d $&#123;project_path&#125;/ipa_files ];&#10;then&#10;mkdir -p $&#123;project_path&#125;/ipa_files;&#10;fi&#10;&#10;# &#25171;&#21253;&#31867;&#22411;&#10;if [ $project_type == &#34;xcodeproj&#34; ];&#10;then&#10;&#9;project_build=project&#10;else&#10;&#9;project_build=workspace&#10;fi&#10;&#10;# &#36827;&#20837;&#39033;&#30446;&#30446;&#24405;&#65292;&#26041;&#20415;&#21518;&#38754;&#30340;&#25805;&#20316;&#10;cd $&#123;project_path&#125;&#10;&#10;echo &#39;///-----------&#39;&#10;echo &#39;/// &#27491;&#22312;&#28165;&#29702;&#24037;&#31243;&#39;&#10;echo &#39;///-----------&#39;&#10;xcodebuild \&#10;clean -configuration $&#123;development_mode&#125; -quiet  || exit&#10;&#10;echo &#39;///--------&#39;&#10;echo &#39;/// &#28165;&#29702;&#23436;&#25104;&#39;&#10;echo &#39;///--------&#39;&#10;echo &#39;&#39;&#10;&#10;echo &#39;///-----------&#39;&#10;echo &#39;/// &#27491;&#22312;&#32534;&#35793;&#24037;&#31243;:&#39;$&#123;development_mode&#125;&#10;echo &#39;///-----------&#39;&#10;xcodebuild \&#10;archive -$&#123;project_build&#125; $&#123;project_path&#125;/$&#123;project_name&#125;.$&#123;project_type&#125; \&#10;-scheme $&#123;scheme_name&#125; \&#10;-configuration $&#123;development_mode&#125; \&#10;-archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive  -quiet  || exit&#10;&#10;echo &#39;///--------&#39;&#10;echo &#39;/// &#32534;&#35793;&#23436;&#25104;&#39;&#10;echo &#39;///--------&#39;&#10;echo &#39;&#39;&#10;&#10;echo &#39;///----------&#39;&#10;echo &#39;/// &#24320;&#22987;ipa&#25171;&#21253;&#39;&#10;echo &#39;///----------&#39;&#10;xcodebuild -exportArchive -archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive \&#10;-configuration $&#123;development_mode&#125; \&#10;-exportPath $&#123;exportIpaPath&#125; \&#10;-exportOptionsPlist $&#123;exportOptionsPlistPath&#125; \&#10;-quiet || exit&#10;&#10;if [ -e $exportIpaPath/$scheme_name.ipa ]; then&#10;echo &#39;///----------&#39;&#10;echo &#39;/// ipa&#21253;&#24050;&#23548;&#20986;&#39;&#10;echo &#39;///----------&#39;&#10;open $exportIpaPath&#10;else&#10;echo &#39;///-------------&#39;&#10;echo &#39;/// ipa&#21253;&#23548;&#20986;&#22833;&#36133; &#39;&#10;echo &#39;///-------------&#39;&#10;fi&#10;echo &#39;///------------&#39;&#10;echo &#39;/// &#25171;&#21253;ipa&#23436;&#25104;  &#39;&#10;echo &#39;///-----------=&#39;&#10;echo &#39;&#39;&#10;&#10;# &#25171;&#24320;&#29983;&#25104;ipa&#30340;&#30446;&#24405;&#10;open $&#123;exportIpaPath&#125;&#10;&#10;# echo &#39;///-------------&#39;&#10;# echo &#39;/// &#24320;&#22987;&#21457;&#24067;ipa&#21253; &#39;&#10;# echo &#39;///-------------&#39;&#10;&#10;# if [ $number == 1 ];then&#10;&#10;# #&#39564;&#35777;&#24182;&#19978;&#20256;&#21040;App Store&#10;# # &#23558;-u &#21518;&#38754;&#30340;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;AppleID&#30340;&#36134;&#21495;&#65292;-p&#21518;&#38754;&#30340;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;&#23494;&#30721;&#10;# altoolPath=&#34;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&#34;&#10;# &#34;$altoolPath&#34; --validate-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u XXX -p XXX -t ios --output-format xml&#10;# &#34;$altoolPath&#34; --upload-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u  XXX -p XXX -t ios --output-format xml&#10;# else&#10;&#10;# #&#19978;&#20256;&#21040;Fir&#10;# # &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;Fir&#24179;&#21488;&#30340;token&#10;# fir login -T XXX&#10;# fir publish $exportIpaPath/$scheme_name.ipa&#10;&#10;# fi&#10;&#10;exit 0</span><br></pre></td></tr></table></figure>
<h3 id="6、总结">6、总结</h3><p>通过本次脚本，又让效率提升了n倍，以后打包不在害怕啦！！！另外，脚本中，还包含 上传到 <code>AppStore</code> 或第三方平台的功能，这里就先不写啦，大家有兴趣可以自行实践，和前面几篇技巧一样，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！</p>
<p>后续有更多技巧，会继续给大家分享，期待~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/9792b704b18f" target="_blank" rel="external">iOS项目之自动化打包 - 简书</a></li>
<li><a href="https://forums.developer.apple.com/thread/100065" target="_blank" rel="external">Xcode9 iOS export archive fails on correct format |Apple Developer Forums</a></li>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://github.com/iHTCboy/BuildIPAExample" target="_blank" rel="external">iHTCboy/BuildIPAExample: Build IPA file Example</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在研究上传ipa文件自动上传到苹果后台（后续有时间也分享给大家啊），然后，就需要制作大量的ipa文件啊！如果手工的<code>Archive</code> 那不就死啦，整个步骤，大概要5分钟过程，而且不是一步到位等5分钟，所以就研究了一下项目如何自动打ipa，最后找到了 <a href="https://www.jianshu.com/p/9792b704b18f">iOS项目之自动化打包 - 简书</a> 这篇文件，然后根据需求，扩展做了全能自动化的，app-store、ad-hoc、dev 三种类型证书，另外项目如果是用cocoapod，需要用 <code>-workspace</code>，否则用 <code>-project</code>，都做了相当自能化的改造，下面就来看看吧！</p>
<p>ps: <code>fastlane</code> 当然能做到这些事情，但是这个工具太重，需要的配置也需要熟悉，对于刚毕业或陌生的同学有点难，学习一下<code>ruby</code>也是好事，大家有兴趣可以自行研究一下~</p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="ipa" scheme="https://iHTCboy.com/tags/ipa/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="xcodebuild" scheme="https://iHTCboy.com/tags/xcodebuild/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧4 - nm命令解决AppStore2.5.2被拒问题]]></title>
    <link href="https://iHTCboy.com/2018/09/16/2018-09-16_shell%E6%8A%80%E5%B7%A74_nm%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3AppStore%E8%A2%AB%E6%8B%92%E9%97%AE%E9%A2%98/"/>
    <id>https://iHTCboy.com/2018/09/16/2018-09-16_shell技巧4_nm命令解决AppStore被拒问题/</id>
    <published>2018-09-16T14:20:16.000Z</published>
    <updated>2018-09-19T14:16:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近App Store审核被拒，<code>2. 5 Performance: Software Requirements，Guideline 2.5.2 - Performance - Software Requirements</code>，遇到这样的问题，回信问苹果，肯定得不到答案，苹果就是<code>礼貌</code>的回复。经过一个星期的重复被拒，只能自己找问题，热更新问题，苹果拒审信一直长这样：</p>
<blockquote>
<p>….<br>This code, combined with a remote resource, can facilitate significant changes to your app’s behavior compared to when it was initially reviewed for the App Store. While you may not be using this functionality currently, it has the potential to load private frameworks, private methods, and enable future feature changes. This includes any code which passes arbitrary parameters to dynamic methods such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations(), and running remote scripts in order to change app behavior and/or call SPI, based on the contents of the downloaded script. Even if the remote resource is not intentionally malicious, it could easily be hijacked via a Man In The Middle (MiTM) attack, which can pose a serious security vulnerability to users of your app.<br> …</p>
</blockquote>
<p>从中找到了一些关键点：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dlopen</span><span class="params">()</span></span>, <span class="function"><span class="title">dlsym</span><span class="params">()</span></span>, respondsToSelector:, performSelector:, <span class="function"><span class="title">method_exchangeImplementations</span><span class="params">()</span></span>,</span><br></pre></td></tr></table></figure>
<p>然后在 <a href="https://zhuanlan.zhihu.com/p/41863648" target="_blank" rel="external">「iOS」热更新审核被拒的解决方法</a> 文章中，找到可以打印下第三方的.a文件看看，看有没有 dlopen(), dlsym()，命令行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -u libwechaat.a &#62;&#62; xxx.txt</span><br></pre></td></tr></table></figure>
<p>注：<code>nm -u path</code>：Display only undefined symbols。更多 <code>nm</code> 命令可查看我之前总结的文章 <a href="https://ihtcboy.com/2018/02/04/2018-02-04_Mac查看文件内容常用的命令小结/">Mac查看文件内容常用的命令小结</a></p>
<a id="more"></a>
<h3 id="2、定位和查到问题">2、定位和查到问题</h3><p>找到了方向，就是利用 <code>nm</code> 命令查到所有第三方的 <code>.a</code> / <code>.framework</code>是否有相关的方法。</p>
<p>但是如果一个一个库用<code>nm</code>命令去查找，效率非常低，而且每一个库的目录不一样，所以，想到用sehll脚本，整个工程遍历全部的文件，查到到库的，然后打印出来！这才是万利的方法啊！！</p>
<h3 id="3、shell_编程">3、shell 编程</h3><p>这里思路大家应该也想到，就是遍历目录，一个一个文件判断，问题的关键出来了！就是怎么判断一个文件是不是<code>.a</code> 或 <code>.framework</code> ？ </p>
<p>其实，可以利用 <code>file</code> 打印当前读取的文件的类型，如果是 <code>Mach-O</code> 类型，就是库文件。比如终端执行 <code>file libWeChatSDK.a</code> 会打印如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">libWeChatSDK<span class="variable">.a</span>: Mach-O universal binary with <span class="number">5</span> architectures: [i386:current ar archive] [arm64]</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture i386):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture armv7):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture armv7s):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture x86_64):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture arm64):	current ar archive</span><br></pre></td></tr></table></figure>
<p>然后用管道 <code>grep</code> 查找 ‘Mach-O’ 关键字，如果存在，就执行 <code>nm -u file_path</code> 查看所有的方法，最后通过 <code>grep -E &#39;dlopen|method_exchangeImplementations|performSelector|respondsToSelector|dlsym&#39;</code> 查找包含匹配 <code>dlopen</code> <code>method_exchangeImplementations</code> <code>performSelector</code> <code>respondsToSelector</code> <code>dlsym</code> 其中一个关键字就算包含，最后打印出包含的字段和路径。</p>
<p>最后，在终端执行脚本 <code>sh nm_find.sh</code> 就会得到下面的检查结果，非常的方便和高效！</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">================================================</span><br><span class="line"> Enter <span class="keyword">project</span> path: <span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK </span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Adjust/</span>Adjust-<span class="number">4.12</span>.<span class="number">3</span><span class="regexp">/AdjustSdk.framework/</span>AdjustSdk</span><br><span class="line">包含字段：</span><br><span class="line">U _dlsym</span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Chartboost/</span>Chartboost-v6.<span class="number">0.1</span><span class="regexp">/Chartboost.framework/</span>Chartboost</span><br><span class="line">包含字段：</span><br><span class="line">U _method_exchangeImplementations U _dlopen U _dlsym</span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Facebook/</span>Facebook<span class="regexp">/FBSDKCoreKit.framework/</span>FBSDKCoreKit</span><br><span class="line">包含字段：</span><br><span class="line">U _dlopen U _dlsym</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Firebase/</span>Crashlytics<span class="regexp">/Crashlytics.framework/</span>submit</span><br><span class="line">包含字段：</span><br><span class="line">_class_respondsToSelector _dlsym</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180916-nm-show-lists.png" alt="20180916-nm-show-lists.png"></p>
<h3 id="4、源代码">4、源代码</h3><p>具体的代码，也可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;project_path=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;function getProjectPath() &#123;&#10;&#9;# &#36755;&#20986;&#25442;&#34892;&#65292;&#26041;&#20415;&#26597;&#30475;&#10;&#9;echo &#34;================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34; Enter project path: &#34; project_path&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#10;&#9;if test -z &#34;$project_path&#34;; then&#10;&#9;&#9;getProjectPath&#10;&#9;else&#10;&#9;&#9;read_dir $&#123;project_path&#125;&#10;&#9;fi&#10;&#125;&#10;&#10;function read_dir()&#123;&#10;&#9;for file in `ls $1`       #&#27880;&#24847;&#27492;&#22788;&#36825;&#26159;&#20004;&#20010;&#21453;&#24341;&#21495;&#65292;&#34920;&#31034;&#36816;&#34892;&#31995;&#32479;&#21629;&#20196;&#10;&#9;do&#10;&#9;&#9;if [ -d $1&#34;/&#34;$file ]  #&#27880;&#24847;&#27492;&#22788;&#20043;&#38388;&#19968;&#23450;&#35201;&#21152;&#19978;&#31354;&#26684;&#65292;&#21542;&#21017;&#20250;&#25253;&#38169;&#10;&#9;&#9;then&#10;&#9;&#9;&#9;read_dir $1&#34;/&#34;$file&#10;&#9;&#9;else&#10;&#9;&#9;&#9;#&#22312;&#27492;&#22788;&#22788;&#29702;&#25991;&#20214;&#21363;&#21487;&#10;&#9;&#9;&#9;file_path=&#34;$1/$file&#34;&#10;&#9;&#9;&#9;if `file $&#123;file_path&#125; | grep -q &#39;Mach-O&#39;` ; then&#10;&#9;&#9;&#9;&#9;find_world=$(echo `nm -u $&#123;file_path&#125; | grep -E &#39;dlopen|method_exchangeImplementations|performSelector|respondsToSelector|dlsym&#39;`)&#10;&#9;&#9;&#9;&#9;# -n &#23383;&#31526;&#20018;&#9;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#19981;&#20026;&#38646;&#21017;&#20026;&#30495;&#10;&#9;&#9;&#9;&#9;if [ -n &#34;$find_world&#34; ] ; then&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;-----------------------------\n&#39;&#10;&#9;&#9;&#9;&#9;&#9;echo $&#123;file_path&#125;&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;&#21253;&#21547;&#23383;&#27573;&#65306;&#39;&#10;&#9;&#9;&#9;&#9;&#9;echo $&#123;find_world&#125;&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;\n&#39;&#10;&#9;&#9;&#9;&#9;fi&#10;&#9;&#9;&#9;fi&#10;&#9;&#9;fi&#10;&#9;done&#10;&#125;   &#10;&#10;#&#35835;&#21462;&#31532;&#19968;&#20010;&#21442;&#25968;&#10;getProjectPath&#10;&#10;echo &#34;------- end processing -------&#34;</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>最后，我们把这个脚本输出的全部内容截图，和这些第三方SDK的相关官网链接贴到回信中，告诉苹果审核员，我们应用不存在非法使用热更新 <code>such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations()</code> 等方法，最后苹果就通过了审核！！！</p>
<p>通过 nm 命令和 shell脚本，又让效率提升了n倍，和前面几篇技巧一样，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！</p>
<p>后续有更多技巧，会继续给大家分享，期待~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
<li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">Shell 教程 | 菜鸟教程</a></li>
<li><a href="https://ihtcboy.com/2018/02/04/2018-02-04_Mac查看文件内容常用的命令小结/">Mac查看文件内容常用的命令小结 | iHTCboy’s blog</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近App Store审核被拒，<code>2. 5 Performance: Software Requirements，Guideline 2.5.2 - Performance - Software Requirements</code>，遇到这样的问题，回信问苹果，肯定得不到答案，苹果就是<code>礼貌</code>的回复。经过一个星期的重复被拒，只能自己找问题，热更新问题，苹果拒审信一直长这样：</p>
<blockquote>
<p>….<br>This code, combined with a remote resource, can facilitate significant changes to your app’s behavior compared to when it was initially reviewed for the App Store. While you may not be using this functionality currently, it has the potential to load private frameworks, private methods, and enable future feature changes. This includes any code which passes arbitrary parameters to dynamic methods such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations(), and running remote scripts in order to change app behavior and/or call SPI, based on the contents of the downloaded script. Even if the remote resource is not intentionally malicious, it could easily be hijacked via a Man In The Middle (MiTM) attack, which can pose a serious security vulnerability to users of your app.<br> …</p>
</blockquote>
<p>从中找到了一些关键点：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dlopen</span><span class="params">()</span></span>, <span class="function"><span class="title">dlsym</span><span class="params">()</span></span>, respondsToSelector:, performSelector:, <span class="function"><span class="title">method_exchangeImplementations</span><span class="params">()</span></span>,</span><br></pre></td></tr></table></figure>
<p>然后在 <a href="https://zhuanlan.zhihu.com/p/41863648">「iOS」热更新审核被拒的解决方法</a> 文章中，找到可以打印下第三方的.a文件看看，看有没有 dlopen(), dlsym()，命令行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -u libwechaat.a &#62;&#62; xxx.txt</span><br></pre></td></tr></table></figure>
<p>注：<code>nm -u path</code>：Display only undefined symbols。更多 <code>nm</code> 命令可查看我之前总结的文章 <a href="https://ihtcboy.com/2018/02/04/2018-02-04_Mac查看文件内容常用的命令小结/">Mac查看文件内容常用的命令小结</a></p>]]>
    
    </summary>
    
      <category term="AppStore" scheme="https://iHTCboy.com/tags/AppStore/"/>
    
      <category term="Guideline2.5.2" scheme="https://iHTCboy.com/tags/Guideline2-5-2/"/>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="nm" scheme="https://iHTCboy.com/tags/nm/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧3 - 自动生成AppIcon]]></title>
    <link href="https://iHTCboy.com/2018/09/15/2018-09-15_shell%E6%8A%80%E5%B7%A73_%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90AppIcon/"/>
    <id>https://iHTCboy.com/2018/09/15/2018-09-15_shell技巧3_自动生成AppIcon/</id>
    <published>2018-09-15T08:20:16.000Z</published>
    <updated>2018-09-19T14:16:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>上一篇讲到 <a href="https://ihtcboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/">shell技巧2 - 图片旋转缩放转换格式等</a>，而平时iOS开发中，Xcode中<code>Assets.xcassets</code>的<code>AppIcon</code> 需要设计师或开发者自行放置对应尺寸的图标，虽然我经常使用macOS下的 <code>Prepo</code> 应用生成多尺寸的图标，但是依然需要一张一张的放置到Xcode中，并且步骤非常不智能化，部分图标需要人工对应位置放置。如果通过使用 <code>sips</code> 命令，其实可以自动生成对应尺寸的图片，就可以灵活和自动化的批量生成AppIcon的全部图标，绝对的方便和效率！说到就马上实践吧！</p>
<a id="more"></a>
<h3 id="2、AppIcon_要求">2、AppIcon 要求</h3><p>平时，我们的应用的图标，都会在 Assets.xcassets 的AppIcon 设置，对于 iOS 来说，需要配置如下图标：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-Xcode-Assets.xcassets-AppIcon.png" alt="20180915-Xcode-Assets.xcassets-AppIcon.png"></p>
<p>其中，因为App如果只支持iOS7以上，1x 的设备也不需要支持了，那么大概导出需要如下的尺寸：</p>
<table>
<thead>
<tr>
<th>pt</th>
<th>像素密度(scale)</th>
<th>尺寸(px)</th>
<th>用途</th>
<th>支持系统版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>20pt</td>
<td>2x</td>
<td>40*40</td>
<td>iPhone Notificafion</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>20pt</td>
<td>3x</td>
<td>60*60</td>
<td>iPhone Notificafion</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>29pt</td>
<td>2x</td>
<td>58*58</td>
<td>iPhone Spotlight/Settings</td>
<td>iOS 5-6/5-12</td>
</tr>
<tr>
<td>29pt</td>
<td>3x</td>
<td>87*87</td>
<td>iPhone Spotlight/Settings</td>
<td>iOS 5-6/5-12</td>
</tr>
<tr>
<td>40pt</td>
<td>2x</td>
<td>80*80</td>
<td>iPhone Spotlight</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>40pt</td>
<td>3x</td>
<td>120*120</td>
<td>iPhone Spotlight</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>60pt</td>
<td>2x</td>
<td>120*120</td>
<td>iPhone App</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>60pt</td>
<td>3x</td>
<td>180*180</td>
<td>iPhone App</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>20pt</td>
<td>2x</td>
<td>40*40</td>
<td>iPad Notificafion</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>29pt</td>
<td>2x</td>
<td>58*58</td>
<td>iPad Settings</td>
<td>iOS 5-12</td>
</tr>
<tr>
<td>40pt</td>
<td>2x</td>
<td>80*80</td>
<td>iPad Spotlight</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>76pt</td>
<td>2x</td>
<td>152*152</td>
<td>iPad App</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>83.5pt</td>
<td>2x</td>
<td>167*167</td>
<td>iPad Pro App</td>
<td>iOS 9-12</td>
</tr>
<tr>
<td>1024pt</td>
<td>1x</td>
<td>1024*1024</td>
<td>App Store</td>
<td>iOS 7-12</td>
</tr>
</tbody>
</table>
<p>从上面表格可以看出，这些尺寸还是有一些重复的，所以导出尺寸时，其实没有那么多的啊，因为如果相同尺寸，可以使用同一张图片，从而减少包的体积啊！</p>
<h3 id="3、shell_编程">3、shell 编程</h3><p>通过使用 <code>sips</code> 命令进行图片处理，这里简单的写一下iOS App图标生成，apple watch 或 macOS app的图标生成的示例，希望大家能举一反三，这都是授鱼不如授渔！ </p>
<p>先说一下操作步骤：</p>
<p>1.在终端执行shell脚本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /Users/HTC/Desktop/make_iOSAppIcon.sh</span><br></pre></td></tr></table></figure>
<p>2.然后拖拽1024图片路径到终端：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">================================================&#10;Enter origin image path: /Users/HTC/Desktop/apple.jpg</span><br></pre></td></tr></table></figure>
<p>3.执行成功:</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">------- start processing -------</span><br><span class="line"><span class="label">info:</span>	resize copy <span class="number">1024</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">1024</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">180</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">167</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">152</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">120</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">87</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">80</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">60</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">58</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">40</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">1024</span> to jpg successfully.</span><br><span class="line"></span><br><span class="line">creat iOS AppIcon finished!</span><br><span class="line"></span><br><span class="line">------- end processing -------</span><br></pre></td></tr></table></figure>
<p>生成的图标和json文件：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-creat-AppIcon.png" alt="20180915-creat-AppIcon.png"></p>
<p>4.然后找到输出的文件夹（默认是在填写的图片的同级目录），复制到Xcode项目中 <code>Project/Assets.xcassets/AppIcon.appiconset/</code> 即可。（如果还想省略这一步操作，也可以直接将生成的输出到项目的目录中，这步就交给读者需要自行添加啊）</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-move-to-Xcode-Assets.xcassets-AppIcon.png" alt="20180915-move-to-Xcode-Assets.xcassets-AppIcon.png"></p>
<p>5.打开Xcode，就能看到图片已经自动显示好！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-Xcode-Assets.xcassets-AppIcon-icon.png" alt="20180915-Xcode-Assets.xcassets-AppIcon-icon.png"></p>
<p>这里说一下大概的思路，其实也不难，首先判断输出的路径，如果不是<code>目录</code>、<code>不存在的目录的文件</code>、<code>格式不符合的图片</code>，就可以图片处理，否则提示重新输入图片路径。然后创建图片同级的文件夹用于保存生成的图标和配置的json文件，由于 “1024”图片最大，所以，先转成png，然后从大到小，一张一张剪切，另外，需要注意，1024如果是png，因为有透明度的话上传到AppStore是不成功的，所以，这里最后转换1024图片格式为jpg，这样保证万无一失。其它图标都是png，也不用切成圆角，因为苹果最终显示时系统自动切成图角。</p>
<p>总结一下好处：</p>
<ul>
<li>方便快捷，不用人为关心</li>
<li>尺寸相同的图片只保留一张，减少包体积</li>
<li>1024图片为jpg，万无一失</li>
</ul>
<h3 id="4、源代码">4、源代码</h3><p>具体的代码，也可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;image_path=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;getImagePath() &#123;&#10;&#9;echo -e &#34;\n================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34;Enter origin image path: &#34; image_path&#10;&#9;# &#22914;&#26524;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#20026;&#38646;&#21017;&#20026;&#30495;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#65292;&#21542;&#21017;&#25191;&#34892;&#26059;&#36716;&#20989;&#25968;&#10;&#9;if&#9;test -z &#34;$image_path&#34;; then&#10;&#9;&#9; getImagePath&#10;&#9;else&#10;&#9;&#9;# &#22914;&#26524;&#25991;&#20214;&#23384;&#22312;&#19988;&#20026;&#30446;&#24405;&#21017;&#20026;&#30495;&#10;&#9;&#9;if test -d &#34;$image_path&#34;; then&#10;&#9;&#9;&#9;echo -e &#34;\n------- [Error] the file path is directory --------&#34;&#10;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;else&#10;&#9;&#9;&#9;# &#22914;&#26524;&#25991;&#20214;&#23384;&#22312;&#19988;&#21487;&#35835;&#21017;&#20026;&#30495;&#10;&#9;&#9;&#9;if test -r &#34;$image_path&#34;; then&#10;&#9;&#9;&#9;&#9;ext=&#34;\.jpeg|\.jpg|\.png|\.JPEG|\.JPG|\.PNG|\.gif|\.bmp&#34;&#10;&#9;&#9;&#9;&#9;# get the images that need process.&#10;&#9;&#9;&#9;&#9;valid_img=$(echo &#34;$image_path&#34; | grep -E &#34;$&#123;ext&#125;&#34;)&#10;&#9;&#9;&#9;&#9;# &#21305;&#37197;&#21040;&#22270;&#29255;&#26684;&#24335;&#25165;&#22788;&#29702;&#10;&#9;&#9;&#9;&#9;if test -z &#34;$valid_img&#34;; then&#10;&#9;&#9;&#9;&#9;&#9;echo -e &#34;\n------- [Error] the file is not&#39;s legal format --------&#34;&#10;&#9;&#9;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;&#9;creatAppIcon&#9;&#10;&#9;&#9;&#9;&#9;fi&#10;&#9;&#9;&#9;else&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;echo -e &#34;\n------- [Error] the file path is not&#39;s find --------&#34;&#10;&#9;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;&#9;fi&#9;&#10;&#9;&#9;fi&#10;&#9;fi&#10;&#125;&#10;&#10;creatAppIcon() &#123;&#10;&#9;echo -e &#34;\n------- start processing -------&#34;&#10;&#9;&#10;&#9;# &#22270;&#29255;&#30340;&#19978;&#19968;&#32423;&#30446;&#24405;&#10;&#9;prev_path=$(dirname &#34;$image_path&#34;)&#10;&#9;&#10;&#9;# &#36755;&#20986;icon&#30340;&#30446;&#24405;&#10;&#9;icon_paht=&#34;$&#123;prev_path&#125;/iOS_icon_`date +%Y%m%d_%H%M%S`&#34;&#10;&#9;&#10;&#9;# &#21019;&#24314;&#30446;&#24405;&#10;&#9;mkdir -p $&#123;icon_paht&#125;&#10;&#9;&#10;&#9;# 1024 icon &#29305;&#21035;&#22788;&#29702;&#10;&#9;icon_1024_path=&#34;$&#123;icon_paht&#125;/icon-1024.png&#34;&#10;&#9;cp $&#123;image_path&#125; $&#123;icon_1024_path&#125;&#10;&#9;&#10;&#9;sips -s format png $&#123;image_path&#125; --out $&#123;icon_1024_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize copy 1024 successfully.&#34; || echo -e &#34;info:\tresize copy 1024 failed.&#34;&#10;&#9;&#10;&#9;sips -z 1024 1024 $&#123;icon_1024_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize 1024 successfully.&#34; || echo -e &#34;info:\tresize 1024 failed.&#34;&#10;&#9;&#10;&#9;prev_size_path=$&#123;icon_1024_path&#125; #&#29992;&#20110;&#22797;&#21046;&#23567;&#22270;&#65292;&#20943;&#23569;&#20869;&#23384;&#28040;&#32791;&#10;&#9;# &#38656;&#35201;&#29983;&#25104;&#30340;&#22270;&#26631;&#23610;&#23544;&#10;&#9;icons=(180 167 152 120 87 80 60 58 40)&#10;&#9;for size in $&#123;icons[@]&#125;&#10;&#9;do&#10;&#9;&#9;size_path=&#34;$&#123;icon_paht&#125;/icon-$&#123;size&#125;.png&#34;&#10;&#9;&#9;cp $&#123;prev_size_path&#125; $&#123;size_path&#125;&#10;&#9;&#9;prev_size_path=$&#123;size_path&#125;&#10;&#9;&#9;sips -Z $size $&#123;size_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize $&#123;size&#125; successfully.&#34; || echo -e &#34;info:\tresize $&#123;size&#125; failed.&#34;&#10;&#9;done&#10;&#9;&#10;&#9;# &#36716;&#25442;1024&#22270;&#29255;&#20026;jpg&#65292;&#38450;&#27490;&#26377;&#36879;&#26126;&#21306;&#22495;&#23548;&#33268;&#19978;&#20256; App Store &#22833;&#36133;&#10;&#9;icon_1024_jpg_path=&#34;$&#123;icon_paht&#125;/icon-1024.jpg&#34;&#10;&#9;mv $&#123;icon_1024_path&#125; $&#123;icon_1024_jpg_path&#125;&#10;&#9;sips -s format jpeg $&#123;icon_1024_jpg_path&#125; --out $&#123;icon_1024_jpg_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize 1024 to jpg successfully.&#34; || echo -e &#34;info:\tresize 1024 to jpg  failed.&#34;&#10;&#9;&#10;&#9;contents_json_path=&#34;$&#123;icon_paht&#125;/Contents.json&#34;&#10;&#9;# &#29983;&#25104;&#22270;&#26631;&#23545;&#24212;&#30340;&#37197;&#32622;&#25991;&#20214;&#10;&#9;echo &#39;&#123;&#10;&#9;&#9;&#34;images&#34; : [&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-40.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-60.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-58.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-87.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-80.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-120.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;60x60&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-120.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;60x60&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-180.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-40.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-58.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-80.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;76x76&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;76x76&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-152.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;83.5x83.5&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-167.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;1024x1024&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ios-marketing&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-1024.jpg&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;],&#10;&#9;&#9;&#34;info&#34; : &#123;&#10;&#9;&#9;&#9;&#34;version&#34; : 1,&#10;&#9;&#9;&#9;&#34;author&#34; : &#34;xcode&#34;&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#39; &#62; $&#123;contents_json_path&#125;&#10;&#9;&#9;&#10;&#9;echo -e &#34;\n creat iOS AppIcon finished!&#34;&#10;&#9;echo -e &#34;\n------- end processing -------&#34;&#10;&#125;&#10;&#10;&#10;# &#39318;&#20808;&#25191;&#34892;&#20989;&#25968;&#65292;&#22635;&#20889;1024&#22270;&#29255;&#30340;&#36335;&#24452;&#36171;&#20540;&#10;getImagePath</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>通过 ship 命令和 shell脚本和前面几篇技巧，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！</p>
<p>其实，只要用命令有终端的地方，都是可以用shell脚本！后续有更多技巧，还会继续给大家分享，期待吧~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/">shell技巧2 - 图片旋转缩放转换格式等 | iHTCboy’s blog</a></li>
<li><a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a></li>
<li><a href="https://ss64.com/osx/sips.html" target="_blank" rel="external">sips MAN page Man Page - macOS - SS64.com</a></li>
<li><a href="https://www.jianshu.com/p/7246c5a5b083" target="_blank" rel="external">使用sips命令自动缩减图片尺寸</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>上一篇讲到 <a href="https://ihtcboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/">shell技巧2 - 图片旋转缩放转换格式等</a>，而平时iOS开发中，Xcode中<code>Assets.xcassets</code>的<code>AppIcon</code> 需要设计师或开发者自行放置对应尺寸的图标，虽然我经常使用macOS下的 <code>Prepo</code> 应用生成多尺寸的图标，但是依然需要一张一张的放置到Xcode中，并且步骤非常不智能化，部分图标需要人工对应位置放置。如果通过使用 <code>sips</code> 命令，其实可以自动生成对应尺寸的图片，就可以灵活和自动化的批量生成AppIcon的全部图标，绝对的方便和效率！说到就马上实践吧！</p>]]>
    
    </summary>
    
      <category term="Assets" scheme="https://iHTCboy.com/tags/Assets/"/>
    
      <category term="appicon" scheme="https://iHTCboy.com/tags/appicon/"/>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="sips" scheme="https://iHTCboy.com/tags/sips/"/>
    
      <category term="xcassets" scheme="https://iHTCboy.com/tags/xcassets/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧2 - 图片旋转缩放转换格式等]]></title>
    <link href="https://iHTCboy.com/2018/09/14/2018-09-14_shell%E6%8A%80%E5%B7%A72_%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC%E7%BC%A9%E6%94%BE%E7%AD%89/"/>
    <id>https://iHTCboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/</id>
    <published>2018-09-14T13:20:16.000Z</published>
    <updated>2018-09-19T14:16:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>在macOS下，如果对大量图片进行处理或数据收集，查找了一下，通过使用 <code>sips</code> 命令，可以进行图片的大部分操作处理，如果使用 <code>shell</code>，就可以灵活和自动化的批量操作图片！</p>
<a id="more"></a>
<h3 id="2、sips_用法">2、sips 用法</h3><p>常用的用法可以参考： <a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a>，全部的用法可以参考：<a href="https://ss64.com/osx/sips.html" target="_blank" rel="external">sips MAN page Man Page - macOS - SS64.com</a></p>
<p>以下就是引用 <a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a> 内容：</p>
<p>1.裁剪时固定图片宽度，高度自适应</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -Z 320 iamge_file_name</span><br></pre></td></tr></table></figure></span>
</code></pre><p>2.裁剪时指定图片宽与高</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#35009;&#21098;&#22270;&#29255;&#20026;400x300&#22823;&#23567;&#10;sips -z 400 300 iamge_file_name</span><br></pre></td></tr></table></figure></span>


注：需要注意的是这里的参数是小写的z，并且图片缩放方式不是锁定图片比例的，即如果图片本身是16:9，则会导致图片被挤压。
</code></pre><p>3.旋转图片</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -r 90 image_file_name</span><br></pre></td></tr></table></figure></span>


注：上面的命令将图片顺时针旋转90度，相信机智的你已经想到逆时针90度应该是-90了。没错，顺时针用正数表示，逆时针可以用负数表示。你可以进行任意角度和方向的旋转。
</code></pre><p>4.翻转图片</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -f horizontal image_file_name</span><br></pre></td></tr></table></figure></span>

注：上面命令可以对图片进行水平翻转，-f支持水平和垂直两种翻转，水平（horizontal），垂直（vertical）。
</code></pre><p>5.修改图片格式</p>
<pre><code><span class="variable"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -s format jpeg input.png --out output.jpg</span><br></pre></td></tr></table></figure></span>

注：使用-s参数可以修改图片格式为指定值，sips支持jpeg |<span class="string"> tiff </span>|<span class="string"> png </span>|<span class="string"> gif </span>|<span class="string"> jp2 </span>|<span class="string"> pict </span>|<span class="string"> bmp </span>|<span class="string"> qtif </span>|<span class="string"> psd </span>|<span class="string"> sgi </span>|<span class="string"> tga共11种格式。并且-s除了能修改文件格式外，还能修改图片的其它meta数据，具体可以通过man sips查看。</span>
</code></pre><p>6.获取图片meta信息</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -g pixelWidth -g pixelHeight image_file_name</span><br></pre></td></tr></table></figure></span>

注：上面命令可以获取图片的长宽高信息，与-s参数一样，-g也支持更多的meta值，可以参见man sips的信息，这里就不做赘述了。
</code></pre><h3 id="3、shell_编程">3、shell 编程</h3><p>通过使用 <code>sips</code> 命令进行图片处理，本来计划做一个功能库，但是想想还是没有必要，简单的写了一个图片旋转的示例，希望大家能举一反三，这都是授鱼不如授渔！ </p>
<h3 id="4、图片旋转代码实现">4、图片旋转代码实现</h3><p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;imagePath=&#34;&#34;&#10;angle=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;&#10;getImagePath() &#123;&#10;&#9;echo &#34;\n================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34;Enter image path: &#34; imagePath&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#65292;&#21542;&#21017;&#25191;&#34892;&#26059;&#36716;&#20989;&#25968;&#10;&#9;if&#9;test -z &#34;$imagePath&#34;; then&#10;&#9;&#9; getImagePath&#10;&#9;else&#10;&#9;&#9;rotationImage&#10;&#9;fi&#10;&#125;&#10;&#10;&#10;rotationImage() &#123;&#10;&#9;echo &#34;\n================================================&#34;&#10;&#9;read -p &#34;Enter angle(default 90&#176;): &#34; angle&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#40664;&#35748;&#35774;&#32622;&#20026;90&#24230;&#10;&#9;if test -z &#34;$angle&#34;; then&#10;&#9;&#9;angle=&#34;90&#34;&#10;&#9;fi&#10;&#10;&#9;# &#20351;&#29992; sips &#21629;&#20196;&#36827;&#34892;&#22270;&#29255;&#26059;&#36716;&#10;&#9;sips -r &#34;$&#123;angle&#125;&#34; &#34;$&#123;imagePath&#125;&#34;&#10;&#9;&#9;&#10;&#9;echo &#34;\n rotation $angle &#176; finished!&#34;&#10;&#9;&#9;&#10;&#9;# &#37325;&#26032;&#35843;&#29992;&#26059;&#36716;&#20989;&#25968;&#65292;&#26041;&#20415;&#22810;&#27425;&#26059;&#36716;&#25805;&#20316;&#10;&#9;rotationImage&#10;&#9;&#10;&#125;&#10;&#10;# &#39318;&#20808;&#25191;&#34892;&#20989;&#25968;&#65292;&#32473;&#21464;&#37327;&#36171;&#20540;&#10;getImagePath</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>比如图片批量格式转换，图片尺寸批量获取等，通过 ship 命令，然后结合 sehll 脚本，效率和自动化不是梦！</p>
<p>关于sips的更多使用场景，可以看看这篇文章 <a href="https://www.jianshu.com/p/7246c5a5b083" target="_blank" rel="external">使用sips命令自动缩减图片尺寸</a></p>
<p>下一节，结合刚需，打算写一个从一张1024的图片，自动生成Xcode所需要的全部图标，这应该是一个不错的想法！期待吧~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a></li>
<li><a href="https://ss64.com/osx/sips.html" target="_blank" rel="external">sips MAN page Man Page - macOS - SS64.com</a></li>
<li><a href="https://www.jianshu.com/p/7246c5a5b083" target="_blank" rel="external">使用sips命令自动缩减图片尺寸</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>在macOS下，如果对大量图片进行处理或数据收集，查找了一下，通过使用 <code>sips</code> 命令，可以进行图片的大部分操作处理，如果使用 <code>shell</code>，就可以灵活和自动化的批量操作图片！</p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="sips" scheme="https://iHTCboy.com/tags/sips/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python爬虫实践-网易云音乐]]></title>
    <link href="https://iHTCboy.com/2018/09/09/2018-09-09_Python%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD/"/>
    <id>https://iHTCboy.com/2018/09/09/2018-09-09_Python爬虫实践-网易云音乐下载/</id>
    <published>2018-09-09T12:56:16.000Z</published>
    <updated>2018-09-09T14:50:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近，网易的音乐很多听不到了，刚好也看到很多教程，跟进学习了一下，也集大全了吧，本来想优化一下的，但是发现问题还是有点复杂，最后另辟捷径，提供了简单的方法啊！</p>
<p>本文主要参考 <a href="https://www.jianshu.com/p/25bc4822af16" target="_blank" rel="external">python编写GUI版网易云音乐爬虫</a> 后改写，有兴趣的可以看看文章的GUI，了解更多知识~</p>
<a id="more"></a>
<h3 id="2、Python_+_爬虫">2、Python + 爬虫</h3><p>首先，说一下准备工作：</p>
<ul>
<li>Python：需要基本的python语法基础</li>
<li>requests：专业用于请求处理，<a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="external">requests库学习文档中文版</a></li>
<li>lxml：其实可以用pythonth自带的正则表达式库re，但是为了更加简单入门，用 <a href="https://lxml.de/index.html" target="_blank" rel="external">lxml</a> 中的 etree 进行网页数据定位爬取。</li>
<li>re：python正则表达式处理</li>
<li>json：python的json处理库</li>
</ul>
<p>如果大家对上面的库还比不懂，可以看看我的之前文章 <a href="https://ihtcboy.com/2018/07/10/2018-07-10_Python爬虫实践入门篇/">《Python爬虫实践入门篇》</a></p>
<p>然后，说一下我们现在已经知道下载链接是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://music.163.com/song/media/outer/url?id='</span><br></pre></td></tr></table></figure>
<p><code>id</code> 就是歌曲的id！</p>
<p>所以，现在我们爬虫主要的工作就是找到这个id，当然为了更好的保存，也要找到这个歌名啦！</p>
<p>那现在就是要找到我们需要爬虫的网站链接啦！我分析了一下，大概是下面三种：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#歌曲清单</span></span><br><span class="line"><span class="setting">music_list = <span class="value"><span class="string">'https://music.163.com/#/playlist?id=2412826586'</span> </span></span></span><br><span class="line"><span class="comment">#歌手排行榜</span></span><br><span class="line"><span class="setting">artist_list = <span class="value"><span class="string">'https://music.163.com/#/artist?id=8325'</span></span></span></span><br><span class="line"><span class="comment">#搜索列表 </span></span><br><span class="line"><span class="setting">search_list = <span class="value"><span class="string">'https://music.163.com/#/search/m/?order=hot&amp;cat=全部&amp;limit=435&amp;offset=435&amp;s=梁静茹'</span></span></span></span><br></pre></td></tr></table></figure>
<p>如果你已经只是想下载一首歌，比如静茹-勇气：<code>https://music.163.com/#/song?id=254485</code>，那你直接就用浏览器打开 <code>http://music.163.com/song/media/outer/url?id=254485</code> 就可以了，没必要爬虫啊！</p>
<p>好啦！感觉重点都说完了，提取和解析就是用 lxml，不懂的就看我之前的文章啊  <a href="https://ihtcboy.com/2018/07/10/2018-07-10_Python爬虫实践入门篇/">《Python爬虫实践入门篇》</a></p>
<h3 id="3、下载歌词">3、下载歌词</h3><p>如果还要下载歌词，那也很简单，通过接口，有歌曲的id就可以：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://music.163.com/api/song/lyric?id=&#123;&#125;&amp;lv=-1&amp;kv=-1&amp;tv=-1'</span>.format(song_id)</span><br></pre></td></tr></table></figure>
<p>返回的json数据大概长这样：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sgc: true,</span><br><span class="line">    sfy: false,</span><br><span class="line">    qfy: false,</span><br><span class="line">    lrc:</span><br><span class="line">    &#123;</span><br><span class="line">        version: 7,</span><br><span class="line">        lyric: "[<span class="number">00:39.070</span>]开了窗 等待天亮\n[<span class="number">00:46.160</span>]看这城市 悄悄的 熄了光\n[<span class="number">00:51.850</span>]听风的方向\n[<span class="number">00:55.090</span>]这一刻 是否和我一样\n[<span class="number">00:58.730</span>]孤单的飞翔\n[<span class="number">01:02.300</span>]模糊了眼眶\n[<span class="number">01:07.760</span>]广播里 那首歌曲\n[<span class="number">01:14.830</span>]重复当时 那条街那个你\n[<span class="number">01:20.410</span>]相同的桌椅\n[<span class="number">01:23.740</span>]不用言语 就会有默契\n[<span class="number">01:27.470</span>]这份亲密\n[<span class="number">01:30.560</span>]那么熟悉\n[<span class="number">01:33.850</span>]在爱里 等着你\n[<span class="number">01:37.480</span>]被你疼惜 有种暖意\n[<span class="number">01:41.090</span>]在梦里 全是你\n[<span class="number">01:43.920</span>]不要再迟疑 把我抱紧"</span><br><span class="line">    &#125;,</span><br><span class="line">    klyric:</span><br><span class="line">    &#123;</span><br><span class="line">        version: 0,</span><br><span class="line">        lyric: null</span><br><span class="line">    &#125;,</span><br><span class="line">    tlyric:</span><br><span class="line">    &#123;</span><br><span class="line">        version: 0,</span><br><span class="line">        lyric: null</span><br><span class="line">    &#125;,</span><br><span class="line">    code: 200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>剩下的也没有什么好说的啦！</p>
<h3 id="4、坑点与进阶">4、坑点与进阶</h3><p>表面上很简单，但是需要注意的是，网易返回的链接，数据是js动态加载，也就是爬虫得到的网页数据和浏览器得到的dom内容和结构不一样！</p>
<ul>
<li><p>坑<br>其中，搜索列表爬虫回来的内容，完全得不到歌曲id！！！</p>
</li>
<li><p>解决<br>解决方法也是有的！</p>
<ul>
<li><p>python模拟浏览器<br>使用selenium+phantomjs无界面浏览器，这两者的结合其实就是直接操作浏览器，可以获取JavaScript渲染后的页面数据。</p>
<p>缺点：</p>
<blockquote>
<p>由于是无界面浏览器，采用此方案效率极低，如果大批量抓取不推荐。<br>对于异步请求并且数据在源码中并不存在的，同时也就无法抓取到的数据。</p>
</blockquote>
</li>
<li><p>搜索的歌曲变成歌单<br>比如想下载全部的某一歌手的全部音乐，用手机云音乐搜索，然后全部保存到新建一个歌单，这样就可以啦！</p>
</li>
</ul>
</li>
<li><p>进阶<br>如果想使用了解更多网易云音乐js的加密解密过程，可以看看这个 <a href="https://www.zhihu.com/question/21471960/answer/154098407" target="_blank" rel="external">Python 爬虫如何获取 JS 生成的 URL 和网页内容？ - 路人甲的回答 - 知乎</a></p>
</li>
</ul>
<h3 id="总结">总结</h3><p>用python，就一定要简单，我认为复杂的东西，还是尽量少做，能取巧就取巧，所以本文没有使用selenium+phantomjs实践，如果想了解更多<code>selenium+phantomjs</code>内容，可以参考文末引用链接。</p>
<p><strong>注：本文只是技术交流，请不要商业用途~ 如有违反，本人一概不负责。</strong></p>
<h3 id="全部代码">全部代码</h3><p>又是非常简单的100行代码完事！！！</p>
<p>GitHub: <a href="https://github.com/iHTCboy/WebCrawlerExample/blob/master/WebCrawler/163_NeteaseMusic.py" target="_blank" rel="external">WebCrawlerExample/163_NeteaseMusic.py at master · iHTCboy/WebCrawlerExample</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_songs</span><span class="params">(url=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        url = <span class="string">'https://music.163.com/#/playlist?id=2384642500'</span></span><br><span class="line"></span><br><span class="line">    url = url.replace(<span class="string">'/#'</span>, <span class="string">''</span>).replace(<span class="string">'https'</span>, <span class="string">'http'</span>)  <span class="comment"># 对字符串进行去空格和转协议处理</span></span><br><span class="line">    <span class="comment"># 网易云音乐外链url接口：http://music.163.com/song/media/outer/url?id=xxxx</span></span><br><span class="line">    out_link = <span class="string">'http://music.163.com/song/media/outer/url?id='</span></span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://music.163.com/'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'music.163.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 请求页面的源码</span></span><br><span class="line">    res = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    tree = etree.HTML(res)</span><br><span class="line">    <span class="comment"># 音乐列表</span></span><br><span class="line">    song_list = tree.xpath(<span class="string">'//ul[@class="f-hide"]/li/a'</span>)</span><br><span class="line">    <span class="comment"># 如果是歌手页面</span></span><br><span class="line">    artist_name_tree = tree.xpath(<span class="string">'//h2[@id="artist-name"]/text()'</span>)</span><br><span class="line">    artist_name = str(artist_name_tree[<span class="number">0</span>]) <span class="keyword">if</span> artist_name_tree <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是歌单页面：</span></span><br><span class="line">    <span class="comment">#song_list_tree = tree.xpath('//*[@id="m-playlist"]/div[1]/div/div/div[2]/div[2]/div/div[1]/table/tbody')</span></span><br><span class="line">    song_list_name_tree = tree.xpath(<span class="string">'//h2[contains(@class,"f-ff2")]/text()'</span>)</span><br><span class="line">    song_list_name = str(song_list_name_tree[<span class="number">0</span>]) <span class="keyword">if</span> song_list_name_tree <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置音乐下载的文件夹为歌手名字或歌单名</span></span><br><span class="line">    folder = <span class="string">'./'</span> + artist_name <span class="keyword">if</span> artist_name <span class="keyword">else</span> <span class="string">'./'</span> + song_list_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder):</span><br><span class="line">        os.mkdir(folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(song_list):</span><br><span class="line">        href = str(s.xpath(<span class="string">'./@href'</span>)[<span class="number">0</span>])</span><br><span class="line">        song_id = href.split(<span class="string">'='</span>)[-<span class="number">1</span>]</span><br><span class="line">        src = out_link + song_id  <span class="comment"># 拼接获取音乐真实的src资源值</span></span><br><span class="line">        title = str(s.xpath(<span class="string">'./text()'</span>)[<span class="number">0</span>])  <span class="comment"># 音乐的名字</span></span><br><span class="line">        filename = title + <span class="string">'.mp3'</span></span><br><span class="line">        filepath = folder + <span class="string">'/'</span> + filename</span><br><span class="line">        print(<span class="string">'开始下载第&#123;&#125;首音乐：&#123;&#125;\n'</span>.format(i + <span class="number">1</span>, filename))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 下载音乐</span></span><br><span class="line">            <span class="comment">#下载歌词</span></span><br><span class="line">            <span class="comment">#download_lyric(title, song_id)</span></span><br><span class="line"></span><br><span class="line">            data = requests.get(src).content  <span class="comment"># 音乐的二进制数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> open(filepath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'&#123;&#125;首全部歌曲已经下载完毕！'</span>.format(len(song_list)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_lyric</span><span class="params">(song_name, song_id)</span>:</span></span><br><span class="line">    url = <span class="string">'http://music.163.com/api/song/lyric?id=&#123;&#125;&amp;lv=-1&amp;kv=-1&amp;tv=-1'</span>.format(song_id)</span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://music.163.com/'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'music.163.com'</span></span><br><span class="line">        <span class="comment"># 'Origin': 'https://music.163.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 请求页面的源码</span></span><br><span class="line">    res = requests.get(url=url, headers=headers).text</span><br><span class="line">    json_obj = json.loads(res)</span><br><span class="line">    lyric = json_obj[<span class="string">'lrc'</span>][<span class="string">'lyric'</span>]</span><br><span class="line">    reg = re.compile(<span class="string">r'\[.*\]'</span>)</span><br><span class="line">    lrc_text = re.sub(reg, <span class="string">''</span>, lyric).strip()</span><br><span class="line"></span><br><span class="line">    print(song_name, lrc_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#music_list = 'https://music.163.com/#/playlist?id=2384642500' #歌曲清单</span></span><br><span class="line">    music_list = <span class="string">'https://music.163.com/#/artist?id=8325'</span> <span class="comment">#歌手排行榜</span></span><br><span class="line">    <span class="comment"># music_list = 'https://music.163.com/#/search/m/?order=hot&amp;cat=全部&amp;limit=435&amp;offset=435&amp;s=梁静茹' #搜索列表</span></span><br><span class="line">    download_songs(music_list)</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/25bc4822af16" target="_blank" rel="external">python编写GUI版网易云音乐爬虫</a> </li>
<li><a href="https://ihtcboy.com/2018/07/10/2018-07-10_Python爬虫实践入门篇/">Python爬虫实践入门篇 | iHTCboy’s blog</a></li>
<li><a href="https://www.zhihu.com/question/21471960/answer/154098407" target="_blank" rel="external">Python 爬虫如何获取 JS 生成的 URL 和网页内容？ - 路人甲的回答 - 知乎</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NjUxMDk5Mg==&amp;mid=2247484026&amp;idx=1&amp;sn=393eb1f4eb577b88e49b7ce10ff0e500&amp;chksm=fdfb6585ca8cec93a6d70f4666bd3fab69a7eb9390d4a1207f21142dc127975b6e209be32f1a&amp;scene=21#wechat_redirect" target="_blank" rel="external">Python 爬虫获取网易云音乐歌手歌词</a></li>
<li><a href="https://www.jianshu.com/p/520749be7377" target="_blank" rel="external">python爬虫的最佳实践(五)–selenium+PhantomJS的简单使用</a></li>
<li><a href="https://selenium-python.readthedocs.io/index.html" target="_blank" rel="external">Selenium with Python — Selenium Python Bindings 2 documentation</a></li>
<li><a href="https://github.com/ariya/phantomjs" target="_blank" rel="external">ariya/phantomjs: Scriptable Headless Browser</a></li>
<li><a href="https://github.com/iHTCboy/WebCrawlerExample/blob/master/WebCrawler/163_NeteaseMusic.py" target="_blank" rel="external">WebCrawlerExample/163_NeteaseMusic.py at master · iHTCboy/WebCrawlerExample</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近，网易的音乐很多听不到了，刚好也看到很多教程，跟进学习了一下，也集大全了吧，本来想优化一下的，但是发现问题还是有点复杂，最后另辟捷径，提供了简单的方法啊！</p>
<p>本文主要参考 <a href="https://www.jianshu.com/p/25bc4822af16">python编写GUI版网易云音乐爬虫</a> 后改写，有兴趣的可以看看文章的GUI，了解更多知识~</p>]]>
    
    </summary>
    
      <category term="Python" scheme="https://iHTCboy.com/tags/Python/"/>
    
      <category term="Python爬虫" scheme="https://iHTCboy.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="爬虫" scheme="https://iHTCboy.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="网易云音乐" scheme="https://iHTCboy.com/tags/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[django中ajax post数据时request.POST获取数组问题]]></title>
    <link href="https://iHTCboy.com/2018/09/05/2018-09-05_post%E5%8F%82%E6%95%B0%E4%B8%BA%E6%95%B0%E7%BB%84%E6%97%B6django%E4%B8%ADrequest%E9%97%AE%E9%A2%98/"/>
    <id>https://iHTCboy.com/2018/09/05/2018-09-05_post参数为数组时django中request问题/</id>
    <published>2018-09-05T10:49:16.000Z</published>
    <updated>2018-09-09T14:31:59.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在使用django开发web页面时，使用ajax的post参数中带有数组，然后在 <code>request.POST</code> 里获取的数组时，数组变成了一个元组！！！官方给出的通过 <code>request.POST.getlist(&#39;key&#39;)</code>来获取也是很鸡肉！那要怎么解决呢？</p>
<a id="more"></a>
<h3 id="2、问题">2、问题</h3><p>问题是这样，在前端js的post请求参数带有数组或字典：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = &#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'dict'</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    data: body,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在django后python解析request.POST，获取数组就变成这样：</p>
<p>如果是这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">    array = request.POST[<span class="string">'array'</span>]</span><br><span class="line">    dict = request.POST[<span class="string">'dict'</span>]</span><br></pre></td></tr></table></figure>
<p>直接是报错：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise <span class="function"><span class="title">MultiValueDictKeyError</span><span class="params">(key)</span></span></span><br><span class="line">django<span class="class">.utils</span><span class="class">.datastructures</span><span class="class">.MultiValueDictKeyError</span>: <span class="string">'array'</span></span><br></pre></td></tr></table></figure>
<p>所以我们要看看 <code>request.POST</code> 到底是什么类型，内容又是什么？？？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST：</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">'account'</span>: [<span class="string">'account'</span>], <span class="string">'password'</span>: [<span class="string">'password'</span>], <span class="string">'array[]'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>], <span class="string">'dict[k1]'</span>: [<span class="string">'v1'</span>], <span class="string">'dict[k2]'</span>: [<span class="string">'v2'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p><code>QueryDict</code> ？？？字典！！！</p>
<p>从前端传入的数组，变成了字典，问题有三个：</p>
<ul>
<li><code>array</code> 变成 <code>array[]</code> 键</li>
<li><code>[1, 2, 3]</code> 变成 <code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></li>
<li><code>dict</code> 变成 <code>dict[k1]</code>、<code>dict[k1]</code></li>
</ul>
<p>其实，这个不是bug！！！</p>
<blockquote>
<p>这是一个 django 自定义的类似字典的类，用来处理同一个键带多个值的情况。 python 原始的字典中，当一个键出现多个值的时候会发生冲突，只保留最后一个值。而在 HTML 表单中，通常会发生一个键有多个值的情况。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> query_string 需要一个字符串 a=<span class="number">1</span>&amp;a=<span class="number">2</span>&amp;c=<span class="number">3</span>，例如：</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>QueryDict(<span class="string">'a=1&amp;a=2&amp;c=3'</span>)</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">'a'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>], <span class="string">'c'</span>: [<span class="string">'3'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>那么怎么取值呢？</p>
<p>按照<code>getlist(key)</code> 拿不到：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-getlist-key.png" alt="20180905-request.POST-getlist-key.png"></p>
<p>用 <code>[key]</code> 只取到容器的最后一个值：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-get.png" alt="20180905-request.POST-get.png"></p>
<p>用 <code>getlist(key[])</code> 数组可以拿到字符串数组，但是字典就只能一个一个拿了！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-getlist.png" alt="20180905-request.POST-getlist.png"></p>
<h3 id="3、解决方法">3、解决方法</h3><ul>
<li>方法一</li>
</ul>
<p>在前端的body参数变成json字符串：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'dict'</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>但在后端得到的是这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'&#123;"account":"account","password":"password","array":[1,2,3],"dict":&#123;"k1":"v1","k2":"v2"&#125;&#125;'</span>: [<span class="string">''</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>全部参数作为key的字典，显示不符合要求，并且导致处理复杂起来。</p>
<ul>
<li>方法二<br>子级变成json字符串：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = &#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: <span class="built_in">JSON</span>.stringify([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">    <span class="string">'dict'</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>得到的结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'account'</span>: [<span class="string">'account'</span>], <span class="string">'password'</span>: [<span class="string">'password'</span>], <span class="string">'array'</span>: [<span class="string">'[1,2,3]'</span>], <span class="string">'dict'</span>: [<span class="string">'&#123;"k1":"v1","k2":"v2"&#125;'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>数组和字典的全部值作为value，并且是string类型，显示不符合要求，并且导致处理复杂起来。</p>
<ul>
<li>方法三<br>其实，我们知道后端为了多个相同key存在，所以才这样处理，那么我们可以这样考虑，让数据和字典不在是数组和字典，后端在还原不就可以啦！</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = &#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: <span class="string">'1'</span> + <span class="built_in">JSON</span>.stringify([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">    <span class="string">'dict'</span>: <span class="string">'1'</span> + <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>让 ‘array’、’dict’ 变成 ‘1’ + json字符串形式，然后后端按规则还原：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'account'</span>: [<span class="string">'account'</span>], <span class="string">'password'</span>: [<span class="string">'password'</span>], <span class="string">'array'</span>: [<span class="string">'1[1,2,3]'</span>], <span class="string">'dict'</span>: [<span class="string">'1&#123;"k1":"v1","k2":"v2"&#125;'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>按规则还原：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array = request.POST[<span class="string">'array'</span>]</span><br><span class="line">dict = request.POST[<span class="string">'dict'</span>]</span><br><span class="line">array_list = json.loads(array[<span class="number">1</span>:])</span><br><span class="line">dict_list = json.loads(dict[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-irregular.png" alt="20180905-request.POST-irregular.png"></p>
<p>这样拿也许不是好办法，但是当你数组或字典数据非常多时，也就这样啦，当然，也可以json字符串后加密，这样后端也不能解析，如果需要，大家也可以这样做啊~</p>
<h3 id="总结">总结</h3><p>在处理这些数据时，可能是为了方便而方便，有时候只有清楚知道原因，才能更好的处理，上面的方法确实不是<code>好方法</code>，有时候还是按规则来处理更好，一个人开发还好，如果是多人，那将来可能会留下坑啊。</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/7af7e1e783ee" target="_blank" rel="external">关于ajax post 数据时django中request.body与request.POST问题 - 简书</a></li>
<li><a href="https://www.cnblogs.com/scolia/p/5634591.html" target="_blank" rel="external">django-QueryDict 对象 - scolia - 博客园</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict.getlist" target="_blank" rel="external">Request and response objects | Django documentation | Django</a></li>
<li><a href="https://www.cnblogs.com/ccorz/p/6346883.html" target="_blank" rel="external">django中同通过getlist() 接收页面form的post数组 - ccorz - 博客园</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在使用django开发web页面时，使用ajax的post参数中带有数组，然后在 <code>request.POST</code> 里获取的数组时，数组变成了一个元组！！！官方给出的通过 <code>request.POST.getlist(&#39;key&#39;)</code>来获取也是很鸡肉！那要怎么解决呢？</p>]]>
    
    </summary>
    
      <category term="django" scheme="https://iHTCboy.com/tags/django/"/>
    
      <category term="post数组参数" scheme="https://iHTCboy.com/tags/post%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0/"/>
    
      <category term="request.POST" scheme="https://iHTCboy.com/tags/request-POST/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧1 - 生成ipa文件]]></title>
    <link href="https://iHTCboy.com/2018/08/31/2018-08-31_shell%E6%8A%80%E5%B7%A71_%E7%94%9F%E6%88%90ipa%E6%96%87%E4%BB%B6/"/>
    <id>https://iHTCboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/</id>
    <published>2018-08-31T13:19:16.000Z</published>
    <updated>2018-09-09T12:59:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>iTunes 12.7 之前，可以下载ipa应用包、打开ipa包，也生成ipa文件！但是在这12.7之后，关于ipa的所有功能已经移除，如果还想下载ipa包，可以参考我之前的文章：<a href="https://ihtcboy.com/2017/10/30/2017_10_解决iTunes12.7无法下载AppStore应用的IPA包问题/">解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题</a>，今天我们主要来说说制作ipa文件的功能。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-iTunes12.7-new-change.png" alt="20180831-iTunes12.7-new-change.png"></p>
<a id="more"></a>
<h3 id="2、ipa文件结构">2、ipa文件结构</h3><p>其实ipa文件可以理解为一个zip的压缩文件，所以解压ipa文件后，得到ipa的目录 <code>ipafilename/Payload/xxx.app</code>，以微信示例：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-ipa-file-path.png" alt="20180831-ipa-file-path.png"></p>
<p>所以，如果我们编译的项目，想生成ipa文件，以前是拖拽到iTunes就会自动生成ipa文件，现在不行了，根据这个原理，我们在Xcode中编译生成的<code>.app</code>目录，按照前面说的目录结构，进行压缩就行啦！</p>
<h3 id="3、bash脚本">3、bash脚本</h3><ul>
<li><p>生成.app目录内容：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-Xcode-build-app.png" alt="20180831-Xcode-build-app.png"></p>
</li>
<li><p>执行shell脚本生成ipa文件：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-bash-make-ipa-file.png" alt="20180831-bash-make-ipa-file.png"></p>
</li>
<li><p>生成成功后，自动打开ipa文件所在目录：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-make-ipa-finish.png" alt="20180831-make-ipa-finish.png"></p>
</li>
</ul>
<h3 id="4、全部代码">4、全部代码</h3><p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># 定义用到的变量</span></span><br><span class="line">projectAppPath=<span class="string">""</span></span><br><span class="line">outputPath=<span class="string">""</span></span><br><span class="line">ipaFileName=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义读取输入字符的函数</span></span><br><span class="line"><span class="function"><span class="title">getProjectAppPath</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"\n================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter .app path: "</span> projectAppPath</span><br><span class="line">	<span class="comment"># 如果为空值，从新监听</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$projectAppPath</span>"</span>; <span class="keyword">then</span></span><br><span class="line">		getprojectAppPath</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getOutputPath</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"\n================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter output path: "</span> outputPath</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$outputPath</span>"</span>; <span class="keyword">then</span></span><br><span class="line">		<span class="comment"># 如果没有输出路径，默认输出到桌面</span></span><br><span class="line">	  outputPath=<span class="string">"Desktop"</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getipaFileName</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"\n================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter ipa FileName: "</span> ipaFileName</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$ipaFileName</span>"</span>; <span class="keyword">then</span></span><br><span class="line">		getipaFileName</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行函数，给变量赋值</span></span><br><span class="line">getProjectAppPath</span><br><span class="line">getOutputPath</span><br><span class="line">getipaFileName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到当前用户的home目录，方便创建桌面目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在输出路径下创建 Payload 文件夹</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;outputPath&#125;</span>/Payload"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将.app 文件复制到 输出路径的 Payload 文件夹下</span></span><br><span class="line">cp -r <span class="string">"<span class="variable">$&#123;projectAppPath&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;outputPath&#125;</span>/Payload/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到输出路径</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;outputPath&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Payload 文件夹压缩成 ipa 包</span></span><br><span class="line">zip -r <span class="string">"<span class="variable">$&#123;ipaFileName&#125;</span>.ipa"</span> Payload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前路径下 Payload 文件夹【-r 就是向下递归，不管有多少级目录，一并删除 -f 就是直接强行删除，不作任何提示的意思】</span></span><br><span class="line">rm -rf <span class="string">"Payload"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功提示</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n\n=====================【转换ipa完成】=========================\n"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;outputPath&#125;</span></span><br><span class="line"><span class="comment">## 打开输出的路径</span></span><br><span class="line"><span class="comment">#open -a Finder "$&#123;outputPath&#125;"</span></span><br><span class="line"><span class="comment"># 从当前位置打开finder</span></span><br><span class="line">open .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束退出</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="5、优化">5、优化</h3><h4 id="方法一">方法一</h4><p>每次想生成ipa文件，就要打开终端，执行 <code>sh make_ipa_file.sh</code>，相当麻烦，所以，如果生成别名，直接在终端输入别名就可以执行啦，是不是很棒！</p>
<p>为.bash_profile添加了一个别名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkipa=<span class="string">'sh /Users/HTC/Documents/iBash/make_ipa_file.sh'</span></span><br></pre></td></tr></table></figure></p>
<p>以后直接在终端输入：<code>mkipa</code>就可以啦，这不是很棒！！！</p>
<h4 id="方法二">方法二</h4><p>如果是 Unix 可执行文件，直接点击，会自动打开终端执行。</p>
<p>把 <code>make_ipa_file.sh</code> 改为 <code>make_ipa_file_sh</code> 名字，然后在终端为文件添加可执行权限：<br><code>chmod +x /Users/HTC/Desktop/make_ipa_file_sh</code> </p>
<p>这样就生成了 Unix 文件，双击就会打开到终端：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-make-ipa-Unix-file.png" alt="20180831-make-ipa-Unix-file.png"></p>
<h4 id="方法三">方法三</h4><p>在  ~/.bashrc 里面添加本函数，或添加脚本路径，也可以方便执行。</p>
<h4 id="方法四">方法四</h4><p>如果是macOS环境，还可以通过苹果的apple脚本服务，来做到一键化，以后有机会在谈谈。</p>
<h4 id="方法五">方法五</h4><p>也通过 <code>spotlight</code> 或 第三方软件 <code>Alfred</code> 快速查找文件打开~</p>
<h3 id="6、总结">6、总结</h3><p>通过这个简单又复杂的示例，其实使用脚本的最终目录，也是想提高效率！！所以，打包ipa包的效率，也是向着这样的方向努力！如果你对shell还不熟悉，可以看看下面这2个教程，当前我学习的时候，还没有人给指导，所以，你们是幸福的一代程序员！加油！</p>
<ul>
<li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">Shell 教程 | 菜鸟教程</a></li>
<li><del><a href="https://bestswifter.gitbook.io/effectivemac/zhong-ji-wu-qi-zsh/zhi-hang-shell-jiao-ben" target="_blank" rel="external">执行 Shell 脚本 - EffectiveMac</a></del></li>
</ul>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://support.apple.com/zh-cn/HT208075" target="_blank" rel="external">新版 iTunes 的变化 - Apple 支持</a></li>
<li><a href="http://www.cnblogs.com/skywang12345/archive/2013/05/30/3106570.html" target="_blank" rel="external">Linux bash总结(一) 基础部分(适合初学者学习和非初学者参考)  - 博客园</a></li>
<li><a href="http://www.cnblogs.com/wengzilin/p/4601684.html" target="_blank" rel="external">ios打包ipa的四种实用方法(.app转.ipa)</a></li>
<li><a href="https://stackoverflow.com/questions/281372/executing-shell-scripts-from-the-os-x-dock?answertab=votes" target="_blank" rel="external">osx - Executing Shell Scripts from the OS X Dock? - Stack Overflow</a></li>
<li><a href="https://ihtcboy.com/2017/10/30/2017_10_解决iTunes12.7无法下载AppStore应用的IPA包问题/">解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题</a></li>
<li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">Shell 教程 | 菜鸟教程</a></li>
<li><a href="https://bestswifter.gitbook.io/effectivemac/zhong-ji-wu-qi-zsh/zhi-hang-shell-jiao-ben" target="_blank" rel="external">执行 Shell 脚本 - EffectiveMac</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>iTunes 12.7 之前，可以下载ipa应用包、打开ipa包，也生成ipa文件！但是在这12.7之后，关于ipa的所有功能已经移除，如果还想下载ipa包，可以参考我之前的文章：<a href="https://ihtcboy.com/2017/10/30/2017_10_解决iTunes12.7无法下载AppStore应用的IPA包问题/">解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题</a>，今天我们主要来说说制作ipa文件的功能。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-iTunes12.7-new-change.png" alt="20180831-iTunes12.7-new-change.png"></p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="ipa" scheme="https://iHTCboy.com/tags/ipa/"/>
    
      <category term="itunes" scheme="https://iHTCboy.com/tags/itunes/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python爬虫天猫店铺全部商品一记]]></title>
    <link href="https://iHTCboy.com/2018/08/25/2018-08-25_Python%E7%88%AC%E8%99%AB%E5%A4%A9%E7%8C%AB%E5%BA%97%E9%93%BA%E5%85%A8%E9%83%A8%E5%95%86%E5%93%81%E4%B8%80%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/08/25/2018-08-25_Python爬虫天猫店铺全部商品一记/</id>
    <published>2018-08-25T07:49:16.000Z</published>
    <updated>2018-09-09T09:16:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近小姐姐工作需要，需要爬取天猫某店的全部商品，正好小哥学习了Python几个月，就答应上手试试！结果第一道题就难住了，天猫登陆需要账号密码和验证码！！！虽然知道可以通过模拟和Session操作，但是，始终是新手开车，还没有学习那么高深，感觉会走很多弯路！！另外，也想想，有没有什么更简单的方法？？？</p>
<p>不出意思，还真发现啦！天猫的手机版可以不用登陆，全部数据访问！！！就这样~ </p>
<p>开始吧！</p>
<a id="more"></a>
<h3 id="2、遇到的坑点">2、遇到的坑点</h3><p>本文主要是在 <a href="https://www.cnblogs.com/gopythoner/p/7885093.html" target="_blank" rel="external">利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园</a> 这个大哥的基础上，踩坑填坑，然后增加自己一些数据要求~</p>
<ul>
<li>坑一</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">"/Users/HTC/Documents/Programing/Python/WebCrawlerExample/WebCrawler/Tmall_demo.py"</span>, line <span class="number">63</span>, <span class="keyword">in</span> get_products</span><br><span class="line">    writer.writerows(products)</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py"</span>, line <span class="number">158</span>, <span class="keyword">in</span> writerows</span><br><span class="line">    <span class="keyword">return</span> self.writer.writerows(map(self._dict_to_list, rowdicts))</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py"</span>, line <span class="number">151</span>, <span class="keyword">in</span> _dict_to_list</span><br><span class="line">    + <span class="string">", "</span>.join([repr(x) <span class="keyword">for</span> x <span class="keyword">in</span> wrong_fields]))</span><br><span class="line">ValueError: dict contains fields <span class="keyword">not</span> <span class="keyword">in</span> fieldnames: <span class="string">'titleUnderIconList'</span></span><br></pre></td></tr></table></figure>
<p><code>writer.writerows</code> 没有找到这个’titleUnderIconList’字段，这个字段应该是天猫的接口后来返回的数据，在代码里只能删除掉：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> product[<span class="string">'titleUnderIconList'</span>]<span class="keyword">del</span> product[<span class="string">'titleUnderIconList'</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>坑二</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">"/Users/HTC/Documents/Programing/Python/WebCrawlerExample/WebCrawler/Tmall_demo.py"</span>, line <span class="number">65</span>, <span class="keyword">in</span> get_products</span><br><span class="line">    writer.writerows(products)</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py"</span>, line <span class="number">158</span>, <span class="keyword">in</span> writerows</span><br><span class="line">    <span class="keyword">return</span> self.writer.writerows(map(self._dict_to_list, rowdicts))</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 26-27: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>
<p>熟悉的人儿，看到python3与python2的区别，就知道，<code>&#39;ascii&#39; codec can&#39;t encode</code> 就是编码问题，问题就出来这里<code>writer.writerows</code>, python3处理、解析或转换和保存时，最好都指定一下使用 <code>utf-8</code>编码吧，特别是遇到中文的情况！</p>
<p>最后指定编码用utf-8：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(self.filename, <span class="string">'a'</span>, encoding=<span class="string">"utf-8"</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f, fieldnames=title)</span><br><span class="line">    writer.writerows(products)</span><br></pre></td></tr></table></figure>
<ul>
<li>坑三</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">035009803B0</span><br><span class="line">图片下载错误 ： http//img.alicdn.com/bao/uploaded/i4/821705368/TB1Sht8cfQs8KJjSZFEXXc9RpXa_!!0-item_pic.jpg Invalid URL '035009803B0': No schema supplied. Perhaps you meant http://035009803B0?</span><br><span class="line">02100713003</span><br><span class="line">图片下载错误 ： http//img.alicdn.com/bao/uploaded/i1/821705368/TB1_OIkXQfb_uJkSmRyXXbWxVXa_!!0-item_pic.jpg Invalid URL '02100713003': No schema supplied. Perhaps you meant http://02100713003?</span><br><span class="line">02800614023</span><br><span class="line">图片下载错误 ： http//img.alicdn.com/bao/uploaded/i3/821705368/TB1kKK6cInI8KJjSsziXXb8QpXa_!!0-item_pic.jpg Invalid URL '02800614023': No schema supplied. Perhaps you meant http://02800614023?</span><br></pre></td></tr></table></figure>
<p>下图图片失败的提示，原因是天猫接口返回的商品数据如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attribute">item_id</span>: <span class="number">14292263734</span>,</span><br><span class="line"><span class="attribute">title</span>: <span class="string">"XXXXXX"</span>,</span><br><span class="line"><span class="attribute">img</span>: <span class="string">"//img.alicdn.com/bao/uploaded/i2/821705368/TB1Us3Qcr_I8KJjy1XaXXbsxpXa_!!0-item_pic.jpg"</span>,</span><br><span class="line"><span class="attribute">sold</span>: <span class="string">"3"</span>,</span><br><span class="line"><span class="attribute">quantity</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attribute">totalSoldQuantity</span>: <span class="number">2937</span>,</span><br><span class="line"><span class="attribute">url</span>: <span class="string">"//detail.m.tmall.com/item.htm?id=xxxxx"</span>,</span><br><span class="line"><span class="attribute">price</span>: <span class="string">"188.00"</span>,</span><br><span class="line"><span class="attribute">titleUnderIconList</span>: [ ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>不带协议名字！！！不知道是什么时候的历史留下的坑点吧！！！大厂也是有坑的！！</p>
<h3 id="3、总结">3、总结</h3><p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/WebCrawlerExample" target="_blank" rel="external">iHTCboy/WebCrawlerExample: 网页爬虫实践示例</a></li>
</ul>
<p>代码详细的解析还是参考这位大神的 <a href="https://www.cnblogs.com/gopythoner/p/7885093.html" target="_blank" rel="external">利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园</a>，写的非常的详细！</p>
<p>整体来说，因为天猫的商品数据通过js来获取，所以比较容易获取到数据，而不用大量的爬取页面的商品，这个很赞！所以，爬虫这技术活，有很多方法，能找到好的方法，才是爬虫的最高境界啊！加油~ </p>
<h3 id="代码">代码</h3><p>python就是利害，一百行代码就搞定！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TM_producs</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, storename)</span>:</span></span><br><span class="line">        self.storename = storename</span><br><span class="line">        self.url = <span class="string">'https://&#123;&#125;.m.tmall.com'</span>.format(storename)</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 "</span></span><br><span class="line">                          <span class="string">"(KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1"</span></span><br><span class="line">        &#125;</span><br><span class="line">        datenum = datetime.now().strftime(<span class="string">'%Y%m%d_%H%M%S'</span>)</span><br><span class="line">        self.filename = <span class="string">'&#123;&#125;_&#123;&#125;.csv'</span>.format(self.storename, datenum)</span><br><span class="line">        self.get_file()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''创建一个含有标题的表格'''</span></span><br><span class="line">        title = [<span class="string">'item_id'</span>, <span class="string">'product_id'</span>, <span class="string">'price'</span>, <span class="string">'quantity'</span>, <span class="string">'sold'</span>, <span class="string">'title'</span>, <span class="string">'totalSoldQuantity'</span>, <span class="string">'url'</span>, <span class="string">'img'</span>]</span><br><span class="line">        <span class="keyword">with</span> open(self.filename, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.DictWriter(f, fieldnames=title)</span><br><span class="line">            writer.writeheader()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_totalpage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''提取总页码数'''</span></span><br><span class="line">        num = random.randint(<span class="number">83739921</span>, <span class="number">87739530</span>)</span><br><span class="line">        endurl = <span class="string">'/shop/shop_auction_search.do?sort=s&amp;p=1&amp;page_size=12&amp;from=h5&amp;ajson=1&amp;_tm_source=tmallsearch&amp;callback=jsonp_&#123;&#125;'</span></span><br><span class="line">        url = self.url + endurl.format(num)</span><br><span class="line">        html = requests.get(url, headers=self.headers).text</span><br><span class="line">        infos = re.findall(<span class="string">'\((&#123;.*&#125;)\)'</span>, html)[<span class="number">0</span>]</span><br><span class="line">        infos = json.loads(infos)</span><br><span class="line">        totalpage = infos.get(<span class="string">'total_page'</span>)</span><br><span class="line">        <span class="keyword">return</span> int(totalpage)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_products</span><span class="params">(self, page)</span>:</span></span><br><span class="line">        <span class="string">'''提取单页商品列表'''</span></span><br><span class="line">        num = random.randint(<span class="number">83739921</span>, <span class="number">87739530</span>)</span><br><span class="line">        endurl = <span class="string">'/shop/shop_auction_search.do?sort=s&amp;p=&#123;&#125;&amp;page_size=12&amp;from=h5&amp;ajson=1&amp;_tm_source=tmallsearch&amp;callback=jsonp_&#123;&#125;'</span></span><br><span class="line">        url = self.url + endurl.format(page, num)</span><br><span class="line">        html = requests.get(url, headers=self.headers).text</span><br><span class="line">        infos = re.findall(<span class="string">'\((&#123;.*&#125;)\)'</span>, html)[<span class="number">0</span>]</span><br><span class="line">        infos = json.loads(infos)</span><br><span class="line">        products = infos.get(<span class="string">'items'</span>)</span><br><span class="line">        <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">            <span class="keyword">del</span> product[<span class="string">'titleUnderIconList'</span>]</span><br><span class="line">            item_id = product[<span class="string">'item_id'</span>]</span><br><span class="line">            product_id = self.get_product_spm(item_id)</span><br><span class="line">            product[<span class="string">'product_id'</span>] = product_id</span><br><span class="line">            imgUrl = <span class="string">'https:'</span> + product[<span class="string">'img'</span>]</span><br><span class="line">            self.save_img(imgUrl, product_id)</span><br><span class="line">            item_id = product[<span class="string">'item_id'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(products)</span></span><br><span class="line">        title = [<span class="string">'item_id'</span>, <span class="string">'product_id'</span>, <span class="string">'price'</span>, <span class="string">'quantity'</span>, <span class="string">'sold'</span>, <span class="string">'title'</span>, <span class="string">'totalSoldQuantity'</span>, <span class="string">'url'</span>, <span class="string">'img'</span>]</span><br><span class="line">        <span class="keyword">with</span> open(self.filename, <span class="string">'a'</span>, encoding=<span class="string">"utf-8"</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.DictWriter(f, fieldnames=title)</span><br><span class="line">            writer.writerows(products)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_product_spm</span><span class="params">(self, item_id)</span>:</span></span><br><span class="line">        url = <span class="string">'https://detail.m.tmall.com/item.htm?id=&#123;&#125;'</span>.format(item_id)</span><br><span class="line">        html = requests.get(url, headers=self.headers).text</span><br><span class="line">        <span class="comment"># &#123;"货号":"07300318000 "&#125;</span></span><br><span class="line">        product_id = re.findall(<span class="string">r'"货号":"(.+?)"&#125;'</span>, html)[<span class="number">0</span>].strip()</span><br><span class="line">        print(product_id)</span><br><span class="line">        <span class="keyword">return</span> product_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self, img_url, file_name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获得图片后缀</span></span><br><span class="line">            file_suffix = os.path.splitext(img_url)[<span class="number">1</span>]</span><br><span class="line">            cwd = os.getcwd()</span><br><span class="line">            save_path = os.path.join(cwd, <span class="string">'images/'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_path):</span><br><span class="line">                os.makedirs(save_path)</span><br><span class="line"></span><br><span class="line">            image_path = os.path.join(save_path, file_name + file_suffix)</span><br><span class="line">            <span class="comment"># 下载图片</span></span><br><span class="line">            image = requests.get(img_url, headers=self.headers)</span><br><span class="line">            <span class="comment"># 命名并保存图片</span></span><br><span class="line">            <span class="keyword">with</span> open(image_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(image.content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'图片下载错误 ：'</span>, file_name, e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''循环爬取所有页面宝贝'''</span></span><br><span class="line">        total_page = self.get_totalpage()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, total_page + <span class="number">1</span>):</span><br><span class="line">            self.get_products(i)</span><br><span class="line">            print(<span class="string">'总计&#123;&#125;页商品，已经提取第&#123;&#125;页'</span>.format(total_page, i))</span><br><span class="line">            time.sleep(<span class="number">1</span> + random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    storename = <span class="string">'mgssp'</span></span><br><span class="line">    tm = TM_producs(storename)</span><br><span class="line">    tm.main()</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/WebCrawlerExample" target="_blank" rel="external">iHTCboy/WebCrawlerExample: 网页爬虫实践示例</a></li>
<li><a href="https://www.cnblogs.com/gopythoner/p/7885093.html" target="_blank" rel="external">利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园</a></li>
<li><a href="https://github.com/Hopetree/E-commerce-crawlers" target="_blank" rel="external">Hopetree/E-commerce-crawlers: 电商网站爬虫合集，淘宝京东亚马逊等</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近小姐姐工作需要，需要爬取天猫某店的全部商品，正好小哥学习了Python几个月，就答应上手试试！结果第一道题就难住了，天猫登陆需要账号密码和验证码！！！虽然知道可以通过模拟和Session操作，但是，始终是新手开车，还没有学习那么高深，感觉会走很多弯路！！另外，也想想，有没有什么更简单的方法？？？</p>
<p>不出意思，还真发现啦！天猫的手机版可以不用登陆，全部数据访问！！！就这样~ </p>
<p>开始吧！</p>]]>
    
    </summary>
    
      <category term="Python" scheme="https://iHTCboy.com/tags/Python/"/>
    
      <category term="Python爬虫" scheme="https://iHTCboy.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="天猫" scheme="https://iHTCboy.com/tags/%E5%A4%A9%E7%8C%AB/"/>
    
      <category term="爬虫" scheme="https://iHTCboy.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PyCharm for Mac快捷键小记]]></title>
    <link href="https://iHTCboy.com/2018/08/04/2018-08-04_PyCharm_for_Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/08/04/2018-08-04_PyCharm_for_Mac快捷键小记/</id>
    <published>2018-08-04T15:09:16.000Z</published>
    <updated>2018-08-05T09:12:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的PyCharm for Mac快捷键，因为网上经常找到的都是Windows版本，所以当是备忘也好，后续会不定期更新。</p>
<a id="more"></a>
<h3 id="2、PyCharm_for_Mac_快捷键">2、PyCharm for Mac 快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cmd + b</td>
<td>跳转到声明处（cmd加鼠标）</td>
</tr>
<tr>
<td>cmd + d</td>
<td>在下一行复制本行的内容</td>
</tr>
<tr>
<td>cmd []</td>
<td>光标之前/后的位置</td>
</tr>
<tr>
<td>cmd + opt + []</td>
<td>函数和方法前后的位置</td>
</tr>
<tr>
<td>cmd + backspace</td>
<td>删除当前行</td>
</tr>
<tr>
<td>cmd + c</td>
<td>复制光标当前行,剪切同理</td>
</tr>
<tr>
<td>cmd + f</td>
<td>当前文件搜索（回车下一个 shift回车上一个）</td>
</tr>
<tr>
<td>cmd + r</td>
<td>当前文件替换</td>
</tr>
<tr>
<td>cmd + shift + f</td>
<td>全局搜索</td>
</tr>
<tr>
<td>cmd + shift + r</td>
<td>全局替换</td>
</tr>
<tr>
<td>cmd + shift + a</td>
<td>搜索动作</td>
</tr>
<tr>
<td>cmd + o</td>
<td>搜索class</td>
</tr>
<tr>
<td>cmd + opt + o</td>
<td>搜索符号（函数等)</td>
</tr>
<tr>
<td>cmd + shift + o</td>
<td>搜索文件</td>
</tr>
<tr>
<td>shift + shift</td>
<td>任意搜索功能</td>
</tr>
<tr>
<td>cmd + l</td>
<td>指定行数跳转</td>
</tr>
<tr>
<td>shift + enter</td>
<td>在行中的时候直接到下一行(新建)</td>
</tr>
<tr>
<td>cmd +</td>
<td>展开当前</td>
</tr>
<tr>
<td>cmd -</td>
<td>折叠当前</td>
</tr>
<tr>
<td>cmd shift +</td>
<td>展开所有</td>
</tr>
<tr>
<td>cmd shift -</td>
<td>折叠所有</td>
</tr>
<tr>
<td>cmd /</td>
<td>注释/取消注释一行</td>
</tr>
<tr>
<td>cmd + opt + /</td>
<td>批量注释(pycharm不生效)</td>
</tr>
<tr>
<td>ctr + tab</td>
<td>史上最NB的导航窗口（工程文件列表、文件结构列表、命令行模式、代码检查、VCS等，下面两个是可以被替换的）</td>
</tr>
<tr>
<td>alt + F12</td>
<td>打开命令行栏</td>
</tr>
<tr>
<td>cmd + F12</td>
<td>显示文件结构</td>
</tr>
<tr>
<td>cmd + j</td>
<td>代码智能补全</td>
</tr>
<tr>
<td>alt + F1</td>
<td>定位编辑文件所在位置:</td>
</tr>
<tr>
<td>cmd + F6</td>
<td>更改变量</td>
</tr>
<tr>
<td>cmd + opt + t</td>
<td>指定代码被注释语句或者逻辑结构、函数包围</td>
</tr>
<tr>
<td>Tab / Shift + Tab</td>
<td>缩进、不缩进当前行</td>
</tr>
<tr>
<td>cmd + opt + l</td>
<td>代码块对齐</td>
</tr>
<tr>
<td>opt + F7</td>
<td>find usage</td>
</tr>
</tbody>
</table>
<h3 id="参考">参考</h3><p>下面是PyCharm教程、Flask、Django框架学习的一些链接！大家有空可以看看~</p>
<ul>
<li>PyCharm</li>
</ul>
<p>PyCharm 收藏多年快捷键分享~ - Henry Z’s blog~ <a href="https://changchen.me/blog/20170607/pycharm-shortcut/" target="_blank" rel="external">https://changchen.me/blog/20170607/pycharm-shortcut/</a><br>pycharm 使用教程 <a href="https://www.jianshu.com/p/2bfc19e1381c" target="_blank" rel="external">https://www.jianshu.com/p/2bfc19e1381c</a><br>PyCharm IDE 链接sqlite、建表、添加、查询数据 - CSDN博客 <a href="https://blog.csdn.net/qq_36482772/article/details/53458400" target="_blank" rel="external">https://blog.csdn.net/qq_36482772/article/details/53458400</a><br>Pycharm快捷键整理（Mac） - 简书 <a href="https://www.jianshu.com/p/be0bdc02f7da" target="_blank" rel="external">https://www.jianshu.com/p/be0bdc02f7da</a><br>你有哪些想要分享的 PyCharm 使用技巧？ - 知乎<a href="https://www.zhihu.com/question/37787004/answer/186042335" target="_blank" rel="external">https://www.zhihu.com/question/37787004/answer/186042335</a><br>PyCharm速览 <a href="http://www.liujiangblog.com/blog/28/" target="_blank" rel="external">http://www.liujiangblog.com/blog/28/</a><br>迈出Pycharm第一步-刘江的博客 <a href="http://www.liujiangblog.com/blog/29/" target="_blank" rel="external">http://www.liujiangblog.com/blog/29/</a></p>
<ul>
<li>Flask框架</li>
</ul>
<p>快速入门 — Flask 0.10.1 文档 <a href="http://docs.jinkan.org/docs/flask/quickstart.html#quickstart" target="_blank" rel="external">http://docs.jinkan.org/docs/flask/quickstart.html#quickstart</a><br>    Flask 入门指南 <a href="https://blog.igevin.info/posts/flask-startup-guideline/" target="_blank" rel="external">https://blog.igevin.info/posts/flask-startup-guideline/</a><br>    利用pycharm学习flask教程 <a href="https://www.jianshu.com/p/a7d988fb807f" target="_blank" rel="external">https://www.jianshu.com/p/a7d988fb807f</a><br>    python flask搭建web应用 - CSDN博客  <a href="https://blog.csdn.net/u012734441/article/details/62036503" target="_blank" rel="external">https://blog.csdn.net/u012734441/article/details/62036503</a><br>《Flask Web开发——基于Python的Web应用开发实践》一字一句上机实践（上） - 舞动的心 - 博客园  <a href="http://www.cnblogs.com/liuzhen1995/p/8001040.html" target="_blank" rel="external">http://www.cnblogs.com/liuzhen1995/p/8001040.html</a><br>Flask Web开发学习笔记（一）~（6） <a href="https://www.jianshu.com/p/303057e51417" target="_blank" rel="external">https://www.jianshu.com/p/303057e51417</a><br>Flask 的部署 <a href="https://windard.com/project/2016/12/01/Deploy-Flask-APP" target="_blank" rel="external">https://windard.com/project/2016/12/01/Deploy-Flask-APP</a><br>如果你也想写Flask| 编程派 | Coding Python <a href="http://codingpy.com/article/if-you-also-want-to-write-flask/" target="_blank" rel="external">http://codingpy.com/article/if-you-also-want-to-write-flask/</a><br>Introduction | Flask之旅 <a href="https://spacewander.github.io/explore-flask-zh/index.html" target="_blank" rel="external">https://spacewander.github.io/explore-flask-zh/index.html</a></p>
<ul>
<li>Django框架</li>
</ul>
<p>介紹 | Django Book 2.0 中文版 <a href="https://wizardforcel.gitbooks.io/django-book-20-zh-cn/content/index.html" target="_blank" rel="external">https://wizardforcel.gitbooks.io/django-book-20-zh-cn/content/index.html</a><br>从Python到Django入门教程 <a href="https://borisliu.gitbooks.io/from-python-to-django/content/introduction/preface.html" target="_blank" rel="external">https://borisliu.gitbooks.io/from-python-to-django/content/introduction/preface.html</a><br>Django新手图文入门教程 <a href="http://www.liujiangblog.com/blog/3/" target="_blank" rel="external">http://www.liujiangblog.com/blog/3/</a></p>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的PyCharm for Mac快捷键，因为网上经常找到的都是Windows版本，所以当是备忘也好，后续会不定期更新。</p>]]>
    
    </summary>
    
      <category term="PyCharm" scheme="https://iHTCboy.com/tags/PyCharm/"/>
    
      <category term="shortcut" scheme="https://iHTCboy.com/tags/shortcut/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iTerm2快捷键小记]]></title>
    <link href="https://iHTCboy.com/2018/08/03/2018-08-03_iTerm%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/08/03/2018-08-03_iTerm快捷键小记/</id>
    <published>2018-08-03T13:19:16.000Z</published>
    <updated>2018-08-06T15:10:26.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的iTerm快捷键，当是备忘也好，后续会不定期更新。</p>
<a id="more"></a>
<h3 id="2、iTerm2_快捷键">2、iTerm2 快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>command + f</td>
<td><strong>搜索&amp;查找</strong>，如果输入搜索内容后，按下 tab 键，就会 iTerm 自动帮选中搜索关键词，并且自动的帮我们复制到了剪贴板中。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。按 esc 退出搜索。</td>
</tr>
<tr>
<td>command + r <br>或 ctrl + l</td>
<td>清空屏幕，而且只是换到新一屏，不会像 clear 一样创建一个空屏</td>
</tr>
<tr>
<td>command + k</td>
<td>clear，清空屏幕</td>
</tr>
<tr>
<td>command + d</td>
<td>垂直分屏</td>
</tr>
<tr>
<td>command + shift + d</td>
<td>水平分屏</td>
</tr>
<tr>
<td>command + ;</td>
<td>查看历史命令</td>
</tr>
<tr>
<td>command + shift + h</td>
<td>查看剪贴板历史，会自动列出输入过的命令</td>
</tr>
<tr>
<td>command + number</td>
<td>tab 标签窗口来回切换</td>
</tr>
<tr>
<td>command + option + ←/→ <br>或 command + [ / ]</td>
<td>切换屏幕</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>ctrl +  x</td>
<td>第一次按时，移动光标至行首；再次按时，回到原有位置</td>
</tr>
<tr>
<td>ctrl + a</td>
<td>到行首（Ahead of line）</td>
</tr>
<tr>
<td>ctrl + e</td>
<td>到行尾（End of line）</td>
</tr>
<tr>
<td>ctrl + f/b</td>
<td>前进后退(相当于左右方向键)</td>
</tr>
<tr>
<td>ctrl + u</td>
<td>清除当前行（无论光标在什么位置）</td>
</tr>
<tr>
<td>ctrl + d</td>
<td>删除光标当前位置的<strong>字符</strong></td>
</tr>
<tr>
<td>ctrl + h</td>
<td>删除光标之前的<strong>字符</strong></td>
</tr>
<tr>
<td>ctrl + w</td>
<td>删除光标之前的<strong>单词</strong></td>
</tr>
<tr>
<td>ctrl + k</td>
<td>删除光标当前位置到文本末尾的<strong>所有字符</strong></td>
</tr>
<tr>
<td>ctrl + t</td>
<td>交换光标当前位置的字符与前一个字符的位置</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>ctrl + c <br>或 ctrl + j <br>或 ctrl + o</td>
<td>取消当前行输入的命令（中断操作）。重新起一行。</td>
</tr>
<tr>
<td>ctrl + y</td>
<td>粘贴之前（ctrl +u/k/w）删除的内容</td>
</tr>
<tr>
<td>ctrl + p <br>或 !!</td>
<td>上一条命令。调出命令历史中的前一条（Previous）命令，相当于通常的上箭头</td>
</tr>
<tr>
<td>ctrl + n</td>
<td>下一条命令。调出命令历史中的下一条（Next）命令，相当于通常的上箭头</td>
</tr>
<tr>
<td>ctrl + s</td>
<td>冻结终端操作（暂停脚本）</td>
</tr>
<tr>
<td>ctrl  + q</td>
<td>恢复冻结（继续执行脚本）</td>
</tr>
<tr>
<td>ctrl + r</td>
<td>搜索命令历史。根据用户输入查找相关历史命令（reverse-i-search）</td>
</tr>
<tr>
<td>ctrl + l  <br>或 command + r</td>
<td>换到新一屏，创建一个空屏</td>
</tr>
<tr>
<td>ctrl + i <br>或 tab</td>
<td>横行制表符，在命令行中补齐指令</td>
</tr>
<tr>
<td>双击</td>
<td>选中单词</td>
</tr>
<tr>
<td>三击</td>
<td>选中整行</td>
</tr>
<tr>
<td>四击</td>
<td>智能选择</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>!word</td>
<td>重复运行最近一条以“word”开头的指令，如!ls 或 !l</td>
</tr>
<tr>
<td>!$</td>
<td>调用上一条指令的最后一个参数作为当前指令对象,如，假设上一条指令为： ls abc.txt bbc.txt 那么， vi !$ 相当于： vi bbc.txt</td>
</tr>
<tr>
<td>!number</td>
<td>调用执行指定编号的历史记录指令,如!2, !11</td>
</tr>
</tbody>
</table>
<h3 id="参考">参考</h3><ul>
<li><a href="https://cnbin.github.io/blog/2015/06/20/iterm2-kuai-jie-jian-da-quan/" target="_blank" rel="external">iTerm2 快捷键大全 - 陈斌彬的技术博客</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的iTerm快捷键，当是备忘也好，后续会不定期更新。</p>]]>
    
    </summary>
    
      <category term="iTerm" scheme="https://iHTCboy.com/tags/iTerm/"/>
    
      <category term="shortcut" scheme="https://iHTCboy.com/tags/shortcut/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vi(vim)快捷键小记]]></title>
    <link href="https://iHTCboy.com/2018/07/28/2018-07-28_Vim%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/07/28/2018-07-28_Vim快捷键小记/</id>
    <published>2018-07-28T07:49:16.000Z</published>
    <updated>2018-09-01T04:54:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。总结一下自己平时常用的vim快捷键，当是忘记也好，后续会不定期更新。</p>
<a id="more"></a>
<h3 id="2、vim_快捷键">2、vim 快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>vi[m] + file</td>
<td>打开[新建]文件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>【命令模式】</td>
<td>可以移动光标、删除字符等</td>
</tr>
<tr>
<td>h,j,k,l</td>
<td>左，下，上，右</td>
</tr>
<tr>
<td>Blankspace</td>
<td>向右</td>
</tr>
<tr>
<td>Backspace</td>
<td>向左</td>
</tr>
<tr>
<td>Enter</td>
<td>移动到下一行首</td>
</tr>
<tr>
<td>-</td>
<td>移动到上一行首</td>
</tr>
<tr>
<td>b</td>
<td>上一个词的词首</td>
</tr>
<tr>
<td>w</td>
<td>下一个词的词首</td>
</tr>
<tr>
<td>e</td>
<td>下一个词的词尾</td>
</tr>
<tr>
<td>^</td>
<td>行首</td>
</tr>
<tr>
<td>$</td>
<td>行尾</td>
</tr>
<tr>
<td>f/F + 字符</td>
<td>向前/向后移动到特定的字符（行内）</td>
</tr>
<tr>
<td>gg</td>
<td>文件的第一行</td>
</tr>
<tr>
<td>G</td>
<td>文件的最后一行</td>
</tr>
<tr>
<td>nG</td>
<td>移动到第n行</td>
</tr>
<tr>
<td>n+</td>
<td>向下跳n行</td>
</tr>
<tr>
<td>n-</td>
<td>向上跳n行</td>
</tr>
<tr>
<td>/字</td>
<td>正向查找搜素字符串</td>
</tr>
<tr>
<td>?字</td>
<td>反向查找搜素字符串</td>
</tr>
<tr>
<td>n</td>
<td>向下搜索前一个搜素动作</td>
</tr>
<tr>
<td>N</td>
<td>向上搜索前一个搜索动作</td>
</tr>
<tr>
<td>x</td>
<td>删除字符</td>
</tr>
<tr>
<td>nx</td>
<td>删除从光标开始的n个字符</td>
</tr>
<tr>
<td>df + 字符</td>
<td>删除从当前字符到指定字符</td>
</tr>
<tr>
<td>dw/daw</td>
<td>删除单词</td>
</tr>
<tr>
<td>d$</td>
<td>删除从当前光标到行尾</td>
</tr>
<tr>
<td>dd</td>
<td>删除当前行</td>
</tr>
<tr>
<td>ndd</td>
<td>向下删除当前行在内的n行</td>
</tr>
<tr>
<td>dd + p</td>
<td>delete一行，然后放在当前光标下方</td>
</tr>
<tr>
<td>dd + P</td>
<td>delete一行，然后放在当前光标上方</td>
</tr>
<tr>
<td>dw + p</td>
<td>delete单词，然后放在当前光标后面</td>
</tr>
<tr>
<td>dw + P</td>
<td>delete单词，然后放在当前光标前面</td>
</tr>
<tr>
<td>p/P</td>
<td>重复粘贴，粘贴剪切板里的内容在光标后/前</td>
</tr>
<tr>
<td>yw</td>
<td>复制单词</td>
</tr>
<tr>
<td>yf + 字符</td>
<td>复制从当前字符到指定字符</td>
</tr>
<tr>
<td>yy</td>
<td>复制整行</td>
</tr>
<tr>
<td>y$</td>
<td>复制当前光标到行尾的内容</td>
</tr>
<tr>
<td>y^</td>
<td>复制从光标到行首的内容</td>
</tr>
<tr>
<td>J</td>
<td>合并光标所在行及下一行为一行</td>
</tr>
<tr>
<td>.</td>
<td>重复上一个操作</td>
</tr>
<tr>
<td>n+action</td>
<td>表示执行某个操作n次</td>
</tr>
<tr>
<td>u</td>
<td>撤销上一步操作</td>
</tr>
<tr>
<td>U</td>
<td>撤销对当前行的所有操作</td>
</tr>
<tr>
<td>ctrl + r</td>
<td>重做</td>
</tr>
<tr>
<td>ctrl + b</td>
<td>向前翻一页</td>
</tr>
<tr>
<td>ctrl + f</td>
<td>向后翻一页</td>
</tr>
<tr>
<td>ctrl + u</td>
<td>向前翻半页</td>
</tr>
<tr>
<td>ctrl + d</td>
<td>向后翻半页</td>
</tr>
<tr>
<td>ctrl + e</td>
<td>下滚一行</td>
</tr>
<tr>
<td>:set  nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>取消显示行号</td>
</tr>
<tr>
<td>:s/old/new</td>
<td>用new替换行中首次出现的old</td>
</tr>
<tr>
<td>:s/old/new/g</td>
<td>用new替换行中所有的old</td>
</tr>
<tr>
<td>:n,m s/old/new/g</td>
<td>用new替换从n到m行里所有的old</td>
</tr>
<tr>
<td>:%s/old/new/g</td>
<td>用new替换当前文件里所有的old</td>
</tr>
<tr>
<td>:w</td>
<td>保存正在编辑的文件</td>
</tr>
<tr>
<td>:w</td>
<td>new.txt //保存至new.tex文件</td>
</tr>
<tr>
<td>:q</td>
<td>退出不保存（文件未修改时）</td>
</tr>
<tr>
<td>:q!</td>
<td>退出编辑器，且不保存</td>
</tr>
<tr>
<td>:wq</td>
<td>保存后退出正在编辑的文件</td>
</tr>
<tr>
<td>:help</td>
<td>显示相关命令的帮助</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>【选择模式】</td>
<td></td>
</tr>
<tr>
<td>v</td>
<td>不规则选择</td>
</tr>
<tr>
<td>V</td>
<td>按行选择</td>
</tr>
<tr>
<td>Ctrl + v</td>
<td>按列选择</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>【插入模式】</td>
<td>在此模式下可以输入字符，按ESC将回到命令模式。</td>
</tr>
<tr>
<td>i</td>
<td>在当前字符前面插入</td>
</tr>
<tr>
<td>I</td>
<td>在行首插入</td>
</tr>
<tr>
<td>a</td>
<td>在当前字符后面插入</td>
</tr>
<tr>
<td>A</td>
<td>在行尾插入</td>
</tr>
<tr>
<td>o</td>
<td>在当前行的下一行插入</td>
</tr>
<tr>
<td>O</td>
<td>在当前行的上一行插入</td>
</tr>
<tr>
<td>r</td>
<td>更改当前的字符</td>
</tr>
<tr>
<td>R</td>
<td>更改多个字符</td>
</tr>
<tr>
<td>cw/caw</td>
<td>更改单词</td>
</tr>
<tr>
<td>cf + 字符</td>
<td>更改从当前字符到指定字符</td>
</tr>
<tr>
<td>c$</td>
<td>更改从当前字符到行尾</td>
</tr>
<tr>
<td>cc</td>
<td>更改整行</td>
</tr>
</tbody>
</table>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.vpser.net/manage/vi.html" target="_blank" rel="external">Linux上vi(vim)编辑器使用教程 - VPS侦探</a></li>
<li><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明 Vim 练级攻略 | | 酷 壳 - CoolShell</a></li>
<li><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="external">YBlog - Learn Vim Progressively</a></li>
<li><a href="https://www.jianshu.com/p/a0b452f8f720" target="_blank" rel="external">Vim配置、插件和使用技巧 - 简书</a></li>
<li><a href="https://www.cnblogs.com/jikey/archive/2011/12/28/2304341.html" target="_blank" rel="external">Vim快捷键分类 - 豪情 - 博客园</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。总结一下自己平时常用的vim快捷键，当是忘记也好，后续会不定期更新。</p>]]>
    
    </summary>
    
      <category term="Vim" scheme="https://iHTCboy.com/tags/Vim/"/>
    
      <category term="shortcut" scheme="https://iHTCboy.com/tags/shortcut/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django 2.0 model on_delete错误小记]]></title>
    <link href="https://iHTCboy.com/2018/07/22/2018-07-22_Django%E9%94%99%E8%AF%AF%E5%B0%8F%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/07/22/2018-07-22_Django错误小记/</id>
    <published>2018-07-22T08:49:16.000Z</published>
    <updated>2018-08-04T15:37:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>今天用 Django 2.0 时模型的外键报了一个错误：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: __init__() missing <span class="number">1</span> required positional argument: <span class="string">'on_delete'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2、原因">2、原因</h3><p>经过筛查，在创建多对一的关系的，需要在<code>Foreign</code>的第二参数中加入 <code>on_delete=models.CASCADE</code>  主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除。</p>
<p>on_delete参数的各个值（可选的值都内置在django.db.models中）的含义:</p>
<ul>
<li>CASCADE：级联删除，模拟SQL语言中的ON DELETE CASCADE约束，将定义有外键的模型对象同时删除！</li>
<li>PROTECT: 保护模式，阻止上面的删除操作，但是弹出ProtectedError异常</li>
<li>SET_NULL：置空模式，将外键字段设为null，只有当字段设置了null=True时，方可使用该值。</li>
<li>SET_DEFAULT: 置默认值，将外键字段设为默认值。只有当字段设置了default参数时，方可使用。</li>
<li>DO_NOTHING：什么也不做。</li>
<li>SET()：设置为一个传递给SET()的值或者一个回调函数的返回值，注意大小写。自定义一个值，该值当然只能是对应的实体。</li>
</ul>
<p>示例：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author = models.ForeignKey(AuthModel, <span class="literal">null</span>=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br></pre></td></tr></table></figure>
<p>关于SET()的使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&#23448;&#26041;&#26696;&#20363;**&#10;def get_sentinel_user():&#10;    return get_user_model().objects.get_or_create(username=&#39;deleted&#39;)[0]&#10;&#10;class MyModel(models.Model):&#10;    user = models.ForeignKey(&#10;        settings.AUTH_USER_MODEL,&#10;        on_delete=models.SET(get_sentinel_user),&#10;    )</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><ul>
<li><a href="https://blog.csdn.net/hpu_yly_bj/article/details/78927121" target="_blank" rel="external">on_delete=models.CASCADE级联删除 - CSDN博客</a></li>
<li><a href="https://blog.csdn.net/kuangshp128/article/details/78946316" target="_blank" rel="external">django数据模型中关于on_delete的使用 - CSDN博客</a></li>
<li><a href="https://blog.csdn.net/buxianghejiu/article/details/79086011" target="_blank" rel="external">django2.0 关联表的必填on_delete参数的含义 - CSDN博客</a></li>
<li><a href="http://www.liujiangblog.com/course/django/96" target="_blank" rel="external">django 关系类型字段 - 刘江的django教程</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>今天用 Django 2.0 时模型的外键报了一个错误：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: __init__() missing <span class="number">1</span> required positional argument: <span class="string">'on_delete'</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Django" scheme="https://iHTCboy.com/tags/Django/"/>
    
      <category term="on_delete" scheme="https://iHTCboy.com/tags/on-delete/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员的macOS系列：精选Mac App]]></title>
    <link href="https://iHTCboy.com/2018/07/15/2018-07-15_%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS%E7%B3%BB%E5%88%97%EF%BC%9A%E7%B2%BE%E9%80%89MacApp/"/>
    <id>https://iHTCboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/</id>
    <published>2018-07-15T14:29:16.000Z</published>
    <updated>2018-10-01T00:12:55.924Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近打算写《程序员的macOS系列》文章，总结一下自己程序员几年的macOS系统使用，本文是《程序员的macOS系列》的第一篇精选Mac App，介绍一下程序员macOS的应用，所以这系列文章是指向于程序员，可能会偏向iOS开发，尽量写大全吧。网上也有很多总结了Mac App的文章，但本文是一个程序员系列的，注意定位就好。</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》这三篇，后续有想法在增加吧~</p>
<a id="more"></a>
<h3 id="2、精选Mac_App">2、精选Mac App</h3><p>Mac电脑上有很多应用，这里不提供任何安装包，默认是链接到对应的App官网，另外，如果App有上架到AppStore，建议在AppStore购买下载，说不定下次换电脑时会非常方便！</p>
<h4 id="IDE">IDE</h4><p>集成开发环境，程序员利器！</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Xcode.png" width="200" height:auto="" alt="20180715-macOS-Xcode.png"></td>
<td>Xcode</td>
<td>Xcode是 Mac, iPhone, iPad, Apple TV, and Apple Watch 等应用的开发集成工具。</td>
<td>免费</td>
<td><a href="https://developer.apple.com/xcode/" target="_blank" rel="external">Xcode - Apple Developer</a></td>
<td><a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12" target="_blank" rel="external">‎Xcode on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-AndroidStudio.png" width="200" height:auto="" alt="20180715-macOS-AndroidStudio.png"></td>
<td>Android Studio</td>
<td>Android Studio是一个为Android平台开发程序的集成开发环境。</td>
<td>免费</td>
<td><a href="https://developer.android.com/studio/intro/" target="_blank" rel="external">Android Studio -  Android Developers</a></td>
<td><a href="https://developer.android.com/studio/" target="_blank" rel="external">‎Download Android Studio and SDK tools - Android Developers</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-PyCharm.png" width="200" height:auto="" alt="20180715-macOS-PyCharm.png"></td>
<td>PyCharm</td>
<td>PyCharm是一个用于计算机编程的集成开发环境，主要用于Python语言开发，由捷克公司JetBrains开发，提供代码分析、图形化调试器，集成测试器、集成版本控制系统，并支持使用Django进行网页开发。 PyCharm一个跨平台开发环境，拥有Windows, macOS 和Linux版本。</td>
<td>收费</td>
<td><a href="https://www.jetbrains.com" target="_blank" rel="external">JetBrains</a></td>
<td><a href="https://www.jetbrains.com/pycharm/download" target="_blank" rel="external">Download PyCharm</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-WebStorm.png" width="200" height:auto="" alt="20180715-macOS-WebStorm.png"></td>
<td>WebStorm</td>
<td>WebStorm 是jetbrains公司旗下一款JavaScript 开发工具。目前已经被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等</td>
<td>收费</td>
<td><a href="https://www.jetbrains.com" target="_blank" rel="external">JetBrains</a></td>
<td><a href="https://www.jetbrains.com/webstorm/download" target="_blank" rel="external">Download WebStorm</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-AppCode.png" width="200" height:auto="" alt="20180715-macOS-AppCode.png"></td>
<td>AppCode</td>
<td>jetbrains公司旗下的 Objective-C/Swift 集成开发环境，用于帮助开发 Mac、iPhone 和 iPad 的应用程序。</td>
<td>收费</td>
<td><a href="https://www.jetbrains.com" target="_blank" rel="external">JetBrains</a></td>
<td><a href="https://www.jetbrains.com/objc/download/" target="_blank" rel="external">Download AppCode: Smart Swift &amp; Obj-C IDE</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-IntelliJ_IDEA.png" width="200" height:auto="" alt="20180715-macOS-IntelliJ_IDEA.png"></td>
<td>IntelliJ IDEA</td>
<td>java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。</td>
<td>收费</td>
<td><a href="https://www.jetbrains.com" target="_blank" rel="external">JetBrains</a></td>
<td><a href="https://www.jetbrains.com/idea/download" target="_blank" rel="external">Download IntelliJ IDEA</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-PhpStorm.png" width="200" height:auto="" alt="20180715-macOS-PhpStorm.png"></td>
<td>PhpStorm</td>
<td>PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。</td>
<td>收费</td>
<td><a href="https://www.jetbrains.com" target="_blank" rel="external">JetBrains</a></td>
<td><a href="https://www.jetbrains.com/phpstorm/download" target="_blank" rel="external">Download PhpStorm</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-CLion.png" width="200" height:auto="" alt="20180715-macOS-CLion.png"></td>
<td>CLion</td>
<td>CLion是一款专为开发C及C++所设计的跨平台IDE。它是以IntelliJ为基础设计的，包含了许多智能功能来提高开发人员的生产力，提高开发人员的工作效率。</td>
<td>收费</td>
<td><a href="https://www.jetbrains.com" target="_blank" rel="external">JetBrains</a></td>
<td><a href="https://www.jetbrains.com/clion/download" target="_blank" rel="external">Download CLion</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-GoLand.png" width="200" height:auto="" alt="20180715-macOS-GoLand.png"></td>
<td>GoLand</td>
<td>GoLand是一款专为开发Go语言所设计的跨平台IDE。</td>
<td>收费</td>
<td><a href="https://www.jetbrains.com" target="_blank" rel="external">JetBrains</a></td>
<td><a href="https://www.jetbrains.com/go/download" target="_blank" rel="external">Download GoLand</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-CodeRunner.png" width="200" height:auto="" alt="20180715-macOS-CodeRunner.png"></td>
<td>CodeRunner</td>
<td>CodeRunner 是 Mac 上一款功能强大但使用简单代码工具，官方介绍支持几乎所有语言（20种语言），同时支持语法高亮、代码提示和多种界面主题，在学习新的语言或编写简单测试代码时非常实用。</td>
<td>收费</td>
<td><a href="https://coderunnerapp.com" target="_blank" rel="external">CodeRunner – Programming Editor for Mac</a></td>
<td><a href="https://itunes.apple.com/us/app/coderunner-2/id955297617?mt=12" target="_blank" rel="external">‎CodeRunner 2 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Wechat-webdevtools.png" width="200" height:auto="" alt="20180715-macOS-Wechat-webdevtools.png"></td>
<td>wechatwebdevtools<br>（微信开发者工具）</td>
<td>为了帮助开发者简单和高效地开发和调试微信小程序，微信在原有的公众号网页调试工具的基础上，推出了全新的 微信开发者工具，集成了公众号网页调试和小程序调试两种开发模式。</td>
<td>免费</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/getting-started.html" target="_blank" rel="external">微信 · 小程序</a></td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="external">开发者工具 下载</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-CocosCreator.png" width="200" height:auto="" alt="20180715-macOS-CocosCreator.png"></td>
<td>CocosCreator</td>
<td>Cocos Creator是以内容创作为核心的游戏开发工具，在Cocos2d-x基础上实现了彻底脚本化、组件化和数据驱动等特点。 Cocos Creator基于开源框架Cocos2d-x，实现了一体化、可扩展、可自定义工作流的编辑器，并在Cocos系列产品中第一次引入了组件化编程思想和数据驱动的架构设计，这极大地简化了Cocos2d-x开发工作流中的场景编辑、UI设计、资源管理、游戏调试和预览、多平台发布等工作，是使用Cocos2d-x进行团队协作开发的最佳选择。</td>
<td>免费</td>
<td><a href="http://www.cocos.com" target="_blank" rel="external">Cocos引擎_游戏开发引擎</a></td>
<td><a href="http://www.cocos.com/creator" target="_blank" rel="external">Cocos Creator 下载</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-unity-3d.jpg" width="200" height:auto="" alt="20180715-macOS-unity-3d.jpg"></td>
<td>Unity</td>
<td>Unity 是一套跨平台的游戏引擎，可用于开发Windows、MacOS、Linux 平台的单机游戏，或是iOS、Android 移动设备的游戏。Unity 也可开发支持WebGL 技术的网页游戏，或 PlayStation、XBox、Wii 主机上的游戏。</td>
<td>收费</td>
<td><a href="https://unity3d.com/cn" target="_blank" rel="external">Unity</a></td>
<td><a href="https://unity3d.com/cn/get-unity/download" target="_blank" rel="external">Download - Unity</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Unreal_Engine_4.png" width="200" height:auto="" alt="20180715-macOS-Unreal_Engine_4.png"></td>
<td>Unreal Engine 4</td>
<td>虚幻引擎是一款由Epic Games开发的游戏引擎，多用于开发第一人称射击游戏。</td>
<td>收费</td>
<td><a href="https://www.unrealengine.com/zh-CN" target="_blank" rel="external">虚幻引擎</a></td>
<td><a href="https://www.unrealengine.com/zh-CN/register?state=https%3A%2F%2Fwww.unrealengine.com%2Fzh-CN%2Fblog&amp;studio=false" target="_blank" rel="external">下载</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h4 id="Developer_Tools">Developer Tools</h4><p>程序开发中使用的工具应用。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Visual_Studio_Code.png" width="200" height:auto="" alt="20180715-macOS-Visual_Studio_Code.png"></td>
<td>Visual Studio Code</td>
<td>Visual Studio Code是一个由微软开发的，同时支持Windows、Linux和macOS操作系统且开放源代码的文本编辑器。它支持调试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全、代码片段、代码重构等。</td>
<td>免费</td>
<td><a href="https://code.visualstudio.com" target="_blank" rel="external">Visual Studio Code - Code Editing. Redefined</a></td>
<td><a href="https://code.visualstudio.com/download" target="_blank" rel="external">Download Visual Studio Code - Mac, Linux, Windows</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-atom.png" width="200" height:auto="" alt="20180715-macOS-atom.png"></td>
<td>Atom</td>
<td>Atom是由GitHub开发的自由及开放源代码的文字与代码编辑器，支持macOS、Windows和Linux操作系统，支持Node.js所写的插件，并内置由Github提供的Git版本控制系统。多数的延伸包皆为开放源代码授权，并由社区建置与维护。</td>
<td>免费</td>
<td><a href="https://ide.atom.io" target="_blank" rel="external">Atom IDE</a></td>
<td><a href="https://atom.io" target="_blank" rel="external">Atom</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Sublime_Text.png" width="200" height:auto="" alt="20180715-macOS-Sublime_Text.png"></td>
<td>Sublime Text</td>
<td>Sublime Text是一套跨平台的文本编辑器，支持基于Python的插件。Sublime Text是专有软件，可通过包扩展。大多数的包使用自由软件授权发布，并由社区建置维护。</td>
<td>免费/收费</td>
<td><a href="https://www.sublimetext.com" target="_blank" rel="external">Sublime Text - A sophisticated text editor for code, markup and prose</a></td>
<td><a href="https://www.sublimetext.com/3" target="_blank" rel="external">Download - Sublime Text</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iTerm.png" width="200" height:auto="" alt="20180715-macOS-iTerm.png"></td>
<td>iTerm</td>
<td>iTerm 是一款完全免费的，专为 masOS 用户打造的命令行应用。有很多能够提升效率的实用功能，比如说窗口分割、热键窗口、智能搜索、自动完成、快速复制等</td>
<td>免费</td>
<td><a href="https://www.iterm2.com" target="_blank" rel="external">iTerm2 - macOS Terminal Replacement</a></td>
<td><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="external">Downloads - iTerm2</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Navicat_Premium.png" width="200" height:auto="" alt="20180715-macOS-Navicat_Premium.png"></td>
<td>Navicat Premium</td>
<td>Navicat Premium 是一套数据库开发工具，让你从单一应用程序中同时连接 MySQL、MariaDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。它与 Amazon RDS、Amazon Aurora、Amazon Redshift、Microsoft Azure、Oracle Cloud、阿里云和腾讯云等云数据库兼容。你可以快速轻松地创建、管理和维护数据库。</td>
<td>收费</td>
<td><a href="https://www.navicat.com.cn/products/navicat-premium" target="_blank" rel="external">Navicat Premium - 以单一的 GUI 同时连接不同类型的数据库</a></td>
<td><a href="https://www.navicat.com.cn/download/navicat-premium" target="_blank" rel="external">下载 Navicat Premium 14 天免费</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-sourcetree.png" width="200" height:auto="" alt="20180715-macOS-sourcetree.png"></td>
<td>SourceTree</td>
<td>SourceTree 是Windows 和Mac OS X 下免费的Git 和Hg 客户端，拥有可视化界面，容易上手操作。</td>
<td>免费</td>
<td><a href="https://www.sourcetreeapp.com" target="_blank" rel="external">Sourcetree - Free Git GUI for Mac and Windows</a></td>
<td><a href="https://www.sourcetreeapp.com" target="_blank" rel="external">Sourcetree</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-GitHub_Desktop.png" width="200" height:auto="" alt="20180715-macOS-GitHub_Desktop.png"></td>
<td>GitHub Desktop</td>
<td>GitHub Desktop is an open source Electron-based GitHub app. It is written in TypeScript and uses React.</td>
<td>免费</td>
<td><a href="https://desktop.github.com" target="_blank" rel="external">GitHub Desktop - Simple collaboration from your desktop</a></td>
<td><a href="https://desktop.github.com" target="_blank" rel="external">GitHub Desktop</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Dash.png" width="200" height:auto="" alt="20180715-macOS-Dash.png"></td>
<td>Dash</td>
<td>Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 200+ APIs, 100+ cheat sheets and more. You can even generate your own docsets or request docsets to be included.</td>
<td>免费/收费</td>
<td><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash for macOS</a></td>
<td><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash for macOS</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-charles.png" width="200" height:auto="" alt="20180715-macOS-charles.png"></td>
<td>Charles</td>
<td>Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information).</td>
<td>免费/收费</td>
<td><a href="https://www.charlesproxy.com" target="_blank" rel="external">Charles Web Debugging Proxy • HTTP Monitor / HTTP Proxy / HTTPS &amp; SSL Proxy / Reverse Proxy</a></td>
<td><a href="https://www.charlesproxy.com/download/latest-release/" target="_blank" rel="external">Download Charles</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Easy_APNs_Provider.png" width="200" height:auto="" alt="20180715-macOS-Easy_APNs_Provider.png"></td>
<td>Easy APNs Provider</td>
<td>一个推送服务提供商（Apns Provider）方能发送推送来测试iOS程序。</td>
<td>免费</td>
<td><a href="http://www.cocoachina.com/bbs/read.php?tid-290938.html" target="_blank" rel="external">苹果推送服务测试小工具 Easy APNs Provider （Mac平台）</a></td>
<td><a href="https://itunes.apple.com/us/app/easy-apns-provider-push-notification-service-testing-tool/id989622350?mt=12" target="_blank" rel="external">‎Easy APNs Provider on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Genymotion.png" width="200" height:auto="" alt="20180715-macOS-Genymotion.png"></td>
<td>Genymotion</td>
<td>Create any Android device - Emulate all Android versions and screen size.</td>
<td>免费/收费</td>
<td><a href="https://www.genymotion.com" target="_blank" rel="external">Genymotion Android Emulator</a></td>
<td><a href="https://www.genymotion.com/desktop/" target="_blank" rel="external">Genymotion</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-VirtualBox.png" width="200" height:auto="" alt="20180715-macOS-VirtualBox.png"></td>
<td>VirtualBox</td>
<td>Oracle VirtualBox是由德国InnoTek软件公司出品的虚拟机软件，现在则由甲骨文公司进行开发，是甲骨文公司xVM虚拟化平台技术的一部分。它提供用户在32位或64位的Windows、Solaris及Linux 操作系统上虚拟其它x86的操作系统。</td>
<td>免费</td>
<td><a href="https://www.virtualbox.org/wiki/VirtualBox" target="_blank" rel="external">VirtualBox – Oracle VM VirtualBox</a></td>
<td><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">Downloads – Oracle VM VirtualBox</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Parallels_Desktop.png" width="200" height:auto="" alt="20180715-macOS-Parallels_Desktop.png"></td>
<td>Parallels Desktop</td>
<td>Parallels Desktop是一款运行在Mac 电脑上的极为优秀的虚拟机软件。 用户可以在Mac OS X 下非常方便运行Windows、Linux 等操作系统及应用。 用户不必繁琐重复地重启电脑即可在Win 与Mac 之间切换甚至同时使用它们。</td>
<td>收费</td>
<td><a href="https://www.parallels.com/cn/products/desktop" target="_blank" rel="external">Parallels Desktop 13</a></td>
<td><a href="https://www.parallels.com/cn/products/desktop" target="_blank" rel="external">Parallels Desktop 13</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Reveal.png" width="200" height:auto="" alt="20180715-macOS-Reveal.png"></td>
<td>Reveal</td>
<td>Reveal是iOS开发工具中的神器之一，它能够在应用程序运行过程中调试应用程序界面。</td>
<td>免费/收费</td>
<td><a href="https://revealapp.com" target="_blank" rel="external">Reveal - Runtime view debugging for iOS &amp; tvOS apps &amp; extensions</a></td>
<td><a href="https://revealapp.com/download/" target="_blank" rel="external">Download - Reveal</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Kaleidoscope.png" width="200" height:auto="" alt="20180715-macOS-Kaleidoscope.png"></td>
<td>Kaleidoscope</td>
<td>Kaleidoscope is the world’s most powerful file comparison app. Compare different text files, images, and folders on your Mac and iPad. Review and merge changes in a matter of seconds (merging available only on the Mac).</td>
<td>收费</td>
<td><a href="https://www.kaleidoscopeapp.com" target="_blank" rel="external">Kaleidoscope</a></td>
<td><a href="https://itunes.apple.com/us/app/kaleidoscope/id587512244?mt=12" target="_blank" rel="external">‎Kaleidoscope on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Prepo.png" width="200" height:auto="" alt="20180715-macOS-Prepo.png"></td>
<td>Prepo</td>
<td>Prepo可以帮助设计师快速生成各种尺寸的图标，只需你将最大分辨率的图标拖拽进来，其他的尺寸交给Prepo做就好了。</td>
<td>免费</td>
<td><a href="https://wearemothership.com/work/prepo/" target="_blank" rel="external">Prepo 2 - Mac and iOS - Preview, resize and export icon and @2x artwork for app development</a></td>
<td><a href="https://itunes.apple.com/us/app/prepo/id476533227?mt=12" target="_blank" rel="external">‎Prepo on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-PaintCode.png" width="200" height:auto="" alt="20180715-macOS-PaintCode.png"></td>
<td>PaintCode</td>
<td>随心所欲的将界面设计转换成代码。</td>
<td>收费</td>
<td><a href="https://www.paintcodeapp.com" target="_blank" rel="external">PaintCode - Turn your drawings into Objective-C or Swift drawing code</a></td>
<td><a href="https://www.paintcodeapp.com" target="_blank" rel="external">PaintCode</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-QuartzCode.png" width="200" height:auto="" alt="20180715-macOS-QuartzCode.png"></td>
<td>QuartzCode</td>
<td>QuartzCode是一款专门用来创作iOS/macOS动画的软件，基本上把整个Core Animation框架的内容都搬到了软件里面，比如各种Layer、Mask、可以用来动画的属性，基本上跟代码是一致的，完全可以当成“可视化动画编程”工具，而且制作以后可以导出代码+资源文件，直接就可以在代码里面调用，方便自定义修改。</td>
<td>收费</td>
<td><a href="http://www.quartzcodeapp.com" target="_blank" rel="external">QuartzCode - Turn your animations to objective-c or swift OS X / iOS animations code</a></td>
<td><a href="https://itunes.apple.com/app/quartzcode-vector-animation/id913523893" target="_blank" rel="external">‎QCode on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Core_Animator.png" width="200" height:auto="" alt="20180715-macOS-Core_Animator.png"></td>
<td>Core Animator</td>
<td>Core Animator 是一款动画制作软件，可以自动生成 Objective-C 和 Swift 代码，让开发者快速在 App 中制作动画效果甚至是游戏。</td>
<td>收费</td>
<td><a href="http://www.coreanimator.com" target="_blank" rel="external">CoreAnimator</a></td>
<td><a href="https://itunes.apple.com/us/app/core-animator/id934434650?mt=12" target="_blank" rel="external">‎Core Animator on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-VisualJSON.png" width="200" height:auto="" alt="20180715-macOS-VisualJSON.png"></td>
<td>VisualJSON</td>
<td>Visual JSON is a simple and very easy to use JSON visulization tool for JSON API server/client developers.</td>
<td>免费</td>
<td><a href="http://youknowone.github.io/VisualJSON/" target="_blank" rel="external">VisualJSON by youknowone</a></td>
<td><a href="https://itunes.apple.com/us/app/visual-json/id488709442?mt=12" target="_blank" rel="external">‎Visual JSON on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-FauxPas.png" width="200" height:auto="" alt="20180715-macOS-FauxPas.png"></td>
<td>FauxPas</td>
<td>Faux Pas inspects your iOS or Mac app’s Xcode project and warns about possible bugs, as well as about maintainability and style issues.</td>
<td>收费</td>
<td><a href="http://fauxpasapp.com" target="_blank" rel="external">Faux Pas for Xcode</a></td>
<td><a href="http://fauxpasapp.com" target="_blank" rel="external">Faux Pas for Xcode</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iReSign.png" width="200" height:auto="" alt="20180715-macOS-iReSign.png"></td>
<td>iReSign</td>
<td>iReSign allows iDevice app bundles (.ipa) files to be signed or resigned with a digital certificate from Apple for distribution. This tool is aimed at enterprises users, for enterprise deployment, when the person signing the app is different than the person(s) developing it.</td>
<td>免费</td>
<td><a href="https://github.com/maciekish/iReSign" target="_blank" rel="external">maciekish/iReSign</a></td>
<td><a href="https://github.com/maciekish/iReSign" target="_blank" rel="external">maciekish/iReSign</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iOS_App_Signer.png" width="200" height:auto="" alt="20180715-macOS-iOS_App_Signer.png"></td>
<td>iOS App Signer</td>
<td>This is an app for OS X that can (re)sign apps and bundle them into ipa files that are ready to be installed on an iOS device.</td>
<td>免费</td>
<td><a href="https://github.com/DanTheMan827/ios-app-signer" target="_blank" rel="external">DanTheMan827/ios-app-signer</a></td>
<td><a href="https://github.com/DanTheMan827/ios-app-signer/releases" target="_blank" rel="external">Releases · DanTheMan827/ios-app-signer</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Impactor.png" width="200" height:auto="" alt="20180715-macOS-Impactor.png"></td>
<td>Impactor</td>
<td>Cydia Impactor is a GUI tool for working with mobile devices. It has features already, but is still very much a work-in-progress.</td>
<td>免费</td>
<td><a href="http://www.cydiaimpactor.com" target="_blank" rel="external">Cydia Impactor</a></td>
<td><a href="http://www.cydiaimpactor.com" target="_blank" rel="external">Cydia Impactor</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-MachOView.png" width="200" height:auto="" alt="20180715-macOS-MachOView.png"></td>
<td>MachOView</td>
<td>MachOView is a visual Mach-O file browser. It provides a complete solution for exploring and in-place editing Intel and ARM binaries.</td>
<td>免费</td>
<td><a href="https://sourceforge.net/p/machoview/code/ci/master/tree/" target="_blank" rel="external">MachOView - Code</a></td>
<td><a href="https://sourceforge.net/projects/machoview/" target="_blank" rel="external">MachOView download - SourceForge.net</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Hopper_Disassembler-v4.png" width="200" height:auto="" alt="20180715-macOS-Hopper_Disassembler-v4.png"></td>
<td>Hopper Disassembler</td>
<td>Hopper Disassembler是一款是32位和64位的二进制反汇编器，反编译和调试。你可以使用此工具拆开你想要的任何二进制。</td>
<td>收费</td>
<td><a href="https://www.hopperapp.com" target="_blank" rel="external">Hopper</a></td>
<td><a href="https://www.hopperapp.com" target="_blank" rel="external">Hopper</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-IDA_Pro_7.png" width="200" height:auto="" alt="20180715-macOS-IDA_Pro_7.png"></td>
<td>IDA Pro</td>
<td>IDA Pro，为Interactive Disassembler公司的反组译与除错工具的产品。常用于逆向工程。</td>
<td>收费</td>
<td><a href="https://www.hex-rays.com/products/ida/" target="_blank" rel="external">IDA</a></td>
<td><a href="https://www.hex-rays.com/products/ida/order.shtml" target="_blank" rel="external">IDA: Ordering</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h4 id="System">System</h4><p>增强或改变macOS系统功能，常驻状态栏或成为系统服务的一部分。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Alfred.png" width="200" height:auto="" alt="20180715-macOS-Alfred.png"></td>
<td>Alfred</td>
<td>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</td>
<td>收费</td>
<td><a href="https://www.alfredapp.com" target="_blank" rel="external">Alfred - Productivity App for Mac OS X</a></td>
<td><a href="https://www.alfredapp.com" target="_blank" rel="external">Alfred - Productivity App for Mac OS X</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Moom.png" width="200" height:auto="" alt="20180715-macOS-Moom.png"></td>
<td>Moom</td>
<td>Moom 是一款专为Mac准备的窗口管理工具，它能够让您移动和缩放窗口。</td>
<td>收费</td>
<td><a href="https://manytricks.com/moom/" target="_blank" rel="external">Moom · Many Tricks</a></td>
<td><a href="https://itunes.apple.com/us/app/moom/id419330170?mt=12" target="_blank" rel="external">‎Moom on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Keka.png" width="200" height:auto="" alt="20180715-macOS-Keka.png"></td>
<td>Keka</td>
<td>Keka is a full featured file archiver, as easy as it can be.</td>
<td>收费</td>
<td><a href="https://www.keka.io/en/" target="_blank" rel="external">Keka - the macOS file archiver</a></td>
<td><a href="https://itunes.apple.com/us/app/keka/id470158793?mt=12" target="_blank" rel="external">‎Keka on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-The_Unarchiver.png" width="200" height:auto="" alt="20180715-macOS-The_Unarchiver.png"></td>
<td>The Unarchiver</td>
<td>The Unarchiver是一款免费实用的解压缩应用程序，用户可以使用它解压多达30种不同的压缩格式文件。</td>
<td>免费</td>
<td><a href="https://theunarchiver.com" target="_blank" rel="external">The Unarchiver - Top Free Unarchiving Software for macOS</a></td>
<td><a href="https://itunes.apple.com/us/app/the-unarchiver/id425424353?mt=12" target="_blank" rel="external">‎‎The Unarchiver on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-JietuMac.png" width="200" height:auto="" alt="20180715-macOS-JietuMac.png"></td>
<td>Jietu<br>截图</td>
<td>截图（Jietu）是一款免费应用，精美界面设计，操作简单，功能强大。截图功能包括区域截图／窗口截图／全屏截图／倒计时截图／录制屏幕，保存可自定义选择图片和视频质量。</td>
<td>免费</td>
<td><a href="https://jietu.qq.com" target="_blank" rel="external">轻松便捷爱截图</a></td>
<td><a href="https://itunes.apple.com/us/app/截图-jietu-快速标注-便捷分享的截屏工具/id1059334054?mt=12" target="_blank" rel="external">‎截图(Jietu)-快速标注、便捷分享的截屏工具 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iText.png" width="200" height:auto="" alt="20180715-macOS-iText.png"></td>
<td>iText</td>
<td>iText是一个OCR图像转成文字的工具，在macOS上非常方便和准确的识别。</td>
<td>免费/订阅</td>
<td><a href="https://en.toolinbox.net/iText/" target="_blank" rel="external">iText - OCR Tool - Toolinbox</a></td>
<td><a href="https://itunes.apple.com/us/app/itext-ocr-translator/id1314980676?mt=12" target="_blank" rel="external">‎iText - OCR &amp; Translator on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-ShadowsocksX.png" width="200" height:auto="" alt="20180715-macOS-ShadowsocksX.png"></td>
<td>ShadowsocksX</td>
<td>A secure socks5 proxy, designed to protect your Internet traffic.</td>
<td>免费</td>
<td><a href="https://github.com/yangfeicheung/Shadowsocks-X" target="_blank" rel="external">yangfeicheung/Shadowsocks-X: Latest ShadowsocksX for Mac OS X 10.9+</a></td>
<td><a href="https://www.sednax.com" target="_blank" rel="external">Shadowsocks X - A secure socks5 proxy</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-TinyCal.png" width="200" height:auto="" alt="20180715-macOS-TinyCal.png"></td>
<td>TinyCal</td>
<td>小历是 macOS &amp; iOS 平台上面小而美的日历，macOS 上面通过菜单栏和通知中心让用户查看日历十分便捷。</td>
<td>收费</td>
<td><a href="http://ioszen.com/tinycal" target="_blank" rel="external">小历 - 小而美的日历 (OS X) - iOS Zen</a></td>
<td><a href="https://itunes.apple.com/us/app/小历-小而美的日历/id1114272557?mt=12" target="_blank" rel="external">‎小历 - 小而美的日历 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-TripMode.png" width="200" height:auto="" alt="20180715-macOS-TripMode.png"></td>
<td>TripMode</td>
<td>TripMode，每当你的笔记本接入手机热点后，都会自动开启流量管控状态。</td>
<td>收费</td>
<td><a href="https://www.tripmode.ch" target="_blank" rel="external">TripMode - Your mobile data savior.</a></td>
<td><a href="https://www.tripmode.ch" target="_blank" rel="external">TripMode - Your mobile data savior.</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h3 id="Utility">Utility</h3><p>通用工具，便捷和高效的专精应用。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Mate_Translate.png" width="200" height:auto="" alt="20180715-macOS-Mate_Translate.png"></td>
<td>Mate Translate</td>
<td>非常棒的应用，翻译很精确！</td>
<td>收费</td>
<td><a href="https://www.matetranslate.com" target="_blank" rel="external">Mate Translate – your ultimate translation app</a></td>
<td><a href="https://itunes.apple.com/us/app/mate-translate-translator/id1005088137?mt=12" target="_blank" rel="external">‎Mate Translate – translator on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-CleanMyMac3.png" width="200" height:auto="" alt="20180715-macOS-CleanMyMac3.png"></td>
<td>CleanMyMac</td>
<td>如果电脑空间小，清空电脑还有很有作用。比对苹果x删除，用CleanMyMac卸载更干净。</td>
<td>收费</td>
<td><a href="https://macpaw.com" target="_blank" rel="external">CleanMyMac 3: The Best Mac Cleanup App for OS X. Get a Cleaner Mac in Minutes.</a></td>
<td><a href="https://macpaw.com/download/cleanmymac" target="_blank" rel="external">Download CleanMyMac 3</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Google_Chrome.png" width="200" height:auto="" alt="20180715-macOS-Google_Chrome.png"></td>
<td>Google Chrome</td>
<td>一款快速、简单且安全的浏览器，适合在所有设备上使用。</td>
<td>免费</td>
<td><a href="https://www.google.com/chrome/" target="_blank" rel="external">Chrome 网络浏览器</a></td>
<td><a href="https://www.google.com/chrome/" target="_blank" rel="external">Chrome 网络浏览器</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iSmartPhoto.png" width="200" height:auto="" alt="20180715-macOS-iSmartPhoto.png"></td>
<td>iSmartPhoto</td>
<td>iSmartPhoto是一个快速的图像浏览器和强大的图像管理器。不像 iPhoto，iSmartPhoto for mac不需要你手动导入照片–它自动拉取你的照片从任何文件夹或驱动器。通过只是双单击查找器的单个图像或拖动文件夹，iSmartPhoto会自动显示每个图像从所选的文件夹及其子文件夹。</td>
<td>收费</td>
<td><a href="https://ismartphoto.wordpress.com" target="_blank" rel="external">ismartphoto</a></td>
<td><a href="https://itunes.apple.com/us/app/ismartphoto/id940107333?mt=12" target="_blank" rel="external">‎iSmartPhoto on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-miniqpicview.png" width="200" height:auto="" alt="20180715-macOS-miniqpicview.png"></td>
<td>Kantu<br>（看图）</td>
<td>Kantu (看图)是腾讯在 macOS 平台出品的优质看图工具，轻轻松松从万张照片中找到你想要的。</td>
<td>免费</td>
<td><a href="https://kantu.qq.com" target="_blank" rel="external">看图 - 轻松找照片</a></td>
<td><a href="https://itunes.apple.com/cn/app/id1314842898" target="_blank" rel="external">‎看图-轻松找照片 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-GIF_Brewery_3.png" width="200" height:auto="" alt="20180715-macOS-GIF_Brewery_3.png"></td>
<td>GIF Brewery</td>
<td>GIF Brewery 制作GIF 动图。</td>
<td>免费</td>
<td><a href="https://gfycat.com/gifbrewery" target="_blank" rel="external">GIF Brewery by Gfycat</a></td>
<td><a href="https://itunes.apple.com/us/app/gif-brewery-3-by-gfycat/id1081413713?mt=12" target="_blank" rel="external">‎GIF Brewery 3 by Gfycat on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-163Dict.png" width="200" height:auto="" alt="20180715-macOS-163Dict.png"></td>
<td>YoudaoDict<br>（网易有道词典）</td>
<td>一款英语、日语、韩语、法语免费全能查词翻译软件。</td>
<td>免费</td>
<td><a href="http://cidian.youdao.com/index-mac.html" target="_blank" rel="external"></a></td>
<td><a href="https://itunes.apple.com/us/app/youdaodict/id491854842?mt=12" target="_blank" rel="external">‎YoudaoDict on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Downie3.png" width="200" height:auto="" alt="20180715-macOS-Downie3.png"></td>
<td>Downie</td>
<td>易用的在线视频下载工具。</td>
<td>收费</td>
<td><a href="https://software.charliemonroe.net/downie.php" target="_blank" rel="external">Downie - YouTube Video Downloader for macOS - Charlie Monroe Software</a></td>
<td><a href="https://software.charliemonroe.net/downie.php" target="_blank" rel="external">Downie - YouTube Video Downloader for macOS - Charlie Monroe Software</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Waltr_2.png" width="200" height:auto="" alt="20180715-macOS-Waltr_2.png"></td>
<td>Waltr 2</td>
<td>非常方便的同步iOS设备，拖拽就可以输送音乐、视频、电子书。</td>
<td>收费</td>
<td><a href="https://softorino.com/w2/" target="_blank" rel="external">WALTR 2. The all-new product.</a></td>
<td><a href="https://softorino.com/w2/" target="_blank" rel="external">WALTR 2. The all-new product.</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iExplorer.png" width="200" height:auto="" alt="20180715-macOS-iExplorer.png"></td>
<td>iExplorer</td>
<td>iExplorer 是一个非常优秀的一个免 iTunes 同步文件的资源管理器。</td>
<td>收费</td>
<td><a href="https://macroplant.com/iexplorer" target="_blank" rel="external">iPhone Music, Messages &amp; File Transfer for Mac &amp; PC · iExplorer</a></td>
<td><a href="https://macroplant.com/iexplorer" target="_blank" rel="external">iExplorer</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iMazing.png" width="200" height:auto="" alt="20180715-macOS-iMazing.png"></td>
<td>iMazing</td>
<td>让备受信赖的软件为您传输和保存音乐、消息、文件和数据。安全备份任何 iPhone、iPad 或 iPod touch。iMazing 功能强大、易于使用，称得上是 Mac 和 PC 上最好的 iOS 设备管理器。</td>
<td>收费</td>
<td><a href="https://imazing.com/zh" target="_blank" rel="external">iMazing - 兼容 Mac 及 PC 的 iPhone、iPad 和 iPod 管理软件。传输、拷贝、备份音乐、信息、文件等数据。</a></td>
<td><a href="https://imazing.com/zh/download" target="_blank" rel="external">下载 iMazing 2</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-HandShaker.png" width="200" height:auto="" alt="20180715-macOS-HandShaker.png"></td>
<td>HandShaker</td>
<td>HandShaker Mac 版（原名 SmartFinder)，使你在 Mac 电脑上也可以方便自如地管理你在 Android 手机中的内容。</td>
<td>免费</td>
<td><a href="https://www.smartisan.com/apps/#/handshaker" target="_blank" rel="external">Smartisian 应用下载-锤子科技官网</a></td>
<td><a href="https://itunes.apple.com/cn/app/handshaker/id1012930195" target="_blank" rel="external">‎HandShaker - 安卓手机管理工具 - on the Mac App Store </a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-QuickTimePlayerX.png" width="200" height:auto="" alt="20180715-macOS-QuickTimePlayerX.png"></td>
<td>QuickTime Player</td>
<td>QuickTime Player作为macOS默认的播放器，完美的iOS屏幕投影，完美的屏幕录像。</td>
<td>免费</td>
<td><a href="https://support.apple.com/downloads/quicktime" target="_blank" rel="external">Apple - QuickTime - Downloads</a></td>
<td><a href="https://support.apple.com/downloads/quicktime" target="_blank" rel="external">Apple - QuickTime - Downloads</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h4 id="Write">Write</h4><p>图文创作，包括文字、图像、脑图等。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Microsoft_Word.png" width="100" height:auto="" alt="20180715-macOS-Microsoft_Word.png"><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Microsoft_Excel.png" width="100" height:auto="" alt="20180715-macOS-Microsoft_Excel.png"><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Microsoft_PowerPoint.png" width="100" height:auto="" alt="20180715-macOS-Microsoft_PowerPoint.png"></td>
<td>Microsoft <br>Word<br>Excel<br>PowerPoint</td>
<td>微软Office三件套，良心！</td>
<td>收费</td>
<td><a href="https://products.office.com/en-us/mac/microsoft-office-for-mac" target="_blank" rel="external">Office 365 for Mac, Office 2016 for Mac</a></td>
<td><a href="https://support.office.com/en-us/article/download-and-install-or-reinstall-office-365-or-office-2016-on-a-pc-or-mac-4414eaaf-0478-48be-9c42-23adc4716658" target="_blank" rel="external">Download and install</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Keynote.png" width="100" height:auto="" alt="20180715-macOS-Keynote.png"> <img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Numbers.png" width="100" height:auto="" alt="20180715-macOS-Numbers.png"><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Pages.png" width="100" height:auto="" alt="20180715-macOS-Pages.png"></td>
<td>Keynote<br>Numbers<br>Pages</td>
<td>Keynote是一个演示幻灯片应用软件，由苹果电脑公司出品，运行于OS X 操作系统。最早发布于2003年1月。Keynote现在与Pages、Numbers组成工具软件套装iWork。</td>
<td>免费</td>
<td><a href="https://www.apple.com/cn/keynote/" target="_blank" rel="external">Keynote 讲演 - Apple (中国)</a></td>
<td><a href="https://itunes.apple.com/cn/app/keynote/id409183694?mt=12&amp;ls=1&amp;v0=www-cn-mac-keynote-app-keynote" target="_blank" rel="external">Keynote on the ‎Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-MindNode.png" width="200" height:auto="" alt="20180715-macOS-MindNode.png"></td>
<td>MindNode 4</td>
<td>很漂亮和简洁的思维导图制作软件。</td>
<td>收费</td>
<td><a href="https://mindnode.com" target="_blank" rel="external">MindNode</a></td>
<td><a href="https://itunes.apple.com/us/app/mindnode-4/id312220102?mt=8" target="_blank" rel="external">‎MindNode 4 on the App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-StarUML.png" width="200" height:auto="" alt="20180715-macOS-StarUML.png"></td>
<td>StarUML</td>
<td>StarUML是一种生成类图和其他类型的统一建模语言(UML)图表的工具。</td>
<td>收费</td>
<td><a href="http://staruml.io" target="_blank" rel="external">StarUML</a></td>
<td><a href="http://staruml.io/download" target="_blank" rel="external">Download - StarUML</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-MWeb.png" width="200" height:auto="" alt="20180715-macOS-MWeb.png"></td>
<td>MWeb 3</td>
<td>MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。</td>
<td>收费</td>
<td><a href="https://zh.mweb.im" target="_blank" rel="external">MWeb - 专业的Markdown写作、记笔记、静态博客生成软件 - MWeb</a></td>
<td><a href="https://itunes.apple.com/cn/app/mweb/id1403919533?l=zh&amp;ls=1&amp;mt=12" target="_blank" rel="external">MWeb on the ‎Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-MacDown.png" width="200" height:auto="" alt="20180715-macOS-MacDown.png"></td>
<td>MacDown</td>
<td>开源免费的Mardown编辑器。</td>
<td>免费</td>
<td><a href="https://macdown.uranusjr.com" target="_blank" rel="external">MacDown: The open source Markdown editor for macOS</a></td>
<td><a href="https://github.com/MacDownApp/macdown/releases" target="_blank" rel="external">Releases · MacDownApp/macdown</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Evernote.png" width="200" height:auto="" alt="20180715-macOS-Evernote.png"></td>
<td>Evernote<br>（印象笔记）</td>
<td>随时随地获取、整理、分享笔记。</td>
<td>免费/订阅</td>
<td><a href="https://evernote.com" target="_blank" rel="external">智能工作，有序生活，记录一切。- Evernote</a></td>
<td><a href="https://itunes.apple.com/us/app/evernote-stay-organized/id406056744?mt=12" target="_blank" rel="external">‎Evernote – stay organized on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-YoudaoNote.png" width="200" height:auto="" alt="20180715-macOS-YoudaoNote.png"></td>
<td>YoudaoNote<br>（有道云笔记）</td>
<td>有道云笔记是网易有道按照国人使用习惯进行开发的多平台记录工具，受到超过5000万用户的喜爱。</td>
<td>免费</td>
<td><a href="https://note.youdao.com" target="_blank" rel="external">有道云笔记</a></td>
<td><a href="https://itunes.apple.com/us/app/有道云笔记/id1121484812?mt=12" target="_blank" rel="external">‎有道云笔记 on the Mac App Store</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h4 id="Design">Design</h4><p>设计，影、音、视、图。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Adobe_Photoshop_CC_2018_AppIcon.png" width="200" height:auto="" alt="20180715-macOS-Adobe_Photoshop_CC_2018_AppIcon.png"></td>
<td>Adobe Photoshop CC</td>
<td>Adobe Photoshop，简称“Ps”，是一个由Adobe开发和发行的图像处理软件。</td>
<td>收费</td>
<td><a href="https://www.adobe.com" target="_blank" rel="external">Adobe: Creative, marketing and document management solutions</a></td>
<td><a href="https://www.adobe.com/products/photoshop.html?promoid=PC1PQQ5T&amp;mv=other" target="_blank" rel="external">Adobe Photoshop CC - Best photo, image, and design editing software</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Adobe_Illustrator_CC_appicon.png" width="200" height:auto="" alt="20180715-macOS-Adobe_Illustrator_CC_appicon.png"></td>
<td>Adobe Illustrator CC</td>
<td>Adobe Illustrator，简称“AI”，是Adobe系统公司推出的基于向量的图形制作软体。最初是1986年为苹果公司麦金塔电脑设计开发的，1987年1月发布，在此之前它只是Adobe内部的字体开发和PostScript编辑软件。</td>
<td>收费</td>
<td><a href="https://www.adobe.com" target="_blank" rel="external">Adobe: Creative, marketing and document management solutions</a></td>
<td><a href="https://www.adobe.com/products/illustrator.html?promoid=PGRQQLFS&amp;mv=other" target="_blank" rel="external">Adobe Illustrator CC - Vector graphic design software</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Sketch.png" width="200" height:auto="" alt="20180715-macOS-Sketch.png"></td>
<td>Sketch</td>
<td>Sketch 是一款矢量绘图工具。</td>
<td>收费</td>
<td><a href="https://www.sketchapp.com" target="_blank" rel="external">Sketch - The digital design toolkit</a></td>
<td><a href="https://www.sketchapp.com/get/" target="_blank" rel="external">Sketch - Download Sketch</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-AXURE.png" width="200" height:auto="" alt="20180715-macOS-AXURE.png"></td>
<td>Axure RP</td>
<td>Axure RP是一款专业的快速原型设计工具。Axure（发音：Ack-sure），代表美国Axure公司；RP则是Rapid Prototyping（快速原型）的缩写。</td>
<td>收费</td>
<td><a href="https://www.axure.com" target="_blank" rel="external">Prototypes, Specifications, and Diagrams in One Tool - Axure Software</a></td>
<td><a href="https://www.axure.com/download" target="_blank" rel="external">Download Axure RP 8 - Axure Software</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-ColorSnapper2.png" width="200" height:auto="" alt="20180715-macOS-ColorSnapper2.png"></td>
<td>ColorSnapper2</td>
<td>这个取色软件很棒，取色能转成代码最突出，CSS/Swift/OC/Java/Android/.Net/OpenG/..等代码。</td>
<td>收费</td>
<td><a href="https://colorsnapper.com/?utm_source=MAS&amp;utm_medium=product&amp;utm_campaign=ColorSnapper2" target="_blank" rel="external">ColorSnapper — The Color Picker App for macOS</a></td>
<td><a href="https://itunes.apple.com/us/app/colorsnapper-2/id969418666?mt=12" target="_blank" rel="external">‎ColorSnapper 2 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Color_Picker_icon.png" width="200" height:auto="" alt="20180715-macOS-Color_Picker_icon.png"></td>
<td>Color Picker</td>
<td>比较简洁的取色工具，以前是免费的，现在不太建议买。</td>
<td>收费</td>
<td><a href="http://nscoding.co.uk" target="_blank" rel="external">nscoding - Patrick Chamelo - Vasileia Chatziioannou</a></td>
<td><a href="https://itunes.apple.com/us/app/color-picker/id641027709?mt=12" target="_blank" rel="external">‎Color Picker on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-xScope.png" width="200" height:auto="" alt="20180715-macOS-xScope.png"></td>
<td>xScope 4</td>
<td>xScope 是一款Mac上的设计开发辅助工具，尤其是移动应用的设计，帮助每个设计者快速，精确的完成工作，度量距离，角度的标尺，放大镜，精确垂直，水平标记辅助线，精确阔度，找画面上符合位置测交叉点。</td>
<td>收费</td>
<td><a href="https://xscopeapp.com" target="_blank" rel="external">xScope • Measure. Inspect. Test.</a></td>
<td><a href="https://itunes.apple.com/us/app/xscope-4/id889428659?mt=12" target="_blank" rel="external">‎xScope 4 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Logoist_2.png" width="200" height:auto="" alt="20180715-macOS-Logoist_2.png"></td>
<td>Logoist 3</td>
<td>Logoist 是 Mac OS X 平台上一款非常不错的 Mac 平面设计软件，能设计 logo、标题艺术、图像、横幅、网站元素、贺卡、按钮、iBooks 作者标题、图片拼贴、桌面背景等等，只要任何叫的出名字的图形，Logoist 都可以帮你办到。</td>
<td>收费</td>
<td><a href="https://www.syniumsoftware.com/logoist" target="_blank" rel="external">Logoist 3 - Powerful Vector Design App for Mac</a></td>
<td><a href="https://itunes.apple.com/us/app/logoist-3/id1247301872?mt=12" target="_blank" rel="external">‎Logoist 3 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Pixelmator.png" width="200" height:auto="" alt="20180715-macOS-Pixelmator.png"></td>
<td>Pixelmator</td>
<td>Mac OS X 专有的图像处理软件。Pixelmator 界面清爽，布局灵活，熟悉 Photoshop 的人可迅速上手。软件建立在一些开源和 Mac OS X 图形技术之上，可调用 Mac 图形加速。使用起来在界面交互和流畅感上均优于 Photoshop，且与 Mac 自带程序整合不错。</td>
<td>收费</td>
<td><a href="https://www.pixelmator.com/mac/" target="_blank" rel="external">Pixelmator</a></td>
<td><a href="https://itunes.apple.com/us/app/pixelmator/id407963104?mt=12" target="_blank" rel="external">‎Pixelmator on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Final_Cut_Pro.png" width="200" height:auto="" alt="20180715-macOS-Final_Cut_Pro.png"></td>
<td>Final Cut Pro</td>
<td>后期制作，前景更广阔。</td>
<td>收费</td>
<td><a href="https://www.apple.com/cn/final-cut-pro/" target="_blank" rel="external">Final Cut Pro X - Apple (中国)</a></td>
<td><a href="https://itunes.apple.com/us/app/final-cut-pro/id424389933?mt=12" target="_blank" rel="external">‎Final Cut Pro on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Motion.png" width="200" height:auto="" alt="20180715-macOS-Motion.png"></td>
<td>Motion</td>
<td>特效，特别容易。Motion 是一款强大的运动图形工具，可帮你便捷地制作影院级 2D、3D 和 360° 字幕，流畅的转场，以及逼真的实时特效。</td>
<td>收费</td>
<td><a href="https://www.apple.com/cn/final-cut-pro/motion/" target="_blank" rel="external">Motion 5 - Apple (中国)</a></td>
<td><a href="https://itunes.apple.com/cn/app/motion/id434290957?mt=12" target="_blank" rel="external">‎Motion on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-compressor.png" width="200" height:auto="" alt="20180715-macOS-compressor.png"></td>
<td>Compressor</td>
<td>强大的编码，传输，完成。Compressor 与 Final Cut Pro 紧密整合，带来了自定义输出设置、分布式编码和丰富的传输功能。它支持 360° 全景视频、HDR、HEVC 和 MXF 输出，让你能以强大、灵活的方式导出 Final Cut Pro 项目。</td>
<td>收费</td>
<td><a href="https://www.apple.com/cn/final-cut-pro/compressor/" target="_blank" rel="external">Final Cut Pro X - Compressor 4 - Apple (中国)</a></td>
<td><a href="https://itunes.apple.com/cn/app/compressor/id424390742?l=en&amp;mt=12" target="_blank" rel="external">‎Compressor on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-LogicProX.png" width="200" height:auto="" alt="20180715-macOS-LogicProX.png"></td>
<td>Logic Pro X</td>
<td>Logic Pro X 制作的动力十足， 创作的十足强音。</td>
<td>收费</td>
<td><a href="https://www.apple.com/cn/logic-pro/" target="_blank" rel="external">Logic Pro X - Apple (中国)</a></td>
<td><a href="https://itunes.apple.com/cn/app/logic-pro-x/id634148309?l=en&amp;mt=12" target="_blank" rel="external">‎Logic Pro X on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-MainStage_3.png" width="200" height:auto="" alt="20180715-macOS-MainStage_3.png"></td>
<td>MainStage</td>
<td>MainStage 3 舞台音效，媲美录音室效果。现在，将你的 Mac 变身现场演出装备。凭借不计其数的各种插件和音效选择，你可以让键盘、吉他或演唱表现令观众耳目一新，难以忘怀。</td>
<td>收费</td>
<td><a href="https://www.apple.com/cn/mainstage/" target="_blank" rel="external">Logic Pro X - MainStage 3 - 将你的 Mac 变身现场演出装备 - Apple (中国)</a></td>
<td><a href="https://itunes.apple.com/cn/app/mainstage-3/id634159523?l=en&amp;mt=12" target="_blank" rel="external">‎MainStage 3 on the Mac App Store</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h3 id="通讯">通讯</h3><p>交互，万物相联。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Telegram.png" width="200" height:auto="" alt="20180715-macOS-Telegram.png"></td>
<td>Telegram</td>
<td>Telegram是一个跨平台的即时通信软件，它的客户端是自由及开放源代码软件，但是它的服务器是专有软件。用户可以相互交换加密与自析构的消息，以及照片、视频、文件，支持所有的文件类型。</td>
<td>免费</td>
<td><a href="https://telegram.org" target="_blank" rel="external">Telegram Messenger</a></td>
<td><a href="https://itunes.apple.com/us/app/telegram/id747648890" target="_blank" rel="external">‎Telegram on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Weixin.png" width="200" height:auto="" alt="20180715-macOS-Weixin.png"></td>
<td>WeChat<br>（微信）</td>
<td>一款免费发短讯和打电话的一体化应用程式。</td>
<td>免费</td>
<td><a href="http://www.wechat.com" target="_blank" rel="external">WeChat - Free messaging and calling app</a></td>
<td><a href="https://itunes.apple.com/us/app/wechat/id836500024?mt=12" target="_blank" rel="external">‎WeChat on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-QQ.png" width="200" height:auto="" alt="20180715-macOS-QQ.png"></td>
<td>QQ</td>
<td>QQ</td>
<td>免费</td>
<td><a href="http://im.qq.com/qq/apple/mac/" target="_blank" rel="external">QQ Mac版-匠心之韵·清新聊人</a></td>
<td><a href="https://itunes.apple.com/us/app/qq/id451108668?mt=12" target="_blank" rel="external">‎QQ on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-TeamViewer.png" width="200" height:auto="" alt="20180715-macOS-TeamViewer.png"></td>
<td>TeamViewer</td>
<td>TeamViewer 基于最广泛的平台和技术，连接全世界的人、地区和事物。</td>
<td>免费/订阅</td>
<td><a href="https://www.teamviewer.com/zhcn/" target="_blank" rel="external">TeamViewer – 远程支持、远程访问、在线协作和会议</a></td>
<td><a href="https://www.teamviewer.com/zhcn/download/mac/" target="_blank" rel="external">macOS版TeamViewer下载</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-RemoteDesktopApp.png" width="200" height:auto="" alt="20180715-macOS-RemoteDesktopApp.png"></td>
<td>Apple Remote Desktop</td>
<td>Apple Remote Desktop 是管理你网络上的 Mac 电脑的最佳方式。分发软件，为终端用户提供实时在线帮助，创建详细的软硬件报告，自动执行常规的管理任务。</td>
<td>收费</td>
<td><a href="https://www.apple.com/remotedesktop/" target="_blank" rel="external">Remote Desktop - Apple</a></td>
<td><a href="https://itunes.apple.com/us/app/apple-remote-desktop/id409907375?mt=12" target="_blank" rel="external">‎Apple Remote Desktop on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Maipo.png" width="200" height:auto="" alt="20180715-macOS-Maipo.png"></td>
<td>Maipo</td>
<td>全功能新浪微博 macOS 客户端</td>
<td>免费</td>
<td><a href="http://weiboformac.sinaapp.com" target="_blank" rel="external">Maipo - 全功能新浪微博 macOS 客户端</a></td>
<td><a href="https://itunes.apple.com/us/app/maipo-for-weibo/id789066512?mt=12" target="_blank" rel="external">‎Maipo for Weibo on the Mac App Store</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h3 id="GTD">GTD</h3><p>时间，就是生命。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Things3.png" width="200" height:auto="" alt="20180715-macOS-Things3.png"></td>
<td>Things3</td>
<td>一款优秀的GTD任务管理工具。</td>
<td>收费</td>
<td><a href="https://culturedcode.com/things/" target="_blank" rel="external">The all-new Things. Your to-do list for Mac &amp; iOS</a></td>
<td><a href="https://itunes.apple.com/us/app/things-3/id904280696?mt=12" target="_blank" rel="external">‎Things 3 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Gestimer.png" width="200" height:auto="" alt="20180715-macOS-Gestimer.png"></td>
<td>Gestimer</td>
<td>简单方便的提醒创建小工具。</td>
<td>收费</td>
<td><a href="http://maddin.io/gestimer/" target="_blank" rel="external">Gestimer - For those little reminders during the day</a></td>
<td><a href="https://itunes.apple.com/us/app/gestimer/id990588172?mt=12" target="_blank" rel="external">‎Gestimer on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Pomodoro_Timer.png" width="200" height:auto="" alt="20180715-macOS-Pomodoro_Timer.png"></td>
<td>Pomodoro Timer</td>
<td>漂亮的番茄时钟。</td>
<td>免费</td>
<td><a href="http://www.cannonballhq.com" target="_blank" rel="external">Cannonball HQ</a></td>
<td><a href="http://macdownload.informer.com/pomodoro-timer/" target="_blank" rel="external">Pomodoro Timer for Mac, It helps you implement the Pomodoro technique in your daily activities.</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Tomato_One.png" width="200" height:auto="" alt="20180715-macOS-Tomato_One.png"></td>
<td>Tomato One</td>
<td>简洁的番茄时钟。</td>
<td>免费</td>
<td><a href="http://rinik.net/support" target="_blank" rel="external">Rinik Support</a></td>
<td><a href="https://itunes.apple.com/us/app/tomato-one-free-focus-timer/id907364780?mt=12" target="_blank" rel="external">‎Tomato One - Free Focus Timer on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-JustFocus.png" width="200" height:auto="" alt="20180715-macOS-JustFocus.png"></td>
<td>JustFocus</td>
<td>番茄时间，休息时间时显示漂亮的锁屏图片。</td>
<td>免费</td>
<td><a href="http://justinyan.me" target="_blank" rel="external">枫言枫语</a></td>
<td><a href="https://itunes.apple.com/us/app/just-focus/id1142151959?mt=12" target="_blank" rel="external">‎Just Focus on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Noizio.png" width="200" height:auto="" alt="20180715-macOS-Noizio.png"></td>
<td>Noizio</td>
<td>Noizio 是一款Mac OS X 下的白噪音应用，可以让自己觉着是坐在一个壁炉前、咖啡馆里、森林里，海边。可以让你忽略其他噪音，专注工作。</td>
<td>收费</td>
<td><a href="http://noiz.io" target="_blank" rel="external">Noizio – ambient sound equalizer for relax or productivity.</a></td>
<td><a href="https://itunes.apple.com/us/app/noizio/id928871589?mt=12" target="_blank" rel="external">‎Noizio on the Mac App Store</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h4 id="Learning">Learning</h4><p>学习，知识无涯。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-WWDC.png" width="200" height:auto="" alt="20180715-macOS-WWDC.png"></td>
<td>WWDC</td>
<td>开源免费的看WWDC视频的应用！</td>
<td>免费</td>
<td><a href="https://wwdc.io" target="_blank" rel="external">The unofficial WWDC app for macOS</a></td>
<td><a href="https://github.com/insidegui/WWDC/releases" target="_blank" rel="external">Releases · insidegui/WWDC</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Reeder.png" width="200" height:auto="" alt="20180715-macOS-Reeder.png"></td>
<td>Reeder</td>
<td>一款很好的RSS订阅应用。</td>
<td>收费</td>
<td><a href="http://reederapp.com" target="_blank" rel="external">★reeder</a></td>
<td><a href="https://itunes.apple.com/us/app/reeder-3/id880001334?mt=12" target="_blank" rel="external">‎Reeder 3 on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-English_Class.png" width="200" height:auto="" alt="20180715-macOS-English_Class.png"></td>
<td>English Class</td>
<td>This is a multifunctional instrument for improving and controlling English knowledge and skills.</td>
<td>收费</td>
<td><a href="http://academmedialabs.com" target="_blank" rel="external">Academ Media</a></td>
<td><a href="https://itunes.apple.com/sg/app/english-class-pro/id1038312994?mt=12" target="_blank" rel="external">‎English Class Pro on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-iBooksAppIcon.png" width="200" height:auto="" alt="20180715-macOS-iBooksAppIcon.png"></td>
<td>iBooks</td>
<td>macOS和iOS同步看书的原生体验很棒！</td>
<td>免费</td>
<td><a href="https://support.apple.com/zh-cn/ibooks" target="_blank" rel="external">iBooks - 官方 Apple 支持</a></td>
<td><a href="https://support.apple.com/zh-cn/ibooks" target="_blank" rel="external">iBooks - 官方 Apple 支持</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h4 id="Recreation（娱乐）">Recreation（娱乐）</h4><p>娱乐，消遣和放松。</p>
<table>
<thead>
<tr>
<th>App</th>
<th>名称</th>
<th>简介</th>
<th>价格</th>
<th>官网</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-163Music.png" width="200" height:auto="" alt="20180715-macOS-163Music.png"></td>
<td>NeteaseMusic<br>（网易云音乐）</td>
<td>免费的音乐云盘赞！</td>
<td>免费</td>
<td><a href="https://music.163.com" target="_blank" rel="external">网易云音乐</a></td>
<td><a href="https://itunes.apple.com/cn/app/网易云音乐/id944848654?mt=12" target="_blank" rel="external">网易云音乐 on the ‎Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Movist.png" width="200" height:auto="" alt="20180715-macOS-Movist.png"></td>
<td>Movist</td>
<td>Movist是Mac平台下一个全格式播放器,基于QuickTime &amp; FFmpeg,您可以选择由QuickTime 还是 FFmpeg来解码播放,支持.avi、.mkv、.wmv、flv、rmvb等格式。</td>
<td>收费</td>
<td><a href="http://cocoable.com" target="_blank" rel="external">cocoable.com</a></td>
<td><a href="https://itunes.apple.com/us/app/movist/id461788075?mt=12" target="_blank" rel="external">‎Movist on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-MPlayerX.png" width="200" height:auto="" alt="20180715-macOS-MPlayerX.png"></td>
<td>MPlayerX</td>
<td>MPlayerX是MAC上的一款使用简单方便的视频播放器，基于FFmpeg 和 Mplayer 开发。界面简洁明了，支持多种格式，包括RMVB、AVI、WMV、MKV等常用视频格式，也支持SRT、ASS等字幕格式。</td>
<td>收费</td>
<td><a href="http://mplayerx.org" target="_blank" rel="external">MPlayerX</a></td>
<td><a href="https://itunes.apple.com/us/app/mplayerx/id421131143?mt=12" target="_blank" rel="external">‎MPlayerX on the Mac App Store</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-VLC.png" width="200" height:auto="" alt="20180715-macOS-VLC.png"></td>
<td>VLC</td>
<td>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。</td>
<td>免费</td>
<td><a href="http://www.videolan.org/vlc/" target="_blank" rel="external">VLC media player, the best Open Source player - VideoLAN</a></td>
<td><a href="http://www.videolan.org/vlc/" target="_blank" rel="external">Official download of VLC</a></td>
</tr>
<tr>
<td><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-IINA.png" width="200" height:auto="" alt="20180715-macOS-IINA.png"></td>
<td>IINA</td>
<td>macOS 上好的现代视频播放器。</td>
<td>免费</td>
<td><a href="https://github.com/lhc70000/iina" target="_blank" rel="external">lhc70000/iina: The modern video player for macOS.</a></td>
<td><a href="https://github.com/lhc70000/iina/releases" target="_blank" rel="external">Releases · lhc70000/iina</a></td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h3 id="总结">总结</h3><p>没想到想总结好全部App，最后发现太多软件了，已经上百个应用啦，想写的详细点发现没有时间，所以将就先这样吧，有时候在回来。</p>
<ul>
<li><p>精选<br>为什么说这些软件是精选，因为在macOS上，好的应用很多，所以精选也很多。列举的每个应用，其实都可以单独写一篇长文，还是计划以后有时间在写写。大家也可以自行搜索教程学习，建议喜欢的应用就要早点熟悉！你一定会发现“惊-喜”！如果你有好的应用，不要独享，也欢迎留言推荐，谢谢！</p>
</li>
<li><p>收费<br>为什么这软件收费？其实，我想说，换一个角度，【这软件收费有什么突出的优点？】收费并专业的软件，都有它强大或突出的优势！正因为喜欢软件的这优点，自己也入手了 Final Cut Pro，希望自己有时间可以做一些优美的视频~ 我想表达的不是土豪，或炫富，只是希望大家有能力，或者表达到软件的喜欢。算了，不说这些。好的软件，真的做的很好，非常敬佩！</p>
</li>
<li><p>下载<br>本文优先显示Mac App Store下载的链接，因为在AppStore不限制下载次数，也就是不限制安装的设备数量，并且，在新电脑直接安装就可以，非常的方便！！！</p>
</li>
</ul>
<h3 id="参考">参考</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/Wikipedia:首页" target="_blank" rel="external">维基百科</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近打算写《程序员的macOS系列》文章，总结一下自己程序员几年的macOS系统使用，本文是《程序员的macOS系列》的第一篇精选Mac App，介绍一下程序员macOS的应用，所以这系列文章是指向于程序员，可能会偏向iOS开发，尽量写大全吧。网上也有很多总结了Mac App的文章，但本文是一个程序员系列的，注意定位就好。</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》这三篇，后续有想法在增加吧~</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="https://iHTCboy.com/tags/Mac/"/>
    
      <category term="MacApp" scheme="https://iHTCboy.com/tags/MacApp/"/>
    
      <category term="macOS" scheme="https://iHTCboy.com/tags/macOS/"/>
    
      <category term="程序员的macOS" scheme="https://iHTCboy.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[(译)一个完整的Django入门指南---第7部分]]></title>
    <link href="https://iHTCboy.com/2018/07/14/2018-07-14_%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84Django%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97---%E7%AC%AC7%E9%83%A8%E5%88%86/"/>
    <id>https://iHTCboy.com/2018/07/14/2018-07-14_一个完整的Django入门指南---第7部分/</id>
    <published>2018-07-14T10:49:16.000Z</published>
    <updated>2018-07-18T14:56:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>本篇文章是翻译 <a href="https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/" target="_blank" rel="external">A Complete Beginner’s Guide to Django</a> 系列的最后一篇文章 <a href="https://simpleisbetterthancomplex.com/series/2017/10/16/a-complete-beginners-guide-to-django-part-7.html" target="_blank" rel="external">A Complete Beginner’s Guide to Django - Part 7</a>，因为搜索找了很久都没有找到对应的中文翻译篇（如果有，就是我没有找到…），又因为这个系列真的非常的好，简单，容易，非常适配入门，所以就打算自已试试翻译，也当是自己学习入门的一步吧！</p>
<a id="more"></a>
<h3 id="简介（Introduction）">简介（Introduction）</h3><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-A-Complete-Beginner&#39;s-Guide-to-Django-Part7.jpg" alt="20180714-A-Complete-Beginner&#39;s-Guide-to-Django-Part7.jpg"></p>
<p>欢迎来到我们教程系列的最后一部分！这篇文章，我们将把Django应用程序部署到生产服务器。我们还将为我们的服务器配置Email服务和HTTPS证书。</p>
<p>首先，我想到了给一个使用虚拟专用服务器（VPS）的例子，它更通用，然后使用一个平台比如 Heroku 服务。但它我写得太详细了，所以本教程我最终偏向关于VPS的内容。</p>
<p>我们的项目已经上线啦！您可以在阅读本文之前点击在线查看，这是我们本文要部署的应用程序：<a href="https://www.djangoboards.com" target="_blank" rel="external">www.djangoboards.com</a>。</p>
<h3 id="版本控制（Version_Control）">版本控制（Version Control）</h3><p>版本控制是软件开发中非常重要的话题。特别是在团队开发中同时开发多个功能，并一起维护项目代码时。无论是一个开发人员项目还是多个开发人员项目，每个项目都应该使用版本控制。</p>
<p>版本控制系统有几种选择。也许是因为GitHub的流行，Git 成为版本控制的实际标准。所以如果你不熟悉版本控制，Git是一个很好的入门起点。一般有很多相关的教程，课程和资源，因此遇到问题很容易找到帮助。</p>
<p>GitHub和Code School有一个<a href="https://try.github.io/" target="_blank" rel="external">关于Git的很棒的互动教程</a>，这是一个非常好的介绍Git的网站。几年前我就开始从SVN转到Git。</p>
<p>这是一个非常重要的话题，我其实应该从第一个教程开始讲Git。但事实是我希望本教程系列的重点放在Django上。如果Git这东西对您来说都是新的，请不要担心。一步一步入门是很重要的。也许你的第一个项目并不完美。重要的是要坚持学习和慢慢提高你的技能，但要有恒心！</p>
<p>关于Git的一个非常好的事情是它不仅仅是一个版本控制系统。围绕它建立了丰富的工具和服务生态系统。一些很好的例子比如持续集成、部署、代码审查、代码质量和项目管理。</p>
<p>使用Git来支持Django项目的部署过程非常有用。这是从源代码存储库中拉取最新版本或在出现问题时回滚到特定版本的便捷方式。有许多服务使用Git来集成，以便执行自动化测试和部署。</p>
<p>如果您没有在本地计算机上安装Git，请从 <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a> 下载和安装。</p>
<h4 id="Git_基本配置（Basic_Setup）">Git 基本配置（Basic Setup）</h4><p>首先，设置你电脑的Git身份：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#34;Vitor Freitas&#34;&#10;git config --global user.email vitor@simpleisbetterthancomplex.com</span><br></pre></td></tr></table></figure>
<p>译者注：</p>
<ul>
<li>git config –global user.name “xxx”: 设置git操作者名称</li>
<li>git config –global user.email “email” 设置git操作者邮箱<br>这2个配置的名字和邮箱，会记录在git操作记录中。</li>
</ul>
<p>在项目根目录（与<strong>manage.py</strong>相同的目录）中，初始化一个git存储库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Initialized empty Git repository in <span class="regexp">/Users/</span>vitorfs<span class="regexp">/Development/my</span><span class="keyword">project</span><span class="regexp">/.git/</span></span><br></pre></td></tr></table></figure>
<p>检查存储库的状态：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On branch master&#10;&#10;Initial commit&#10;&#10;Untracked files:&#10;  (use &#34;git add &#60;file&#62;...&#34; to include in what will be committed)&#10;&#10;  accounts/&#10;  boards/&#10;  manage.py&#10;  myproject/&#10;  requirements.txt&#10;  static/&#10;  templates/&#10;&#10;nothing added to commit but untracked files present (use &#34;git add&#34; to track)</span><br></pre></td></tr></table></figure>
<p>在继续添加源文件之前，请在项目根目录中创建名为<strong>.gitignore</strong>的新文件。这个特殊的文件将帮助我们保持Git仓库的干净，保证缓存文件或日志这样的不必要的文件不会添加到Git仓库中。</p>
<p>您可以从 GitHub 获取 <a href="https://github.com/github/gitignore/blob/master/Python.gitignore" target="_blank" rel="external">Python项目的通用.gitignore文件</a>。</p>
<p>确保将它从 <strong>Python.gitignore</strong> 重命名为 <strong>.gitignore</strong>（点很重要！）。</p>
<p>您可以补充 <strong>.gitignore</strong> 文件内容，告诉它(Git)忽略SQLite数据库文件，例如：</p>
<p><strong>.gitignore</strong>  文件内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__pycache__/&#10;*.py[cod]&#10;.env&#10;venv/&#10;&#10;SQLite database files&#10;*.sqlite3</span><br></pre></td></tr></table></figure>
<p>现在将文件添加到存储库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>请注意上面<code>add</code>后面有一个点。上面的命令告诉Git 在当前目录中添加所有未跟踪的文件。（译者注，点表示所有，整句就表示添加所以文件到Git，除了.gitignore文件列出的要忽略。）</p>
<p>现在进行第一次提交：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#34;Initial commit&#34;</span><br></pre></td></tr></table></figure>
<p>一定要写一个注释说明这个提交是什么，简要描述你改变了什么。</p>
<h4 id="Git_远程仓库（Remote_Repository）">Git 远程仓库（Remote Repository）</h4><p>现在让我们将 <a href="https://github.com/" target="_blank" rel="external">GitHub</a> 设置为远程仓库。首先，在GitHub上创建一个免费帐户，然后在电子邮件中点击GitHub发来的验证链接确认您的电子邮件地址。然后您就能在GitHub上创建公开仓库（译者注：GitHub公开仓库是免费的，私有仓库收费。）。</p>
<p>现在，只需为仓库创建一个名称，不要勾选使用自述文件初始化它（initialize this repository with a README），也不要添加 <code>Add .gitignore</code> 或添加 <code>Add a license</code> 许可证。确保仓库开始为空：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-GitHub-Create-Repository.png" alt="20180714-GitHub-Create-Repository.png"></p>
<p>创建仓库后，您应该看到如下内容：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-GitHub-Repository.png" alt="20180714-GitHub-Repository.png"></p>
<p>现在让我们将其配置为我们的远程仓库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:sibtc/django-boards.git</span><br></pre></td></tr></table></figure>
<p>现在将代码推送到远程服务器，即GitHub仓库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master&#10;&#10;Counting objects: 84, done.&#10;Delta compression using up to 4 threads.&#10;Compressing objects: 100% (81/81), done.&#10;Writing objects: 100% (84/84), 319.70 KiB | 0 bytes/s, done.&#10;Total 84 (delta 10), reused 0 (delta 0)&#10;remote: Resolving deltas: 100% (10/10), done.&#10;To git@github.com:sibtc/django-boards.git&#10; * [new branch]      master -&#62; master</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-GitHub-Initial-Commit.png" alt="20180714-GitHub-Initial-Commit.png"></p>
<p>我创建此仓库只是为了演示使用现有代码库创建远程仓库的过程。该项目的源代码正式托管在此仓库中：<a href="https://github.com/sibtc/django-beginners-guide" target="_blank" rel="external">https://github.com/sibtc/django-beginners-guide</a>。</p>
<h3 id="项目配置（Project_Settings）">项目配置（Project Settings）</h3><p>无论代码是存储在公共或私有远程仓库中，都不应提交敏感信息并将其推送到远程仓库。这包括密钥，密码，API密钥等。</p>
<p>此时，我们必须在 <strong>settings.py</strong> 模块中处理两种特定类型的配置：</p>
<ul>
<li>密钥和密码等敏感信息;</li>
<li>针对特定的环境配置。</li>
</ul>
<p>密码和密钥可以存储在环境变量中或使用本地文件（未提交到远程仓库）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># environment variables</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">SECRET_KEY = os.environ[<span class="string">'SECRET_KEY'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># or local files</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/etc/secret_key.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    SECRET_KEY = f.read().strip()</span><br></pre></td></tr></table></figure>
<p>为此， 我在我开发的每个Django项目中都使用了一个名为 <a href="https://simpleisbetterthancomplex.com/2015/11/26/package-of-the-week-python-decouple.html" target="_blank" rel="external">Python Decouple</a> 的优秀实用功能库。它将搜索名为 <strong>.env</strong> 的本地文件以设置这配置变量，并将内容配置到环境变量。它还提供了一个定义默认值的接口，在适当时将数据转换为<strong>int</strong>，<strong>bool</strong>和<strong>list</strong>。</p>
<p>这不是强制性的，但我真的觉得它是一个非常有用的工具。它像Heroku这样的服务一样有魅力。</p>
<p>首先，让我们安装它：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-decouple</span><br></pre></td></tr></table></figure>
<p><strong>myproject/settings.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decouple <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">SECRET_KEY = config(<span class="string">'SECRET_KEY'</span>)</span><br></pre></td></tr></table></figure>
<p>现在，我们可以将敏感信息放在一个名为<strong>.env</strong>的特殊文件中（注意前面的点），该文件位于<strong>manage.py</strong>文件所在的目录中：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myproject/</span><br><span class="line"> |<span class="string">-- myproject/</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- accounts/</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- boards/</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- myproject/</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- static/</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- templates/</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- .env        &lt;-- here!</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- .gitignore</span><br><span class="line"> </span>|<span class="string">    </span>|<span class="string">-- db.sqlite3</span><br><span class="line"> </span>|<span class="string">    +-- manage.py</span><br><span class="line"> +-- venv/</span></span><br></pre></td></tr></table></figure>
<p><strong>.env</strong> 文件内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(<span class="number">0</span>ce(=sy=f2)p=f_wn&amp;@<span class="number">0</span>xsp7m$@!kp=d</span><br></pre></td></tr></table></figure>
<p>该<strong>.ENV</strong>文件中忽略的<strong>.gitignore</strong>文件，所以每次我们要部署应用程序或在不同的机器上运行时，我们将创建一个<strong>.ENV</strong>文件，并添加必要的配置。</p>
<p>现在让我们安装另一个库来帮助我们用简单一行代码来编写数据库连接。这样，在不同的环境中编写不同的数据库连接字符串会更容易：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install dj-database-url</span><br></pre></td></tr></table></figure>
<p>目前，我们需要解耦的全部配置：</p>
<p><strong>myproject/settings.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decouple <span class="keyword">import</span> config, Csv</span><br><span class="line"><span class="keyword">import</span> dj_database_url</span><br><span class="line"></span><br><span class="line">SECRET_KEY = config(<span class="string">'SECRET_KEY'</span>)</span><br><span class="line">DEBUG = config(<span class="string">'DEBUG'</span>, default=<span class="keyword">False</span>, cast=bool)</span><br><span class="line">ALLOWED_HOSTS = config(<span class="string">'ALLOWED_HOSTS'</span>, cast=Csv())</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: dj_database_url.config(</span><br><span class="line">        default=config(<span class="string">'DATABASE_URL'</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本地计算机的<strong>.env</strong>文件示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(<span class="number">0</span>ce(=sy=f2)p=f_wn&amp;@<span class="number">0</span>xsp7m$@!kp=d</span><br><span class="line">DEBUG=<span class="keyword">True</span></span><br><span class="line">ALLOWED_HOSTS=.localhost,<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>请注意，在<strong>DEBUG</strong>配置中我们给了一个默认值(True)，因此在生产环境中我们可以忽略（注释）此配置，因此它将被自动设置为<strong>False</strong>，因为它生产环境应该是False的。</p>
<p>现在<strong>ALLOWED_HOSTS</strong>将被转换成一个列表<strong>[‘.localhost’, ‘127.0.0.1’. ]</strong>。现在，这是在我们的本地机器上，为了生产，我们将其设置为类似于<strong>[‘.djangoboards.com’, ]</strong>您拥有的任何域名。</p>
<p>这特定配置可确保您的应用程序仅提供给这个域名。</p>
<h3 id="记录依赖库版本（Tracking_Requirements）">记录依赖库版本（Tracking Requirements）</h3><p>跟踪项目的依赖关系是一个很好的做法，因此另一台机器上更容易安装它(依赖的环境)。</p>
<p>我们可以通过运行下面的命令来检查当前安装的Python依赖库：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip freeze</span><br><span class="line"></span><br><span class="line">dj-database-url==<span class="number">0.4</span><span class="number">.2</span></span><br><span class="line">Django==<span class="number">1.11</span><span class="number">.6</span></span><br><span class="line">django-widget-tweaks==<span class="number">1.4</span><span class="number">.1</span></span><br><span class="line">Markdown==<span class="number">2.6</span><span class="number">.9</span></span><br><span class="line">python-decouple==<span class="number">3.1</span></span><br><span class="line">pytz==<span class="number">2017.2</span></span><br></pre></td></tr></table></figure>
<p>在项目根目录中创建名为<strong>requirements.txt</strong>的文件，并在其中添加依赖项(就是上面 <code>pip freeze</code>得到的项目所有的依赖库)：</p>
<p><strong>requirements.txt</strong>  文件内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dj-database-url==<span class="number">0.4</span><span class="number">.2</span></span><br><span class="line">Django==<span class="number">1.11</span><span class="number">.6</span></span><br><span class="line">django-widget-tweaks==<span class="number">1.4</span><span class="number">.1</span></span><br><span class="line">Markdown==<span class="number">2.6</span><span class="number">.9</span></span><br><span class="line">python-decouple==<span class="number">3.1</span></span><br></pre></td></tr></table></figure>
<p>我保留了<strong>pytz == 2017.2</strong>，因为它是由Django自动安装的。</p>
<p>您可以更新源代码仓库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .&#10;git commit -m &#34;Add requirements.txt file&#34;&#10;git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="域名（Domain_Name）">域名（Domain Name）</h3><p>如果我们要正确部署Django应用程序，我们将需要一个域名（译者注：如果部署外网，给别人使用需要域名，但如果是内网使用，只有IP地址也可以访问。此处，作者意思要处理上线外网。）。拥有域名来为应用程序提供服务，配置电子邮件服务和配置https证书非常重要。</p>
<p>最近，我一直在使用 <a href="https://namecheap.pxf.io/c/477033/386170/5618" target="_blank" rel="external">Namecheap</a> 。您可以以8.88美元/年的价格获得.com域名，或者如果您只是尝试一下，您可以用 0.99美元/年 的价格注册.xyz域名。（译者注：在中国，可以注册阿里云、腾讯云等著名的注册商都有域名卖买，大家可自行搜索官网。）</p>
<p>无论如何，您可以自由使用任何注册商。为了演示部署过程，我注册了 <a href="https://www.djangoboards.com/" target="_blank" rel="external">www.DjangoBoards.com</a> 域名。</p>
<h3 id="部署策略（Deployment_Strategy）">部署策略（Deployment Strategy）</h3><p>以下是我们将在本教程中使用的部署策略的概述：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Django-Deployment-Strategy.jpg" alt="20180714-Django-Deployment-Strategy.jpg"></p>
<p>云服务是使用 <a href="https://m.do.co/c/074832454ff1" target="_blank" rel="external">Digital Ocean</a> 提供的虚拟专用服务器。您可以使用我的会员链接注册Digital Ocean以获得 <a href="https://m.do.co/c/074832454ff1" target="_blank" rel="external">免费的10美元信用额度</a>（仅适用于新帐户）。（译者注：云服务商在中国可选择阿里云、腾讯云）</p>
<p>首先我们将使用 <strong><a href="https://www.nginx.com/" target="_blank" rel="external">NGINX</a></strong>（译者注：Nginx是一个异步框架的 Web服务器，通常作为负载均衡器。），其商标是食人魔。NGINX将收到访问者对服务器的所有请求。但如果请求数据，它不会尝试做任何不聪明的事情（译者注：Nginx主要负责处理请求，并分发给文件系统或HTTP服务器等。）。它所要做的就是确定所请求的信息是否是一个可以自行提供的静态资源，或者它是否更复杂。如果是，它会将请求传递给 <strong><a href="http://gunicorn.org/" target="_blank" rel="external">Gunicorn</a></strong>（译者注：Gunicorn“绿色独角兽”是一个被广泛使用的高性能的Python WSGI UNIX HTTP服务器，移植自Ruby的独角兽（Unicorn ）项目,使用pre-fork worker模式，具有使用非常简单，轻量级的资源消耗，以及高性能等特点。）。</p>
<p>NGINX 还将配置 HTTPS证书。这意味着它只接受通过HTTPS的请求。如果客户端尝试通过HTTP请求，NGINX将首先将用户重定向到HTTPS，然后它才会决定如何处理请求链接。</p>
<p>我们还将安装此 <strong><a href="https://certbot.eff.org/" target="_blank" rel="external">certbot</a></strong> 以自动续订 <strong><a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a></strong> 的证书。（译者注：想了解更多内容，可阅读<a href="https://linuxstory.org/deploy-lets-encrypt-ssl-certificate-with-certbot/" target="_blank" rel="external">HTTPS 简介及使用官方工具 Certbot 配置 Let’s Encrypt SSL 安全证书详细教程 | Linux Story</a>。）</p>
<p>Gunicorn是一个应用服务器。根据服务器拥有的CPU处理器数量，它可以通过生成多个同时工作的程序以并行处理多个请求。它管理工作负载并执行Python和Django代码。</p>
<p>Django是一个努力工作的代表。它可以访问数据库（PostgreSQL）或文件系统。但在大多数情况下，工作是在视图内部完成，渲染模板，以及过去几周我们编写过的所有内容。在Django处理请求之后，它会向Gunicorn返回一个响应，他将结果返回给NGINX，最终将响应传递给客户端。</p>
<p>我们还将安装<strong><a href="https://www.postgresql.org/" target="_blank" rel="external">PostgreSQL</a></strong>，一个优秀的数据库系统。由于Django的ORM系统，很容易切换数据库。（译者注：PostgreSQL被业界誉为“最先进的开源数据库”，面向企业复杂SQL处理的OLTP在线事务处理场景，支持NoSQL数据类型（JSON/XML/hstore）、支持GIS地理信息处理。）</p>
<p>最后一步是安装<strong><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a></strong>。它是一个过程控制系统，它将密切关注Gunicorn和Django，以确保一切顺利进行。如果服务器重新启动，或者Gunicorn崩溃，它将自动重启。（译者注：Supervisor是一个Python开发的client/server系统，可以管理和监控*nix上面的进程的工具。）</p>
<h3 id="部署到VPS（Digital_Ocean）（Deploying_to_a_VPS_(Digital_Ocean)）">部署到VPS（Digital Ocean）（Deploying to a VPS (Digital Ocean)）</h3><p>您可以使用您喜欢的任何其他VPS（虚拟专用服务器）。配置应该非常相似，毕竟我们将使用Ubuntu 16.04 作为我们的服务器。</p>
<p>首先，让我们创建一个新的服务器（在Digital Ocean上，他们称之为“Droplet”）。选择Ubuntu 16.04：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Digital-Ocean-Create-Droplets.png" alt="20180714-Digital-Ocean-Create-Droplets.png"></p>
<p>选择尺寸。最小的空间就足够了：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Digital-Ocean-Create-Droplets-Choose-Size.png" alt="20180714-Digital-Ocean-Create-Droplets-Choose-Size.png"></p>
<p>然后为您的Droplet选择一个主机名（在我的例子为“django-boards”）：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Digital-Ocean-Create-Droplets-Choose-Hostname.png" alt="20180714-Digital-Ocean-Create-Droplets-Choose-Hostname.png"></p>
<p>如果您有SSH密钥，则可以将其添加到您的帐户。然后，您将能够使用它登录服务器。否则，他们会通过电子邮件向您发送root密码。(译者注：SSH密钥可以不用输入密码就链接到服务器，具体可自行搜索了解更多。)</p>
<p>现在选择服务器的IP地址：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Digital-Ocean-Choose-IPaddress.png" alt="20180714-Digital-Ocean-Choose-IPaddress.png"></p>
<p>在我们登录服务器之前，让我们将域名指向此IP地址。这将节省一些时间，因为DNS设置通常需要几分钟才能传播。<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Digital-Ocean-Add-DNS-Record.png" alt="20180714-Digital-Ocean-Add-DNS-Record.png"></p>
<p>所以这里我们添加了两条A记录，一条指向主域名“djangoboards.com”，另一条指向“www.djangoboards.com”。我们将使用NGINX配置规范URL。</p>
<p>现在让我们使用终端登录服务器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@<span class="number">45.55</span>.<span class="number">144.54</span></span><br><span class="line">root@<span class="number">45.55</span>.<span class="number">144.54</span><span class="string">'s password:</span></span><br></pre></td></tr></table></figure>
<p>然后你应该看到以下消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">You are required to change your password immediately (root enforced)</span><br><span class="line">Welcome to Ubuntu <span class="number">16.04</span>.<span class="number">3</span> LTS (GNU/Linux <span class="number">4.4</span>.<span class="number">0</span>-<span class="number">93</span>-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  Get cloud support with Ubuntu Advantage Cloud Guest:</span><br><span class="line">    http://www.ubuntu.com/business/services/cloud</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> packages can be updated.</span><br><span class="line"><span class="number">0</span> updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Sun Oct <span class="number">15</span> <span class="number">18</span>:<span class="number">39</span>:<span class="number">21</span> <span class="number">2017</span> from <span class="number">82.128</span>.<span class="number">188.51</span></span><br><span class="line">Changing password <span class="keyword">for</span> root.</span><br><span class="line">(current) UNIX password:</span><br></pre></td></tr></table></figure>
<p>设置新密码，然后开始配置服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y upgrade</span><br></pre></td></tr></table></figure>
<p>如果在升级过程中收到任何提示，请选择”keep the local version currently installed”(保持当前安装的本地版本)选项。</p>
<p><strong>Python 3.6</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.<span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>PostgreSQL</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure>
<p><strong>NGINX</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install nginx</span><br></pre></td></tr></table></figure>
<p><strong>Supervisor</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install supervisor</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> supervisor</span><br><span class="line">sudo systemctl start supervisor</span><br></pre></td></tr></table></figure>
<p><strong>Virtualenv</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo python3.<span class="number">6</span> get-pip.py</span><br><span class="line">sudo pip3.<span class="number">6</span> install virtualenv</span><br></pre></td></tr></table></figure>
<h4 id="应用用户（Application_User）">应用用户（Application User）</h4><p>使用以下命令创建新用户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser boards</span><br></pre></td></tr></table></figure>
<p>通常，我只选择应用程序的名称。输入密码，并可选择在提示中添加一些额外信息。</p>
<p>现在将用户添加到sudoers列表：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd <span class="operator">-a</span> boards sudo</span><br></pre></td></tr></table></figure>
<h4 id="PostgreSQL数据库配置（PostgreSQL_Database_Setup）"><strong>PostgreSQL</strong>数据库配置（<strong>PostgreSQL</strong> Database Setup）</h4><p>首先切换到postgres用户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres</span><br></pre></td></tr></table></figure>
<p>创建数据库用户：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createuser u_boards</span><br></pre></td></tr></table></figure>
<p>创建一个新数据库并将用户设置为所有者：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb django_boards <span class="comment">--owner u_boards</span></span><br></pre></td></tr></table></figure>
<p>为用户定义一个强密码：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -c "<span class="operator"><span class="keyword">ALTER</span> <span class="keyword">USER</span> u_boards <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> <span class="string">'BcAZoYWsJbvE7RMgBPzxOCexPRVAq'</span><span class="string">"</span></span></span><br></pre></td></tr></table></figure>
<p>我们现在可以退出postgres用户了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h4 id="Django项目配置（Django_Project_Setup）">Django项目配置（Django Project Setup）</h4><p>切换到应用程序用户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - boards</span><br></pre></td></tr></table></figure>
<p>开始前，我们先检查终端的位置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line">/home/boards</span><br></pre></td></tr></table></figure>
<p>首先，让我们用我们的代码克隆存储库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/sibtc/django-beginners-guide.git</span><br></pre></td></tr></table></figure>
<p>启动虚拟环境(virtualenv)：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv -p python3<span class="number">.6</span></span><br></pre></td></tr></table></figure>
<p>初始化virtualenv：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure>
<p>安装依赖的库（译者注：从文件中读取依赖进行安装。）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r django-beginners-guide/requirements.txt</span><br></pre></td></tr></table></figure>
<p>我们再添加两个额外的库，Gunicorn和PostgreSQL驱动程序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure>
<p>现在在<strong>/home/boards/django-beginners-guide</strong>文件夹中，让我们创建一个<strong>.env</strong>文件来存储数据库凭据，密钥和其他所有内容：</p>
<p><strong>/home/boards/django-beginners-guide/.env</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(<span class="number">0</span>ce(=sy=f2)p=f_wn&amp;@<span class="number">0</span>xsp7m<span class="variable">$@</span>!kp=d</span><br><span class="line">ALLOWED_HOSTS=.djangoboards.com</span><br><span class="line">DATABASE_URL=postgres://u_boards:BcAZoYWsJbvE7RMgBPzxOCexPRVAq@localhost:<span class="number">5432</span>/django_boards</span><br></pre></td></tr></table></figure>
<p>以下是数据库URL的语法：postgres://<code>db_user</code>:<code>db_password</code>@<code>db_host</code>:<code>db_port</code>/<code>db_name</code>。</p>
<p>现在让我们迁移数据库，收集静态文件并创建一个超级用户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> django-beginners-guide</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, boards, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes<span class="number">.0001</span>_initial... OK</span><br><span class="line">  Applying auth<span class="number">.0001</span>_initial... OK</span><br><span class="line">  Applying admin<span class="number">.0001</span>_initial... OK</span><br><span class="line">  Applying admin<span class="number">.0002</span>_logentry_remove_auto_add... OK</span><br><span class="line">  Applying contenttypes<span class="number">.0002</span>_remove_content_type_name... OK</span><br><span class="line">  Applying auth<span class="number">.0002</span>_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth<span class="number">.0003</span>_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth<span class="number">.0004</span>_alter_user_username_opts... OK</span><br><span class="line">  Applying auth<span class="number">.0005</span>_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth<span class="number">.0006</span>_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth<span class="number">.0007</span>_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth<span class="number">.0008</span>_alter_user_username_max_length... OK</span><br><span class="line">  Applying boards<span class="number">.0001</span>_initial... OK</span><br><span class="line">  Applying boards<span class="number">.0002</span>_auto_20170917_1618... OK</span><br><span class="line">  Applying boards<span class="number">.0003</span>_topic_views... OK</span><br><span class="line">  Applying sessions<span class="number">.0001</span>_initial... OK</span><br></pre></td></tr></table></figure>
<p>现在静态文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br><span class="line"></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/js/jquery-3.2.1.min.js'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/js/popper.min.js'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/js/bootstrap.min.js'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/js/simplemde.min.js'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/css/app.css'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/css/bootstrap.min.css'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/css/accounts.css'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/css/simplemde.min.css'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/img/avatar.svg'</span></span><br><span class="line">Copying <span class="string">'/home/boards/django-beginners-guide/static/img/shattered.png'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>此命令将所有静态资产复制到外部目录，NGINX可以在该目录中为我们提供文件。稍后会详细介绍。</p>
<p>现在为应用程序创建一个超级用户：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<h4 id="配置Gunicorn（Configuring_Gunicorn）">配置Gunicorn（Configuring Gunicorn）</h4><p>Gunicorn是负责在代理服务器后面执行Django代码的工具。</p>
<p>在<strong>/home/boards</strong>中创建一个名为<strong>gunicorn_start</strong>的新文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">NAME=<span class="string">"django_boards"</span></span><br><span class="line">DIR=/home/boards/django-beginners-guide</span><br><span class="line">USER=boards</span><br><span class="line">GROUP=boards</span><br><span class="line">WORKERS=<span class="number">3</span></span><br><span class="line">BIND=unix:/home/boards/run/gunicorn.sock</span><br><span class="line">DJANGO_SETTINGS_MODULE=myproject.settings</span><br><span class="line">DJANGO_WSGI_MODULE=myproject.wsgi</span><br><span class="line">LOG_LEVEL=error</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DIR</span></span><br><span class="line"><span class="built_in">source</span> ../venv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=<span class="variable">$DJANGO_SETTINGS_MODULE</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$DIR</span>:<span class="variable">$PYTHONPATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> ../venv/bin/gunicorn <span class="variable">$&#123;DJANGO_WSGI_MODULE&#125;</span>:application \</span><br><span class="line">  --name <span class="variable">$NAME</span> \</span><br><span class="line">  --workers <span class="variable">$WORKERS</span> \</span><br><span class="line">  --user=<span class="variable">$USER</span> \</span><br><span class="line">  --group=<span class="variable">$GROUP</span> \</span><br><span class="line">  --bind=<span class="variable">$BIND</span> \</span><br><span class="line">  --log-level=<span class="variable">$LOG_LEVEL</span> \</span><br><span class="line">  --log-file=-</span><br></pre></td></tr></table></figure>
<p>此脚本将启动应用程序服务器。我们提供了一些信息，例如Django项目的位置，用于运行服务器的应用程序用户等等。</p>
<p>现在让这个文件可执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x gunicorn_start</span><br></pre></td></tr></table></figure>
<p>创建两个空文件夹，一个用于套接字文件，另一个用于存储日志：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run logs</span><br></pre></td></tr></table></figure>
<p>现在<strong>/home/boards</strong>里面的目录结构应该是这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">django-beginners-guide/</span><br><span class="line">gunicorn_start</span><br><span class="line">logs/</span><br><span class="line">run/</span><br><span class="line">staticfiles/</span><br><span class="line">venv/</span><br></pre></td></tr></table></figure>
<p>其中<strong>staticfiles</strong>文件夹由创建<strong>collectstatic</strong>命令。</p>
<h4 id="配置Supervisor（Configuring_Supervisor）">配置Supervisor（Configuring Supervisor）</h4><p>首先，在 <strong>/home/boards/logs/</strong> 文件夹中创建一个空的日志文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch logs/gunicorn.log</span><br></pre></td></tr></table></figure>
<p>现在创建一个新的supervisor文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/supervisor/conf.d/boards.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:boards]</span><br><span class="line"><span class="built_in">command</span>=/home/boards/gunicorn_start</span><br><span class="line">user=boards</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/home/boards/logs/gunicorn.log</span><br></pre></td></tr></table></figure>
<p>保存文件并运行以下命令：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> supervisorctl reread</span><br><span class="line">sudo supervisorctl update</span><br></pre></td></tr></table></figure></p>
<p>现在检查状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl status boards</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boards        RUNNING   pid <span class="number">308</span>, uptime <span class="number">0</span>:<span class="number">00</span>:<span class="number">07</span></span><br></pre></td></tr></table></figure>
<h4 id="配置NGINX（Configuring_NGINX）">配置NGINX（Configuring NGINX）</h4><p>下一步是设置NGINX服务器以提供静态文件并将请求传递给Gunicorn：</p>
<p>在 <strong>/etc/nginx/sites-available/</strong> 中添加一个名为<strong>boards</strong>的新配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">upstream app_server &#123;</span><br><span class="line">    server unix:/home/boards/run/gunicorn.sock fail_timeout=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name www.djangoboards.com;  <span class="comment"># here can also be the IP address of the server</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout <span class="number">5</span>;</span><br><span class="line">    client_max_body_size <span class="number">4</span>G;</span><br><span class="line"></span><br><span class="line">    access_<span class="built_in">log</span> /home/boards/logs/nginx-access.log;</span><br><span class="line">    error_<span class="built_in">log</span> /home/boards/logs/nginx-error.log;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        <span class="built_in">alias</span> /home/boards/staticfiles/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># checks for static file, if not found proxy to app</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> @proxy_to_app;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @proxy_to_app &#123;</span><br><span class="line">      proxy_<span class="built_in">set</span>_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      proxy_<span class="built_in">set</span>_header Host <span class="variable">$http_host</span>;</span><br><span class="line">      proxy_redirect off;</span><br><span class="line">      proxy_pass http://app_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建指向已启用站点的文件夹的引用链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln <span class="operator">-s</span> /etc/nginx/sites-available/boards /etc/nginx/sites-enabled/boards</span><br></pre></td></tr></table></figure>
<p>删除默认的NGINX网站：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>
<p>重启NGINX服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<p>此时，如果DNS已经生效，则可能通过URL www.djangoboards.com 访问该网站。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-django-boards.png" alt="20180714-django-boards.png"></p>
<h3 id="配置电子邮件服务（Configuring_an_Email_Service）">配置电子邮件服务（Configuring an Email Service）</h3><p>入门使用的最佳选择之一是 <a href="https://www.mailgun.com/" target="_blank" rel="external">Mailgun</a>。它提供了一个非常可靠的免费计划，每月包含12,000封电子邮件。</p>
<p>注册一个免费帐户。然后按照步骤操作，这非常简单。您必须与您注册域名的服务一起使用。在我的例子中，它是 <a href="https://namecheap.pxf.io/c/477033/386170/5618" target="_blank" rel="external">Namecheap</a>。</p>
<p>点击添加域以向您的帐户添加新域。按照说明操作，确保使用 “mg.” 子域名：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-mailgun-add-domain.png" alt="20180714-mailgun-add-domain.png"></p>
<p>现在抓取第一组DNS记录，它是两个TXT记录：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-mailgun-add-NDS-Records.png" alt="20180714-mailgun-add-NDS-Records.png"></p>
<p>使用您的注册商提供的网络界面将其添加到您的域中：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-DNS-List-Add-mail-record.png" alt="20180714-DNS-List-Add-mail-record.png"></p>
<p>重复上述步骤，对MX记录做同样的事情：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-DNS-list-MX-record.png" alt="20180714-DNS-list-MX-record.png"></p>
<p>将它们添加到域中：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-DNS-list-add-MX-Record.png" alt="20180714-DNS-list-add-MX-Record.png"></p>
<p>现在这一步不是强制性的，但由于我们已经在这里，所以也配置一下：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Add-DNS-Records-For-Tracking.png" alt="20180714-Add-DNS-Records-For-Tracking.png"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-DNS-add-CNAME-Record.png" alt="20180714-DNS-add-CNAME-Record.png"></p>
<p>添加所有DNS记录后，单击“立即检查DNS记录”按钮：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Domain-Verfication-Check-DNS-Recodrds.png" alt="20180714-Domain-Verfication-Check-DNS-Recodrds.png"></p>
<p>现在我们需要有一些耐心。有时需要一段时间来验证DNS。</p>
<p>同时，我们可以配置应用程序以接收连接参数。</p>
<p><strong>myproject/settings.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = config(<span class="string">'EMAIL_BACKEND'</span>, default=<span class="string">'django.core.mail.backends.smtp.EmailBackend'</span>)</span><br><span class="line">EMAIL_HOST = config(<span class="string">'EMAIL_HOST'</span>, default=<span class="string">''</span>)</span><br><span class="line">EMAIL_PORT = config(<span class="string">'EMAIL_PORT'</span>, default=<span class="number">587</span>, cast=int)</span><br><span class="line">EMAIL_HOST_USER = config(<span class="string">'EMAIL_HOST_USER'</span>, default=<span class="string">''</span>)</span><br><span class="line">EMAIL_HOST_PASSWORD = config(<span class="string">'EMAIL_HOST_PASSWORD'</span>, default=<span class="string">''</span>)</span><br><span class="line">EMAIL_USE_TLS = config(<span class="string">'EMAIL_USE_TLS'</span>, default=<span class="keyword">True</span>, cast=bool)</span><br><span class="line"></span><br><span class="line">DEFAULT_FROM_EMAIL = <span class="string">'Django Boards &lt;noreply@djangoboards.com&gt;'</span></span><br><span class="line">EMAIL_SUBJECT_PREFIX = <span class="string">'[Django Boards] '</span></span><br></pre></td></tr></table></figure>
<p>然后，我的本地计算机<strong>.env</strong>文件将如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(<span class="number">0</span>ce(=sy=f2)p=f_wn&amp;@<span class="number">0</span>xsp7m<span class="variable">$@</span>!kp=d</span><br><span class="line">DEBUG=True</span><br><span class="line">ALLOWED_HOSTS=.localhost,<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">DATABASE_URL=sqlite:///db.sqlite3</span><br><span class="line">EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend</span><br></pre></td></tr></table></figure>
<p>我的线上（云服务器）<strong>.env</strong>文件看起来像这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(<span class="number">0</span>ce(=sy=f2)p=f_wn&amp;@<span class="number">0</span>xsp7m<span class="variable">$@</span>!kp=d</span><br><span class="line">ALLOWED_HOSTS=.djangoboards.com</span><br><span class="line">DATABASE_URL=postgres://u_boards:BcAZoYWsJbvE7RMgBPzxOCexPRVAq@localhost:<span class="number">5432</span>/django_boards</span><br><span class="line">EMAIL_HOST=smtp.mailgun.org</span><br><span class="line">EMAIL_HOST_USER=postmaster@mg.djangoboards.com</span><br><span class="line">EMAIL_HOST_PASSWORD=ED2vmrnGTM1Rdwlhazyhxxcd0F</span><br></pre></td></tr></table></figure>
<p>您可以在Mailgun 的<strong>the Domain Information</strong>（域信息）部分中找到您的凭据。</p>
<ul>
<li>EMAIL_HOST: SMTP Hostname（SMTP主机名）</li>
<li>EMAIL_HOST_USER: Default SMTP Login（默认SMTP登录）</li>
<li>EMAIL_HOST_PASSWORD: Default Password（默认密码）</li>
</ul>
<p>我们可以在线上服务器中测试新设置。在本地计算机上的<strong>settings.py</strong>文件中进行更改，将更改提交到远程仓库。然后，在服务器中拉出新代码并重新启动Gunicorn进程：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>使用电子邮件凭据编辑<strong>.env</strong>文件。</p>
<p>然后重启Gunicorn进程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl restart boards</span><br></pre></td></tr></table></figure>
<p>现在我们可以尝试测试重置密码的邮件流程：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Email-Please-reset-your-password.png" alt="20180714-Email-Please-reset-your-password.png"></p>
<p>在Mailgun仪表板上，您可以获得有关电子邮件传递的一些统计信息：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Email-Mailgun-Message-Delivery.png" alt="20180714-Email-Mailgun-Message-Delivery.png"></p>
<h3 id="配置HTTPS证书（Configuring_HTTPS_Certificate）">配置HTTPS证书（Configuring HTTPS Certificate）</h3><p>现在让我们使用 <a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a> 提供的一个很好的HTTPS证书来提高我们的应用程序的安全性。</p>
<p>设置HTTPS从未如此简单。更好的是，我们现在可以免费获得它。他们提供了一个名为<strong>certbot</strong>的解决方案 ，负责为我们安装和更新证书。这非常简单：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure>
<p>现在安装证书：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure>
<p>只需按照提示操作即可。当被问及：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br></pre></td></tr></table></figure>
<p>选择<code>2</code>将所有HTTP流量重定向到HTTPS。</p>
<p>有了这个，该网站已经通过HTTPS提供服务：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180714-Let&#39;s-Encrypt-certbot-Https.png" alt="20180714-Let&#39;s-Encrypt-certbot-Https.png"></p>
<p>设置证书的自动续订。运行以下命令编辑crontab文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab <span class="operator">-e</span></span><br></pre></td></tr></table></figure></p>
<p>将以下行添加到文件末尾：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">4</span> * * * /usr/bin/certbot renew --quiet</span><br></pre></td></tr></table></figure></p>
<p>该命令将每天凌晨4点运行。所有在30天内到期的证书将自动续订。</p>
<h3 id="总结（Conclusions）">总结（Conclusions）</h3><p>非常感谢所有关注本系列教程的人，给予评论和反馈！我真的很感激！这是该系列的最后一篇教程。我希望你喜欢它！</p>
<p>尽管这是教程系列的最后一部分，但我还是计划编写一些后续教程来探索其他有趣的主题，例如数据库优化以及在我们目前拥有的内容之上添加更多功能。</p>
<p>顺便说一句，如果您有兴趣为项目做出贡献，很少有人愿意免费提交<code>pull</code>请求！该项目的源代码可在GitHub上获得：<a href="https://github.com/sibtc/django-beginners-guide/" target="_blank" rel="external">https://github.com/sibtc/django-beginners-guide/</a></p>
<p>另外，请告诉我您还想看到的其他内容！:-)</p>
<h3 id="译者总结">译者总结</h3><p>翻译本文之前，从来没有翻译过技术文章。现在用一天时间翻译完，真的觉得翻译的工作很辛苦，以前看了很多翻译的文章，在这里感谢那些无私奉献的译者们！</p>
<p>在翻译过程中，有很多技术点，需要自已查一下资料，带出一些扩展；有一些技术知识，原作者一笔带过，又害怕读者看不懂，然后又想展开述；遇到一些自己不懂的技术，也是要硬头表去翻译；也有一些翻译的句子，反复多次斟酌文字，希望能够通俗易懂的描述出来。</p>
<p>最后，翻译只是第一步，理解了原作者的文章，并更好的学习到知识，简单明了的译文，是翻译的初心。当然，在这过程，也发现英文的重要性，希望大家也重视英文，为自己的技术视野更广，不断努力！正如文中作者说的，也许是你第一次遇到的知识，只有坚持，反复多看几次，慢慢的，你一定会懂的！恒心！</p>
<h3 id="参考扩展">参考扩展</h3><p>教程材料一共会被分为七个部分。<br>此教程将从安装、开发环境的准备，模型，视图，模板，URL到更高级的主题（如迁移，测试和部署）中详细探讨所有基本概念。</p>
<p><strong>Vitor Freitas</strong> 原文系列：</p>
<ul>
<li><a href="https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/" target="_blank" rel="external">A Complete Beginner’s Guide to Django</a></li>
</ul>
<p>公众号<strong>Python之禅</strong> 翻译：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MzgyODQxMQ==&amp;mid=2650367994&amp;idx=1&amp;sn=a9553edbcbac690e29d1018d0a3de9f1&amp;chksm=be9cdcae89eb55b8511ef53ac8ae5b5bf6630228e3183882b89b710efca15aee0ba06eee35c5&amp;scene=0#rd" target="_blank" rel="external">一个完整的Django入门指南 - 第1部分</a></li>
<li><a href="https://mp.weixin.qq.com/s/eKVfex4Ir1ek6k6SRbRX2A" target="_blank" rel="external">Django入门指南-第2部分（系统设计）</a></li>
<li><a href="https://blog.csdn.net/js_xh/article/details/79490623" target="_blank" rel="external">一个完整的Django入门指南 - 第3部分：高级概念</a></li>
<li><a href="https://mp.weixin.qq.com/s/-FHN6-8yOzFR4-kFqQQZSQ" target="_blank" rel="external">Django入门实践指南-第4章：模型设计</a></li>
<li><a href="https://mp.weixin.qq.com/s/kFW9cBSiVGhF9CC7KwOgQQ" target="_blank" rel="external">Django入门实践指南-第5章：编写第一个视图函数</a></li>
</ul>
<p><strong>苍云横渡</strong> 翻译的Windows版本：</p>
<ul>
<li><a href="https://www.jianshu.com/p/8b1d6a415398" target="_blank" rel="external">【第一部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书</a></li>
<li><a href="https://www.jianshu.com/p/43c6674adbd3" target="_blank" rel="external">【第二部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书</a></li>
<li><a href="https://www.jianshu.com/p/0750fbd80d88" target="_blank" rel="external">【第三部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书</a></li>
<li><a href="https://www.jianshu.com/p/139b0fc23fca" target="_blank" rel="external">【第四部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书</a></li>
<li><a href="https://www.jianshu.com/p/f172fc6f2720" target="_blank" rel="external">【第五部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书</a></li>
<li><a href="https://www.jianshu.com/p/cd4d6b796ff7" target="_blank" rel="external">【第六部分-django论坛从搭建到部署】一个完整的Django入门指南 - 简书</a></li>
</ul>
<p>扩展阅读：</p>
<ul>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a> </li>
<li><a href="https://try.github.io/" target="_blank" rel="external">关于Git的很棒的互动教程</a></li>
<li><a href="https://www.nginx.com/" target="_blank" rel="external">NGINX</a></li>
<li><a href="http://gunicorn.org/" target="_blank" rel="external">Gunicorn</a></li>
<li><a href="https://certbot.eff.org/" target="_blank" rel="external">certbot</a></li>
<li><a href="https://linuxstory.org/deploy-lets-encrypt-ssl-certificate-with-certbot/" target="_blank" rel="external">HTTPS 简介及使用官方工具 Certbot 配置 Let’s Encrypt SSL 安全证书详细教程 | Linux Story</a></li>
<li><a href="https://www.postgresql.org/" target="_blank" rel="external">PostgreSQL</a></li>
<li><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>本篇文章是翻译 <a href="https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/">A Complete Beginner’s Guide to Django</a> 系列的最后一篇文章 <a href="https://simpleisbetterthancomplex.com/series/2017/10/16/a-complete-beginners-guide-to-django-part-7.html">A Complete Beginner’s Guide to Django - Part 7</a>，因为搜索找了很久都没有找到对应的中文翻译篇（如果有，就是我没有找到…），又因为这个系列真的非常的好，简单，容易，非常适配入门，所以就打算自已试试翻译，也当是自己学习入门的一步吧！</p>]]>
    
    </summary>
    
      <category term="Django" scheme="https://iHTCboy.com/tags/Django/"/>
    
      <category term="Python" scheme="https://iHTCboy.com/tags/Python/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[macOS的控制台Console.app]]></title>
    <link href="https://iHTCboy.com/2018/07/13/2018-07-13_macOS%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0Console/"/>
    <id>https://iHTCboy.com/2018/07/13/2018-07-13_macOS的控制台Console/</id>
    <published>2018-07-13T14:29:16.000Z</published>
    <updated>2018-07-14T09:05:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>从Xcode9.4开始，Devices 界面已经移除了真机设备的日志输出log，而移到macOS系统独立的控制台app(Console.app):</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180713-macOS-Console.app.png" alt="20180713-macOS-Console.app.png-w200"></p>
<a id="more"></a>
<h3 id="2、控制台_Console-app">2、控制台 Console.app</h3><blockquote>
<p>查看日志信息和报告以获取有关 Mac 和设备的诊断信息。</p>
</blockquote>
<p>控制台应用很早的macOS版本就有了，但是不常用，其实Xcode中移除，也是因为与控制器功能相似，对于Xcode来说，也许真的是一个负担，并且Xcode现在bug已经够多了，移除也是一个好事吧。</p>
<p>可以直接看苹果文档：<a href="https://support.apple.com/zh-cn/guide/console/welcome/1.0" target="_blank" rel="external">欢迎使用控制台 - Apple 支持</a></p>
<h3 id="3、一些技巧">3、一些技巧</h3><p>相对于以前想看设备的日志，其实，控制台可谓更轻量，更快捷，更专业吧。下面就说说一些技巧：</p>
<ul>
<li>筛选所需<br>我们打开控制台的目的，一般都是调试我们自己开发的iOS应用吧！这时候，链接设备后，其实我们只关心我们自己的应用的日志，但默认情况下，会显示所有应用当前输出的日志，这时候，筛选所需显得很有必要！<br>找到你应用输出的一条日志，然后鼠标右键（或按住 Control 键点按日志信息），然后选择 <code>显示“进程&#39;XXX&#39;”</code>：</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180713-macOS-Console-Filter-Process-Items.png" alt="20180713-macOS-Console-Filter-Process-Items.png"></p>
<p>这里示例<code>WeRead</code>(微信读书)的进程筛选，然后就会只显示这个应用的全部日志，相对于Xcode的日志界面，其实非常方便啦~</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180713-macOS-Console-Filter-Process-Items-activity.png" alt="20180713-macOS-Console-Filter-Process-Items-activity.png"></p>
<ul>
<li>显示所需<br>另一方面，第一条日志默认只显示一行，如果想显示全部，可以点击后，在下方显示具体的内容：</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180713-macOS-Console-Show-Items.png" alt="20180713-macOS-Console-Show-Items.png"></p>
<p>如果用快捷键（→ 和 ←）左右箭头键可以快速在当前选择的行显示全部的内容：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180713-macOS-Console-Show-Specific-Items.png" alt="20180713-macOS-Console-Show-Specific-Items.png"></p>
<h3 id="4、快捷键">4、快捷键</h3><p>使用键盘快捷键快速完成“控制台”中的许多任务。</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command-Option-F</td>
<td>搜索日志信息和活动</td>
</tr>
<tr>
<td>Command-F</td>
<td>在日志信息中查找文本</td>
</tr>
<tr>
<td>Command-G</td>
<td>跳到下一条搜索结果</td>
</tr>
<tr>
<td>Command-Shift-G</td>
<td>跳到上一条搜索结果</td>
</tr>
<tr>
<td>Command-K</td>
<td>清除日志信息或活动</td>
</tr>
<tr>
<td>Shift-Command-R</td>
<td>重新载入日志信息或活动</td>
</tr>
<tr>
<td>Shift-Command-N</td>
<td>跳到最近的日志信息或活动</td>
</tr>
<tr>
<td>Command-0</td>
<td>显示或隐藏边栏</td>
</tr>
<tr>
<td>Command-R</td>
<td>在 Finder 中显示报告</td>
</tr>
<tr>
<td>→</td>
<td>在本行展开所选日志信息</td>
</tr>
<tr>
<td>←</td>
<td>在本行折叠所选日志信息</td>
</tr>
<tr>
<td>Control-Command-F</td>
<td>进入或退出全屏幕视图</td>
</tr>
<tr>
<td>Command-C</td>
<td>拷贝所选日志信息文本</td>
</tr>
</tbody>
</table>
<h3 id="5、总结">5、总结</h3><p>这个过程，大家也许会发现，用快捷键是提高效率的直接方式，用 <code>Alfred</code> 来打开也很方便（后面计划写一个<code>Alfred</code>开发者效率的文章，期待吧!）。刚开始，也许对于打开控制台查看日志log输出不习惯，但有时候只是查看日志排查问题，直接打开 Console.app 真的方便很多（你知道打开Xcode需要的时候更久，并且在打开Devices更是久啊），所以，综上，这个控制台 Console.app也是一件好事！</p>
<p>说到这里，其实，我更想吐槽的是Xcdoe！！！越来越庞大，还有Swift的交替，还有功能更强大？直接导致品控越来越差。所以，从这个角度来看，苹果把Xcode的很多相关但不重要的功能单独出来，也许是到于Xcode开发团队来说，是一件好事，到后续的版本迭代也是好事吧，希望Xcode10给开发者带来<code>新</code>体验！期待9月！！</p>
<h3 id="6、参考">6、参考</h3><ul>
<li><a href="https://support.apple.com/zh-cn/guide/console/welcome/1.0" target="_blank" rel="external">欢迎使用控制台 - Apple 支持</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>从Xcode9.4开始，Devices 界面已经移除了真机设备的日志输出log，而移到macOS系统独立的控制台app(Console.app):</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180713-macOS-Console.app.png" alt="20180713-macOS-Console.app.png-w200"></p>]]>
    
    </summary>
    
      <category term="Console.app" scheme="https://iHTCboy.com/tags/Console-app/"/>
    
      <category term="macOS" scheme="https://iHTCboy.com/tags/macOS/"/>
    
      <category term="苹果控制台" scheme="https://iHTCboy.com/tags/%E8%8B%B9%E6%9E%9C%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python爬虫实践入门篇]]></title>
    <link href="https://iHTCboy.com/2018/07/10/2018-07-10_Python%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>https://iHTCboy.com/2018/07/10/2018-07-10_Python爬虫实践入门篇/</id>
    <published>2018-07-10T13:49:16.000Z</published>
    <updated>2018-08-25T03:36:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>学习Python二个多月啦，周末时开始兴趣学习爬虫，虽然有点概念，但是也折腾了大半天，下面就开始简要记录一下吧。</p>
<h3 id="2、需要的准备">2、需要的准备</h3><ul>
<li>Python：需要基本的python语法基础</li>
<li>requests：专业用于请求处理，<a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="external">requests库学习文档中文版</a></li>
<li>lxml：其实可以用pythonth自带的正则表达式库re，但是为了更加简单入门，用 <a href="https://lxml.de/index.html" target="_blank" rel="external">lxml</a> 中的 etree 进行网页数据定位爬取。</li>
</ul>
<a id="more"></a>
<p>通过pip安装 requests 和 lxml 库，在终端输入：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> requests</span><br><span class="line">pip <span class="keyword">install</span> lxml</span><br></pre></td></tr></table></figure></p>
<p>注：如果是安装到Python3就用<code>pip3 install</code></p>
<p>下载过程成功的输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collecting lxml</span><br><span class="line">  Cache entry deserialization failed, entry ignored</span><br><span class="line">  Downloading https:<span class="comment">//files.pythonhosted.org/packages/00/fd/5e65f293e366a63198dade275b886e5d24752367c2e67e3993023b0d58ef/lxml-4.2.3-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl (8.7MB)</span></span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">8.7</span>MB <span class="number">821</span>kB/s </span><br><span class="line">Installing collected packages: lxml</span><br><span class="line">Successfully installed lxml-<span class="number">4.2</span><span class="number">.3</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>注：<br>如果安装过程遇到任何问题，请谷歌吧，如果网上找不到答案，也不要问我！找不到答案我直播吃翔！！！</li>
</ul>
<h3 id="3、实践过程">3、实践过程</h3><p>为了这过程有点兴趣，我找了一个美图的网站，爬虫了一波图片~</p>
<p>实践爬虫的网站链接：<a href="https://www点aitaotu点com（注意，这不是打广告！）" target="_blank" rel="external">https://www点aitaotu点com（注意，这不是打广告！）</a></p>
<ul>
<li>下载页面html内容：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page = <span class="string">'https://www点aitaotu点com/guonei/36350.html'</span></span><br><span class="line">data = requests.get(page).text</span><br><span class="line">dom = etree.HTML(data)</span><br></pre></td></tr></table></figure>
<ul>
<li>解析(定位)元素:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title_path = <span class="string">'//*[@id="photos"]/h1/text()'</span></span><br><span class="line">totalpage_path = <span class="string">'//*[@id="picnum"]/span[2]/text()'</span></span><br><span class="line">image_path = <span class="string">'//*[@id="big-pic"]/p/a/img'</span></span><br></pre></td></tr></table></figure>
<p>这里的xpath怎么获取，就是网页里面，打开开发者检查元素工具，在safari和chrome都有这个功能：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180710-html-show-element.png" alt="20180710-html-show-element.png"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180710-html-copy-xpath.png" alt="20180710-html-copy-xpath.png"></p>
<ul>
<li>获取元素内容：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title = dom.xpath(title_path)[<span class="number">0</span>]</span><br><span class="line">total = dom.xpath(totalpage_path)[<span class="number">0</span>]</span><br><span class="line">image_url = dom.xpath(image_path)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">img_src = image_url.xpath(<span class="string">'./@src'</span>)[<span class="number">0</span>]</span><br><span class="line">img_alt = image_url.xpath(<span class="string">'./@alt'</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>这里解析就不解析了，其实通过PyCharm IDE可能实时查看每个对象的属性，可以更清晰的了解解析的元素结构，帮助理解，这里就暂时不说IDE的方法啦，大家有兴趣可以试试，也是很简单的~</p>
<p>最后拿到图片链接，就是下载图片然后保存输出到电脑啊！（文章尾附完整代码！）</p>
<h3 id="4、总结">4、总结</h3><p>爬虫入门就这样结束啦！学习了python后，发现语法很简单，代码很轻松就完成！不到100行！！！</p>
<p>python通过各种库，解决了编程语言自身的庞大，完成了自己是胶水语言的特点！</p>
<p>通过这次实践，其实，有很多细节东西，只有自己做了才知道，比较说保存图片的路径，找到当前目录，怎么分目录保存，目录文件操作，这些都是自己之前实践了一个django工具学习过来的。所以，现在经历多了，才知道，什么时候学习都不晚，有些东西，真的是不知道什么时候你会用上，真的，自己早知道这个道理几年，就不像年轻时那么想，这东西怎么可能会用上，不学！！！果然是年轻坑爹！！！<strong>学会老，学到老吧！</strong></p>
<h3 id="5、代码">5、代码</h3><ul>
<li><a href="https://github.com/iHTCboy/WebCrawlerExample" target="_blank" rel="external">iHTCboy/WebCrawlerExample: 网页爬虫实践示例</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadImages</span><span class="params">(url)</span>:</span></span><br><span class="line">    data = requests.get(page).text</span><br><span class="line">    dom = etree.HTML(data)</span><br><span class="line"></span><br><span class="line">    title_path = <span class="string">'//*[@id="photos"]/h1/text()'</span></span><br><span class="line">    totalpage_path = <span class="string">'//*[@id="picnum"]/span[2]/text()'</span></span><br><span class="line">    image_path = <span class="string">'//*[@id="big-pic"]/p/a/img'</span></span><br><span class="line"></span><br><span class="line">    title = dom.xpath(title_path)[<span class="number">0</span>]</span><br><span class="line">    total = dom.xpath(totalpage_path)[<span class="number">0</span>]</span><br><span class="line">    image_url = dom.xpath(image_path)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    img_src = image_url.xpath(<span class="string">'./@src'</span>)[<span class="number">0</span>]</span><br><span class="line">    img_alt = image_url.xpath(<span class="string">'./@alt'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    print(title, total, img_src, img_alt)</span><br><span class="line"></span><br><span class="line">    cwd = os.getcwd()</span><br><span class="line">    save_path = os.path.join(cwd, <span class="string">'images/'</span> + title)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_path):</span><br><span class="line">        os.makedirs(save_path)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">u'保存图片的路径：'</span>, save_path)</span><br><span class="line"></span><br><span class="line">    img_path = os.path.dirname(img_src)</span><br><span class="line">    img_name = os.path.basename(img_src)</span><br><span class="line">    img_format = img_name.split(<span class="string">'.'</span>)[<span class="number">1</span>]</span><br><span class="line">    print(img_path, img_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(total) + <span class="number">1</span>):</span><br><span class="line">        new_img_url = <span class="string">'%s/%02d.%s'</span> % (img_path, i, img_format)</span><br><span class="line">        save_img_path = <span class="string">'%s/%02d.%s'</span> % (save_path, i, img_format)</span><br><span class="line">        <span class="comment"># 下载图片</span></span><br><span class="line">        image = requests.get(new_img_url)</span><br><span class="line">        <span class="comment"># 命名并保存图片</span></span><br><span class="line">        <span class="keyword">with</span> open(save_img_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(image.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://www.aitaotu.com/'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># download list</span></span><br><span class="line">    list = [<span class="string">'guonei/36350.html'</span>, <span class="string">'guonei/36352.html'</span>, <span class="string">'guonei/36351.html'</span>, <span class="string">'guonei/36357.html'</span>, <span class="string">'guonei/36250.html'</span>,</span><br><span class="line">            <span class="string">'guonei/36341.html'</span>, <span class="string">'guonei/36334.html'</span>, <span class="string">'guonei/36306.html'</span>, <span class="string">'guonei/35969.html'</span>, <span class="string">'guonei/35219.html'</span>,</span><br><span class="line">            <span class="string">'guonei/36290.html'</span>, <span class="string">'guonei/36277.html'</span>, <span class="string">'guonei/36263.html'</span>, <span class="string">'gangtai/36303.html'</span>, <span class="string">'gangtai/36226.html'</span>,</span><br><span class="line">            <span class="string">'guonei/35260.html'</span>, <span class="string">'guonei/35247.html'</span>, <span class="string">'guonei/36257.html'</span>, <span class="string">'guonei/36221.html'</span>, <span class="string">'guonei/21647.html'</span>,</span><br><span class="line">            <span class="string">'guonei/21499.html'</span>, <span class="string">'guonei/36319.html'</span>, <span class="string">'guonei/34903.html'</span>, <span class="string">'guonei/14148.html'</span>, <span class="string">'guonei/33780.html'</span>,</span><br><span class="line">            <span class="string">'guonei/14338.html'</span>, <span class="string">'guonei/14550.html'</span>, <span class="string">'guonei/14818.html'</span>, <span class="string">'guonei/16820.html'</span>, <span class="string">'guonei/18388.html'</span>,</span><br><span class="line">            <span class="string">'guonei/13447.html'</span>, <span class="string">'guonei/25912.html'</span>, <span class="string">'guonei/13991.html'</span>, <span class="string">'guonei/8246.html'</span>, <span class="string">'guonei/36171.html'</span></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">u'准备下载：%d套图'</span>, len(list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> type <span class="keyword">in</span> list:</span><br><span class="line">        page = url + type</span><br><span class="line">        downloadImages(page)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">u'下载完成啦！'</span>)</span><br></pre></td></tr></table></figure>
<p>代码就没有太多注释，因为很简单，就说一下运行方式吧，在终端：</p>
<p>python2:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> YellowImage.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></p>
<p>python3:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> YellowImage.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></p>
<p>最后的成果：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180710-last-results.png" alt="20180710-last-results.png"></p>
<h3 id="6、参考">6、参考</h3><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程 - 廖雪峰的官方网站</a></li>
<li><a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="external">Requests: 让 HTTP 服务人类 — Requests 2.18.1 文档</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">Beautiful Soup 4.2.0 文档</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://tool.oschina.net/regex/" target="_blank" rel="external">在线正则表达式测试</a></li>
<li><a href="https://lxml.de/index.html" target="_blank" rel="external">lxml - Processing XML and HTML with Python</a></li>
<li><a href="https://www.kawabangga.com/posts/2058" target="_blank" rel="external">Python lxml教程 | 卡瓦邦噶！</a></li>
<li><a href="https://piaosanlang.gitbooks.io/spiders/02day/section2.3.html" target="_blank" rel="external">非结构化数据之lxml库 · 网络爬虫教程</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>学习Python二个多月啦，周末时开始兴趣学习爬虫，虽然有点概念，但是也折腾了大半天，下面就开始简要记录一下吧。</p>
<h3 id="2、需要的准备">2、需要的准备</h3><ul>
<li>Python：需要基本的python语法基础</li>
<li>requests：专业用于请求处理，<a href="http://docs.python-requests.org/zh_CN/latest/">requests库学习文档中文版</a></li>
<li>lxml：其实可以用pythonth自带的正则表达式库re，但是为了更加简单入门，用 <a href="https://lxml.de/index.html">lxml</a> 中的 etree 进行网页数据定位爬取。</li>
</ul>]]>
    
    </summary>
    
      <category term="Python" scheme="https://iHTCboy.com/tags/Python/"/>
    
      <category term="Python爬虫" scheme="https://iHTCboy.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="爬虫" scheme="https://iHTCboy.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聊聊简书文章被锁定]]></title>
    <link href="https://iHTCboy.com/2018/07/08/2018-07-08_%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%A2%AB%E9%94%81%E5%AE%9A/"/>
    <id>https://iHTCboy.com/2018/07/08/2018-07-08_简书文章被锁定/</id>
    <published>2018-07-08T10:49:16.000Z</published>
    <updated>2018-08-05T03:34:55.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、文章被锁定">1、文章被锁定</h3><p>昨晚看到简书消息：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180708-jianshu_lock.png" alt="20180708-jianshu_lock.png"></p>
<p>原文章已经转移到个人博客：</p>
<ul>
<li><a href="https://ihtcboy.com/2015/07/26/2015-07-26_建立信任机制">《建立信任机制》</a></li>
<li>《绝代宠妓》（Dangerous Beauty）观后感: <a href="https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感">https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感</a></li>
</ul>
<h3 id="2、去中心化">2、去中心化</h3><a id="more"></a>
<p>我不知道这是机器过滤还是人工选择，但作为第一批用户，见证成长，为这样的行为感觉太可惜。想起简书很久之前，我在14年无意见看到简书时，就觉得这个写作社区很棒，当时还联系了简书，与联合创始人交流了一下，当然还开玩笑说毕业后想去简书，当时我就认为简书是未来的一个方向：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180708-jianshu_feedback.png" alt="20180708-jianshu_feedback.png"></p>
<p>今天聊这个，其实还是不想吐槽什么。但，互联网发展到现在，从web的去中心化，现在又回到一个一个的社区，一个一个的app，我想乔布斯也不认为这是未来。去中心化，我认为是未来的方向，就像现在2018年最火的区块链！虽然现在00后之前的人，在于朋友圈子，QQ圈子，形成了国内的大中心。就像每一个中国思想的人都曾想拥有自己的房子一样。</p>
<p>我想象，00后之后，大家对房子的态度不会在像现在这样，对待互联网也不像现在，百花齐放，去中心化，也许是需要时间吧，让我们一起见证~</p>
<h3 id="参考引用">参考引用</h3><ul>
<li>《绝代宠妓》（Dangerous Beauty）观后感: <a href="https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感">https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感</a></li>
<li><a href="https://ihtcboy.com/2015/07/26/2015-07-26_建立信任机制">《建立信任机制》</a></li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、文章被锁定">1、文章被锁定</h3><p>昨晚看到简书消息：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180708-jianshu_lock.png" alt="20180708-jianshu_lock.png"></p>
<p>原文章已经转移到个人博客：</p>
<ul>
<li><a href="https://ihtcboy.com/2015/07/26/2015-07-26_建立信任机制">《建立信任机制》</a></li>
<li>《绝代宠妓》（Dangerous Beauty）观后感: <a href="https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感">https://ihtcboy.com/2015/06/22/2015-06-22_《绝代宠妓》(Dangerous_Beauty)观后感</a></li>
</ul>
<h3 id="2、去中心化">2、去中心化</h3>]]>
    
    </summary>
    
      <category term="去中心化" scheme="https://iHTCboy.com/tags/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96/"/>
    
      <category term="简书文章被封" scheme="https://iHTCboy.com/tags/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%A2%AB%E5%B0%81/"/>
    
      <category term="违反规定" scheme="https://iHTCboy.com/tags/%E8%BF%9D%E5%8F%8D%E8%A7%84%E5%AE%9A/"/>
    
      <category term="life" scheme="https://iHTCboy.com/categories/life/"/>
    
  </entry>
  
</feed>
