<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iHTCboy's blog]]></title>
  <subtitle><![CDATA[Learn something of everything, Learn everything of something.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://iHTCboy.com/"/>
  <updated>2019-03-30T15:43:48.767Z</updated>
  <id>https://iHTCboy.com/</id>
  
  <author>
    <name><![CDATA[iHTCboy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Xcode10再坑之framework not found CoreServices for architecture armv7]]></title>
    <link href="https://iHTCboy.com/2019/03/15/2019-03-15_iOS-framework-not-found-xxx-for-architecture-armv7/"/>
    <id>https://iHTCboy.com/2019/03/15/2019-03-15_iOS-framework-not-found-xxx-for-architecture-armv7/</id>
    <published>2019-03-15T13:19:16.000Z</published>
    <updated>2019-03-30T15:43:48.767Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>前段时间，升级了 Xcode10 后，提供给第三方用户的SDK，客户反馈说报错：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld: framework not found CoreServices <span class="keyword">for</span> architecture armv7</span><br></pre></td></tr></table></figure>
<p><strong>为什么 iOS SDK 拖入项目中就报错”ld: framework not found IOSurface for architecture arm64”？</strong></p>
<p>其实，翻开之前写的文章已经说过解决方案： <a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a></p>
<p>当时，反复确认后，网上有些第三方的SDK提供商说升级 Xcode10 吧！！！慌张~ 你们就只能让别人升级啦！解决不了，重启，升级！但，NO，最后发现是新项目是使用 <code>CocoaPods</code> 导致的坑，一个地方进2次，还真不简单！</p>
<a id="more"></a>
<p>其中，看到有赞云这样说：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190315-youzanyun-sdk.png" alt="20190315-youzanyun-sdk.png"></p>
<p>我只能说，坑的一个算一个，第三方用户就是这样，希望技术真的改变生活！包括技术的生活！</p>
<h3 id="2、问题原因">2、问题原因</h3><p>因为我们新的项目使用 <code>CocoaPods</code> 组件化，所以最后打SDK的项目是CocoaPods集成的，问题就出在这里！上一个文章说到解决方法很简单：（<a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a>）</p>
<blockquote>
<p>Build Settings 中 Link Frameworks Automatically 把默认Yes 改成 No </p>
</blockquote>
<p>但是，如果用 <code>CocoaPods</code> 集成，默认是 <code>Yes</code>！！！ 尼玛！！！</p>
<p>知道原因，解决就好办啦！但是，突然想到，以后 <code>pod install</code> 或 <code>pod update</code> 时，难道要人工的设置一次？？？ 不可能！不可能！不可能！</p>
<p>最后，还是在 <code>CocoaPods</code> 官方文档找到答案 <a href="https://guides.cocoapods.org/syntax/podfile.html#post_install" target="_blank" rel="external">CocoaPods Guides - post_install</a>：</p>
<p>在 <code>Podfile</code> 文件最后，添加下面代码：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> |installer|</span><br><span class="line">    installer.pods_project.targets.each <span class="keyword">do</span> |target|</span><br><span class="line">        target.build_configurations.each <span class="keyword">do</span> |config|</span><br><span class="line">            config.build_settings[<span class="string">'CLANG_MODULES_AUTOLINK'</span>] = <span class="string">'NO'</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这个是一个勾子<code>hook</code>，在pod安装完成前，允许更改配置或做些别的事件！</p>
<h3 id="3、总结">3、总结</h3><p>这个问题，2次进坑，解决的问题本质就是一个，只是自己开始不相信！所以，遇到问题，还是要学会找到原因，只是通往答案的道路各不相同，只要不放弃，不抛弃，一定能为大家提供优质的服务！相信科技的力量！不然，只能让别人升级环境来适配你，这可不好哦！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a></li>
<li><a href="https://www.youzanyun.com/support/faq/3476?qa_id=9026" target="_blank" rel="external">SDK引入_常见问题 - 有赞云</a></li>
<li><a href="https://developer.apple.com/documentation/coreservices" target="_blank" rel="external">Core Services | Apple Developer Documentation</a></li>
<li><a href="https://stackoverflow.com/questions/22736056/error-when-trying-to-link-fat-binary-with-64-bit-simulator-target/53280331#53280331" target="_blank" rel="external">ios - Error when trying to link fat binary with 64-bit simulator target - Stack Overflow</a></li>
<li><a href="https://github.com/facebook/react-native/issues/21768" target="_blank" rel="external">ld: framework not found CoreServices for architecture x86_64 · Issue #21768 · facebook/react-native</a></li>
<li><a href="https://blog.appsee.com/xcodes-new-link-frameworks-automatically-how-to-fix-framework-not-found-metal-for-architecture-armv7/" target="_blank" rel="external">XCode’s New “Link Frameworks Automatically” &amp; How to Fix “framework not found Metal for architecture armv7”</a></li>
<li><a href="https://github.com/CocoaPods/cocoapods-packager/issues/48" target="_blank" rel="external">Add option to set “LINK FRAMEWORKS AUTOMATICALLY” to NO · Issue #48 · CocoaPods/cocoapods-packager</a></li>
<li><a href="https://guides.cocoapods.org/syntax/podfile.html#post_install" target="_blank" rel="external">CocoaPods Guides - Podfile Syntax Reference <span>v1.7.0.beta.2</span></a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>前段时间，升级了 Xcode10 后，提供给第三方用户的SDK，客户反馈说报错：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld: framework not found CoreServices <span class="keyword">for</span> architecture armv7</span><br></pre></td></tr></table></figure>
<p><strong>为什么 iOS SDK 拖入项目中就报错”ld: framework not found IOSurface for architecture arm64”？</strong></p>
<p>其实，翻开之前写的文章已经说过解决方案： <a href="https://ihtcboy.com/2017/10/27/2017_10_Xcode8%E6%8A%A5%E9%94%99%EF%BC%9AFramework_not_found_IOSurface_for_architecture_arm64%E6%88%96%E8%80%85Framework_not_found_FileProvider_for_architecture_x86_64:arm64/">Xcode8报错：”Framework not found IOSurface for architecture arm64”或者 “Framework not found FileProvider for architecture x86_64/arm64”. | iHTCboy’s blog</a></p>
<p>当时，反复确认后，网上有些第三方的SDK提供商说升级 Xcode10 吧！！！慌张~ 你们就只能让别人升级啦！解决不了，重启，升级！但，NO，最后发现是新项目是使用 <code>CocoaPods</code> 导致的坑，一个地方进2次，还真不简单！</p>]]>
    
    </summary>
    
      <category term="CoreServices" scheme="https://iHTCboy.com/tags/CoreServices/"/>
    
      <category term="Framework not found" scheme="https://iHTCboy.com/tags/Framework-not-found/"/>
    
      <category term="IOSurface" scheme="https://iHTCboy.com/tags/IOSurface/"/>
    
      <category term="Xcode10" scheme="https://iHTCboy.com/tags/Xcode10/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧7 - git提高效率的一些用法]]></title>
    <link href="https://iHTCboy.com/2019/03/14/2019-03-14_shell%E6%8A%80%E5%B7%A77-git%E6%9B%B4%E6%96%B0%E7%AD%89%E6%95%88%E7%8E%87%E8%84%9A%E6%9C%AC/"/>
    <id>https://iHTCboy.com/2019/03/14/2019-03-14_shell技巧7-git更新等效率脚本/</id>
    <published>2019-03-14T14:20:16.000Z</published>
    <updated>2019-03-17T15:22:54.037Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>经过前面那么多节的脚本使用技巧，相信大家一定已经掌握了基本的shell脚本编写，但是可能还是没有想明白，或者想到说平时工作生活中，有什么作用？今天，写写我自己在工作中，一些提高效率的脚本一起来看看吧~</p>
<a id="more"></a>
<h3 id="2、git_pull_更新">2、git pull 更新</h3><p>工作中，我们都知道，更新工作代码库：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> pull</span><br></pre></td></tr></table></figure></p>
<p>但是，有没有想过，如果你有10个库呢？是不是要命令行切换目录输出10次？或者你有Sourcetree，在界面也要切换10次吧？</p>
<p>所以，有没有想过，如果用脚本，能不能一次的把全部的库，都<code>git pull</code>下来？想到这样，相信大家已经知道，肯定可以啊！</p>
<p>直接上代码（具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a>）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># 定义用到的变量</span></span><br><span class="line">directory_path=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义读取输入字符的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getDirectoryPath</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter directory path: "</span> directory_path</span><br><span class="line">	<span class="comment"># 如果为空值，从新监听</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"directory_path"</span>; <span class="keyword">then</span></span><br><span class="line">		getDirectoryPath</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">read</span>_dir <span class="variable">$&#123;directory_path&#125;</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">read_dir</span></span>()&#123;</span><br><span class="line">	<span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$1</span>`       <span class="comment">#注意此处这是两个反引号，表示运行系统命令</span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> ]  <span class="comment">#注意此处之间一定要加上空格，否则会报错</span></span><br><span class="line">		<span class="keyword">then</span></span><br><span class="line">			<span class="comment">#在此处处理目录即可</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"-----------------------------\n"</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"check directory:《"</span> <span class="variable">$file</span> <span class="string">"》"</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"message:"</span></span><br><span class="line">			<span class="built_in">cd</span> <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span></span><br><span class="line">			git pull</span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"\n"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取第一个参数</span></span><br><span class="line">getDirectoryPath</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n------- finish processing -------"</span></span><br></pre></td></tr></table></figure>
<p>使用方法非常简单，执行脚本，输入在你所有库的根目录，然后脚本会循环所有目录<code>git pull</code>。当然，如果是公司电脑，那你可以用别名<code>alias</code>定义一个通用命令来执行，明天早上上班，执行一下，效率满满的！！！</p>
<h3 id="3、git_clone_下载">3、git clone 下载</h3><p>有时候，你换了新电脑，或者像我不小心，电脑挂了，重装系统，新的电脑，需要一个一个库的拉取下来，这时候，你也可以写一个脚本来统一执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iHTCboy/OneMindMap.git;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iHTCboy/NotesEveryDay.git;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iHTCboy/macOSConfig.git;</span><br></pre></td></tr></table></figure>
<p> 编写自己的库或公司库脚本，放到git仓库，是不是又学到一招！</p>
<h3 id="4、git_commit">4、git commit</h3><p>这个大家应该想到了吧？可以放到 <code>.bash_profile</code> 或 <code>.zshrc</code> 当成一个别名使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">glazy</span></span>() &#123;</span><br><span class="line">    git add .</span><br><span class="line">    git commit <span class="operator">-a</span> -m <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    git push</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方法很简单：<br><code>glazy &#39;XXXX&#39;</code> 就可以一步到位：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  iShell git:(master) ✗ glazy <span class="string">'shell技巧6 - iOS最大构建版本文件大小'</span></span><br><span class="line">[master <span class="number">15</span>a0b97] shell技巧<span class="number">6</span> - iOS最大构建版本文件大小</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">72</span> insertions(+)</span><br><span class="line"> create mode <span class="number">100644</span> Shell/calculate_Mach-<span class="number">0</span>__Text-Size .sh</span><br><span class="line">Counting objects: <span class="number">4</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">4</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), <span class="number">1.52</span> KiB | <span class="number">1.52</span> MiB/s, done.</span><br><span class="line">Total <span class="number">4</span> (delta <span class="number">2</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving deltas: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), completed with <span class="number">2</span> <span class="built_in">local</span> objects.</span><br><span class="line">To https://github.com/iHTCboy/iShell.git</span><br><span class="line">   <span class="number">6</span>f39dfe..<span class="number">15</span>a0b97  master -&gt; master</span><br></pre></td></tr></table></figure>
<h3 id="5、备份文件">5、备份文件</h3><p>为了避免数据掉失，我会经常定时备份博客的文档，如果需要人工手动，重复，反复，一个一个，切换目录，其实，写一个脚本就搞定：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">blog_dir=<span class="string">"/Users/HTC/Documents/Personal/P-Project/iHTCBlog/source/"</span></span><br><span class="line">backup_dir=<span class="string">"/Users/HTC/Documents/Personal/P-Project/macOSConfig/iHTCboy_Blog/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy files</span></span><br><span class="line">cp -r <span class="string">"<span class="variable">$&#123;blog_dir&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;backup_dir&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete drafts file</span></span><br><span class="line">rm -rf <span class="string">"<span class="variable">$&#123;backup_dir&#125;</span>/_drafts"</span></span><br></pre></td></tr></table></figure>
<p>当然，为了方便，不可能每次都打开终端才执行，如果Mac或Linux，可以用 Unix 可执行文件，直接点击，会自动打开终端执行。</p>
<p>比如脚本叫 <code>backup_sh.sh</code> 改为 <code>backup_sh</code> 名字，然后在终端为文件添加可执行权限：<br><code>chmod +x /Users/HTC/Desktop/backup_sh</code> </p>
<p>以后，直接双击<code>backup_sh</code>这个文件，就会自动在终端执行，备份完成！</p>
<p>注：其它方法可参考 <a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a> 第5小节。</p>
<h3 id="6、总结">6、总结</h3><p>关于shell脚本就讲到这里，更多技巧和提交效率的方式，希望大家能举一反三，这都是授鱼不如授渔！ </p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>经过前面那么多节的脚本使用技巧，相信大家一定已经掌握了基本的shell脚本编写，但是可能还是没有想明白，或者想到说平时工作生活中，有什么作用？今天，写写我自己在工作中，一些提高效率的脚本一起来看看吧~</p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="效率" scheme="https://iHTCboy.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="脚本" scheme="https://iHTCboy.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧6 - iOS最大构建版本文件大小]]></title>
    <link href="https://iHTCboy.com/2019/03/13/2019-03-13_shell%E6%8A%80%E5%B7%A76-iOS%E6%9C%80%E5%A4%A7%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/"/>
    <id>https://iHTCboy.com/2019/03/13/2019-03-13_shell技巧6-iOS最大构建版本文件大小/</id>
    <published>2019-03-13T13:20:16.000Z</published>
    <updated>2019-03-17T14:36:10.952Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>在上传提交ipa文件成功后，发现AppStoreConnect后台一直不显示构建版本，最后邮箱收到：</p>
<blockquote>
<p>App Store Connect</p>
<p>Dear Developer,</p>
<p>We identified one or more issues with a recent delivery for your app, “XXX”. Please correct the following issues, then upload again.<br>Invalid Executable Size - The size of your app’s executable file ‘XXX.app/XXX’ is 90374144 bytes, which exceeds the maximum allowed size of 80 MB.<br>Best regards,<br>The App Store Team</p>
</blockquote>
<a id="more"></a>
<h3 id="2、原因">2、原因</h3><p><code>Executable Size</code> ？<code>executable file</code> ？这2个是什么东西？Executable 是可执行的意思，所以就是可执行的大小、可执行的文件。<br>每个 Mach-O 可执行文件（例如，app_name.app/app_name）不得超过这些正文段（<strong>TEXT）文件大小的上限。具体 Mach-O 和 </strong>TEXT 是什么，大家可以看看：<a href="https://objccn.io/issue-6-3/" target="_blank" rel="external">ObjC 中国 - Mach-O 可执行文件</a>。</p>
<p>那从苹果文档<a href="https://help.apple.com/app-store-connect/#/dev611e0a21f" target="_blank" rel="external">最大构建版本文件大小 - App Store Connect 帮助</a>，可以得到如下：</p>
<table>
<thead>
<tr>
<th>OS 版本</th>
<th>最大可执行文件大小</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>iOS 9.0 或更高版本<br>Apple TVOS 9.0 或更高版本</td>
<td>500 MB</td>
<td>针对二进制文件中所有“__TEXT”部分的总和。</td>
</tr>
<tr>
<td>iOS 7.X 至 iOS 8.X</td>
<td>60 MB</td>
<td>针对每个 Architecture Slice（架构片段）中的“__TEXT”部分。</td>
</tr>
<tr>
<td>低于 iOS 7.0</td>
<td>80 MB</td>
<td>针对二进制文件中所有“__TEXT”部分的总和。</td>
</tr>
</tbody>
</table>
<ul>
<li>注：<strong>Architecture Slice</strong>（架构片段）是针对特定架构的胖二进制布局文件的一部分。例如，一个胖二进制文件可能会包含针对 32 位和 64 位架构的片段。</li>
</ul>
<p>综上，<code>executable file &#39;XXX.app/XXX&#39; is 90374144 bytes, which exceeds the maximum allowed size of 80 MB.</code> 就是说，当前可执行文件“__TEXT”部分的总和为 <code>90374144 bytes</code>，超过了 <code>80 MB</code>。</p>
<ul>
<li><p>是什么？<br>当前可执行文件“__TEXT”部分的总和大小超过80MB！</p>
</li>
<li><p>为什么？<br>Mach-O可执行文件中包含<code>__TEXT</code>区域，<code>__TEXT</code>包含了被执行的代码，即编译所得到的机器码。所以，也就是我们的应用中代码量或引用的第三方库过大导致。</p>
</li>
<li><p>怎么办？<br>因为苹果限制，所以，</p>
<ul>
<li>第1步是减少第三方库或删除无用的代码。</li>
<li>第2步是要找到什么计算<code>__TEXT</code>的大小？ </li>
</ul>
</li>
</ul>
<h3 id="3、__TEXT大小计算">3、<code>__TEXT</code>大小计算</h3><p>怎么计算 <code>__TEXT</code>的 <code>size</code> ？ 在终端用 <code>size XXX</code>就可以打印当前应用的二进制的<code>__TEXT</code>字段大小：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat </span><br><span class="line">__TEXT	__DATA	__OBJC	others	dec	hex</span><br><span class="line"><span class="number">53329920</span>	<span class="number">7929856</span>	<span class="number">0</span>	<span class="number">3162112</span>	<span class="number">64421888</span>	<span class="number">3</span>d70000	/Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat (<span class="keyword">for</span> architecture armv7)</span><br><span class="line"><span class="number">57475072</span>	<span class="number">13647872</span>	<span class="number">0</span>	<span class="number">4298047488</span>	<span class="number">4369170432</span>	<span class="number">1046</span>c4000	/Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat (<span class="keyword">for</span> architecture arm64)</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>
<p>注：如果应用支持<code>armv7</code>、<code>arm64</code>多种架构，就会显示多个，不会有<code>i386</code>、<code>x86_64</code>是因为dis正式包已经移除模拟器架构。像现在新的应用，只支持<code>arm64</code>就不会显示具体架构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/Weixin/Payload/WeChat.app/WeChat</span><br><span class="line">__TEXT	__DATA	__OBJC	others	dec	hex</span><br><span class="line"><span class="number">65355776</span>	<span class="number">15040512</span>	<span class="number">0</span>	<span class="number">4298145792</span>	<span class="number">4378542080</span>	<span class="number">104</span>fb4000</span><br></pre></td></tr></table></figure>
<p>那么知道了计算公式，根据上面苹果给出的文档要求，需要做应用最低支持系统版本判断计算方式：</p>
<ol>
<li>iOS 7.X 至 iOS 8.X 每个架构最大为 60 MB</li>
<li>iOS 9.0 或更高版本    500 MB    针对二进制文件中所有“__TEXT”部分的总和。</li>
<li>低于 iOS 7.0         80 MB     针对二进制文件中所有“__TEXT”部分的总和。</li>
</ol>
<p>根据这个要求，会出现如下2种计算方式：</p>
<ul>
<li>计算所有“__TEXT”部分的总和</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size app | awk <span class="string">'&#123;print $1&#125;'</span> | grep -E <span class="string">'[0-9]'</span> | awk <span class="string">'&#123;sum += $1&#125;; END &#123;print sum&#125;'</span></span><br></pre></td></tr></table></figure>
<p>运行示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat | awk <span class="string">'&#123;print $1&#125;'</span> | grep -E <span class="string">'[0-9]'</span> | awk <span class="string">'&#123;sum += $1&#125;; END &#123;print sum&#125;'</span></span><br><span class="line"><span class="number">110804992</span></span><br></pre></td></tr></table></figure>
<p><strong>脚本说明</strong>：首先是用<code>size</code> 列出全部的架构的<code>__TEXT</code>大小，然后用 <code>awk</code> （<a href="https://opengers.github.io/linux/awk-format-print/" target="_blank" rel="external">awk文本处理实战 | opengers</a>）过滤出第一列的内容输出，然后用<code>grep</code> -E（扩展的正则表达式）过滤数字的行，最后是计算各行数字相加的和输出。</p>
<ul>
<li>分别列出各架构的大小</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size app | awk <span class="string">'&#123;print $1 "," $10&#125;'</span> | tail -n +<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p> 运行示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ size /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat | awk <span class="string">'&#123;print $1 "," $10&#125;'</span> | tail -n +<span class="number">2</span></span><br><span class="line"><span class="number">53329920</span>,armv7)</span><br><span class="line"><span class="number">57475072</span>,arm64)</span><br></pre></td></tr></table></figure>
<p><strong>脚本说明</strong>：首先是用<code>size</code> 列出全部的架构的<code>__TEXT</code>（第1列）大小和架构名（第10列），之前用分号<code>,</code>间隔，然后输出，然后用 <code>tail</code> 输出从第2行开始的内容。</p>
<p>以上就是本文的核心内容，具体shell的技巧就不深讲啦，大家有兴趣可以搜索，<code>awk</code>、<code>tail</code> 命令了解更多，<a href="https://opengers.github.io/linux/awk-format-print/" target="_blank" rel="external">awk文本处理实战 | opengers</a>、<a href="http://www.runoob.com/linux/linux-comm-tail.html" target="_blank" rel="external">Linux tail 命令 | 菜鸟教程</a></p>
<h3 id="4、shell_编程实现">4、shell 编程实现</h3><p>需要注意一下，上面输出的是bytes，而macOS是用1000来转换成MB。</p>
<p><a href="https://zh.wikipedia.org/wiki/Mebibyte" target="_blank" rel="external">Mebibyte - 维基百科，自由的百科全书</a>：</p>
<blockquote>
<p>所有版本的Windows系统都会将一个2^20 bytes的文件显示为“1.00MB”，而10^6 bytes的文件显示为976kB。在Mac OS X 10.6之后将文件和磁盘大小都用Megabytes来表示，即将10^6 bytes的文件显示为1MB。</p>
</blockquote>
<p>最终效果示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">================================================&#10; Enter Mach-O executable file path: /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat&#10;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#10;1&#10;executable file size: 110.805 MB&#10;&#11093;&#65039; [Success] 110.805 MB&#65292; &#31526;&#21512;&#33529;&#26524; iOS9 &#23567;&#20110; 500 MB &#30340;&#35201;&#27714;&#65281;&#10;&#10;================================================&#10; Enter Mach-O executable file path: /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat&#10;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#10;2&#10;executable file size: 110.805 MB&#10;&#10060; [Error] 110.805 MB&#65292; &#19981;&#31526;&#21512;&#33529;&#26524; iOS7 &#23567;&#20110; 80 MB &#30340;&#35201;&#27714;&#65281;&#10;&#10;================================================&#10; Enter Mach-O executable file path: /Users/HTC/Downloads/WeChat/Payload/WeChat.app/WeChat&#10;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#10;3&#10;armv7 executable file size: 53.3299 MB&#10;&#11093;&#65039; [Success] armv7 size: 53.3299 MB&#65292; &#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;&#10;arm64 executable file size: 57.4751 MB&#10;&#11093;&#65039; [Success] arm64 size: 57.4751 MB&#65292; &#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;</span><br></pre></td></tr></table></figure>
<p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<p><code>calculate_Mach-0__Text-Size .sh</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;ExecutableFilePath=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;getExecutableFilePath() &#123;&#10;&#9;# &#36755;&#20986;&#25442;&#34892;&#65292;&#26041;&#20415;&#26597;&#30475;&#10;&#9;echo &#34;================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34; Enter Mach-O executable file path: &#34; ExecutableFilePath&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#10;&#9;if test -z &#34;$ExecutableFilePath&#34;; then&#10;&#9;&#9;echo &#34;Error! Should enter file path &#34;&#10;&#9;&#9;getExecutableFilePath&#10;&#9;fi&#10;&#125;&#10;&#10;getExecutableFilePath&#10;&#10;echo &#34;Place enter the number select minimum supported system version for the app? [ 1:gt iOS9 2:lt iOS7 3:iOS7.X~8.X] &#34;&#10;&#10;read number&#10;while([[ $number != 1 ]] &#38;&#38; [[ $number != 2 ]] &#38;&#38; [[ $number != 3 ]])&#10;do&#10;echo &#34;Error! Should enter 1 or 2 or 3&#34;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;read number&#10;done&#10;&#10;&#10;if [ $number != 3 ];then&#10;&#9;app_size=$(echo `size $&#123;ExecutableFilePath&#125; | awk &#39;&#123;print $1&#125;&#39; | grep -E &#39;[0-9]&#39; | awk &#39;&#123;sum += $1&#125;; END &#123;print sum/1000/1000&#125;&#39;`)&#10;&#9;echo &#39;executable file size:&#39; $&#123;app_size&#125; &#39;MB&#39;&#10;&#9;if [ $number == 1 ];then&#10;&#9;&#9;#iOS 9.0 &#25110;&#26356;&#39640;&#29256;&#26412;    500 MB    &#38024;&#23545;&#20108;&#36827;&#21046;&#25991;&#20214;&#20013;&#25152;&#26377;&#8220;__TEXT&#8221;&#37096;&#20998;&#30340;&#24635;&#21644;&#12290;&#10;&#9;&#9;#&#22240;&#20026;bc&#21644;awk&#37117;&#25903;&#25345;&#28014;&#28857;&#25968;&#65292;&#21487;&#20197;&#20351;&#29992;bc&#36827;&#34892;&#22788;&#29702;&#65306;&#10;&#9;&#9;if [ `echo &#34;$app_size &#62; 500&#34; | bc` -eq 1 ];then&#10;&#9;&#9;&#9;echo &#39;&#10060; [Error]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#19981;&#31526;&#21512;&#33529;&#26524; iOS9 &#23567;&#20110; 500 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;else&#10;&#9;&#9;&#9;echo &#39;&#11093;&#65039; [Success]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#31526;&#21512;&#33529;&#26524; iOS9 &#23567;&#20110; 500 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;fi&#10;&#9;else&#10;&#9;&#9;#&#20302;&#20110; iOS 7.0         80 MB     &#38024;&#23545;&#20108;&#36827;&#21046;&#25991;&#20214;&#20013;&#25152;&#26377;&#8220;__TEXT&#8221;&#37096;&#20998;&#30340;&#24635;&#21644;&#12290;&#10;&#9;&#9;if [ `echo &#34;$app_size &#62; 80&#34; | bc` -eq 1 ];then&#10;&#9;&#9;&#9;echo &#39;&#10060; [Error]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#19981;&#31526;&#21512;&#33529;&#26524; iOS7 &#23567;&#20110; 80 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;else&#10;&#9;&#9;&#9;echo &#39;&#11093;&#65039; [Success]&#39; $&#123;app_size&#125; &#39;MB&#65292;&#39; &#39;&#31526;&#21512;&#33529;&#26524; iOS7 &#23567;&#20110; 80 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;fi&#10;&#9;fi&#10;else&#10;&#9;app_size=$(echo `size &#34;$ExecutableFilePath&#34; | awk &#39;&#123;print $1 &#34;,&#34; $10&#125;&#39; | tail -n +2`)&#10;&#9;# iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB&#10;&#9;# echo $app_size &#10;&#9;# 53329920,armv7) 57475072,arm64)&#10;&#9;arch_arr=(`echo $app_size | tr &#39; &#39; &#39; &#39;`) &#10;&#9;for each in $&#123;arch_arr[@]&#125;&#10;&#9;do&#10;&#9;&#9;size=`echo $each | awk -F&#39;,&#39; &#39;&#123;print $1&#125;&#39; | awk &#39;&#123;sum += $1&#125;; END &#123;print sum/1000/1000&#125;&#39;`&#10;&#9;&#9;arch=`echo $each | awk -F&#39;,&#39; &#39;&#123;print $2&#125;&#39;`&#10;&#9;&#9;# echo $&#123;arch/%)/&#125;  # &#22914;&#26524;&#23383;&#31526;&#20018;arch&#20197;)&#32467;&#23614;&#65292;&#21017;&#29992;&#31354;&#26367;&#25442;&#23427;&#10;&#9;&#9;echo $&#123;arch/%)/&#125; &#39;executable file size:&#39; $&#123;size&#125; &#39;MB&#39;&#10;&#9;&#9;if [ `echo &#34;$size &#62; 60&#34; | bc` -eq 1 ];then&#10;&#9;&#9;&#9;echo &#39;&#10060; [Error]&#39; $&#123;arch/%)/&#125; &#39;size:&#39; $&#123;size&#125; &#39;MB&#65292;&#39; &#39;&#19981;&#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;else&#10;&#9;&#9;&#9;echo &#39;&#11093;&#65039; [Success]&#39; $&#123;arch/%)/&#125; &#39;size:&#39; $&#123;size&#125; &#39;MB&#65292;&#39; &#39;&#31526;&#21512;&#33529;&#26524; iOS 7.X &#33267; iOS 8.X &#27599;&#20010;&#26550;&#26500;&#26368;&#22823;&#20026; 60 MB &#30340;&#35201;&#27714;&#65281;&#39;&#10;&#9;&#9;fi&#10;&#9;done&#10;fi</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>本次脚本又顺利提高了效率！本文用到非常多的脚本命令，大家不必说记住，主要是知道用来做什么的，或者有需求时要搜索也可以，通过本次脚本编写，大家应该能发现shell脚本的强大而洁的语法，要学到以用，还需要多实践！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://help.apple.com/app-store-connect/#/dev611e0a21f" target="_blank" rel="external">最大构建版本文件大小 - App Store Connect 帮助</a></li>
<li><a href="https://blog.csdn.net/qq_19411159/article/details/75045114" target="_blank" rel="external">ipa上传app store的大小限制 - 逸轻紫的博客 - CSDN博客</a></li>
<li><a href="https://forums.developer.apple.com/thread/74705" target="_blank" rel="external">How can i reduce __TEXT segment size? |Apple Developer Forums</a></li>
<li><a href="https://stackoverflow.com/questions/43036810/how-can-i-reduce-text-segment-size-in-ios-app" target="_blank" rel="external">xcode - How can i reduce __TEXT segment size in iOS App? - Stack Overflow</a></li>
<li><a href="https://www.desgard.com/iosre-1/" target="_blank" rel="external">Mach-O 文件格式探索 · 瓜地</a></li>
<li><a href="https://stackoverflow.com/questions/22995744/how-to-measure-the-code-i-e-data-text-size-of-a-static-library/23301371#23301371" target="_blank" rel="external">ios - How to measure the code (i.e. data + text) size of a static library? - Stack Overflow</a></li>
<li><a href="https://opengers.github.io/linux/awk-format-print/" target="_blank" rel="external">awk文本处理实战 | opengers</a></li>
<li><a href="http://www.runoob.com/linux/linux-comm-tail.html" target="_blank" rel="external">Linux tail 命令 | 菜鸟教程</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Mebibyte" target="_blank" rel="external">Mebibyte - 维基百科，自由的百科全书</a></li>
<li><a href="https://blog.csdn.net/wetest_tencent/article/details/52624137" target="_blank" rel="external">iOS预审总被拒？腾讯教你提升iOS审核通过率！ - wetest_tencent的博客 - CSDN博客</a></li>
<li><a href="https://www.cnblogs.com/breezey/p/6806385.html" target="_blank" rel="external">shell比较浮点数和整数 - breezey - 博客园</a></li>
<li><a href="https://blog.csdn.net/Jerry_1126/article/details/83930956" target="_blank" rel="external">Shell中将分隔符的字符串转为数组的几种方法 - 杰瑞的专栏 - CSDN博客</a></li>
<li><a href="https://blog.csdn.net/wojiuguowei/article/details/84402890" target="_blank" rel="external">shell 字符串转数组 数组转字典 - 波波诸葛伟 - CSDN博客</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>在上传提交ipa文件成功后，发现AppStoreConnect后台一直不显示构建版本，最后邮箱收到：</p>
<blockquote>
<p>App Store Connect</p>
<p>Dear Developer,</p>
<p>We identified one or more issues with a recent delivery for your app, “XXX”. Please correct the following issues, then upload again.<br>Invalid Executable Size - The size of your app’s executable file ‘XXX.app/XXX’ is 90374144 bytes, which exceeds the maximum allowed size of 80 MB.<br>Best regards,<br>The App Store Team</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Architecture" scheme="https://iHTCboy.com/tags/Architecture/"/>
    
      <category term="__TEXT" scheme="https://iHTCboy.com/tags/TEXT/"/>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="iOS" scheme="https://iHTCboy.com/tags/iOS/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《商业模式新生代（个人篇）》读书笔记]]></title>
    <link href="https://iHTCboy.com/2019/03/03/2019-03-03_%E3%80%8A%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3%EF%BC%88%E4%B8%AA%E4%BA%BA%E7%AF%87%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2019/03/03/2019-03-03_《商业模式新生代（个人篇）》读书笔记/</id>
    <published>2019-03-03T14:49:16.000Z</published>
    <updated>2019-03-16T11:36:00.941Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>引用 推荐序：</p>
<blockquote>
<p>这世界越来越疯狂。对企业而言，顾客在变，供应商在变，竞争对手在变，企业在不停地变化。对于个人而言，环境在变，能力在变，兴趣在变，关系在变。这些变化多数都超越了大部分组织及个人的掌控范围。<br>因为无法改变整体大环境，组织及个人为了持续生存及发展，就必须不断评估及尝试改变自己的商业模式，有时甚至要创建新的模式。这是一个瞄准、射击、再瞄准的时代，我们需要适应快速变化的世界，以全新的思考方式来指导规划我们的人生。商业模式思维是适应快速变化世界的最佳系统思考方式。</p>
</blockquote>
<p>从上一篇 <a href="https://ihtcboy.com/2019/02/27/2019-02-27_《商业模式新生代》读书笔记/">《商业模式新生代》读书笔记</a> ，一直在理解商业模式，然而，对于企业，对于个人，模式从来都没有固定不变，所有东西在变化，而如果能抓住其中规律，那就能面对变化而不变？上一本书给了画布的9大构造块，其实已经给了相当于固定的规律，而能不能从这里面，找到属于自己不变，或者变化的，创意的，创新的世界，就是本书的愿景！</p>
<p>就像《摔跤吧！爸爸》里曾经的摔跤冠军辛格，女儿摔跤训练需要使用专业的护垫，去找体育局求赞助，结果被腐败官员拒绝。爸爸，因此难受，但是却被人一句话点醒，再专业的护垫依旧是垫子，为什么不能用普通的？因为一个问题想太久，可能被旁人一句话点醒，很多人都有这样的经历，关键是坚持想问题，不放弃，背后的原因是对信念的坚持。有时候，我也在想，腐败是现在，如果大家都一直，永远的，认为腐败，那么这个时代，后世界，也将如此。但只要有人保持，愿意相信，我也相信，世界也可以变得美好！</p>
<a id="more"></a>
<h3 id="思维导图">思维导图</h3><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-book-《商业模式新生代（个人篇）》思维导图.png" alt="20190303-book-《商业模式新生代（个人篇）》思维导图.png"></p>
<h3 id="画布">画布</h3><blockquote>
<p>学习如何利用关键工具描述分析组织和个人商业模式</p>
</blockquote>
<h4 id="商业模式思维：适应快速变化的世界">商业模式思维：适应快速变化的世界</h4><ul>
<li>理解和描述你的商业模式很重要</li>
<li>重新进行思考，对职业道路加以规划、积累和发展</li>
<li>独特的竞争优势</li>
</ul>
<h4 id="商业模式画布">商业模式画布</h4><blockquote>
<p>商业模式（business model） 指的是一个组织在财务上维持自给自足的方式，简而言之就是企业维持生存的方式。</p>
</blockquote>
<ul>
<li>商业模式<ul>
<li>（1）我们的客户是谁？</li>
<li>（2）客户需要我们完成哪些工作？</li>
</ul>
</li>
</ul>
<h4 id="商业模式的九大组成模块">商业模式的九大组成模块</h4><ul>
<li>客户群体<blockquote>
<p>客户群体是组织机构赖以生存的基础，没有付费客户，任何组织机构都无法长期生存。</p>
</blockquote>
</li>
</ul>
<ul>
<li>不同的客户群体需要不同的价值服务、渠道通路和客户关系。</li>
<li>客户群体有付费和免费之别。</li>
<li>同样是付费客户群体，对组织机构的收入贡献可能有天壤之别。</li>
</ul>
<ul>
<li>价值服务<blockquote>
<p>价值服务可以视为组织机构为客户群体提供的产品或服务利益。能否提供优质价值服务的能力是决定客户选择某个组织机构的重要原因。</p>
</blockquote>
</li>
</ul>
<ul>
<li>便利性</li>
<li>价格</li>
<li>设计</li>
<li>品牌或市场地位</li>
<li>成本削减</li>
<li>风险降低</li>
</ul>
<ul>
<li><p>渠道通路<br> 作用</p>
<ul>
<li>（1）创建对服务或产品的市场意识；</li>
<li>（2）帮助潜在客户评估产品或服务；</li>
<li>（3）促成客户采购；</li>
<li>（4）向客户交付价值；</li>
<li>（5）保证售后满意度。</li>
</ul>
</li>
<li><p>常见通路</p>
<ul>
<li>面谈或电话沟通；</li>
<li>现场或店内沟通；</li>
<li>实物交付；</li>
<li>电子交付（社交媒体、博客、电子邮件等）；</li>
<li>传统媒体交付（电视、广播、报纸等）。</li>
</ul>
</li>
<li><p>客户关系</p>
<blockquote>
<p>组织机构必须明确定义客户侧重的关系类型，是个性化、自动化还是自助式服务？是单次交易还是订购式服务？<br>组织机构还应当明确客户关系的基本目标，是为了吸引新客户、维持现有客户还是从现有客户群体中挖掘更多收入？</p>
</blockquote>
</li>
<li><p>收入来源<br>  前提:</p>
<ul>
<li>①弄清楚客户愿意为哪些价值服务付费；</li>
<li><p>②接受客户喜欢的支付方式。</p>
<p>分类:</p>
</li>
<li>①一次性收费；</li>
<li>②针对产品、服务、售后维修或支持等项目的连续性收费。</li>
</ul>
</li>
<li><p>核心资源</p>
<ul>
<li>人力资源</li>
<li>实体资产</li>
<li>知识资产</li>
<li>金融资产</li>
</ul>
</li>
<li><p>关键业务</p>
<blockquote>
<p>我们倾向于把组织机构的工作解释为任务，即关键业务 ，而非这些业务提供的价值 。不过，当客户在选择组织机构时，他们更感兴趣的是这些机构能提供哪些价值 ，而不是它们经营的业务本身。</p>
</blockquote>
<ul>
<li>制造</li>
<li>销售</li>
<li>支持</li>
</ul>
</li>
</ul>
<ul>
<li><p>重要合作</p>
<blockquote>
<p>重要合作指的是保证商业模式有效运行的人际关系。</p>
</blockquote>
</li>
<li><p>成本结构</p>
<blockquote>
<p>获得核心资源，实施关键业务，展开重要合作，这些都会让组织机构产生成本。</p>
</blockquote>
</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-商业模式的九大组成模块.jpg" alt="20190303-商业模式的九大组成模块.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-画布01.jpg" alt="20190303-画布01.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-画布02.jpg" alt="20190303-画布02.jpg"></p>
<h4 id="个人版商业模式画布">个人版商业模式画布</h4><h5 id="核心资源（我是谁，我拥有什么）">核心资源（我是谁，我拥有什么）</h5><ul>
<li><p>我是谁</p>
<ul>
<li>兴趣</li>
<li>技能</li>
<li>个性</li>
<li>价值观、智力水平、幽默感、教育程度、人生目的等</li>
</ul>
</li>
<li><p>我拥有什么</p>
<ul>
<li>知识</li>
<li>经验</li>
<li>人际关系</li>
<li>其他有形和无形的资源或资产</li>
</ul>
</li>
</ul>
<h5 id="关键业务（我要做什么）">关键业务（我要做什么）</h5><ul>
<li>日常工作中经常做的事情</li>
<li>列出你的工作任务</li>
</ul>
<h5 id="客户群体（我能帮助谁）">客户群体（我能帮助谁）</h5><ul>
<li>你的老板、上司以及其他向你支付报酬的人都在此列</li>
<li>是否在企业内部为他人服务？是否和同事密切合作？</li>
<li>谁依赖你的工作？谁会从你的工作中获益？</li>
</ul>
<h5 id="价值服务（我怎样帮助他人）">价值服务（我怎样帮助他人）</h5><ul>
<li>客户请我完成什么工作？</li>
<li>完成这些工作会给客户带来什么好处?</li>
<li>①只有确定价值服务才能宣传价值服务；</li>
<li>②只有宣传价值服务才能销售价值服务；</li>
<li>③只有销售价值服务才能赢得回报。</li>
</ul>
<h5 id="渠道通路（怎样宣传自己和交付服务）">渠道通路（怎样宣传自己和交付服务）</h5><ul>
<li>（1）潜在客户怎样才能知道你能帮助他们？</li>
<li>（2）潜在客户怎样才能决定是否购买你的产品或服务？</li>
<li>（3）潜在客户怎样实现购买？</li>
<li>（4）你怎样交付客户购买的产品或服务？</li>
<li>（5）你怎样保证满意的售后？</li>
</ul>
<h5 id="客户关系（怎样和对方打交道）">客户关系（怎样和对方打交道）</h5><ul>
<li>你和客户群体是怎样打交道的呢？</li>
<li>你喜欢面对面的直接沟通还是邮件书信之类的间接联系？</li>
<li>你们之间的合作关系是一锤子买卖还是持续性服务？</li>
<li>你关注的目标是扩大客户数量（拓展）还是满足现有客户的需求（维持）？</li>
</ul>
<h5 id="重要合作（谁可以帮我）">重要合作（谁可以帮我）</h5><ul>
<li>支持你的工作，帮助你顺利完成任务的人</li>
<li>提供行为动机、良好建议和成长机会。</li>
<li>提供完成某些任务所需的其他资源。包括工作中的同事和导师、职业圈内的成员、家人朋友和专业顾问</li>
</ul>
<h5 id="收入来源（我能得到什么）">收入来源（我能得到什么）</h5><ul>
<li>如工资、合同费或专业服务费、股票期权、版税以及其他现金收入。</li>
<li>收益内容，如健康保险、养老金、学费补助等。</li>
<li>还可以加入一些“软”收益，如满足感、成就感和社会贡献等</li>
</ul>
<h5 id="成本结构（我要付出什么）">成本结构（我要付出什么）</h5><ul>
<li>成本指的是你在工作中的付出，包括时间、精力和金钱。</li>
<li>无法返还的硬成本。培训费、交通费或社交费；服装费、水电费用。</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-个人版商业模式画布.jpg" alt="20190303-个人版商业模式画布.jpg"></p>
<h3 id="思考">思考</h3><blockquote>
<p>反思人生方向，协调个人期望和职业发展</p>
</blockquote>
<h4 id="我是谁">我是谁</h4><blockquote>
<p>“我们每个人的内心都深藏一个渴望，一个随着年华老去逐渐变成悲伤的渴望。我们每个人的渴望都与众不同，因为它正是长久以来我们希望把自己塑造成的模样。只有当我们做到听从内心的声音时，我们的人生才会充满意义和价值。”<br>——乔治·金德（George Kinder）</p>
</blockquote>
<h5 id="认识自我">认识自我</h5><ul>
<li>克里斯修改个人商业模式的过程<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-克里斯修改个人商业模式的过程.jpg" alt="20190303-克里斯修改个人商业模式的过程.jpg"></li>
</ul>
<h5 id="工作之外的生活">工作之外的生活</h5><ul>
<li>生活之轮<ul>
<li>保健健身</li>
<li>职业发展</li>
<li>财富金钱</li>
<li>个人成长</li>
<li>娱乐游戏</li>
<li>情感生活</li>
<li>亲戚朋友</li>
<li>创意表达</li>
<li>家居环境</li>
<li>生活方式</li>
</ul>
</li>
</ul>
<ul>
<li>生活之轮<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-生活之轮.jpg" alt="20190303-生活之轮.jpg"></li>
</ul>
<h5 id="回答“我是谁”">回答“我是谁”</h5><h5 id="寻找失去的兴趣">寻找失去的兴趣</h5><h5 id="多重角色">多重角色</h5><h5 id="多重画布">多重画布</h5><ul>
<li>克里斯蒂娜的个人商业模式 — 我是谁<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-克里斯蒂娜的个人商业模式-我是谁.jpg" alt="20190303-克里斯蒂娜的个人商业模式-我是谁.jpg"></li>
</ul>
<h5 id="生命线探索">生命线探索</h5><ul>
<li>第一步：绘制生命线高低潮</li>
<li>第二步：对事件进行说明</li>
<li>第三步：确定兴趣</li>
<li>第四步：描述技能</li>
<li>第五步：“十大”和“五爱”</li>
<li>第六步：明确能力和期望</li>
</ul>
<ul>
<li>生命线探索—职业“蜜罐区”<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-生命线探索---职业“蜜罐区”.jpg" alt="20190303-生命线探索---职业“蜜罐区”.jpg"></li>
</ul>
<h5 id="个性与环境">个性与环境</h5><h6 id="霍兰德的六种个性倾向">霍兰德的六种个性倾向</h6><ul>
<li><p>A　艺术型</p>
<blockquote>
<p>这种倾向喜欢利用有形或形材料创作艺术作品或产品，注重艺术、语言和音乐能力，应避免结构化活动或传统式职业。</p>
</blockquote>
</li>
<li><p>S　社交型</p>
<blockquote>
<p>这种倾向喜欢和他人合作以告知、开发、协助或消除问题，注重沟通和教育能力，应避免现实型职业或活动。</p>
</blockquote>
</li>
<li><p>I　学者型</p>
<blockquote>
<p>这种倾向喜欢调查研究自然、生物或文化现象，注重科研和数学能力，应避免事业型职业或活动。</p>
</blockquote>
</li>
<li><p>E　事业型</p>
<blockquote>
<p>这种倾向喜欢影响或领导他人以实现组织目标或经济利益，注重领导和说服能力，应避免学者型职业或活动。</p>
</blockquote>
</li>
<li><p>C　传统型</p>
<blockquote>
<p>这种倾向喜欢组织或处理结构化数据，注重文秘和计算能力，应避免模棱两可的、随意的、非结构化职业或活动。</p>
</blockquote>
</li>
<li><p>R　现实型</p>
<blockquote>
<p>这种倾向喜欢利用工具、机器或动物进行户外工作，注重机械和运动能力，应避免社交型职业或活动。</p>
</blockquote>
</li>
</ul>
<ul>
<li>霍兰德的六种个性倾向<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-霍兰德的六种个性倾向.jpg" alt="20190303-霍兰德的六种个性倾向.jpg"></li>
</ul>
<h5 id="确定你的个性倾向">确定你的个性倾向</h5><blockquote>
<p>思维抽象、擅长学术、易于接受、表达准确、事业感强、注重行动、适应性强、喜欢冒险、感情深厚、胆小怕事、进取心强、爱发牢骚、超然度外、野心勃勃、开心喜乐、善于分析、爱发脾气、讨人嫌弃、焦虑不安、善于感恩、担心忧虑、善于表达、窘迫惭愧、固执武断、精明机敏、爱摆架子、胆怯害羞、惹人讨厌、气量宽宏、商业派头、冷静镇定、无忧无虑、谨小慎微、有同情心、小心认真、三心二意、有号召力、容易上当、缺乏热情、善挖商机、效忠尽责、能力突出、有竞争力、非常自信、容易困惑、保守守旧、表里如一、容易满足、反应冷淡、善于合作、勇敢无畏、疯狂狂热、富有创意、值得信任、好奇心强、关注客户、大胆莽撞、坚决果断、容易击败、恭敬顺从、目中无人、深思熟虑、非常可靠、爱依赖人、情绪低落、注重细节、意志坚定、勤勉用功、圆滑世故、容易失落、自律性强、小心谨慎、趾高气扬、惊慌不安、条理性差、控制欲强、脚踏实地、精力充沛、悠闲自在、效率性高、影响深刻、感情用事、理解他人、精力旺盛、事业心强、满腔热情、与众不同、令人兴奋、自私自利、经验丰富、专家里手、立场坚定、态度灵活、做事专注、愚不可及、宽容大度、坦诚直率、待人友好、易受挫折、爱找乐子、慷慨大方、温文尔雅、阴郁沮丧、讨人喜欢、做事稳重、戒备心强、快乐开心、爱帮助人、无助无靠、充满敌意、易受羞辱、幽默风趣、歇斯底里、理想主义、想象丰富、缺乏耐心、容易冲动、优柔寡断、独立自主、漠不关心、个人主义、勤劳刻苦、影响力强、积极主动、善于创新、见解深刻、理智理性、善于内省、嫉妒心强、愉悦满足、目光敏锐、善解人意、知识渊博、胸无大志、轻率大意、知书达理、活泼好动、逻辑分明、迷失自我、充满爱心、忠心耿耿、就事论事、成熟稳重、井然有序、温和适中、爱惹麻烦、谦虚谨慎、动机强烈、客观公正、完全开放、一丝不苟、讲究条理、友好开朗、杰出卓越、过于敏感、惊弓之鸟、耐心细致、发火易怒、明察秋毫、感觉敏锐、不屈不挠、坚持不懈、循循善诱、开路先锋、洋洋自得、积极向上、注重实效、好管闲事、拘泥陈规、缺乏新意、注重隐私、先发制人、注重保护、自尊自豪、严格守时、爱提问题、头脑敏捷、安静腼腆、善于推理、被动反应、现实主义、喜欢沉思、易受否定、值得信赖、情绪放松、容易懊悔、愤世嫉俗、言行节制、能屈能伸、足智多谋、可靠负责、积极响应、勇担风险、忧愁郁闷、容易满足、怀疑成性、傲慢轻蔑、沉着自信、克己自制、严于律己、自我推动、独断专行、自以为是、感觉敏感、平静安宁、严肃认真、畏缩怕羞、轻浮愚蠢、真心实意、反应迟钝、喜欢交际、久经世故、悲伤痛苦、可怜遗憾、本能自发、扎实稳定、善于激励、直截了当、战略思维、坚强有力、功成名就、闷闷不乐、积极支持、大惊小怪、疑心重重、同情怜悯、机智圆滑、天赋异禀、滔滔不绝、注重任务、团队建设、团队参与、顽强不屈、软弱温柔、焦急紧张、纸上谈兵、麻木不仁、敏感易怒、细致周到、有条不紊、怯懦犹豫、大度宽容、做派传统、易中圈套、耀武扬威、相信他人、谦逊朴实、理解力强、独树一帜、犹豫不决、不同寻常、复仇心强、多才多艺、品行不端、精神饱满、不切实际、温暖热情、小心机警、软弱无力、固执任性、机智风趣、忧心忡忡</p>
</blockquote>
<h5 id="定义工作，解读自我">定义工作，解读自我</h5><h6 id="工作对你意味着什么">工作对你意味着什么</h6><ul>
<li><p>工作是发展方向</p>
<blockquote>
<p>将工作视为职业，这种观点的前提是工作者的动力源自于对成功、成就和身份地位的渴望。鲍迈斯特认为，此类工作者对工作的态度并不是热情眷恋，而是“强调努力工作对自我的回馈，对职业型工作者来说，工作是一种创造、定义、表达、证明和美化自我的方式”。将工作视为发展方向是实现人生意义和获得满足感的一个重要来源。</p>
</blockquote>
</li>
<li><p>工作是使命召唤</p>
<blockquote>
<p>如下面案例中卡罗尔的经历所示，“天职”这个词源自于“天将降大任于斯人也”这一理念。这种“天意”可以是外在动力，如上帝旨意或社区需要；也可以是内在动力，如需要向世人展现的天赋使命。鲍迈斯特称，这种工作强调的是“个人的义务、责任或命运”。<br>除了上述三种传统的工作定义外，我们认为还有第四种定义，即工作是自我实现。</p>
</blockquote>
</li>
<li><p>工作是自我实现</p>
<blockquote>
<p>对这种观点最好的解释是，它一方面体现了工作高度强调兴趣驱动的特征，另一方面淡化了咄咄逼人的“天命”特征。追求自我实现的工作者会选择不同寻常的职业道路，这些选择强调的是个人兴趣而非经济回报或名声威望。这种思考方式也是获得人生意义的一个重要来源。</p>
</blockquote>
</li>
</ul>
<h6 id="给缺乏信心者的建议">给缺乏信心者的建议</h6><h6 id="你平时有哪些爱好？">你平时有哪些爱好？</h6><h5 id="我的人生目标是什么">我的人生目标是什么</h5><h6 id="明确你的人生目标">明确你的人生目标</h6><ul>
<li>我的封面故事</li>
</ul>
<blockquote>
<pre><code>它能激发我们的想象力，帮助练习者在个人目标和主要兴趣之间建立关联。
这是哪家媒体？选择一份你喜欢的杂志、报纸或电视节目。
</code></pre><p>这篇报道讲的什么内容？为什么有你的特写报道？<br>    写下媒体在访谈中引用你的话语。你可以做出引用内容、补充报道、杂志照片或图表，把它们拼成一幅媒体快照。</p>
</blockquote>
<ul>
<li>三个问题</li>
</ul>
<blockquote>
<p>回想一下你曾经感到过满足的情形（参考此处 的生命线练习以帮助回忆），当时你做了些什么？你为什么感觉非常良好？尽可能准确地描述你当时经历的情况。<br>举出一两个你的人生偶像。你最佩服谁？为什么？用几个词描绘一下这个人。例如，我们的一位论坛成员说纳尔逊·曼德拉是她的偶像。在做这个练习时，她对偶像的描述是“善良、面对逆境时坚持不懈、名誉和地位”，这些词暗示出她对自我和他人最看重的品质。<br>你希望朋友们怎样缅怀你？假设你已经不在人世，你希望别人用怎样的表达纪念你？</p>
</blockquote>
<ul>
<li>我的新生活</li>
</ul>
<blockquote>
<p>第一年，第一项任务<br>你应当利用这一年学习新东西。你不可以到大学院校学习，也不能参加任何正式教育，只能利用你的时间和精力专注于掌握一项新知识。你会怎么做？你该怎样发展自己？<br>第二年，第二项任务<br>找到一个可以支持的目标。你有一年的时间去调查、参与和选择一个关注的目标或项目，一个有助于改善民生的目标或项目（如改善社区、城市、国家、世界、自然环境等）。 </p>
</blockquote>
<h6 id="目标声明">目标声明</h6><ul>
<li><p>活动</p>
<blockquote>
<p>说明你最喜欢从事的3～4项活动。</p>
</blockquote>
</li>
<li><p>伙伴</p>
<blockquote>
<p>说明你希望和哪些人或哪些群体一起打发时间。</p>
</blockquote>
</li>
<li><p>支持</p>
<blockquote>
<p>你会怎样帮助他人？用3～4个动词具体说明你是怎样帮助他人的。</p>
</blockquote>
</li>
</ul>
<h6 id="实践你的目标">实践你的目标</h6><ul>
<li>目标声明的内容是不断变化的</li>
<li>目标和目的之别</li>
<li>决定性测验</li>
</ul>
<h3 id="修订">修订</h3><blockquote>
<p>利用画布和个人分析调整或重建你的工作生活</p>
</blockquote>
<h4 id="准备好调整自己">准备好调整自己</h4><ul>
<li>改变你的观点</li>
<li>当人类思考时，重构事实可以改变现实</li>
<li>超越你的思维模式</li>
<li>构思更美好的现实</li>
</ul>
<h4 id="重新设计个人版商业模式">重新设计个人版商业模式</h4><ol>
<li>按照对自己最新的了解设计个人商业模式</li>
<li>指出你的软肋</li>
<li>询问诊断性问题<ul>
<li>我是谁，我拥有什么（核心资源） </li>
<li>我要做什么（关键业务）</li>
<li>我能帮助谁（客户群体）</li>
<li>我怎样帮助他人（价值服务）</li>
<li>怎样宣传自己和交付服务（渠道通路）</li>
<li>怎样和对方打交道（客户关系）</li>
<li>谁可以帮我（重要合作）</li>
<li>我能得到什么（收入来源）</li>
<li>我要付出什么（成本结构）</li>
</ul>
</li>
<li>修改模块并评估效果</li>
<li>重设商业模式</li>
</ol>
<h3 id="行动">行动</h3><blockquote>
<p>让我们付诸实践</p>
</blockquote>
<h4 id="计算你的商业价值">计算你的商业价值</h4><h5 id="工资单的秘密">工资单的秘密</h5><h5 id="利润和收入">利润和收入</h5><ul>
<li>利润表<ul>
<li>①挣到的钱；销售所得</li>
<li>②花出的钱；费用开支</li>
<li>③到手的钱。经营收入</li>
</ul>
</li>
<li>销售所得－费用开支＝经营收入</li>
</ul>
<h5 id="企业支出分析">企业支出分析</h5><ul>
<li>实得工资（到手的钱）的真正含义</li>
<li>关于商业经营的惊人事实</li>
</ul>
<h5 id="计算你的价值">计算你的价值</h5><ul>
<li>员工工资的实现方式取决于客户</li>
<li>确定你的价值</li>
<li>为什么经营成本如此之高</li>
<li>你对组织机构的价值</li>
</ul>
<h5 id="需要牢记的内容">需要牢记的内容</h5><ul>
<li>所得：即挣到的钱</li>
<li>费用：即花出的钱</li>
<li>收入或利润：即挣到的钱和花出的钱的差额，等同于利润</li>
<li>利润表：是指定期对组织机构收支状况所做的总结，通常3个月或1年总结一次</li>
<li>销售所得：指销售产品或服务实现的收入</li>
<li>收益：指销售加利息收入、租赁收入、版税收入和其他被动收入</li>
<li>毛利或盈余：指销售收入扣减产品或服务销售成本后所得（通常以销售额百分比形式体现）</li>
<li>产品成本或销售成本：指产品或服务销售方的直接成本。</li>
<li>盈亏平衡：指收入所得等于费用支出。</li>
<li>全额（工资）成本：指除工资之外，包括健康保险、退休金、各州保险或税捐等项目在内的员工工资全面成本。</li>
</ul>
<h5 id="在市场中测试你的商业模式">在市场中测试你的商业模式</h5><ul>
<li>你的商业模式是否和客户需求吻合</li>
<li>如何测试商业模式</li>
<li>验证每个模块中的假设</li>
<li>自信面对未来</li>
</ul>
<ul>
<li>画布中的每个模块都必须经过客户测试<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/03/20190303-画布中的每个模块都必须经过客户测试.jpg" alt="20190303-画布中的每个模块都必须经过客户测试.jpg"></li>
</ul>
<h5 id="结束语">结束语</h5><blockquote>
<p>职业变化有时候是在不知不觉中出现的。当组织机构修订其商业模式时，员工通常也必须调整个人商业模式。</p>
</blockquote>
<h3 id="总结">总结</h3><p>本来是打算写一下各章节的总结，但是发现再添加，就是画蛇添足，文章已经简单易懂、步骤分明，是我读取的非常优秀的书本，不带功利，只求实际，虽然我读书不是很多。重点要是说一下，书本反复强调，不要把关键业务当成价值服务，文中列举了很多例子，比如把日文翻译成英文法律文件的工作，不要把自己能给客户的价值简单的看成翻译工作，因为翻译只是关键业务，不是真正带给客户价值的价值服务！真正的价值是翻译后的文件带来的证据和最后的胜诉。其实，从上文中的个人画布中，也能看出来，关键业务+核心资源 指向 价值服务，希望每个人都思考一下，自己的价值服务到底是什么，这样才更有利于自己对自己的清晰认识，定位更具体和更有效的目标，从而给客户提供最好的价值，实现最好的收入来源！</p>
<p>这本书是《商业模式新生代》的续集，还不如说是升级版本，可以说个人篇不只是企业版的升级，而是升华，对于个人，应该也要像经营企业一样，所以，画布的9大模块也适配于个人，书中给了非常详细方法实践论和宝贵的案例，应该能够解答自己和大家对于人生目标的一些答案吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>引用 推荐序：</p>
<blockquote>
<p>这世界越来越疯狂。对企业而言，顾客在变，供应商在变，竞争对手在变，企业在不停地变化。对于个人而言，环境在变，能力在变，兴趣在变，关系在变。这些变化多数都超越了大部分组织及个人的掌控范围。<br>因为无法改变整体大环境，组织及个人为了持续生存及发展，就必须不断评估及尝试改变自己的商业模式，有时甚至要创建新的模式。这是一个瞄准、射击、再瞄准的时代，我们需要适应快速变化的世界，以全新的思考方式来指导规划我们的人生。商业模式思维是适应快速变化世界的最佳系统思考方式。</p>
</blockquote>
<p>从上一篇 <a href="https://ihtcboy.com/2019/02/27/2019-02-27_《商业模式新生代》读书笔记/">《商业模式新生代》读书笔记</a> ，一直在理解商业模式，然而，对于企业，对于个人，模式从来都没有固定不变，所有东西在变化，而如果能抓住其中规律，那就能面对变化而不变？上一本书给了画布的9大构造块，其实已经给了相当于固定的规律，而能不能从这里面，找到属于自己不变，或者变化的，创意的，创新的世界，就是本书的愿景！</p>
<p>就像《摔跤吧！爸爸》里曾经的摔跤冠军辛格，女儿摔跤训练需要使用专业的护垫，去找体育局求赞助，结果被腐败官员拒绝。爸爸，因此难受，但是却被人一句话点醒，再专业的护垫依旧是垫子，为什么不能用普通的？因为一个问题想太久，可能被旁人一句话点醒，很多人都有这样的经历，关键是坚持想问题，不放弃，背后的原因是对信念的坚持。有时候，我也在想，腐败是现在，如果大家都一直，永远的，认为腐败，那么这个时代，后世界，也将如此。但只要有人保持，愿意相信，我也相信，世界也可以变得美好！</p>]]>
    
    </summary>
    
      <category term="商业模式新生代" scheme="https://iHTCboy.com/tags/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3/"/>
    
      <category term="读书笔记" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读后感" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="life" scheme="https://iHTCboy.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《商业模式新生代》读书笔记]]></title>
    <link href="https://iHTCboy.com/2019/02/27/2019-02-27_%E3%80%8A%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2019/02/27/2019-02-27_《商业模式新生代》读书笔记/</id>
    <published>2019-02-27T00:49:16.000Z</published>
    <updated>2019-03-02T14:48:00.308Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>今年读的第一本书，时间节奏快，还是要在细细读第二次！非常优秀的实践指导书，值得每一个创业者，都读一下，不管是已经创业失败，还是准备创业，或者正在创业的小伙伴们，都赶紧来读读吧！</p>
<h3 id="框架">框架</h3><p>读一本书，不是为了知识而知识，需要总结或吸收书中的知识框架，以便成为自己的知识体系！</p>
<a id="more"></a>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-book-《商业模式新生代》-思维导图.png" alt="20190227-book-《商业模式新生代》-思维导图.png"></p>
<h3 id="画布_canvas">画布 canvas</h3><h4 id="9个构造块_Building_Blocks">9个构造块 Building Blocks</h4><ol>
<li><p>CS 客户细分（Customer Segments）</p>
<blockquote>
<p>企业或机构所服务的一个或多个客户分类群体。</p>
</blockquote>
<ul>
<li>大众市场（Mass market）</li>
<li>利基市场（Niche market）</li>
<li>区隔化市场（Segmented）</li>
<li>多元化市场（Diversified）</li>
<li>多边平台或多边市场（Multi-sided platforms/multi-sided markets）</li>
</ul>
</li>
<li><p>VP 价值主张（Value Propositions）</p>
<blockquote>
<p>通过价值主张来解决客户难题和满足客户需求。</p>
</blockquote>
<ul>
<li>新颖（Newness）</li>
<li>定制化（Customization）</li>
<li>设计（Design）</li>
<li>品牌/身份地位（Brand/status）</li>
<li>价格（Price）</li>
<li>成本削减（Cost reduction）</li>
<li>风险抑制（Risk reduction）</li>
<li>可达性（Accessibility）</li>
<li>便利性/可用性（Convenience/usability）</li>
</ul>
</li>
<li><p>CH 渠道通路（Channels）</p>
<blockquote>
<p>通过沟通、分销和销售渠道向客户传递价值主张。</p>
</blockquote>
<ul>
<li>渠道类型<ul>
<li>自有渠道<ul>
<li>销售团队</li>
<li>在线销售</li>
<li>自有店铺</li>
</ul>
</li>
<li>合作伙伴渠道 （非直接渠道）<ul>
<li>合作伙伴店铺</li>
<li>批发商</li>
</ul>
</li>
</ul>
</li>
<li><p>渠道阶段</p>
<ul>
<li>认知</li>
<li>评估</li>
<li>购买</li>
<li>传递</li>
<li>售后</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-01-渠道通路.jpg" alt="20190227-01-渠道通路.jpg"></p>
</li>
</ul>
</li>
<li><p>CR 客户关系（Customer Relationships）</p>
<blockquote>
<p>在每一个客户细分市场建立和维系客户关系。</p>
</blockquote>
<ul>
<li>动机驱动<ul>
<li>客户获取</li>
<li>客户维系</li>
<li>提升销售额（追加销售）</li>
</ul>
</li>
<li>类型<ul>
<li>个人助理（Personal assistance）</li>
<li>专用个人助理（Dedicated personal assistance）</li>
<li>自助服务（Self-service）</li>
<li>自动化服务（Automated services）</li>
<li>社区（Communities）</li>
<li>共同创作（Co-creation）</li>
</ul>
</li>
</ul>
</li>
<li><p>R$ 收入来源（Revenue Streams）</p>
<blockquote>
<p>收入来源产生于成功提供给客户的价值主张。</p>
</blockquote>
<ul>
<li>资产销售（Asset sale）</li>
<li>使用收费（Usage fee）</li>
<li>订阅收费（Subscription fees）</li>
<li>租赁收费（Lending/Renting/Leasing）</li>
<li>授权收费（Licensing）</li>
<li>经纪收费（Brokerage fees）</li>
<li>广告收费（Advertising）</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-02-收入来源-定价机制.jpg" alt="20190227-02-收入来源-定价机制.jpg"></p>
</li>
</ol>
<ol>
<li><p>KR 核心资源（Key Resources）</p>
<blockquote>
<p>核心资源是提供和交付先前描述要素所必备的重要资产…</p>
</blockquote>
<ul>
<li>实体资产（Physical）</li>
<li>知识资产（Intellectual）</li>
<li>人力资源（Human）</li>
<li>金融资产（Financial）</li>
</ul>
</li>
<li><p>KA 关键业务（Key Activities）</p>
<blockquote>
<p>通过执行一些关键业务活动，运转商业模式。</p>
</blockquote>
<ul>
<li>制造产品（Production）</li>
<li>问题解决（Problem solving）</li>
<li>平台/网络 （Platform/network）</li>
</ul>
</li>
<li><p>KP 重要合作（Key Partnership）</p>
<blockquote>
<p>有些业务要外包，而另外一些资源需要从企业外部获得。</p>
</blockquote>
<ul>
<li>类型<ul>
<li>在非竞争者之间的战略联盟关系；</li>
<li>竞合：在竞争者之间的战略合作关系；</li>
<li>为开发新业务而构建的合资关系；</li>
<li>为确保可靠供应的购买方—供应商关系。</li>
</ul>
</li>
<li>动机<ul>
<li>商业模式的优化和规模经济的运用</li>
<li>风险和不确定性的降低</li>
<li>特定资源和业务的获取</li>
</ul>
</li>
</ul>
</li>
<li><p>C$ 成本结构（Cost Structure）</p>
<blockquote>
<p>商业模式上述要素所引发的成本构成。</p>
</blockquote>
<ul>
<li>类型<ul>
<li>成本驱动（Cost-driven）</li>
<li>价值驱动（Value-driven）</li>
</ul>
</li>
<li>特点<ul>
<li>固定成本（Fixed costs）</li>
<li>可变成本（Variable costs）</li>
<li>规模经济（Economies of scale）</li>
<li>范围经济（Economies of scope）</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>这9个商业模式构造块组成了构建商业模式便捷工具的基础，这个工具我们称之为商业模式画布（Business Model Canvas）。</p>
<h4 id="商业模式画布（Business_Model_Canvas）">商业模式画布（Business Model Canvas）</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-03-商业模式画布.jpg" alt="20190227-03-商业模式画布.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-03-商业模式画布2.jpg" alt="20190227-03-商业模式画布2.jpg"></p>
<h3 id="式样_patterns">式样 patterns</h3><ul>
<li>非绑定式商业模式</li>
<li>长尾式商业模式</li>
<li>多边平台式商业模式</li>
<li>免费式商业模式</li>
<li>开放式商业模式</li>
</ul>
<h4 id="非绑定式商业模式">非绑定式商业模式</h4><blockquote>
<p>“非绑定”企业的概念认为，存在三种不同的基本业务类型：客户关系型业务、产品创新型业务和基础设施型业务。每种类型都包含不同的经济驱动因素、竞争驱动因素和文化驱动因素。这三种类型可能同时存在于一家公司里，但是理论上这三种业务“分离”成独立的实体，以便避免冲突或不利的权衡妥协。</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-04-三种核心的业务类型.jpg" alt="20190227-04-三种核心的业务类型.jpg"></p>
<ul>
<li>私人银行商业模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-04-私人银行商业模式.jpg" alt="20190227-04-私人银行商业模式.jpg"></li>
</ul>
<h4 id="长尾式商业模式">长尾式商业模式</h4><blockquote>
<p>长尾式商业模式的核心是多样少量：他们关注于为利基市场提供大量产品，每种产品相对而言卖得都少。利基产品销售总额可以与凭借少量畅销产品产生绝大多数销售额的传统模式相媲美。长尾模式需要低库存成本和强大的平台，并使得利基产品对于兴趣买家来说容易获得。</p>
</blockquote>
<ul>
<li>乐高工厂：客户设计（玩具）套件<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-05-乐高工厂：客户设计（玩具）套件.jpg" alt="20190227-05-乐高工厂：客户设计（玩具）套件.jpg"></li>
</ul>
<p>乐高<br>＋<br>乐高的用户可以自己设计产品并在线订购<br>＝<br>乐高工厂<br>＋<br>乐高允许用户销售自己设计的产品<br>＝<br>乐高的用户产品目录</p>
<h4 id="多边平台式商业模式">多边平台式商业模式</h4><blockquote>
<p>多边平台将两个或者更多有明显区别但又相互依赖的客户群体集合在一起。<br>只有相关客户群体同时存在的时候，这样的平台才具有价值。多边平台通过促进各方客户群体之间的互动来创造价值。多边平台需要提升其价值，直到它达到可以吸引更多用户的程度，这种现象被称为网络效应。</p>
</blockquote>
<ul>
<li><p>Google的商业模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-06-Google的商业模式.jpg" alt="20190227-06-Google的商业模式.jpg"></p>
</li>
<li><p>任天堂 Wii 对决PSP/Xbox<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-07-任天堂 Wii 对决PSP、Xbox-01.jpg" alt="20190227-07-任天堂 Wii 对决PSP、Xbox-01.jpg"></p>
</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-07-任天堂 Wii 对决PSP、Xbox-02.jpg" alt="20190227-07-任天堂 Wii 对决PSP、Xbox-02.jpg"></p>
<h4 id="免费式商业模式">免费式商业模式</h4><blockquote>
<p>免费，在免费式商业模式中，至少有一个庞大的客户细分群体可以享受持续的免费服务。免费服务可以来自多种模式。通过该商业模式的其他部分或其他客户细分群体，给非付费客户细分群体提供财务支持。</p>
</blockquote>
<ul>
<li><p>Metro<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Metro.jpg" alt="20190227-08-免费式商业模式-Metro.jpg"></p>
</li>
<li><p>Flickr<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Flickr.jpg" alt="20190227-08-免费式商业模式-Flickr.jpg"></p>
</li>
<li><p>Red Hat<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-RedHat.jpg" alt="20190227-08-免费式商业模式-RedHat.jpg"></p>
</li>
<li><p>Skype<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Skype-01.jpg" alt="20190227-08-免费式商业模式-Skype-01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-Skype-02.jpg" alt="20190227-08-免费式商业模式-Skype-02.jpg"></p>
</li>
<li><p>REGA<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-REGA.jpg" alt="20190227-08-免费式商业模式-REGA.jpg"></p>
</li>
<li><p>免费移动电话的诱钓模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-免费移动电话的诱钓模式.jpg" alt="20190227-08-免费式商业模式-免费移动电话的诱钓模式.jpg"></p>
</li>
<li><p>剃刀与刀片：吉列<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-08-免费式商业模式-剃刀与刀片：吉列.jpg" alt="20190227-08-免费式商业模式-剃刀与刀片：吉列.jpg"></p>
</li>
</ul>
<h4 id="开放式商业模式">开放式商业模式</h4><blockquote>
<p>开放式商业模式可以用于那些通过与外部伙伴系统性合作，来创造和捕捉价值的企业。这种模式可以是“由外到内”，将外部的创意引入到公司内部，也可以是“由内到外”，将企业内部闲置的创意和资产提供给外部伙伴。</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-09-开放式商业模式-创新的原则.jpg" alt="20190227-09-开放式商业模式-创新的原则.jpg"></p>
<ul>
<li>Innocentive<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-09-开放式商业模式-Innocentive.jpg" alt="20190227-09-开放式商业模式-Innocentive.jpg"></li>
</ul>
<h4 id="式样总览">式样总览</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-10-式样总览01.jpg" alt="20190227-10-式样总览01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-10-式样总览02.jpg" alt="20190227-10-式样总览02.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-10-式样总览03.jpg" alt="20190227-10-式样总览03.jpg"></p>
<h3 id="设计">设计</h3><blockquote>
<p>商业模式设计方法</p>
</blockquote>
<ul>
<li>客户洞察</li>
<li>创意构思</li>
<li>可视思考</li>
<li>原型制作</li>
<li>故事讲述</li>
<li>情景推测</li>
</ul>
<h4 id="客户洞察">客户洞察</h4><ul>
<li>移情图</li>
</ul>
<blockquote>
<p>移情图（empathy map，感同身受之意）</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-11-移情图.jpg" alt="20190227-11-移情图.jpg"></p>
<p>1.她看到的是什么？</p>
<blockquote>
<p>描述客户在她的环境里看到了什么</p>
</blockquote>
<pre><code><span class="bullet">* </span>环境看起来像什么？
<span class="bullet">* </span>谁在她周围？
<span class="bullet">* </span>谁是她的朋友？
<span class="bullet">* </span>她每天接触什么类型的产品或服务（相对于所有市场产品或服务）？
<span class="bullet">* </span>她遭遇的问题是什么？
</code></pre><p>2.她听到的是什么？</p>
<blockquote>
<p>描述客户所处环境是如何影响客户的</p>
</blockquote>
<pre><code><span class="bullet">* </span>她的朋友说什么？她的配偶呢？
<span class="bullet">* </span>谁能真正影响她？如何影响？
<span class="bullet">* </span>哪些媒体渠道能影响她？
</code></pre><p>3.她真正的想法和感觉是什么？</p>
<blockquote>
<p>设法概述你的客户所想的是什么</p>
</blockquote>
<ul>
<li>对她来说，什么是最重要的（她可能不公开说）？</li>
<li>想象一下她的情感。</li>
<li>什么能感动她？</li>
<li>什么能让她失眠？</li>
<li>尝试着描述她的梦想和愿望。</li>
</ul>
<p>4.她说些什么又做些什么？</p>
<blockquote>
<p>想象这位客户可能会说什么或者在公开场合可能的行为</p>
</blockquote>
<pre><code><span class="bullet">* </span>她的态度是什么？
<span class="bullet">* </span>她会给别人讲什么？
<span class="bullet">* </span>要特别留意在客户所说和她真正想法与感受之间的潜在冲突。
</code></pre><p>5.这个客户的痛苦是什么？</p>
<pre><code><span class="bullet">* </span>她最大的挫折是什么？
<span class="bullet">* </span>在她和她想要事物或需要达到的目标之间有什么障碍？
<span class="bullet">* </span>她会害怕承担哪些风险？
</code></pre><p>6.这个客户想得到什么？</p>
<pre><code><span class="bullet">* </span>她真正想要和希望达到的是什么？
<span class="bullet">* </span>她如何衡量成功？
<span class="bullet">* </span>猜想一些她可能用来实现其目标的策略。
</code></pre><h4 id="创意构思">创意构思</h4><ul>
<li>资源驱动</li>
<li>产品/服务驱动</li>
<li>客户驱动</li>
<li>财务驱动</li>
<li>多中心驱动</li>
</ul>
<h5 id="创意构思的过程">创意构思的过程</h5><ol>
<li>团队构成</li>
<li>全情投入</li>
<li>扩展</li>
<li>条件筛选</li>
<li>“原型制作”</li>
</ol>
<h5 id="一个多样化的商业模式创新团队的成员应该">一个多样化的商业模式创新团队的成员应该</h5><ul>
<li>来自不同业务部门</li>
<li>年龄不同</li>
<li>具备不同领域的专业技能</li>
<li>有不同层次的资历</li>
<li>拥有不同经验阅历</li>
<li>来自不同文化背景</li>
</ul>
<h5 id="头脑风暴的规则">头脑风暴的规则</h5><ul>
<li>保持聚焦</li>
<li>执行规则</li>
<li>可视思考</li>
<li>做好准备</li>
</ul>
<h4 id="可视思考">可视思考</h4><ul>
<li>通过便利贴实现视觉化</li>
<li>通过绘图来实现视觉化</li>
<li>理解本质</li>
<li>促进对话</li>
<li>探索创意</li>
<li>促进交流</li>
<li>针对不同需求的不同类型的视觉化</li>
</ul>
<h4 id="原型制作">原型制作</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-12-原型制作01.jpg" alt="20190227-12-原型制作01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-12-原型制作02.jpg" alt="20190227-12-原型制作02.jpg"></p>
<h4 id="故事讲述">故事讲述</h4><h4 id="情景推测">情景推测</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-13-情景推测01.jpg" alt="20190227-13-情景推测01.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-13-情景推测02.jpg" alt="20190227-13-情景推测02.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-13-情景推测03.jpg" alt="20190227-13-情景推测03.jpg"></p>
<h3 id="战略">战略</h3><ul>
<li>商业模式环境</li>
<li>评估商业模式</li>
<li>商业模式视角下的蓝海战略</li>
<li>管理多个商业模式</li>
</ul>
<h4 id="商业模式环境">商业模式环境</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境.jpg" alt="20190227-14-商业模式环境.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-市场影响因素-市场分析.jpg" alt="20190227-14-商业模式环境-市场影响因素-市场分析.jpg"></p>
<ul>
<li>制药行业环境分析<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析01.jpg" alt="20190227-14-商业模式环境-制药行业环境分析01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析02.jpg" alt="20190227-14-商业模式环境-制药行业环境分析02.jpg"></li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析03.jpg" alt="20190227-14-商业模式环境-制药行业环境分析03.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析04.jpg" alt="20190227-14-商业模式环境-制药行业环境分析04.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-14-商业模式环境-制药行业环境分析05.jpg" alt="20190227-14-商业模式环境-制药行业环境分析05.jpg"></p>
<h4 id="评估商业模式">评估商业模式</h4><ul>
<li><p>亚马逊在2005年的主要优势和劣势<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-15-亚马逊在2005年的主要优势和劣势.jpg" alt="20190227-15-亚马逊在2005年的主要优势和劣势.jpg"></p>
</li>
<li><p>亚马逊在2006年探索到的机会：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-15-亚马逊在2006年探索到的机会.jpg" alt="20190227-15-亚马逊在2006年探索到的机会.jpg"></p>
</li>
<li><p>详尽地SWOT评估每一个构造块<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-15-详尽地SWOT评估每一个构造块.jpg" alt="20190227-15-详尽地SWOT评估每一个构造块.jpg"></p>
</li>
</ul>
<h4 id="商业模式视角下的蓝海战略">商业模式视角下的蓝海战略</h4><p>金和莫博涅提出了他们称之为“四项行动架构”的分析工具<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-四项行动架构.jpg" alt="20190227-16-四项行动架构.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-价值创意.jpg" alt="20190227-16-价值创意.jpg"></p>
<ul>
<li><p>在商业模式画布中融入蓝海战略框架<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-在商业模式画布中融入蓝海战略框架.jpg" alt="20190227-16-在商业模式画布中融入蓝海战略框架.jpg"></p>
</li>
<li><p>太阳马戏团（Cirque Du Soleil）<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-太阳马戏团（Cirque Du Soleil）01.jpg" alt="20190227-16-太阳马戏团（Cirque Du Soleil）01.jpg"></p>
</li>
</ul>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-太阳马戏团（Cirque Du Soleil）02.jpg" alt="20190227-16-太阳马戏团（Cirque Du Soleil）02.jpg"><br>来源：改编自《蓝海战略》</p>
<ul>
<li><p>任天堂的wii<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-任天堂的wii-01.jpg" alt="20190227-16-任天堂的wii-01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-任天堂的wii-02.jpg" alt="20190227-16-任天堂的wii-02.jpg"></p>
</li>
<li><p>用“四项行动构架”来质疑你的商业模式画布<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-16-用“四项行动构架”来质疑你的商业模式画布.jpg" alt="20190227-16-用“四项行动构架”来质疑你的商业模式画布.jpg"></p>
</li>
</ul>
<h4 id="管理多个商业模式">管理多个商业模式</h4><ul>
<li><p>瑞表（SMH）为斯沃琪（Swatch）选择独立模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-17-瑞表（SMH）为斯沃琪（Swatch）选择独立模式.jpg" alt="20190227-17-瑞表（SMH）为斯沃琪（Swatch）选择独立模式.jpg"></p>
</li>
<li><p>雀巢咖啡业务的商业模式组合<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-17-雀巢咖啡业务的商业模式组合.jpg" alt="20190227-17-雀巢咖啡业务的商业模式组合.jpg"></p>
</li>
<li><p>戴姆勒的“随租随行”（CAR2GO）商业模式<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-17-戴姆勒的“随租随行”（CAR2GO）商业模式.jpg" alt="20190227-17-戴姆勒的“随租随行”（CAR2GO）商业模式.jpg"></p>
</li>
</ul>
<h3 id="流程">流程</h3><ul>
<li>商业模式设计流程</li>
<li>设计理念</li>
<li>5 个阶段</li>
</ul>
<h4 id="商业模式设计流程">商业模式设计流程</h4><p>商业模式的创新有四大目标：</p>
<ul>
<li>（1）满足被忽视的市场需求；</li>
<li>（2）把新技术、产品和服务推向市场；</li>
<li>（3）通过一个更好的商业模式来改进、颠覆或变革现有的市场；</li>
<li>（4）创造一个全新的市场。</li>
</ul>
<p>挑战</p>
<ul>
<li>找出合适的模式</li>
<li>全面上市之前进行测试模式</li>
<li>推动市场接受新的模式</li>
<li>结合市场反馈，持续不断地调整模式</li>
<li>管理不确定因素</li>
</ul>
<h4 id="设计理念">设计理念</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-18-设计理念.jpg" alt="20190227-18-设计理念.jpg"></p>
<h4 id="5_个阶段">5 个阶段</h4><blockquote>
<p>5个阶段：动员、理解、设计、实施、管理</p>
</blockquote>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-19-5个阶段：动员、理解、设计、实施、管理-01.jpg" alt="20190227-19-5个阶段：动员、理解、设计、实施、管理-01.jpg"></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-19-5个阶段：动员、理解、设计、实施、管理-02.jpg" alt="20190227-19-5个阶段：动员、理解、设计、实施、管理-02.jpg"></p>
<h3 id="展望">展望</h3><ul>
<li>不以赢利为目的的商业模式</li>
<li>电脑辅助商业模式设计</li>
<li>商业模式和商业计划书<ul>
<li>团队</li>
<li>商业模式</li>
<li>财务分析</li>
<li>外部环境</li>
<li>实施路线图</li>
<li>风险分析</li>
</ul>
</li>
<li>在企业中实施商业模式<ul>
<li>战略</li>
<li>结构</li>
<li>流程</li>
<li>激励</li>
<li>人员</li>
</ul>
</li>
<li>IT 系统配合业务</li>
</ul>
<h4 id="不以赢利为目的的商业模式">不以赢利为目的的商业模式</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-20-不以赢利为目的的商业模式-01.jpg" alt="20190227-20-不以赢利为目的的商业模式-01.jpg"><br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-20-不以赢利为目的的商业模式-02.jpg" alt="20190227-20-不以赢利为目的的商业模式-02.jpg"></p>
<h4 id="电脑辅助商业模式设计">电脑辅助商业模式设计</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-21-电脑辅助商业模式设计.jpg" alt="20190227-21-电脑辅助商业模式设计.jpg"></p>
<h4 id="商业模式和商业计划书">商业模式和商业计划书</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-22-商业模式和商业计划书.jpg" alt="20190227-22-商业模式和商业计划书.jpg"></p>
<h4 id="在企业中实施商业模式">在企业中实施商业模式</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-23-在企业中实施商业模式.jpg" alt="20190227-23-在企业中实施商业模式.jpg"></p>
<h4 id="IT_系统配合业务">IT 系统配合业务</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-24-IT系统配合业务.jpg" alt="20190227-24-IT系统配合业务.jpg"></p>
<h3 id="《商业模式新生代》的商业模式画布">《商业模式新生代》的商业模式画布</h3><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/02/20190227-25-《商业模式新生代》的商业模式画布.jpg" alt="20190227-25-《商业模式新生代》的商业模式画布.jpg"></p>
<h3 id="个人总结">个人总结</h3><p>建筑自已对商业模式的认识，有一个清晰的方法论，作者给了全面的9个商业要素，并且本书根据这个画布，组构、分析、优化，并在案例分析和结合其它想维框架，给出很多商业模式的示例，最后，需要读者自已给出自已创新的模式！</p>
<p>平时还真的较少读商业的书，读了这本书之后，其它很多东西没有完全理解，能把商业划分如此，思考+总结+实践，画出公司的商业模式，或自己的商业模式，一定能解答自己一直对公司或自己的理解，有更新更好的认识吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>今年读的第一本书，时间节奏快，还是要在细细读第二次！非常优秀的实践指导书，值得每一个创业者，都读一下，不管是已经创业失败，还是准备创业，或者正在创业的小伙伴们，都赶紧来读读吧！</p>
<h3 id="框架">框架</h3><p>读一本书，不是为了知识而知识，需要总结或吸收书中的知识框架，以便成为自己的知识体系！</p>]]>
    
    </summary>
    
      <category term="商业模式新生代" scheme="https://iHTCboy.com/tags/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%96%B0%E7%94%9F%E4%BB%A3/"/>
    
      <category term="读书笔记" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读后感" scheme="https://iHTCboy.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="life" scheme="https://iHTCboy.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2019，猪你好！]]></title>
    <link href="https://iHTCboy.com/2019/01/01/2019-01-01_2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://iHTCboy.com/2019/01/01/2019-01-01_2018年终总结/</id>
    <published>2018-12-31T17:49:16.000Z</published>
    <updated>2019-02-08T10:44:40.714Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>尼采说：人年轻时，无论是崇拜还是鄙视，缺乏分寸；善于掌握分寸才是对生命最大的奖赏。</p>
</blockquote>
<h4 id="序言">序言</h4><p>这一年，在生命中又是非常有意义的一年，应该说是毕业以来待过最长的公司，准备2年啦！非常高兴能看到自己的坚持，因为自己的坚持，所以，我相信还有很多事件可以做。<strong>马云说的，员工离职，不是给钱不够，就是心里委屈。</strong> 今天，我想还要加一条吧，<strong>工作不再有挑战性！（或者挑战性太大，自己放弃！）</strong> 因为还有很多挑战！很多东西等待我去战胜，并且我相信，战胜这些问题，让公司和自己都会有质的改变！这也就是所谓的成长空间吧~</p>
<p>今年大家经历了非常多，其中讨论最多的程序员吃年轻饭、中年危机、经济寒冬等，都会跟大家讨论一下。最好的时代，最坏的时代，都在当前，一起记录，迎接2019吧！</p>
<a id="more"></a>
<h4 id="第一章_从公司创建创造，到创新创意">第一章 <strong>从公司创建创造，到创新创意</strong></h4><p>年终总结，首当其冲就是工作总结。当年，因为苹果AppStore条款的变动，我们需要开始研究怎么从被动到主动，借着这样的契机，我们做了自己的预审工具，然后有所启发的，做了自己的AppStore Connect 自动化工具，实现通过网页跨平台形式，送审ipa包、自动送审、查看和检查全部的内购品项、批量创建内购品项，批量上传截图和视频等，这些功能相当苹果后台速度快了一半，真正解决了跨平台问题，同时提高了大家的工作效率，从本质上，解决了一定要我们程序员来上传ipa包的问题，解放了我们部分的生产力！</p>
<p>另一方面，我们自动化平台也在构建中，希望我们的工作流，减少大量重复的打包SDK，配置参数等操作，实现全自动化的工作流程，我认为才是解决大家痛处，也是释放我们程序员生产力的第一步，希望2019年，我们能实现整个工作流的全自动化，然后做更多的事！</p>
<p>另外，还补充一点。就是一些解决方案，刚开始，你也许认为不可行！只是因为你的角色（角度），眼界（水平）没有达到能给出解决方案的能力，需要慢慢多实践，多学习，一定会有新的想法。比如，我在开发 AppStore Connect 自动化工具后，一方面，从技术上对 Python 常用的库有大致了解，一些常见坑也自己填了，另一方面，从解决方案，爬虫看，任何一个网站，你也可以二次封装，做成自己的自动化工具！</p>
<p>再次，我想表达一下，在任何一个公司，大家如果只是墨守成规，默默做自己一亩三分田，那么我认为，这样对自己对公司都没有任何新的价值，一直这样下去，自己肯定会错失很多机会，而公司也许成也许败，但是自己一定失败的。如果一开始就做一局失败的游戏，那人生一定只会更糊涂。</p>
<p>最后，今年能力和精力有限，还有很多东西没有做，很多东西需要学习，希望明年自己能有更多的努力，提出创新创意的法子，一定改变我们技术同事的水平，也提高大家的效率，从而提高大家的工资。非常感谢公司大老们的支持，我们的工作，永远离不开大老们的支持，我相信，只要公司的价值观与我们一致，我们一定一起进步，共赢！</p>
<h4 id="第二章_说走就走的旅行">第二章 <strong>说走就走的旅行</strong></h4><p>年初计划的旅游计划，公司旅游因为业务繁忙，没能去成。最后假节日和女朋友去了一趟厦门，虽然有点遗憾，后2天下雨影响行程，但是也是有所收获，海风很舒服，厦门面向台湾，地理位置有点特别，看海风景优美！</p>
<p>旅游，对我来说，不是简单的朋友圈晒晒照片，恩爱~ 这些东西是别人的感觉，我更注重自己的理解，理解每一个城市，每一座山峰，每一片海水，每一个文化，背后的故事，了解别人的历史，然后影射到自己身上，就会觉得自己的境界还达不到，从而内心也许更平静、更多憧憬，也希望大家旅游，对于自己身心放松和收获更多的，有自己的认知，不为人云也云。</p>
<p>希望今年重签的港澳通行证正式使用啊，去体验更多的世界角落，更美好的东西，更漂亮的东西，更加广阔的眼界。希望2019年，更多的高度和视觉，凤凰涅磐！</p>
<h4 id="第三章_团队协作">第三章 <strong>团队协作</strong></h4><p>团队协作能力，今年 git flow 管理，每做一个git commit 都要考虑清楚， 每一个 release 都要测试全面，不仅仅是对团队的影响，严重的会影响整个项目。如果对项目不能有指标的把控，这是很可怕的事情。一个team，需要大家都遵守规则，才能做的更好，才能感受到团队的力量，并有一起努力做好的愿景，而不是抵制配合。希望，明年可以做一下 code review 和 项目管理相关的研究，给项目、给大家，提供更好的稳定，也提高大家代码质量，这是最好的愿景！</p>
<p>团队管理能力，今年协助组长分担任务，我认为管理，不仅仅是管理，还要敢于当先，努力为团队营造一个良好氛围。我不提倡大家加班加点，我是鼓励大家，努力积极，高效主动完成任务，这样团队才能有精力去做应该做的事，甚至说做更多自己想做的事。一味地拖延，低效地工作，只会伤害自己。我希望再接再厉，管理经验不是学习获得，而是真正的管理，不断改变自己，善待团队，努力当好表帅，能改变大家一点，对大家未来都是好事的一切，希望自己能多做点。</p>
<h4 id="第四章_中年危机？">第四章 <strong>中年危机？</strong></h4><p>拒绝老油条。</p>
<p>我认为，想解决程序员青春饭的问题，首次拒绝当老油条！作为程序员，一定要做好学到老的准备，否则，程序员一定是你的青春饭！</p>
<p>上一年，总结里面说了：</p>
<blockquote>
<p>“人穷志短”实在是太精辟了。最近大家说的『贫穷限制了我的想象力』，我是发现程序员们都越来越限制自己的能力，满足不了自己的工作，满足不了自己的欲望，只是轻声叹息。愿大家，不要把责任都推到公司，多从自己找些原因，然后克服自己，战胜自己！</p>
</blockquote>
<p>今年，还是看到了很多的观点，中年危机的文章，也层出不穷，本质上，也就无法几个点。</p>
<ul>
<li>技术路线</li>
<li>管理路线</li>
<li>老板路线</li>
<li>走为上计</li>
</ul>
<h5 id="技术路线">技术路线</h5><p>先说一下技术路线，大家可能更多的还是希望提高技术，成为更高级的工程师。所以，如何学习呢？ 要从本质上认识对技术：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2019/01/20190101-程序开发者能力金字塔by安晓辉.jpeg" alt="20190101-程序开发者能力金字塔by安晓辉.jpeg"></p>
<p>从上图可以看出，想要把技术学习好，一定要不断往底层学习积累，如果每天工作外，一直游走在上层的API，那就真的只是一个代码搬运工，copyer一定是青春饭！</p>
<p>至于技术怎么学习，这个就不好说，大家根据自己的认知，努力向自己想要到达的目标，脚踏实地，一定可以的。</p>
<h5 id="管理路线">管理路线</h5><p>成为一下管理者，其实也离不开技术，不说技术非常好，但是技术框架、技术面一定要广，不然很难从更高的层次来对技术进行管理吧。否则，人管好了，技术没有管好，也不是技术管理啊。</p>
<p>另外，我想说，互联网发展到今天，基础的程序员已经非常多，市场缺少的是更多的技术管理。因为如果是非技术管理，其实就是管理人，但是技术管理，除了管人，还要对技术管理。个人认为未来还需要更多这方面的人才。</p>
<p>大家可以看出来，每一个公司，很难给程序员kpi，或者说是考核。是以写代码的行数定工资？还是以项目完成？甚至说，项目做完后，怎么估计这个项目带来的价值？？？ 今天依然没有很好的评估方案，这也许是技术管理的一个困境，如果合理合规和合人性的方式，进行管理，其实大家可以在工作中，多多思考~</p>
<h5 id="老板路线">老板路线</h5><p>老板路线，就是自己创业，或者自己有钱，可以做投资人。这样的胆量或者财力，我相信对于我们这些普通的程序员，可以要早点认清自己吧。如果只是开一家没有什么技术含量的，同时满足市场需要的外包公司，也许比打工上班好一点，这些风险大家自己评估啊，方案是方案，行动是自己的，想好做什么，就是开始的一半了。</p>
<h5 id="走为上计">走为上计</h5><p>36计最后一计，这里大家可以理解为转行！ 但是我想说，转行只是自己真的水平不行就这样做吧。 我这里的意思是想表示，上面的三个方案，其实没有明显划分，谁是谁。大家在工作中，其实都要主动去管理，做技术，做管理，做老板，都不冲突，当自己在苦修或意愿做什么时候，自己也准备好了，就去做！就是这样简单，走为上！</p>
<p>最后，关于中年危机，我就不想多说什么了，文末有几个链接，大家需要可以看看，主要还是自己认清自己，知道自己优势所为，明白中年精力不足，如果补充自己的不足，而发挥长处，方能立于不败吧。</p>
<h4 id="第五章_经济寒冬">第五章 <strong>经济寒冬</strong></h4><p>翻看往年的新闻，每年的年末，都是今年寒冬又到来，xx公司裁员xx人。其实，学会居安思危，但是也不杞人忧天，每次做好自己的目标，我相信看到这些新闻，并不会感觉到紧张，或者害怕吧。</p>
<p>寒冬与我无关，我只想努力，公司裁员，也许不是因为你做不好，而是有人做不好，导致公司业务不好，或者影响到公司业务，无形中慢慢地消耗了这个系统的每针每线，最终在寒冬中，要断腿断脚断臂时，只能伤害到你。所以，跟上面说到的一样，我希望大家努力改变自己，改变同事，改变公司，创造创新创意，为公司做的任何贡献，不会与你无关，而是事事相关，时时相关，不要把自己单独在自己的世界，如果你打算长远在公司养老的话。</p>
<h4 id="第六章_突破自我的准备和未来">第六章 突破自我的准备和未来</h4><p>说了那么多，我想技术的东西不在多谈，做好自己的认知，然后在寒冬中做好准备，明年春天，花朵一定更加绽放灿烂~</p>
<p>2018年，在iOS开发自动化方面，学习了Python/bash/ruby/dart，自己能在脚本自动化方面有所学习和输出，感到非常高兴。希望明年在 Android/Kotlin/Flutter 下点功夫，努力打造移动的自动化，完成从前端到后端的打通，实现移动端工作自动流，提高大家的效率。然后有更多时间和精力，对跨平台、组件化、工程效率、Flutter、APM、插件热修和各种底层技术研究，提高大家技术水平，稳定项目质量，提高可变技术为运营推广，为用户体验做一些努力，足以，知足。</p>
<p>学海无涯，量力而行。</p>
<h4 id="第七章_一些语录">第七章 一些语录</h4><p>今年过的非常快，也许高兴，也许失落，但是学习永远是不变的，摘要一下自己收集的语录，希望能给大家一些不一样的观点：</p>
<ul>
<li>如果你做完一个项目，没有记录，没有总结，没有思考，那么收获为0。</li>
<li>“一流程序员靠数学、二流靠算法、三流靠逻辑、四流靠SDK、五流靠Google和StackOverflow、六流靠百度和CSDN。低端的看高端的就是黑魔法！”</li>
<li>千万不要以为批判性思维就是「批评」和judge。批判和批判性思维是两码事，前者更重要的是否定，后者则是审辨、带有建设性。</li>
<li>沟通成功的三个关键！别人看到了什么(55%)，听到的声音和词气(38%)，说的语言和内容(7%)！</li>
<li>四个时刻要闭嘴：展示自我的时候，评价他人的时候，春风得意的时候，涉及隐私的时候</li>
<li>时间能给你的，仅仅只是时间，没有任何答案，想要答案就只有靠自己不断的去寻找和确定，属于自己的路只有自己走过才知道！坚持走下去路才会渐渐清晰。</li>
<li>要回到自己读书的初衷，或乐趣，或好奇，少一些目的性和功利心。读一本书，不要老想它能用来干什么，而是多思考它在表达什么。不要期望每本书读了都有用，马上就能用的书是菜谱。</li>
<li>1、要无条件自信，即使在做错的时候。2、不要想太多，定时清除消极思想。3、学会忘记痛苦，为阳光记忆腾出空间。4、敢于尝试，敢于丢脸。5、每天都是新的，烦恼痛苦不过夜。6、面对别人的优秀时，发自内心地赞美。7、做人最高境界不是一味低调，也不是一味张扬，而是不卑不亢。</li>
<li>1、发怒，是用别人的错误惩罚自己。2、烦恼，是用自己的过失折磨自己。3、后悔，是用无奈的往事摧残自己。4、忧虑，是用虚拟的风险惊吓自己。5、孤独，是用自制的牢房禁锢自己。6、自卑，是用别人的长处抵毁自己。</li>
<li>1、考虑问题时要换位思考；2、解决问题时要逆向思考；3、要强于总结问题；4、要强于收集信息；5、要强于编写简洁的文书；6、要强于进行书面沟通。</li>
<li>人生的高度，不是你看清了多少事，而是你看轻了多少事。心灵的宽度，不是你认识了多少人，而是你包容了多少人。做人如山，望万物，而容万物。做人似水，能进退，而知进退。</li>
<li>装傻，不是真傻，而是糊里糊涂，不计较。装傻，不是怕，而是心胸宽广，不记仇。有些时候，理，争多了伤情，事，弄懂了心痛。</li>
<li>平静的湖面只有呆板的倒映，奔腾的激流才有美丽的浪花。幸福不是靠别人来布施，而是要自己去赢取。生命的意义在不断挑战自己，战胜自己。</li>
<li>认知的四个阶段:<br>  不知道自己不知道，（自以为是的状态！）<br>  知道自己不知道，（敬畏之心，空杯心态，丰富自己的认知！）<br>  知道自己知道，（抓住事情的规律，提升自己的认知！）<br>  不知道自己知道。（永远保持空杯的状态！）</li>
</ul>
<h4 id="第七章_2019计划">第七章 2019计划</h4><ul>
<li>锻炼&amp;健康</li>
<li>存钱&amp;节俭</li>
<li>读书&amp;学习</li>
<li>旅游&amp;娱乐</li>
</ul>
<p><strong>锻炼健康</strong>：不可否认，身体没有毕业时那样旺盛，但是精力充足还是需要充足睡眠，加油锻炼！</p>
<p><strong>存钱节俭</strong>：好好存钱，有房有家~</p>
<p><strong>读书学习</strong>：快乐学习，多读些书~</p>
<p><strong>旅游娱乐</strong>：长线：张家界、杭州、北京、西藏； 短线：香港、澳门、深圳。</p>
<p>最后，用一句话总结和展望：</p>
<blockquote>
<p>人有三样东西是无法隐瞒的，咳嗽、穷困和爱；你想隐瞒越欲盖弥彰。<br>人有三样东西是不该挥霍的，身体、金钱和爱；你想挥霍却得不偿失。<br>人有三样东西是无法挽留的，时间、生命和爱；你想挽留却渐行渐远。<br>人有三样东西是不该回忆的，灾难、死亡和爱；你想回忆却苦不堪言。</p>
<p>—《洛丽塔》</p>
</blockquote>
<p>2019，一起加油！</p>
<h4 id="参考阅读">参考阅读</h4><ul>
<li><a href="https://mp.weixin.qq.com/s/lLr1g7OfozHf0tkf-seYPQ" target="_blank" rel="external">构建开发者能力金字塔，化解年龄焦虑</a></li>
<li><a href="https://mp.weixin.qq.com/s/jpu9CGCYrUmBdZOIvfgNdw" target="_blank" rel="external">程序员加薪升职之全路径解析</a></li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="http://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>尼采说：人年轻时，无论是崇拜还是鄙视，缺乏分寸；善于掌握分寸才是对生命最大的奖赏。</p>
</blockquote>
<h4 id="序言">序言</h4><p>这一年，在生命中又是非常有意义的一年，应该说是毕业以来待过最长的公司，准备2年啦！非常高兴能看到自己的坚持，因为自己的坚持，所以，我相信还有很多事件可以做。<strong>马云说的，员工离职，不是给钱不够，就是心里委屈。</strong> 今天，我想还要加一条吧，<strong>工作不再有挑战性！（或者挑战性太大，自己放弃！）</strong> 因为还有很多挑战！很多东西等待我去战胜，并且我相信，战胜这些问题，让公司和自己都会有质的改变！这也就是所谓的成长空间吧~</p>
<p>今年大家经历了非常多，其中讨论最多的程序员吃年轻饭、中年危机、经济寒冬等，都会跟大家讨论一下。最好的时代，最坏的时代，都在当前，一起记录，迎接2019吧！</p>]]>
    
    </summary>
    
      <category term="2019" scheme="https://iHTCboy.com/tags/2019/"/>
    
      <category term="年终总结" scheme="https://iHTCboy.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="life" scheme="https://iHTCboy.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员的macOS系列：Mac开发环境配置]]></title>
    <link href="https://iHTCboy.com/2018/09/30/2018-09-30_%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS%E7%B3%BB%E5%88%97%EF%BC%9AMac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://iHTCboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/</id>
    <published>2018-09-30T15:49:16.000Z</published>
    <updated>2019-04-02T15:23:42.282Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在写《程序员的macOS系列》文章，之前写的第一篇 <a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a>，大家都希望楼主尽快更新，结果拖到了2个月后，所以今天终于更新啦！其实macOS开发环境，系统默认自带ruby、php、python2、gcc、g++、bash等环境，并且因为<code>macOS</code>是以<code>Unix</code>为基础，所以有传统<code>Unix/Linux</code>的特性，很适合高效少折腾的开发者。所以，本文主要讲解一些通用开发环境配置，主要是以必须和提高效率为主！也没有什么高深介绍，当然，由于楼主目前主职是iOS，所以其它的开发环境接触不多(谦虚)，当前大家要学以至用，环境搭建都是相似的，熟悉了就不是问题。文章短短不可能详尽也，要学好每一个点也不是那么简单，惟有抛砖引玉，希望大家努力提高！</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》三篇，后续有想法在更新吧~</p>
<a id="more"></a>
<h3 id="2、开发环境配置">2、开发环境配置</h3><p>需要提前说明一下，本文不使用代理源，如果命令无效，大家记得翻墙一下啊。本教程尽量都通过命令行方式完成配置，命令行依然是程序员最高效的环境！如果是通过软件包安装的方式，就不在这里列举了，比如<code>Java</code>的安装可以自行搜索~</p>
<h4 id="Homebrew">Homebrew</h4><p><code>Homebrew</code> 是强大的终端工具，用来管理很多在终端下操作的程序以及软件包的依赖，对于经常需要使用终端应用的程序员来说，是必不可少的第一步！</p>
<p>打开终端，安装命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>上面命令，我希望大家不只是复制粘贴运行就完事，更希望大家能了解更多：</p>
<ul>
<li><code>/usr/bin/ruby -e</code>：使用ruby环境运行</li>
<li><code>curl -fsSL</code>：使用curl命令下载</li>
</ul>
<p>了解了这2点，那么<code>ruby</code>环境、<code>curl</code>命令和参数的作用，相信大家就可以自行搜索深入学习，而不是片面过一次<code>复制粘贴运行</code>，达到学以致用，这才是<code>真学习</code>！</p>
<p><code>brew</code> 一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew search</span><br><span class="line">brew info</span><br><span class="line">brew install</span><br><span class="line">brew remove</span><br><span class="line">brew update</span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure>
<p><code>brew</code> 命令就不多说了，类似linux系统下的<code>apt-get</code>，程序员都要从入门到精通啊~</p>
<h4 id="命令行工具（Command_Line_Tools)">命令行工具（Command Line Tools)</h4><p>如果不是开发 <code>iOS</code> 或 <code>macOS</code> 可能就没有必要安装Xcode，但是可能需要安装一下Xcode 命令行工具，因为很多环境和软件都会使用到和依赖它（下面说到的<code>Carthage</code>、<code>python3</code>就依赖它）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<p><code>xcode-select</code> 这个命令还可以切换 xcode build 的版本（目录），可以 <code>xcode-select --help</code> 查看更多。</p>
<p>这里提醒一下新手，终端的命令，如果记得命令名字，不记得用法，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx --help</span><br></pre></td></tr></table></figure>
<p>也可以用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man xxx</span><br></pre></td></tr></table></figure>
<p><code>--help</code> 和 <code>man</code> 命令的区别，是<code>man</code>命令是详细全面的介绍。</p>
<h4 id="Bash（Zsh）">Bash（Zsh）</h4><p>zsh是一种<code>shell</code>语言，兼容<code>bash</code>，提供强大的命令行功能，比如tab补全，自动纠错功能等。</p>
<p>安装 <code>zsh</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure>
<p>使用 <code>oh-my-zsh</code> 可以将zsh变得更加强大而灵巧：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>另外可以安装 oh-my-zsh 一些插件，比如实现自动跳转：<a href="https://github.com/joelthelion/autojump" target="_blank" rel="external">autojump</a>、<a href="https://github.com/clvv/fasd" target="_blank" rel="external">fasd</a>、命令行自动提示<a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">zsh-autosuggestions</a></p>
<p>个性化配置，包括别名，都在目录 <code>~/.zshrc</code> 下，需要深入教程的大家自动网上搜索啊。这里只是配置入门，修行还是看个人啊！</p>
<p>创建别名的示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc //vim 命令下面会说到</span><br><span class="line"><span class="built_in">alias</span> myblog=<span class="string">'cd /Users/HTC/Documents/iHTCBlog'</span> //快速到达指定目录</span><br><span class="line"><span class="built_in">alias</span> st=<span class="string">'open -a "Sublime Text"'</span> //打开某个app</span><br></pre></td></tr></table></figure>
<h4 id="Node/npm">Node/npm</h4><p><code>Node(Node.js)</code> 是一个基于Chrome V8 引擎、能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript 运行环境。<code>Node.js</code> 使用了一个事件驱动、非阻塞式I/O 的模型，使其轻量又高效。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>安装 Node 后，也会自动安装<code>npm</code>工具。<code>npm</code> 即 node package manager，用来搜索、下载、管理 Node.js 相关的套件。</p>
<p><code>npm</code> 一些常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">help</span> //查看npm帮助</span><br><span class="line">npm find //查找组件</span><br><span class="line">npm install //安装组件</span><br><span class="line">npm remove //删除组件</span><br><span class="line">npm update //更新组件</span><br></pre></td></tr></table></figure>
<p><code>Node</code> 除了用于前端/后台开发外，<code>react native</code>、<code>Hexo</code>博客也是依赖 <code>Node</code> 环境，更多的 <code>Node</code> 知识，我也还在努力学习中，后续有新认识，再回来更新啊！就不误人子弟啦~</p>
<h4 id="vi(vim)">vi(vim)</h4><p><code>vi</code> 是 <code>visual interface</code> 的缩写，<code>vim</code> 是 <code>vi IMproved</code>(增强版的vi)。vi(vim) 命令繁多，但是如果灵活使用之后将会大大提高效率！从此不用鼠标不是梦！</p>
<p>vi(vim)是 Unix/Linux 终端自带的，所以 macOS 也自带。那么 vi(vim) 要配置什么呢？</p>
<p>就是大家觉得 vi(vim) 好用，但是，还认为可以更好用，所以，有很多的插件（用更少的按键，实现更多更合理的功能），例如实现文件浏览（<a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">NERD Tree</a>），代码补全（<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>），语法检查（<a href="https://github.com/vim-syntastic/syntastic" target="_blank" rel="external">syntastic</a>），文件模糊搜索（<a href="https://github.com/kien/ctrlp.vim" target="_blank" rel="external">ctrlp</a>），显示vim状态栏（<a href="https://github.com/Lokaltog/vim-powerline" target="_blank" rel="external">Vim Powerline</a>）,主题颜色（<a href="https://github.com/tomasr/molokai" target="_blank" rel="external">Molokai</a>）,显示文件结构（<a href="https://github.com/majutsushi/tagbar" target="_blank" rel="external">tagbar</a>）等多种功能</p>
<p>vi(vim) 操作的快捷键教程可以参考楼主之前的文章：<a href="https://ihtcboy.com/2018/07/28/2018-07-28_Vim快捷键小记/">vi(vim)快捷键小记</a></p>
<p>vim 设置编辑文本语法高亮：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> ~/.vimrc</span><br><span class="line"></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure>
<p>更多vi的知识，大家自行搜索学习啊~</p>
<h4 id="Git">Git</h4><p><code>git</code>的作用就不多说了，如果是刚毕业的新手入门，建议自行学习，对你的开发帮助一定非常大~</p>
<p><code>git</code> 安装：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>install git</span><br></pre></td></tr></table></figure>
<p><code>git</code>基本配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#34;iHTCboy&#34;&#10;git config --global user.email &#34;ihetiancong@gmail.com&#34;&#10;git config --global color.ui true&#10;git config --global alias.co checkout  # &#21035;&#21517;&#10;git config --global alias.ci commit&#10;git config --global alias.st status&#10;git config --global alias.br branch&#10;git config --global core.editor &#34;vim&#34;  # &#35774;&#32622;Editor&#20351;&#29992;vim&#10;git config --global core.quotepath false # &#35774;&#32622;&#26174;&#31034;&#20013;&#25991;&#25991;&#20214;&#21517;</span><br></pre></td></tr></table></figure>
<p>用户的git配置文件目录： <code>~/.gitconfig</code></p>
<ul>
<li><a href="https://github.com/jonas/tig" target="_blank" rel="external">tig</a> 高亮美化, 让 git 命令行可视化</li>
</ul>
<p><code>git</code> 更多命令教程，大家自行搜索，如果要达到熟悉，还是要多实践练习啊~ 当然，原理也是必不可少的一步！</p>
<h4 id="python3">python3</h4><p>python3 是未来，所以还是要安装使用和开发的！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure>
<p>查看 <code>python3</code>的版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure>
<p><code>python</code> 能做的事件就不多说了，人工智能，机器学习，大数据分析，爬虫，web，可以说<code>python</code>已经渗透到各个地方~</p>
<h4 id="jenkins">jenkins</h4><p>暂时留存，日后回来写</p>
<h4 id="CocoaPods">CocoaPods</h4><p><code>CocoaPods</code> 是iOS的包管理工具之一，类似于 java 的<code>Maven</code>、Node.js 的 <code>npm</code>、Python 的 <code>pip</code>、PHP 的 <code>Composer</code>、Ruby 的 <code>gem</code>。</p>
<p><code>CocoaPods</code> 基于<code>Ruby</code>开发的，因此安装<code>CocoaPods</code>前需要先安装<code>Ruby</code>环境。而前面提到macOS系统默认自带Ruby环境! 所以，直接用 Ruby 的 <code>gem</code> 环境安装吧~</p>
<p>1.安装命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>
<p>2.配置<code>CocoaPods</code>环境，安装<code>Specs</code>库，由于库很大(几百MB)，需要一些时间和网速：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure>
<p><code>pod</code> 一些常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pod --version //pod版本</span><br><span class="line">pod init //创建Podfile文件</span><br><span class="line">pod install //项目pod安装</span><br><span class="line">pod update //项目pod更新</span><br><span class="line">pod search //搜索库</span><br></pre></td></tr></table></figure></p>
<p>更多使用说明，自行搜索啊~</p>
<h4 id="Carthage">Carthage</h4><p>我们使用包管理，就是为了集成第三方库的时候更加方便，迅速。有时候iOS包管理工具 <code>CocoaPods</code> 处理因包管理而导致的错误又浪费了我们很多时间。而 <code>Carthage</code> 使用的是一种<strong>非侵入性</strong>的哲学，<code>Carthage</code> 不会对我们的项目结构进行任何修改，更不多创建 <code>workspace</code>。它只是根据我们描述文件中配置的第三方库，将它们下载到本地，然后使用 <code>xcodebuild</code> 构建成 <code>framework</code> 文件。</p>
<p>另外 <code>Carthage</code> 除了<strong>非侵入性</strong>，它还是<strong>去中心化</strong>的，它的包管理不像 <code>CocoaPods</code> 那样，有一个<strong>中心服务器(cocoapods.org)</strong>，来管理各个包的元信息，而是依赖于每个第三方库自己的源地址，比如 <code>Github</code>。</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install carthage</span><br></pre></td></tr></table></figure>
<p><code>carthage</code> 一些常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">carthage version //查看版本</span><br><span class="line">brew upgrade carthage //升级carthage</span><br><span class="line">carthage update //安装或更新项目的库</span><br></pre></td></tr></table></figure></p>
<p>更多使用说明，自行搜索啊~</p>
<h3 id="3、其它环境配置和插件">3、其它环境配置和插件</h3><h4 id="Finder（访达）预览插件">Finder（访达）预览插件</h4><p>用于<code>Finder</code>快速显示文件的内容，这个 GitHub 专门收集了特别的<code>Finder</code>插件：<br><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">https://github.com/sindresorhus/quick-look-plugins</a></p>
<p>安装命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask <span class="operator"><span class="keyword">install</span> qlcolorcode qlstephen qlmarkdown quicklook-<span class="keyword">json</span>  qlimagesize webpquicklook suspicious-<span class="keyword">package</span> quicklookase qlvideo provisionql quicklookapk</span></span><br></pre></td></tr></table></figure>
<p>其中特别的插件说明，详细看<a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">quick-look-plugins</a>：</p>
<ul>
<li>qlcolorcode: 代码文件预览时高亮</li>
<li>qlstephen: 以纯文本的形式预览无拓展名或者未知拓展名的文件</li>
<li>qlmarkdown: 预览渲染后的 markdown 文件</li>
<li>quicklook-json: 预览格式化后的 json 文件</li>
<li>ProvisionQL: ipa文件信息展示</li>
<li>QuickLookAPK：apk文件信息展示</li>
</ul>
<p>用图片来说明一下作用，一看就懂：<br>QuickLookJSON：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QuickLookJSON.png" alt=""></p>
<p>QLMarkdown：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QLMarkdown.png" alt="QLMarkdown.png"></p>
<p>ProvisionQL：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/ProvisionQL.png" alt=""></p>
<p>QuickLookAPK：<br><img src="https://github.com/sindresorhus/quick-look-plugins/raw/master/screenshots/QuickLookAPK.png" alt="QuickLookAPK.png"></p>
<h4 id="Hexo_博客">Hexo 博客</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo</span></span><br></pre></td></tr></table></figure>
<p>具体<code>hexo</code>使用，可能参考之前的文章：<a href="https://ihtcboy.com/2015/09/06/2015_Hexo搭建Github-Pages博客填坑教程/">Hexo搭建Github Pages博客填坑教程</a></p>
<p>建议每一个技术人员都搭建自己一个博客，依靠<code>GitHub</code>、<code>oschina</code>或<code>Coding.net</code>提供的免费服务，完全没问题，如果需要自己的域名，购买一个域名也就几百元就10年啦。程序员要多总结。比如你学习了一个技术或做了一个项目，没有一点记录，没有一点总结，没有一点思考，那么你能有收获吗？？？</p>
<h4 id="Safari_Extensions">Safari Extensions</h4><p>Safari 浏览器的插件<br><a href="https://safari-extensions.apple.com" target="_blank" rel="external">Apple - Safari - Safari Extensions Gallery</a></p>
<p>为什么会用<code>Safari</code>？ 不推荐 <code>Google Chrome</code> ？ 一定很多人有这样的疑问，其实， <code>Safari</code> 作为官方浏览器，就像<code>Windows</code>的 <code>IE</code>/<code>Edge</code>一样，自己的儿子，一定更好用。我认为有2点吧，</p>
<ul>
<li>1.Safari 可以完美同步打开的页面、书签、历史到其它<code>macOS/iOS</code>设备，无缝的。</li>
<li>2.Safari 的兼容性和性能，确实是比其它的要好，不管你认不认同-。-。（虽然前端页面兼容开发工程师会踩坑多~）</li>
</ul>
<p>我这里就推荐几个常用的：</p>
<ul>
<li><a href="https://safari-extensions.apple.com/details/?id=com.sidetree.Translate-S64NDGV2C5" target="_blank" rel="external">Translate</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.evernote.safari.clipper-Q79WDW8YH9" target="_blank" rel="external">Evernote Web Clipper</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.breadfm.webqr-2LGL679YYN" target="_blank" rel="external">webQR</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.damiancarrillo.search-alias-RADJYLEN7P" target="_blank" rel="external">Search Alias</a></li>
<li><a href="https://safari-extensions.apple.com/details/?id=com.diigo.safari.awesomescreenshot-5DXNM3K2CT" target="_blank" rel="external">Awesome Screenshot</a></li>
</ul>
<p>另外，macOS 10.14 后，苹果 Safari 浏览器不再支持不安全的扩展。只可以在 App Store 或 Safari 浏览器扩展库中查找经过 Apple 审核的更新扩展。</p>
<h4 id="Finder_访达">Finder 访达</h4><p>很多人可能跟我一样，不喜欢用第三方的文件管理应用，一般苹果自带能用的，我都不会使用第三方，一方便迁移成本高，另一方面系统自带的稳定性和内存占用都是做的较好。</p>
<p>对我来说，经常的痛点是，没有绝对路径显示！！！在 macOS 系统，可以通过 <code>option + command + P</code> 在Finder底部显示完整的当前路径和跳转。其它，还有一个骚操作，就是显示在标题栏：</p>
<ul>
<li>在 Finder 标题栏显示完整路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES;killall Finder</span><br></pre></td></tr></table></figure>
<ul>
<li>还原</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults delete com.apple.finder _FXShowPosixPathInTitle;killall Finder</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180930-Finder-Path.png" alt="20180930-Finder-Path.png"></p>
<h4 id="报错：无法打开已损坏的安装包">报错：无法打开已损坏的安装包</h4><p>遇到打开自己下载的安装包失败时，可执行下面命令解决：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<p>macOS 10.14 后，苹果对安全和隐私保护这一块更加严厉，当然，事件有好的一面，也有不好（不方便）的一面，大家智者见智，我一般是把这个命令当成别名：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> macss=<span class="string">"sudo spctl --master-disable"</span></span><br></pre></td></tr></table></figure>
<p>这里在终端输入 <code>macss</code> 就可以啦~</p>
<h4 id="终端命令">终端命令</h4><p>在终端和vim下，程序员的效率一定提升不少，但对于新手，下面也列出一些重要的终端命令，方便大家重点掌握，更多就大家自动搜索了：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>say xxx</td>
<td>读单词</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前目录的路径名</td>
</tr>
<tr>
<td>ls</td>
<td>查看当前目录下的文件</td>
</tr>
<tr>
<td>ls -al</td>
<td>查看所有文件，包含隐藏文件</td>
</tr>
<tr>
<td>clear</td>
<td>清除屏幕或窗口内容</td>
</tr>
<tr>
<td>cd /xx/yy</td>
<td>跳转到目录/xx/yy</td>
</tr>
<tr>
<td>cd ..</td>
<td>返回上一级目录</td>
</tr>
<tr>
<td>cd /</td>
<td>返回根目录</td>
</tr>
<tr>
<td>cd -</td>
<td>返回到上一步操作目录</td>
</tr>
<tr>
<td>cat xx</td>
<td>查看xx文件的内容</td>
</tr>
<tr>
<td>man xx</td>
<td>查看命令的详细帮助，比如 mac ls</td>
</tr>
<tr>
<td>killall Finder</td>
<td>重启Finder</td>
</tr>
<tr>
<td>touch xxx</td>
<td>创建xxx文件</td>
</tr>
<tr>
<td>mkdir xxx</td>
<td>创建xxx文件夹</td>
</tr>
<tr>
<td>rm xxx</td>
<td>删除文件</td>
</tr>
<tr>
<td>rm -rf xxxx</td>
<td>删除文件夹</td>
</tr>
<tr>
<td>defaults write com.apple.finder AppleShowAllFiles TRUE <br>killall Finder</td>
<td>查看隐藏文件</td>
</tr>
<tr>
<td>defaults write com.apple.finder AppleShowAllFiles FALSE <br>killall Finder</td>
<td>隐藏文件</td>
</tr>
<tr>
<td>↑ ↓</td>
<td>读取上一条或者下一条的命令记录</td>
</tr>
<tr>
<td>sudo vi /private/etc/hosts</td>
<td>编辑hosts文件</td>
</tr>
</tbody>
</table>
<p>还有非常多命令，大家可以自行搜索，比如</p>
<ul>
<li><a href="https://github.com/jingweno/ccat" target="_blank" rel="external">ccat</a> 高亮 cat 内容</li>
</ul>
<h3 id="总结">总结</h3><p>macOS的开发环境大概就讲到这些，如果大家还有不清楚的，网上搜索已经一大片，这里只是总结和归纳一下，让大家有一个系统性的了解和学习，只有大家系统性的全面了解，才能深入每一个知识点学习。这也是本文的目的，授于鱼，不如授于渔，希望大家努力学习~</p>
<p>楼主目前接触前端H5和后台开发时间不长，暂时不知道它们需要在macOS配置一些什么特别的环境，这些后续在补充，下面引用的参考，大家有时间一定要看看哦。这一篇就先这样~ 大家也可以留言反馈。国庆快乐~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://www.npmjs.com" target="_blank" rel="external">npm</a></li>
<li><a href="https://brew.sh" target="_blank" rel="external">The missing package manager for macOS — The missing package manager for macOS</a></li>
<li><a href="https://ihtcboy.com/2018/07/28/2018-07-28_Vim快捷键小记/">vi(vim)快捷键小记 | iHTCboy’s blog</a></li>
<li><a href="https://www.jianshu.com/p/a0b452f8f720" target="_blank" rel="external">Vim配置、插件和使用技巧 - 简书</a></li>
<li><a href="https://ihtcboy.com/2015/09/06/2015_Hexo搭建Github-Pages博客填坑教程/">Hexo搭建Github Pages博客填坑教程 | iHTCboy’s blog</a></li>
<li><a href="https://ihtcboy.com/2018/02/03/2018-02-03_让你的iTerm更Geek!/">让你的iTerm更Geek! | iHTCboy’s blog</a></li>
<li><a href="http://stormzhang.com/git/2014/01/27/git-common-command/" target="_blank" rel="external">Git常用命令备忘 - stormzhang</a></li>
<li><a href="https://bestswifter.gitbook.io/effectivemac/" target="_blank" rel="external">EffectiveMac - bestswifter</a></li>
<li><a href="https://ohmyz.sh" target="_blank" rel="external">Oh My Zsh - a delightful &amp; open source framework for Z-Shell</a></li>
<li><a href="https://leohxj.gitbooks.io/a-programmer-prepares/software/mac/softwares/zsh.html" target="_blank" rel="external">zsh | 程序员的自我修养</a></li>
<li><a href="https://github.com/jonas/tig" target="_blank" rel="external">tig</a></li>
<li><a href="https://github.com/jingweno/ccat" target="_blank" rel="external">ccat</a></li>
<li><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="external">sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers</a></li>
<li><a href="https://cocoapods.org" target="_blank" rel="external">CocoaPods.org</a></li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage/Carthage: A simple, decentralized dependency manager for Cocoa</a></li>
<li><a href="http://swiftcafe.io/2015/10/25/swift-daily-carthage-package" target="_blank" rel="external">Carthage 包管理工具，另一种敏捷轻快的 iOS &amp; MAC 开发体验 - SwiftCafe 享受代码的乐趣</a></li>
<li><a href="https://safari-extensions.apple.com" target="_blank" rel="external">Apple - Safari - Safari Extensions Gallery</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在写《程序员的macOS系列》文章，之前写的第一篇 <a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a>，大家都希望楼主尽快更新，结果拖到了2个月后，所以今天终于更新啦！其实macOS开发环境，系统默认自带ruby、php、python2、gcc、g++、bash等环境，并且因为<code>macOS</code>是以<code>Unix</code>为基础，所以有传统<code>Unix/Linux</code>的特性，很适合高效少折腾的开发者。所以，本文主要讲解一些通用开发环境配置，主要是以必须和提高效率为主！也没有什么高深介绍，当然，由于楼主目前主职是iOS，所以其它的开发环境接触不多(谦虚)，当前大家要学以至用，环境搭建都是相似的，熟悉了就不是问题。文章短短不可能详尽也，要学好每一个点也不是那么简单，惟有抛砖引玉，希望大家努力提高！</p>
<ul>
<li><a href="https://ihtcboy.com/2018/07/15/2018-07-15_程序员的macOS系列：精选MacApp/">程序员的macOS系列：精选Mac App</a></li>
<li><a href="https://ihtcboy.com/2018/09/30/2018-09-30_程序员的macOS系列：Mac开发环境配置/">程序员的macOS系列：Mac开发环境配置</a></li>
<li>程序员的macOS系列：高效Alfred进阶</li>
</ul>
<p>目前计划写《程序员的macOS系列》三篇，后续有想法在更新吧~</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="https://iHTCboy.com/tags/Mac/"/>
    
      <category term="macOS" scheme="https://iHTCboy.com/tags/macOS/"/>
    
      <category term="开发环境" scheme="https://iHTCboy.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="程序员的macOS" scheme="https://iHTCboy.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hopper Disassembler 逆向西数硬盘 WD My Passport 的失败经历]]></title>
    <link href="https://iHTCboy.com/2018/09/27/2018-09-27-Hopper%E9%80%86%E5%90%91WD-MyPassport%E7%9A%84%E5%A4%B1%E8%B4%A5%E7%BB%8F%E5%8E%86/"/>
    <id>https://iHTCboy.com/2018/09/27/2018-09-27-Hopper逆向WD-MyPassport的失败经历/</id>
    <published>2018-09-27T13:49:16.000Z</published>
    <updated>2018-09-30T13:49:42.623Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>一直以来都是使用西数的移动硬盘，最开始256G的 <code>My Passport</code>，当时也不知道，在电脑城就买了，回家发现可以设置密码，当然，我记得有密码的存储设备，是台电的U盘，当年16G的加密U盘，我也买了3个（因为当年最大16G容量），所以，之后就与加密的存储设备相惜相爱，现在西数的移动硬盘也是几代后的AES 256位硬件加密。加密功能的存储设备越来越受喜爱，除了大部分网盘破产外，就是隐私的问题，大家都希望有自己的小空间。</p>
<p>几天前，购买了4T的 WD My Passport 加密移动硬盘，设置了一个新密码，然后过完中秋，发现！密码记不起来了！！！反复尝试，只能看到破解！！！</p>
<a id="more"></a>
<h3 id="2、怎么办？">2、怎么办？</h3><p>先说一下，WD怎么打开硬盘，密码位数不限制，字符、数字和特殊符号都可以，然后，只能点击界面上的 <code>硬盘解锁</code> 才能解锁。按回车没有反应：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive.jpg" alt="20180927-WD-unlock-drive.jpg"></p>
<p>如果尝试密码超过5次，只能把USB拨出，重新插入才能重新尝试：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive-max.jpg" alt="20180927-WD-unlock-drive-max.jpg"></p>
<p>知道了这个流程，就想到几个思路，找到点击<code>硬盘解锁</code> 点击的处理方法，返回成功就可以了？</p>
<p>Hopper Disassembler ：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-WD-unlock-drive-hopper.jpg" alt="20180927-WD-unlock-drive-hopper.jpg"></p>
<p>从上面的图片，可以找到这个方法，非常明显示了！</p>
<p>然后打开伪代码界面，里面的第一个判断是，如果 <code>rax==0x7</code> ，就会进入到失败的逻辑处理中，所以这样要修复它为不等于（!=），下面在说怎么修改：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-if1.jpg" alt="20180927-hopper-processUnlockDrive-if1.jpg"></p>
<p>下面这个判断是 如果 <code>rax==0x6</code> ，就是密码正确，可以打开硬盘！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-if2.jpg" alt="20180927-hopper-processUnlockDrive-if2.jpg"></p>
<p>下图，可以看出<code>cmp eax, 0x7</code>，就是上面说的比较是否相等，因此选中<code>cmp eax, 0x7</code>一行，选择菜单栏 <code>Modify -&gt; Assemble Instruction</code>，然后后面的0x7为其它值，这样就不相等了<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-fix1.jpg" alt="20180927-hopper-processUnlockDrive-fix1.jpg"></p>
<p>然后，这个也是相似，如果要让他相等，那么这个值改为<code>0x7</code>，因为失败时就是走上一个if判断中了，所以改一下这个值指向，应该就可以相等了吧？<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-fix2.jpg" alt="20180927-hopper-processUnlockDrive-fix2.jpg"></p>
<p>最后，选择 <code>File -&gt; Produce New Executable</code> 来生成新的可执行文件，替换掉原来的文件即可。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180927-hopper-processUnlockDrive-copy-new.jpg" alt="20180927-hopper-processUnlockDrive-copy-new.jpg"></p>
<p>但是，想复制新的可执行文件替换失败：<code>Read-only file system</code>！！！</p>
<p>最后，查了一些方法，也没有办法修改这个硬盘的这个目录属性，唉，这个方法不知道有没有效果？？？ 最后，还是乱输入时，记起了密码！！！然后就没有然后了。</p>
<p>剩下的，就看大家有能力的，来补充一下啊~ 或者，若干年后有能力罢。</p>
<h3 id="总结">总结</h3><p>总结。西数硬盘这个5次失败密码要重新链接的功能，让破解密码变得复杂，当然，能一直尝试密码也是有好处，也是弱处。</p>
<p>最后，发现会一点逆向技术，不管是正向的开发，还是逆向的开发，都会对提高自己开发的系统的安全性，有更好的思考！！！另外，真的需要有时候，回来学习一下汇编语言，是提高逆向内功的必经之路，在这里，先立个目录，回头尝尝，大家一起加油~ 监督！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/c04ac36c6641" target="_blank" rel="external">最简单的Hopper Disassembler玩转Mac逆向 - 简书</a></li>
<li><a href="http://www.blogfshare.com/ioss-hopper.html" target="_blank" rel="external">iOS安全–使用Hopper修改程序逻辑跳过验证</a></li>
<li><a href="https://bestswifter.com/app-crack/" target="_blank" rel="external">一个数字的魔法——破解Mac上198元的Paw</a></li>
<li><a href="https://www.jianshu.com/p/33e40af6e328" target="_blank" rel="external">Mac OSX 之自己动手初步学习破解软件入门 - 简书</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>一直以来都是使用西数的移动硬盘，最开始256G的 <code>My Passport</code>，当时也不知道，在电脑城就买了，回家发现可以设置密码，当然，我记得有密码的存储设备，是台电的U盘，当年16G的加密U盘，我也买了3个（因为当年最大16G容量），所以，之后就与加密的存储设备相惜相爱，现在西数的移动硬盘也是几代后的AES 256位硬件加密。加密功能的存储设备越来越受喜爱，除了大部分网盘破产外，就是隐私的问题，大家都希望有自己的小空间。</p>
<p>几天前，购买了4T的 WD My Passport 加密移动硬盘，设置了一个新密码，然后过完中秋，发现！密码记不起来了！！！反复尝试，只能看到破解！！！</p>]]>
    
    </summary>
    
      <category term="Disassembler" scheme="https://iHTCboy.com/tags/Disassembler/"/>
    
      <category term="Hopper" scheme="https://iHTCboy.com/tags/Hopper/"/>
    
      <category term="MyPassport" scheme="https://iHTCboy.com/tags/MyPassport/"/>
    
      <category term="WD" scheme="https://iHTCboy.com/tags/WD/"/>
    
      <category term="西数硬盘" scheme="https://iHTCboy.com/tags/%E8%A5%BF%E6%95%B0%E7%A1%AC%E7%9B%98/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AppStore 拒绝审核原因：PLA 2.3]]></title>
    <link href="https://iHTCboy.com/2018/09/24/2018-09-24_%E8%8B%B9%E6%9E%9C%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92PLA_2.3/"/>
    <id>https://iHTCboy.com/2018/09/24/2018-09-24_苹果审核被拒PLA_2.3/</id>
    <published>2018-09-24T06:49:16.000Z</published>
    <updated>2018-09-24T13:20:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近更新了一下之前开源的一些iOS App，适配了一下iPhone X / Xs / XR / Xs Max，然后收到这样的拒审信：</p>
<blockquote>
<p>2018年9月24日 上午1:08<br>发件人 Apple</p>
<ol>
<li>10.0 Before You Submit: Program License Agreement<br>PLA 2.3</li>
</ol>
<p>Your app or its metadata contains references to a pre-release version of Apple software or hardware. Apps with compatibility references to a pre-GM version of iOS SDK or pre-released Apple hardware are not in compliance with the Apple Developer Program License Agreement.</p>
<p>Specifically, section 2.3 states:</p>
<p>“Apple may provide You with pre-release versions of the Apple Software or related services that constitute Apple Confidential Information and are subject to the confidentiality obligations of this Agreement.”</p>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple software and hardware from your app and its metadata.</p>
<p>Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata, visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, reply to this message in Resolution Center and we will continue the review.</p>
</blockquote>
<a id="more"></a>
<h3 id="2、解决">2、解决</h3><p>刚开始以为自己使用了 Xcode GM 版本提交应用，但反复检查就是正式的Xcode Version 10.0 (10A255)!</p>
<p>最后，还是通过网络搜索找到答案：</p>
<blockquote>
<p>此版本的新增内容:</p>
<ul>
<li>v5.0.0 适配iPhoneX、XR、Xmax ；</li>
<li>修复新闻列表闪退问题；</li>
<li>优化一些功能细节体验</li>
</ul>
</blockquote>
<p>引用网友的话：</p>
<blockquote>
<p>你的发布介绍里提到了苹果没开卖的iPadPro，删掉重新审核就行，不用重新上传包。回复大概这意思</p>
</blockquote>
<p>然后搜索iPhone Xs上市时间?</p>
<blockquote>
<p>将在9月14日周五开启预售，9月21日正式上市</p>
</blockquote>
<p>没毛病！！！今天已经2018年9月24号啦！<br>最后，还是发现，字母拼写错啦！！！</p>
<blockquote>
<ul>
<li>v5.0.0 适配 iPhone X、XR、XS Max；</li>
<li>修复新闻列表闪退问题；</li>
<li>优化一些功能细节体验</li>
</ul>
</blockquote>
<ul>
<li>最后发现，还是被坑了一波：</li>
</ul>
<blockquote>
<p>iPhone X🅁 即将到来iPhone XR 即将到来<br>北京时间 10 月 19 日下午 3:01 起开始预购。</p>
</blockquote>
<p>苹果拒审信：</p>
<blockquote>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple hardware from your app’s metadata such as iPhone XR.</p>
</blockquote>
<p>最后苹果友善回复：</p>
<blockquote>
<p>2018年9月24日 下午8:49<br>发件人 Apple<br>0 . 10.0 Before You Submit: Program License Agreement<br>Hello,</p>
<p>Thank you for making these changes. We will continue the review, and we will notify you if there are any further issues.</p>
<p>Best regards,</p>
<p>App Store Review</p>
</blockquote>
<h3 id="3、总结">3、总结</h3><p>还是第一次遇到这样的情况，苹果不允许发布无上线的硬件或软件产品，也就是说，不能写错名字！！！确实，这样的要求，完全合理！！！</p>
<p>经过这事，苹果的审核确实还是存在很多问题，经过这几年，审核速度可以给予肯定，从原来一个星期，变快到1~2天，但是“审核质量” 却一直没有得到提升，导致开发者和审核员一直来回被拒来拒绝，相互怀疑和猜测，导致效率并没有真正的提高。希望，后续苹果能提供更优质的审核机制和流程标准。像谷歌play那样的机器审核也未必不行，后续在抽查，发现违反的，直接下架。这样对于开发者，都没有什么要向老板交待，直接了当！</p>
<h3 id="参考">参考</h3><ul>
<li><a href="http://swiftcn.io/topics/48?reply=185" target="_blank" rel="external">最近被拒，不知道什么原因，内容是 PLA 2.3 - Swift中国</a></li>
<li><a href="https://www.apple.com/cn/shop/buy-iphone/iphone-xr" target="_blank" rel="external">购买 iPhone XR - Apple (中国)</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近更新了一下之前开源的一些iOS App，适配了一下iPhone X / Xs / XR / Xs Max，然后收到这样的拒审信：</p>
<blockquote>
<p>2018年9月24日 上午1:08<br>发件人 Apple</p>
<ol>
<li>10.0 Before You Submit: Program License Agreement<br>PLA 2.3</li>
</ol>
<p>Your app or its metadata contains references to a pre-release version of Apple software or hardware. Apps with compatibility references to a pre-GM version of iOS SDK or pre-released Apple hardware are not in compliance with the Apple Developer Program License Agreement.</p>
<p>Specifically, section 2.3 states:</p>
<p>“Apple may provide You with pre-release versions of the Apple Software or related services that constitute Apple Confidential Information and are subject to the confidentiality obligations of this Agreement.”</p>
<p>Next Steps</p>
<p>Please remove all references to pre-release versions of Apple software and hardware from your app and its metadata.</p>
<p>Since your App Store Connect status is Metadata Rejected, we do NOT require a new binary. To revise the metadata, visit App Store Connect to select your app and revise the desired metadata values. Once you’ve completed all changes, reply to this message in Resolution Center and we will continue the review.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="AppStore" scheme="https://iHTCboy.com/tags/AppStore/"/>
    
      <category term="PLA2.3" scheme="https://iHTCboy.com/tags/PLA2-3/"/>
    
      <category term="review-guidelines" scheme="https://iHTCboy.com/tags/review-guidelines/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧5 - 全自动打包ipa]]></title>
    <link href="https://iHTCboy.com/2018/09/17/2018-09-17_shell%E6%8A%80%E5%B7%A75_%E5%85%A8%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90ipa/"/>
    <id>https://iHTCboy.com/2018/09/17/2018-09-17_shell技巧5_全自动打包生成ipa/</id>
    <published>2018-09-17T03:22:16.000Z</published>
    <updated>2018-09-28T15:22:42.259Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在研究上传ipa文件自动上传到苹果后台（后续有时间也分享给大家啊），然后，就需要制作大量的ipa文件啊！如果手工的<code>Archive</code> 那不就死啦，整个步骤，大概要5分钟过程，而且不是一步到位等5分钟，所以就研究了一下项目如何自动打ipa，最后找到了 <a href="https://www.jianshu.com/p/9792b704b18f" target="_blank" rel="external">iOS项目之自动化打包 - 简书</a> 这篇文件，然后根据需求，扩展做了全能自动化的，app-store、ad-hoc、dev 三种类型证书，另外项目如果是用cocoapod，需要用 <code>-workspace</code>，否则用 <code>-project</code>，都做了相当自能化的改造，下面就来看看吧！</p>
<p>ps: <code>fastlane</code> 当然能做到这些事情，但是这个工具太重，需要的配置也需要熟悉，对于刚毕业或陌生的同学有点难，学习一下<code>ruby</code>也是好事，大家有兴趣可以自行研究一下~</p>
<a id="more"></a>
<h3 id="2、使用说明">2、使用说明</h3><p>本文，也不打算讲 <code>xcodebuild</code> 命令的原理，大家需要自动搜索，网上很多教程了。所以，我们先过一下，怎么打包吧！</p>
<ul>
<li><p>把 <code>build_ipa_shell</code> 脚本和证书配置文件夹复制到项目</p>
<p>  <img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Shell-copy-script-to-project.png" alt="20180917-Shell-copy-script-to-project.png"></p>
</li>
<li><p>根据要求修改项目名字和配置</p>
<p>  <img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Shell-build-setting.png" alt="20180917-Shell-build-setting.png"></p>
</li>
<li><p>在终端执行 <code>sh build_ipa.sh</code>，不要求切换到项目的目录啊，然后选择打包的类型，然后等待就好！</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ &#62; sh /Users/HTC/Desktop/BuildIPAExample/build_ipa_shell/build_ipa.sh &#10;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>编译打包成功后，会自动打开ipa文件的目录！<br>  <img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Shell-build-success-ipa.png" alt="20180917-Shell-build-success-ipa.png"></li>
</ul>
<p>如果配置好后，只要执行一下命令，就自动打ipa包，并且成功后自己打开ipa包的目录，简直不能在简单了！</p>
<h3 id="3、配置说明">3、配置说明</h3><p>上面已经说了 <code>build_ipa.sh</code>的配置，就是 <code>ExportOptions-appstore.plist</code> /<code>ExportOptions-dev.plist</code> / <code>ExportOptions-adhoc.plist</code> 三个证书的配置没有说，其实也很简单，自己配置，或者让Xcode生成配置！</p>
<p>自己配置的就不说了，自己搜索一下教程就好，让Xcode生成，就是要 <code>Archive</code> 项目，然后选择 <code>Export...</code>：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Build-Archives.png" alt="20180917-Xcode-Build-Archives.png"></p>
<p>上面三个文件，就对应下面的三个选项:<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-Select-Method.png" alt="20180917-Xcode-Archives-Select-Method.png"></p>
<p>如果选择手动，就是使用本地的证书（如果是选择自动，就是Xcode中登陆了开发者账号，自动生成和匹配证书）：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-Select-Manually.png" alt="20180917-Xcode-Archives-Select-Manually.png"></p>
<p>等待Xcode生成ipa包，选择 <code>Export</code>，Xcode就会自动生成ipa文件和证书配置文件，跟我们的脚本一样的：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-Select-Automatically.png" alt="20180917-Xcode-Archives-Select-Automatically.png"></p>
<p>最后，导出的文件中，更改<code>ExportOptions.plist</code> 文件名字为对应的 <code>ExportOptions-appstore.plist</code> /<code>ExportOptions-dev.plist</code> / <code>ExportOptions-adhoc.plist</code>，然后复制到  <code>build_ipa_shell</code> 脚本目录就可以啦！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180917-Xcode-Archives-ExportOptions-plist.png" alt="20180917-Xcode-Archives-ExportOptions-plist.png"></p>
<h3 id="4、一些坑点">4、一些坑点</h3><p>打包时，遇到下面报错：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">09</span>-<span class="number">17</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">23.068</span> xcodebuild[<span class="number">11322</span>:<span class="number">5883826</span>] [MT] IDEDistribution: Step failed: &lt;IDEDistributionPackagingStep: <span class="number">0x7ff88e7ab7c0</span>&gt;: Error Domain=NSCocoaErrorDomain Code=<span class="number">3840</span> <span class="string">"No value."</span> UserInfo=&#123;NSDebugDescription=No value., NSFilePath=/var/folders/<span class="number">12</span>/yqg0r8s508lfmzw6b91nh97m0000gn/T/ipatool-json-filepath-vo804k&#125;</span><br><span class="line">error: exportArchive: The data couldn’t be read because it isn’t in the correct format.</span><br><span class="line"></span><br><span class="line">Error Domain=NSCocoaErrorDomain Code=<span class="number">3840</span> <span class="string">"No value."</span> UserInfo=&#123;NSDebugDescription=No value., NSFilePath=/var/folders/<span class="number">12</span>/yqg0r8s508lfmzw6b91nh97m0000gn/T/ipatool-json-filepath-vo804k&#125;</span><br><span class="line"></span><br><span class="line">** EXPORT FAILED **</span><br></pre></td></tr></table></figure></p>
<p>解决方法：<br>将对应打包的证书plist文件的<code>compileBitcode</code>内容由 <code>true</code> 改为 <code>false</code> 就可以：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>compileBitcode<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">false</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5、源代码">5、源代码</h3><p>具体的代码，也可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://github.com/iHTCboy/BuildIPAExample" target="_blank" rel="external">iHTCboy/BuildIPAExample: Build IPA file Example</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;#&#33719;&#21462;&#33050;&#26412;&#25191;&#34892;&#30446;&#24405;&#10;scrip_path=&#34;$( cd &#34;$( dirname &#34;$&#123;BASH_SOURCE[0]&#125;&#34; )&#34; &#38;&#38; pwd )&#34;&#10;&#10;#&#24037;&#31243;&#32477;&#23545;&#36335;&#24452;&#10;project_path=$(dirname &#34;$scrip_path&#34;)&#10;&#10;#&#24037;&#31243;&#21517; &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;&#24037;&#31243;&#21517;&#10;project_name=BuildIPAExample&#10;&#10;#scheme&#21517; &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;sheme&#21517;&#10;scheme_name=BuildIPAExample&#10;&#10;#project_type &#39033;&#30446;&#22914;&#26524;&#26159;&#29992;cocoapod&#65292;&#23601;&#25913;&#20026; xcworkspace&#65292;&#21542;&#21017;&#29992; xcodeproj&#10;project_type=xcodeproj&#10;&#10;#&#25171;&#21253;&#27169;&#24335; Debug/Release&#10;development_mode=Debug&#10;&#10;#build&#25991;&#20214;&#22841;&#36335;&#24452;&#10;build_path=$&#123;project_path&#125;/build&#10;&#10;#plist&#25991;&#20214;&#25152;&#22312;&#36335;&#24452;&#10;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-dev.plist&#10;&#10;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;&#10;read number&#10;while([[ $number != 1 ]] &#38;&#38; [[ $number != 2 ]] &#38;&#38; [[ $number != 3 ]])&#10;do&#10;echo &#34;Error! Should enter 1 or 2 or 3&#34;&#10;echo &#34;Place enter the number you want to export ? [ 1:app-store 2:ad-hoc 3:dev] &#34;&#10;read number&#10;done&#10;&#10;if [ $number == 1 ];then&#10;&#9;development_mode=Release&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-appstore.plist&#10;&#10;elif [ $number == 2 ];then&#10;&#9;development_mode=Release&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-adhoc.plist&#10;else&#10;&#9;development_mode=Debug&#10;&#9;exportOptionsPlistPath=$&#123;project_path&#125;/build_ipa_shell/ExportOptions-dev.plist&#10;fi&#10;&#10;#&#23548;&#20986;.ipa&#25991;&#20214;&#25152;&#22312;&#36335;&#24452;&#10;exportIpaPath=$&#123;project_path&#125;/ipa_files/$&#123;development_mode&#125;&#10;&#10;# &#29983;&#25104;&#20445;&#23384;ipa&#25991;&#20214;&#30340;&#30446;&#24405;&#10;if [ ! -d $&#123;project_path&#125;/ipa_files ];&#10;then&#10;mkdir -p $&#123;project_path&#125;/ipa_files;&#10;fi&#10;&#10;# &#25171;&#21253;&#31867;&#22411;&#10;if [ $project_type == &#34;xcodeproj&#34; ];&#10;then&#10;&#9;project_build=project&#10;else&#10;&#9;project_build=workspace&#10;fi&#10;&#10;# &#36827;&#20837;&#39033;&#30446;&#30446;&#24405;&#65292;&#26041;&#20415;&#21518;&#38754;&#30340;&#25805;&#20316;&#10;cd $&#123;project_path&#125;&#10;&#10;echo &#39;///-----------&#39;&#10;echo &#39;/// &#27491;&#22312;&#28165;&#29702;&#24037;&#31243;&#39;&#10;echo &#39;///-----------&#39;&#10;xcodebuild \&#10;clean -configuration $&#123;development_mode&#125; -quiet  || exit&#10;&#10;echo &#39;///--------&#39;&#10;echo &#39;/// &#28165;&#29702;&#23436;&#25104;&#39;&#10;echo &#39;///--------&#39;&#10;echo &#39;&#39;&#10;&#10;echo &#39;///-----------&#39;&#10;echo &#39;/// &#27491;&#22312;&#32534;&#35793;&#24037;&#31243;:&#39;$&#123;development_mode&#125;&#10;echo &#39;///-----------&#39;&#10;xcodebuild \&#10;archive -$&#123;project_build&#125; $&#123;project_path&#125;/$&#123;project_name&#125;.$&#123;project_type&#125; \&#10;-scheme $&#123;scheme_name&#125; \&#10;-configuration $&#123;development_mode&#125; \&#10;-archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive  -quiet  || exit&#10;&#10;echo &#39;///--------&#39;&#10;echo &#39;/// &#32534;&#35793;&#23436;&#25104;&#39;&#10;echo &#39;///--------&#39;&#10;echo &#39;&#39;&#10;&#10;echo &#39;///----------&#39;&#10;echo &#39;/// &#24320;&#22987;ipa&#25171;&#21253;&#39;&#10;echo &#39;///----------&#39;&#10;xcodebuild -exportArchive -archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive \&#10;-configuration $&#123;development_mode&#125; \&#10;-exportPath $&#123;exportIpaPath&#125; \&#10;-exportOptionsPlist $&#123;exportOptionsPlistPath&#125; \&#10;-quiet || exit&#10;&#10;if [ -e $exportIpaPath/$scheme_name.ipa ]; then&#10;echo &#39;///----------&#39;&#10;echo &#39;/// ipa&#21253;&#24050;&#23548;&#20986;&#39;&#10;echo &#39;///----------&#39;&#10;open $exportIpaPath&#10;else&#10;echo &#39;///-------------&#39;&#10;echo &#39;/// ipa&#21253;&#23548;&#20986;&#22833;&#36133; &#39;&#10;echo &#39;///-------------&#39;&#10;fi&#10;echo &#39;///------------&#39;&#10;echo &#39;/// &#25171;&#21253;ipa&#23436;&#25104;  &#39;&#10;echo &#39;///-----------=&#39;&#10;echo &#39;&#39;&#10;&#10;# &#25171;&#24320;&#29983;&#25104;ipa&#30340;&#30446;&#24405;&#10;open $&#123;exportIpaPath&#125;&#10;&#10;# echo &#39;///-------------&#39;&#10;# echo &#39;/// &#24320;&#22987;&#21457;&#24067;ipa&#21253; &#39;&#10;# echo &#39;///-------------&#39;&#10;&#10;# if [ $number == 1 ];then&#10;&#10;# #&#39564;&#35777;&#24182;&#19978;&#20256;&#21040;App Store&#10;# # &#23558;-u &#21518;&#38754;&#30340;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;AppleID&#30340;&#36134;&#21495;&#65292;-p&#21518;&#38754;&#30340;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;&#23494;&#30721;&#10;# altoolPath=&#34;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&#34;&#10;# &#34;$altoolPath&#34; --validate-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u XXX -p XXX -t ios --output-format xml&#10;# &#34;$altoolPath&#34; --upload-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u  XXX -p XXX -t ios --output-format xml&#10;# else&#10;&#10;# #&#19978;&#20256;&#21040;Fir&#10;# # &#23558;XXX&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;Fir&#24179;&#21488;&#30340;token&#10;# fir login -T XXX&#10;# fir publish $exportIpaPath/$scheme_name.ipa&#10;&#10;# fi&#10;&#10;exit 0</span><br></pre></td></tr></table></figure>
<h3 id="6、总结">6、总结</h3><p>通过本次脚本，又让效率提升了n倍，以后打包不在害怕啦！！！另外，脚本中，还包含 上传到 <code>AppStore</code> 或第三方平台的功能，这里就先不写啦，大家有兴趣可以自行实践，和前面几篇技巧一样，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！</p>
<p>后续有更多技巧，会继续给大家分享，期待~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/9792b704b18f" target="_blank" rel="external">iOS项目之自动化打包 - 简书</a></li>
<li><a href="https://forums.developer.apple.com/thread/100065" target="_blank" rel="external">Xcode9 iOS export archive fails on correct format |Apple Developer Forums</a></li>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://github.com/iHTCboy/BuildIPAExample" target="_blank" rel="external">iHTCboy/BuildIPAExample: Build IPA file Example</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在研究上传ipa文件自动上传到苹果后台（后续有时间也分享给大家啊），然后，就需要制作大量的ipa文件啊！如果手工的<code>Archive</code> 那不就死啦，整个步骤，大概要5分钟过程，而且不是一步到位等5分钟，所以就研究了一下项目如何自动打ipa，最后找到了 <a href="https://www.jianshu.com/p/9792b704b18f">iOS项目之自动化打包 - 简书</a> 这篇文件，然后根据需求，扩展做了全能自动化的，app-store、ad-hoc、dev 三种类型证书，另外项目如果是用cocoapod，需要用 <code>-workspace</code>，否则用 <code>-project</code>，都做了相当自能化的改造，下面就来看看吧！</p>
<p>ps: <code>fastlane</code> 当然能做到这些事情，但是这个工具太重，需要的配置也需要熟悉，对于刚毕业或陌生的同学有点难，学习一下<code>ruby</code>也是好事，大家有兴趣可以自行研究一下~</p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="ipa" scheme="https://iHTCboy.com/tags/ipa/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="xcodebuild" scheme="https://iHTCboy.com/tags/xcodebuild/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧4 - nm命令解决AppStore2.5.2被拒问题]]></title>
    <link href="https://iHTCboy.com/2018/09/16/2018-09-16_shell%E6%8A%80%E5%B7%A74_nm%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3AppStore%E8%A2%AB%E6%8B%92%E9%97%AE%E9%A2%98/"/>
    <id>https://iHTCboy.com/2018/09/16/2018-09-16_shell技巧4_nm命令解决AppStore被拒问题/</id>
    <published>2018-09-16T14:20:16.000Z</published>
    <updated>2018-09-19T14:16:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近App Store审核被拒，<code>2. 5 Performance: Software Requirements，Guideline 2.5.2 - Performance - Software Requirements</code>，遇到这样的问题，回信问苹果，肯定得不到答案，苹果就是<code>礼貌</code>的回复。经过一个星期的重复被拒，只能自己找问题，热更新问题，苹果拒审信一直长这样：</p>
<blockquote>
<p>….<br>This code, combined with a remote resource, can facilitate significant changes to your app’s behavior compared to when it was initially reviewed for the App Store. While you may not be using this functionality currently, it has the potential to load private frameworks, private methods, and enable future feature changes. This includes any code which passes arbitrary parameters to dynamic methods such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations(), and running remote scripts in order to change app behavior and/or call SPI, based on the contents of the downloaded script. Even if the remote resource is not intentionally malicious, it could easily be hijacked via a Man In The Middle (MiTM) attack, which can pose a serious security vulnerability to users of your app.<br> …</p>
</blockquote>
<p>从中找到了一些关键点：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dlopen</span><span class="params">()</span></span>, <span class="function"><span class="title">dlsym</span><span class="params">()</span></span>, respondsToSelector:, performSelector:, <span class="function"><span class="title">method_exchangeImplementations</span><span class="params">()</span></span>,</span><br></pre></td></tr></table></figure>
<p>然后在 <a href="https://zhuanlan.zhihu.com/p/41863648" target="_blank" rel="external">「iOS」热更新审核被拒的解决方法</a> 文章中，找到可以打印下第三方的.a文件看看，看有没有 dlopen(), dlsym()，命令行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -u libwechaat.a &#62;&#62; xxx.txt</span><br></pre></td></tr></table></figure>
<p>注：<code>nm -u path</code>：Display only undefined symbols。更多 <code>nm</code> 命令可查看我之前总结的文章 <a href="https://ihtcboy.com/2018/02/04/2018-02-04_Mac查看文件内容常用的命令小结/">Mac查看文件内容常用的命令小结</a></p>
<a id="more"></a>
<h3 id="2、定位和查到问题">2、定位和查到问题</h3><p>找到了方向，就是利用 <code>nm</code> 命令查到所有第三方的 <code>.a</code> / <code>.framework</code>是否有相关的方法。</p>
<p>但是如果一个一个库用<code>nm</code>命令去查找，效率非常低，而且每一个库的目录不一样，所以，想到用sehll脚本，整个工程遍历全部的文件，查到到库的，然后打印出来！这才是万利的方法啊！！</p>
<h3 id="3、shell_编程">3、shell 编程</h3><p>这里思路大家应该也想到，就是遍历目录，一个一个文件判断，问题的关键出来了！就是怎么判断一个文件是不是<code>.a</code> 或 <code>.framework</code> ？ </p>
<p>其实，可以利用 <code>file</code> 打印当前读取的文件的类型，如果是 <code>Mach-O</code> 类型，就是库文件。比如终端执行 <code>file libWeChatSDK.a</code> 会打印如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">libWeChatSDK<span class="variable">.a</span>: Mach-O universal binary with <span class="number">5</span> architectures: [i386:current ar archive] [arm64]</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture i386):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture armv7):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture armv7s):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture x86_64):	current ar archive</span><br><span class="line">libWeChatSDK<span class="variable">.a</span> (<span class="keyword">for</span> architecture arm64):	current ar archive</span><br></pre></td></tr></table></figure>
<p>然后用管道 <code>grep</code> 查找 ‘Mach-O’ 关键字，如果存在，就执行 <code>nm -u file_path</code> 查看所有的方法，最后通过 <code>grep -E &#39;dlopen|method_exchangeImplementations|performSelector|respondsToSelector|dlsym&#39;</code> 查找包含匹配 <code>dlopen</code> <code>method_exchangeImplementations</code> <code>performSelector</code> <code>respondsToSelector</code> <code>dlsym</code> 其中一个关键字就算包含，最后打印出包含的字段和路径。</p>
<p>最后，在终端执行脚本 <code>sh nm_find.sh</code> 就会得到下面的检查结果，非常的方便和高效！</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">================================================</span><br><span class="line"> Enter <span class="keyword">project</span> path: <span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK </span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Adjust/</span>Adjust-<span class="number">4.12</span>.<span class="number">3</span><span class="regexp">/AdjustSdk.framework/</span>AdjustSdk</span><br><span class="line">包含字段：</span><br><span class="line">U _dlsym</span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Chartboost/</span>Chartboost-v6.<span class="number">0.1</span><span class="regexp">/Chartboost.framework/</span>Chartboost</span><br><span class="line">包含字段：</span><br><span class="line">U _method_exchangeImplementations U _dlopen U _dlsym</span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Facebook/</span>Facebook<span class="regexp">/FBSDKCoreKit.framework/</span>FBSDKCoreKit</span><br><span class="line">包含字段：</span><br><span class="line">U _dlopen U _dlsym</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="regexp">/Users/</span>HTC<span class="regexp">/Desktop/</span>ThirdSDK<span class="regexp">/Firebase/</span>Crashlytics<span class="regexp">/Crashlytics.framework/</span>submit</span><br><span class="line">包含字段：</span><br><span class="line">_class_respondsToSelector _dlsym</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180916-nm-show-lists.png" alt="20180916-nm-show-lists.png"></p>
<h3 id="4、源代码">4、源代码</h3><p>具体的代码，也可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;project_path=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;function getProjectPath() &#123;&#10;&#9;# &#36755;&#20986;&#25442;&#34892;&#65292;&#26041;&#20415;&#26597;&#30475;&#10;&#9;echo &#34;================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34; Enter project path: &#34; project_path&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#10;&#9;if test -z &#34;$project_path&#34;; then&#10;&#9;&#9;getProjectPath&#10;&#9;else&#10;&#9;&#9;read_dir $&#123;project_path&#125;&#10;&#9;fi&#10;&#125;&#10;&#10;function read_dir()&#123;&#10;&#9;for file in `ls $1`       #&#27880;&#24847;&#27492;&#22788;&#36825;&#26159;&#20004;&#20010;&#21453;&#24341;&#21495;&#65292;&#34920;&#31034;&#36816;&#34892;&#31995;&#32479;&#21629;&#20196;&#10;&#9;do&#10;&#9;&#9;if [ -d $1&#34;/&#34;$file ]  #&#27880;&#24847;&#27492;&#22788;&#20043;&#38388;&#19968;&#23450;&#35201;&#21152;&#19978;&#31354;&#26684;&#65292;&#21542;&#21017;&#20250;&#25253;&#38169;&#10;&#9;&#9;then&#10;&#9;&#9;&#9;read_dir $1&#34;/&#34;$file&#10;&#9;&#9;else&#10;&#9;&#9;&#9;#&#22312;&#27492;&#22788;&#22788;&#29702;&#25991;&#20214;&#21363;&#21487;&#10;&#9;&#9;&#9;file_path=&#34;$1/$file&#34;&#10;&#9;&#9;&#9;if `file $&#123;file_path&#125; | grep -q &#39;Mach-O&#39;` ; then&#10;&#9;&#9;&#9;&#9;find_world=$(echo `nm -u $&#123;file_path&#125; | grep -E &#39;dlopen|method_exchangeImplementations|performSelector|respondsToSelector|dlsym&#39;`)&#10;&#9;&#9;&#9;&#9;# -n &#23383;&#31526;&#20018;&#9;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#19981;&#20026;&#38646;&#21017;&#20026;&#30495;&#10;&#9;&#9;&#9;&#9;if [ -n &#34;$find_world&#34; ] ; then&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;-----------------------------\n&#39;&#10;&#9;&#9;&#9;&#9;&#9;echo $&#123;file_path&#125;&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;&#21253;&#21547;&#23383;&#27573;&#65306;&#39;&#10;&#9;&#9;&#9;&#9;&#9;echo $&#123;find_world&#125;&#10;&#9;&#9;&#9;&#9;&#9;echo &#39;\n&#39;&#10;&#9;&#9;&#9;&#9;fi&#10;&#9;&#9;&#9;fi&#10;&#9;&#9;fi&#10;&#9;done&#10;&#125;   &#10;&#10;#&#35835;&#21462;&#31532;&#19968;&#20010;&#21442;&#25968;&#10;getProjectPath&#10;&#10;echo &#34;------- end processing -------&#34;</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>最后，我们把这个脚本输出的全部内容截图，和这些第三方SDK的相关官网链接贴到回信中，告诉苹果审核员，我们应用不存在非法使用热更新 <code>such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations()</code> 等方法，最后苹果就通过了审核！！！</p>
<p>通过 nm 命令和 shell脚本，又让效率提升了n倍，和前面几篇技巧一样，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！</p>
<p>后续有更多技巧，会继续给大家分享，期待~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
<li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">Shell 教程 | 菜鸟教程</a></li>
<li><a href="https://ihtcboy.com/2018/02/04/2018-02-04_Mac查看文件内容常用的命令小结/">Mac查看文件内容常用的命令小结 | iHTCboy’s blog</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近App Store审核被拒，<code>2. 5 Performance: Software Requirements，Guideline 2.5.2 - Performance - Software Requirements</code>，遇到这样的问题，回信问苹果，肯定得不到答案，苹果就是<code>礼貌</code>的回复。经过一个星期的重复被拒，只能自己找问题，热更新问题，苹果拒审信一直长这样：</p>
<blockquote>
<p>….<br>This code, combined with a remote resource, can facilitate significant changes to your app’s behavior compared to when it was initially reviewed for the App Store. While you may not be using this functionality currently, it has the potential to load private frameworks, private methods, and enable future feature changes. This includes any code which passes arbitrary parameters to dynamic methods such as dlopen(), dlsym(), respondsToSelector:, performSelector:, method_exchangeImplementations(), and running remote scripts in order to change app behavior and/or call SPI, based on the contents of the downloaded script. Even if the remote resource is not intentionally malicious, it could easily be hijacked via a Man In The Middle (MiTM) attack, which can pose a serious security vulnerability to users of your app.<br> …</p>
</blockquote>
<p>从中找到了一些关键点：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dlopen</span><span class="params">()</span></span>, <span class="function"><span class="title">dlsym</span><span class="params">()</span></span>, respondsToSelector:, performSelector:, <span class="function"><span class="title">method_exchangeImplementations</span><span class="params">()</span></span>,</span><br></pre></td></tr></table></figure>
<p>然后在 <a href="https://zhuanlan.zhihu.com/p/41863648">「iOS」热更新审核被拒的解决方法</a> 文章中，找到可以打印下第三方的.a文件看看，看有没有 dlopen(), dlsym()，命令行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -u libwechaat.a &#62;&#62; xxx.txt</span><br></pre></td></tr></table></figure>
<p>注：<code>nm -u path</code>：Display only undefined symbols。更多 <code>nm</code> 命令可查看我之前总结的文章 <a href="https://ihtcboy.com/2018/02/04/2018-02-04_Mac查看文件内容常用的命令小结/">Mac查看文件内容常用的命令小结</a></p>]]>
    
    </summary>
    
      <category term="AppStore" scheme="https://iHTCboy.com/tags/AppStore/"/>
    
      <category term="Guideline2.5.2" scheme="https://iHTCboy.com/tags/Guideline2-5-2/"/>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="nm" scheme="https://iHTCboy.com/tags/nm/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧3 - 自动生成AppIcon]]></title>
    <link href="https://iHTCboy.com/2018/09/15/2018-09-15_shell%E6%8A%80%E5%B7%A73_%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90AppIcon/"/>
    <id>https://iHTCboy.com/2018/09/15/2018-09-15_shell技巧3_自动生成AppIcon/</id>
    <published>2018-09-15T08:20:16.000Z</published>
    <updated>2018-09-19T14:16:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>上一篇讲到 <a href="https://ihtcboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/">shell技巧2 - 图片旋转缩放转换格式等</a>，而平时iOS开发中，Xcode中<code>Assets.xcassets</code>的<code>AppIcon</code> 需要设计师或开发者自行放置对应尺寸的图标，虽然我经常使用macOS下的 <code>Prepo</code> 应用生成多尺寸的图标，但是依然需要一张一张的放置到Xcode中，并且步骤非常不智能化，部分图标需要人工对应位置放置。如果通过使用 <code>sips</code> 命令，其实可以自动生成对应尺寸的图片，就可以灵活和自动化的批量生成AppIcon的全部图标，绝对的方便和效率！说到就马上实践吧！</p>
<a id="more"></a>
<h3 id="2、AppIcon_要求">2、AppIcon 要求</h3><p>平时，我们的应用的图标，都会在 Assets.xcassets 的AppIcon 设置，对于 iOS 来说，需要配置如下图标：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-Xcode-Assets.xcassets-AppIcon.png" alt="20180915-Xcode-Assets.xcassets-AppIcon.png"></p>
<p>其中，因为App如果只支持iOS7以上，1x 的设备也不需要支持了，那么大概导出需要如下的尺寸：</p>
<table>
<thead>
<tr>
<th>pt</th>
<th>像素密度(scale)</th>
<th>尺寸(px)</th>
<th>用途</th>
<th>支持系统版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>20pt</td>
<td>2x</td>
<td>40*40</td>
<td>iPhone Notificafion</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>20pt</td>
<td>3x</td>
<td>60*60</td>
<td>iPhone Notificafion</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>29pt</td>
<td>2x</td>
<td>58*58</td>
<td>iPhone Spotlight/Settings</td>
<td>iOS 5-6/5-12</td>
</tr>
<tr>
<td>29pt</td>
<td>3x</td>
<td>87*87</td>
<td>iPhone Spotlight/Settings</td>
<td>iOS 5-6/5-12</td>
</tr>
<tr>
<td>40pt</td>
<td>2x</td>
<td>80*80</td>
<td>iPhone Spotlight</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>40pt</td>
<td>3x</td>
<td>120*120</td>
<td>iPhone Spotlight</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>60pt</td>
<td>2x</td>
<td>120*120</td>
<td>iPhone App</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>60pt</td>
<td>3x</td>
<td>180*180</td>
<td>iPhone App</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>20pt</td>
<td>2x</td>
<td>40*40</td>
<td>iPad Notificafion</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>29pt</td>
<td>2x</td>
<td>58*58</td>
<td>iPad Settings</td>
<td>iOS 5-12</td>
</tr>
<tr>
<td>40pt</td>
<td>2x</td>
<td>80*80</td>
<td>iPad Spotlight</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>76pt</td>
<td>2x</td>
<td>152*152</td>
<td>iPad App</td>
<td>iOS 7-12</td>
</tr>
<tr>
<td>83.5pt</td>
<td>2x</td>
<td>167*167</td>
<td>iPad Pro App</td>
<td>iOS 9-12</td>
</tr>
<tr>
<td>1024pt</td>
<td>1x</td>
<td>1024*1024</td>
<td>App Store</td>
<td>iOS 7-12</td>
</tr>
</tbody>
</table>
<p>从上面表格可以看出，这些尺寸还是有一些重复的，所以导出尺寸时，其实没有那么多的啊，因为如果相同尺寸，可以使用同一张图片，从而减少包的体积啊！</p>
<h3 id="3、shell_编程">3、shell 编程</h3><p>通过使用 <code>sips</code> 命令进行图片处理，这里简单的写一下iOS App图标生成，apple watch 或 macOS app的图标生成的示例，希望大家能举一反三，这都是授鱼不如授渔！ </p>
<p>先说一下操作步骤：</p>
<p>1.在终端执行shell脚本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /Users/HTC/Desktop/make_iOSAppIcon.sh</span><br></pre></td></tr></table></figure>
<p>2.然后拖拽1024图片路径到终端：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">================================================&#10;Enter origin image path: /Users/HTC/Desktop/apple.jpg</span><br></pre></td></tr></table></figure>
<p>3.执行成功:</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">------- start processing -------</span><br><span class="line"><span class="label">info:</span>	resize copy <span class="number">1024</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">1024</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">180</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">167</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">152</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">120</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">87</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">80</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">60</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">58</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">40</span> successfully.</span><br><span class="line"><span class="label">info:</span>	resize <span class="number">1024</span> to jpg successfully.</span><br><span class="line"></span><br><span class="line">creat iOS AppIcon finished!</span><br><span class="line"></span><br><span class="line">------- end processing -------</span><br></pre></td></tr></table></figure>
<p>生成的图标和json文件：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-creat-AppIcon.png" alt="20180915-creat-AppIcon.png"></p>
<p>4.然后找到输出的文件夹（默认是在填写的图片的同级目录），复制到Xcode项目中 <code>Project/Assets.xcassets/AppIcon.appiconset/</code> 即可。（如果还想省略这一步操作，也可以直接将生成的输出到项目的目录中，这步就交给读者需要自行添加啊）</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-move-to-Xcode-Assets.xcassets-AppIcon.png" alt="20180915-move-to-Xcode-Assets.xcassets-AppIcon.png"></p>
<p>5.打开Xcode，就能看到图片已经自动显示好！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180915-Xcode-Assets.xcassets-AppIcon-icon.png" alt="20180915-Xcode-Assets.xcassets-AppIcon-icon.png"></p>
<p>这里说一下大概的思路，其实也不难，首先判断输出的路径，如果不是<code>目录</code>、<code>不存在的目录的文件</code>、<code>格式不符合的图片</code>，就可以图片处理，否则提示重新输入图片路径。然后创建图片同级的文件夹用于保存生成的图标和配置的json文件，由于 “1024”图片最大，所以，先转成png，然后从大到小，一张一张剪切，另外，需要注意，1024如果是png，因为有透明度的话上传到AppStore是不成功的，所以，这里最后转换1024图片格式为jpg，这样保证万无一失。其它图标都是png，也不用切成圆角，因为苹果最终显示时系统自动切成图角。</p>
<p>总结一下好处：</p>
<ul>
<li>方便快捷，不用人为关心</li>
<li>尺寸相同的图片只保留一张，减少包体积</li>
<li>1024图片为jpg，万无一失</li>
</ul>
<h3 id="4、源代码">4、源代码</h3><p>具体的代码，也可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;image_path=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;getImagePath() &#123;&#10;&#9;echo -e &#34;\n================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34;Enter origin image path: &#34; image_path&#10;&#9;# &#22914;&#26524;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#20026;&#38646;&#21017;&#20026;&#30495;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#65292;&#21542;&#21017;&#25191;&#34892;&#26059;&#36716;&#20989;&#25968;&#10;&#9;if&#9;test -z &#34;$image_path&#34;; then&#10;&#9;&#9; getImagePath&#10;&#9;else&#10;&#9;&#9;# &#22914;&#26524;&#25991;&#20214;&#23384;&#22312;&#19988;&#20026;&#30446;&#24405;&#21017;&#20026;&#30495;&#10;&#9;&#9;if test -d &#34;$image_path&#34;; then&#10;&#9;&#9;&#9;echo -e &#34;\n------- [Error] the file path is directory --------&#34;&#10;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;else&#10;&#9;&#9;&#9;# &#22914;&#26524;&#25991;&#20214;&#23384;&#22312;&#19988;&#21487;&#35835;&#21017;&#20026;&#30495;&#10;&#9;&#9;&#9;if test -r &#34;$image_path&#34;; then&#10;&#9;&#9;&#9;&#9;ext=&#34;\.jpeg|\.jpg|\.png|\.JPEG|\.JPG|\.PNG|\.gif|\.bmp&#34;&#10;&#9;&#9;&#9;&#9;# get the images that need process.&#10;&#9;&#9;&#9;&#9;valid_img=$(echo &#34;$image_path&#34; | grep -E &#34;$&#123;ext&#125;&#34;)&#10;&#9;&#9;&#9;&#9;# &#21305;&#37197;&#21040;&#22270;&#29255;&#26684;&#24335;&#25165;&#22788;&#29702;&#10;&#9;&#9;&#9;&#9;if test -z &#34;$valid_img&#34;; then&#10;&#9;&#9;&#9;&#9;&#9;echo -e &#34;\n------- [Error] the file is not&#39;s legal format --------&#34;&#10;&#9;&#9;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;&#9;creatAppIcon&#9;&#10;&#9;&#9;&#9;&#9;fi&#10;&#9;&#9;&#9;else&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;echo -e &#34;\n------- [Error] the file path is not&#39;s find --------&#34;&#10;&#9;&#9;&#9;&#9;getImagePath&#10;&#9;&#9;&#9;fi&#9;&#10;&#9;&#9;fi&#10;&#9;fi&#10;&#125;&#10;&#10;creatAppIcon() &#123;&#10;&#9;echo -e &#34;\n------- start processing -------&#34;&#10;&#9;&#10;&#9;# &#22270;&#29255;&#30340;&#19978;&#19968;&#32423;&#30446;&#24405;&#10;&#9;prev_path=$(dirname &#34;$image_path&#34;)&#10;&#9;&#10;&#9;# &#36755;&#20986;icon&#30340;&#30446;&#24405;&#10;&#9;icon_paht=&#34;$&#123;prev_path&#125;/iOS_icon_`date +%Y%m%d_%H%M%S`&#34;&#10;&#9;&#10;&#9;# &#21019;&#24314;&#30446;&#24405;&#10;&#9;mkdir -p $&#123;icon_paht&#125;&#10;&#9;&#10;&#9;# 1024 icon &#29305;&#21035;&#22788;&#29702;&#10;&#9;icon_1024_path=&#34;$&#123;icon_paht&#125;/icon-1024.png&#34;&#10;&#9;cp $&#123;image_path&#125; $&#123;icon_1024_path&#125;&#10;&#9;&#10;&#9;sips -s format png $&#123;image_path&#125; --out $&#123;icon_1024_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize copy 1024 successfully.&#34; || echo -e &#34;info:\tresize copy 1024 failed.&#34;&#10;&#9;&#10;&#9;sips -z 1024 1024 $&#123;icon_1024_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize 1024 successfully.&#34; || echo -e &#34;info:\tresize 1024 failed.&#34;&#10;&#9;&#10;&#9;prev_size_path=$&#123;icon_1024_path&#125; #&#29992;&#20110;&#22797;&#21046;&#23567;&#22270;&#65292;&#20943;&#23569;&#20869;&#23384;&#28040;&#32791;&#10;&#9;# &#38656;&#35201;&#29983;&#25104;&#30340;&#22270;&#26631;&#23610;&#23544;&#10;&#9;icons=(180 167 152 120 87 80 60 58 40)&#10;&#9;for size in $&#123;icons[@]&#125;&#10;&#9;do&#10;&#9;&#9;size_path=&#34;$&#123;icon_paht&#125;/icon-$&#123;size&#125;.png&#34;&#10;&#9;&#9;cp $&#123;prev_size_path&#125; $&#123;size_path&#125;&#10;&#9;&#9;prev_size_path=$&#123;size_path&#125;&#10;&#9;&#9;sips -Z $size $&#123;size_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize $&#123;size&#125; successfully.&#34; || echo -e &#34;info:\tresize $&#123;size&#125; failed.&#34;&#10;&#9;done&#10;&#9;&#10;&#9;# &#36716;&#25442;1024&#22270;&#29255;&#20026;jpg&#65292;&#38450;&#27490;&#26377;&#36879;&#26126;&#21306;&#22495;&#23548;&#33268;&#19978;&#20256; App Store &#22833;&#36133;&#10;&#9;icon_1024_jpg_path=&#34;$&#123;icon_paht&#125;/icon-1024.jpg&#34;&#10;&#9;mv $&#123;icon_1024_path&#125; $&#123;icon_1024_jpg_path&#125;&#10;&#9;sips -s format jpeg $&#123;icon_1024_jpg_path&#125; --out $&#123;icon_1024_jpg_path&#125; &#62; /dev/null 2&#62;&#38;1&#10;&#9;[ $? -eq 0 ] &#38;&#38; echo -e &#34;info:\tresize 1024 to jpg successfully.&#34; || echo -e &#34;info:\tresize 1024 to jpg  failed.&#34;&#10;&#9;&#10;&#9;contents_json_path=&#34;$&#123;icon_paht&#125;/Contents.json&#34;&#10;&#9;# &#29983;&#25104;&#22270;&#26631;&#23545;&#24212;&#30340;&#37197;&#32622;&#25991;&#20214;&#10;&#9;echo &#39;&#123;&#10;&#9;&#9;&#34;images&#34; : [&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-40.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-60.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-58.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-87.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-80.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-120.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;60x60&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-120.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;60x60&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;iphone&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-180.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;3x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;20x20&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-40.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;29x29&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-58.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;40x40&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-80.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;76x76&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;76x76&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-152.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;83.5x83.5&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ipad&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-167.png&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;2x&#34;&#10;&#9;&#9;&#9;&#125;,&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#34;size&#34; : &#34;1024x1024&#34;,&#10;&#9;&#9;&#9;&#9;&#34;idiom&#34; : &#34;ios-marketing&#34;,&#10;&#9;&#9;&#9;&#9;&#34;filename&#34; : &#34;icon-1024.jpg&#34;,&#10;&#9;&#9;&#9;&#9;&#34;scale&#34; : &#34;1x&#34;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;],&#10;&#9;&#9;&#34;info&#34; : &#123;&#10;&#9;&#9;&#9;&#34;version&#34; : 1,&#10;&#9;&#9;&#9;&#34;author&#34; : &#34;xcode&#34;&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#39; &#62; $&#123;contents_json_path&#125;&#10;&#9;&#9;&#10;&#9;echo -e &#34;\n creat iOS AppIcon finished!&#34;&#10;&#9;echo -e &#34;\n------- end processing -------&#34;&#10;&#125;&#10;&#10;&#10;# &#39318;&#20808;&#25191;&#34892;&#20989;&#25968;&#65292;&#22635;&#20889;1024&#22270;&#29255;&#30340;&#36335;&#24452;&#36171;&#20540;&#10;getImagePath</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>通过 ship 命令和 shell脚本和前面几篇技巧，大家应该能感受到shell脚本编程的魅力，希望大家能举一反三，授鱼不如授渔！生活工作中结合 sehll 脚本，提高效率和自动化，珍爱时间不是梦！</p>
<p>其实，只要用命令有终端的地方，都是可以用shell脚本！后续有更多技巧，还会继续给大家分享，期待吧~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://ihtcboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/">shell技巧2 - 图片旋转缩放转换格式等 | iHTCboy’s blog</a></li>
<li><a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a></li>
<li><a href="https://ss64.com/osx/sips.html" target="_blank" rel="external">sips MAN page Man Page - macOS - SS64.com</a></li>
<li><a href="https://www.jianshu.com/p/7246c5a5b083" target="_blank" rel="external">使用sips命令自动缩减图片尺寸</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>上一篇讲到 <a href="https://ihtcboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/">shell技巧2 - 图片旋转缩放转换格式等</a>，而平时iOS开发中，Xcode中<code>Assets.xcassets</code>的<code>AppIcon</code> 需要设计师或开发者自行放置对应尺寸的图标，虽然我经常使用macOS下的 <code>Prepo</code> 应用生成多尺寸的图标，但是依然需要一张一张的放置到Xcode中，并且步骤非常不智能化，部分图标需要人工对应位置放置。如果通过使用 <code>sips</code> 命令，其实可以自动生成对应尺寸的图片，就可以灵活和自动化的批量生成AppIcon的全部图标，绝对的方便和效率！说到就马上实践吧！</p>]]>
    
    </summary>
    
      <category term="Assets" scheme="https://iHTCboy.com/tags/Assets/"/>
    
      <category term="appicon" scheme="https://iHTCboy.com/tags/appicon/"/>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="sips" scheme="https://iHTCboy.com/tags/sips/"/>
    
      <category term="xcassets" scheme="https://iHTCboy.com/tags/xcassets/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧2 - 图片旋转缩放转换格式等]]></title>
    <link href="https://iHTCboy.com/2018/09/14/2018-09-14_shell%E6%8A%80%E5%B7%A72_%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC%E7%BC%A9%E6%94%BE%E7%AD%89/"/>
    <id>https://iHTCboy.com/2018/09/14/2018-09-14_shell技巧2_图片旋转缩放等/</id>
    <published>2018-09-14T13:20:16.000Z</published>
    <updated>2018-09-19T14:16:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>在macOS下，如果对大量图片进行处理或数据收集，查找了一下，通过使用 <code>sips</code> 命令，可以进行图片的大部分操作处理，如果使用 <code>shell</code>，就可以灵活和自动化的批量操作图片！</p>
<a id="more"></a>
<h3 id="2、sips_用法">2、sips 用法</h3><p>常用的用法可以参考： <a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a>，全部的用法可以参考：<a href="https://ss64.com/osx/sips.html" target="_blank" rel="external">sips MAN page Man Page - macOS - SS64.com</a></p>
<p>以下就是引用 <a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a> 内容：</p>
<p>1.裁剪时固定图片宽度，高度自适应</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -Z 320 iamge_file_name</span><br></pre></td></tr></table></figure></span>
</code></pre><p>2.裁剪时指定图片宽与高</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#35009;&#21098;&#22270;&#29255;&#20026;400x300&#22823;&#23567;&#10;sips -z 400 300 iamge_file_name</span><br></pre></td></tr></table></figure></span>


注：需要注意的是这里的参数是小写的z，并且图片缩放方式不是锁定图片比例的，即如果图片本身是16:9，则会导致图片被挤压。
</code></pre><p>3.旋转图片</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -r 90 image_file_name</span><br></pre></td></tr></table></figure></span>


注：上面的命令将图片顺时针旋转90度，相信机智的你已经想到逆时针90度应该是-90了。没错，顺时针用正数表示，逆时针可以用负数表示。你可以进行任意角度和方向的旋转。
</code></pre><p>4.翻转图片</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -f horizontal image_file_name</span><br></pre></td></tr></table></figure></span>

注：上面命令可以对图片进行水平翻转，-f支持水平和垂直两种翻转，水平（horizontal），垂直（vertical）。
</code></pre><p>5.修改图片格式</p>
<pre><code><span class="variable"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -s format jpeg input.png --out output.jpg</span><br></pre></td></tr></table></figure></span>

注：使用-s参数可以修改图片格式为指定值，sips支持jpeg |<span class="string"> tiff </span>|<span class="string"> png </span>|<span class="string"> gif </span>|<span class="string"> jp2 </span>|<span class="string"> pict </span>|<span class="string"> bmp </span>|<span class="string"> qtif </span>|<span class="string"> psd </span>|<span class="string"> sgi </span>|<span class="string"> tga共11种格式。并且-s除了能修改文件格式外，还能修改图片的其它meta数据，具体可以通过man sips查看。</span>
</code></pre><p>6.获取图片meta信息</p>
<pre><code><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sips -g pixelWidth -g pixelHeight image_file_name</span><br></pre></td></tr></table></figure></span>

注：上面命令可以获取图片的长宽高信息，与-s参数一样，-g也支持更多的meta值，可以参见man sips的信息，这里就不做赘述了。
</code></pre><h3 id="3、shell_编程">3、shell 编程</h3><p>通过使用 <code>sips</code> 命令进行图片处理，本来计划做一个功能库，但是想想还是没有必要，简单的写了一个图片旋转的示例，希望大家能举一反三，这都是授鱼不如授渔！ </p>
<h3 id="4、图片旋转代码实现">4、图片旋转代码实现</h3><p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;# &#23450;&#20041;&#29992;&#21040;&#30340;&#21464;&#37327;&#10;imagePath=&#34;&#34;&#10;angle=&#34;&#34;&#10;&#10;# &#23450;&#20041;&#35835;&#21462;&#36755;&#20837;&#23383;&#31526;&#30340;&#20989;&#25968;&#10;&#10;getImagePath() &#123;&#10;&#9;echo &#34;\n================================================&#34;&#10;&#9;# &#30417;&#21548;&#36755;&#20837;&#24182;&#19988;&#36171;&#20540;&#32473;&#21464;&#37327;&#10;&#9;read -p &#34;Enter image path: &#34; imagePath&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#20174;&#26032;&#30417;&#21548;&#65292;&#21542;&#21017;&#25191;&#34892;&#26059;&#36716;&#20989;&#25968;&#10;&#9;if&#9;test -z &#34;$imagePath&#34;; then&#10;&#9;&#9; getImagePath&#10;&#9;else&#10;&#9;&#9;rotationImage&#10;&#9;fi&#10;&#125;&#10;&#10;&#10;rotationImage() &#123;&#10;&#9;echo &#34;\n================================================&#34;&#10;&#9;read -p &#34;Enter angle(default 90&#176;): &#34; angle&#10;&#9;# &#22914;&#26524;&#20026;&#31354;&#20540;&#65292;&#40664;&#35748;&#35774;&#32622;&#20026;90&#24230;&#10;&#9;if test -z &#34;$angle&#34;; then&#10;&#9;&#9;angle=&#34;90&#34;&#10;&#9;fi&#10;&#10;&#9;# &#20351;&#29992; sips &#21629;&#20196;&#36827;&#34892;&#22270;&#29255;&#26059;&#36716;&#10;&#9;sips -r &#34;$&#123;angle&#125;&#34; &#34;$&#123;imagePath&#125;&#34;&#10;&#9;&#9;&#10;&#9;echo &#34;\n rotation $angle &#176; finished!&#34;&#10;&#9;&#9;&#10;&#9;# &#37325;&#26032;&#35843;&#29992;&#26059;&#36716;&#20989;&#25968;&#65292;&#26041;&#20415;&#22810;&#27425;&#26059;&#36716;&#25805;&#20316;&#10;&#9;rotationImage&#10;&#9;&#10;&#125;&#10;&#10;# &#39318;&#20808;&#25191;&#34892;&#20989;&#25968;&#65292;&#32473;&#21464;&#37327;&#36171;&#20540;&#10;getImagePath</span><br></pre></td></tr></table></figure>
<h3 id="5、总结">5、总结</h3><p>比如图片批量格式转换，图片尺寸批量获取等，通过 ship 命令，然后结合 sehll 脚本，效率和自动化不是梦！</p>
<p>关于sips的更多使用场景，可以看看这篇文章 <a href="https://www.jianshu.com/p/7246c5a5b083" target="_blank" rel="external">使用sips命令自动缩减图片尺寸</a></p>
<p>下一节，结合刚需，打算写一个从一张1024的图片，自动生成Xcode所需要的全部图标，这应该是一个不错的想法！期待吧~</p>
<h3 id="参考">参考</h3><ul>
<li><a href="http://www.voidcn.com/article/p-xrygdftf-bmv.html" target="_blank" rel="external">利器: Mac自带的图片工具Sips</a></li>
<li><a href="https://ss64.com/osx/sips.html" target="_blank" rel="external">sips MAN page Man Page - macOS - SS64.com</a></li>
<li><a href="https://www.jianshu.com/p/7246c5a5b083" target="_blank" rel="external">使用sips命令自动缩减图片尺寸</a></li>
<li><a href="https://ihtcboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/">shell技巧1 - 生成ipa文件 | iHTCboy’s blog</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>在macOS下，如果对大量图片进行处理或数据收集，查找了一下，通过使用 <code>sips</code> 命令，可以进行图片的大部分操作处理，如果使用 <code>shell</code>，就可以灵活和自动化的批量操作图片！</p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="sips" scheme="https://iHTCboy.com/tags/sips/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python爬虫实践-网易云音乐]]></title>
    <link href="https://iHTCboy.com/2018/09/09/2018-09-09_Python%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD/"/>
    <id>https://iHTCboy.com/2018/09/09/2018-09-09_Python爬虫实践-网易云音乐下载/</id>
    <published>2018-09-09T12:56:16.000Z</published>
    <updated>2018-09-09T14:50:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近，网易的音乐很多听不到了，刚好也看到很多教程，跟进学习了一下，也集大全了吧，本来想优化一下的，但是发现问题还是有点复杂，最后另辟捷径，提供了简单的方法啊！</p>
<p>本文主要参考 <a href="https://www.jianshu.com/p/25bc4822af16" target="_blank" rel="external">python编写GUI版网易云音乐爬虫</a> 后改写，有兴趣的可以看看文章的GUI，了解更多知识~</p>
<a id="more"></a>
<h3 id="2、Python_+_爬虫">2、Python + 爬虫</h3><p>首先，说一下准备工作：</p>
<ul>
<li>Python：需要基本的python语法基础</li>
<li>requests：专业用于请求处理，<a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="external">requests库学习文档中文版</a></li>
<li>lxml：其实可以用pythonth自带的正则表达式库re，但是为了更加简单入门，用 <a href="https://lxml.de/index.html" target="_blank" rel="external">lxml</a> 中的 etree 进行网页数据定位爬取。</li>
<li>re：python正则表达式处理</li>
<li>json：python的json处理库</li>
</ul>
<p>如果大家对上面的库还比不懂，可以看看我的之前文章 <a href="https://ihtcboy.com/2018/07/10/2018-07-10_Python爬虫实践入门篇/">《Python爬虫实践入门篇》</a></p>
<p>然后，说一下我们现在已经知道下载链接是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://music.163.com/song/media/outer/url?id='</span><br></pre></td></tr></table></figure>
<p><code>id</code> 就是歌曲的id！</p>
<p>所以，现在我们爬虫主要的工作就是找到这个id，当然为了更好的保存，也要找到这个歌名啦！</p>
<p>那现在就是要找到我们需要爬虫的网站链接啦！我分析了一下，大概是下面三种：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#歌曲清单</span></span><br><span class="line"><span class="setting">music_list = <span class="value"><span class="string">'https://music.163.com/#/playlist?id=2412826586'</span> </span></span></span><br><span class="line"><span class="comment">#歌手排行榜</span></span><br><span class="line"><span class="setting">artist_list = <span class="value"><span class="string">'https://music.163.com/#/artist?id=8325'</span></span></span></span><br><span class="line"><span class="comment">#搜索列表 </span></span><br><span class="line"><span class="setting">search_list = <span class="value"><span class="string">'https://music.163.com/#/search/m/?order=hot&amp;cat=全部&amp;limit=435&amp;offset=435&amp;s=梁静茹'</span></span></span></span><br></pre></td></tr></table></figure>
<p>如果你已经只是想下载一首歌，比如静茹-勇气：<code>https://music.163.com/#/song?id=254485</code>，那你直接就用浏览器打开 <code>http://music.163.com/song/media/outer/url?id=254485</code> 就可以了，没必要爬虫啊！</p>
<p>好啦！感觉重点都说完了，提取和解析就是用 lxml，不懂的就看我之前的文章啊  <a href="https://ihtcboy.com/2018/07/10/2018-07-10_Python爬虫实践入门篇/">《Python爬虫实践入门篇》</a></p>
<h3 id="3、下载歌词">3、下载歌词</h3><p>如果还要下载歌词，那也很简单，通过接口，有歌曲的id就可以：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://music.163.com/api/song/lyric?id=&#123;&#125;&amp;lv=-1&amp;kv=-1&amp;tv=-1'</span>.format(song_id)</span><br></pre></td></tr></table></figure>
<p>返回的json数据大概长这样：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sgc: true,</span><br><span class="line">    sfy: false,</span><br><span class="line">    qfy: false,</span><br><span class="line">    lrc:</span><br><span class="line">    &#123;</span><br><span class="line">        version: 7,</span><br><span class="line">        lyric: "[<span class="number">00:39.070</span>]开了窗 等待天亮\n[<span class="number">00:46.160</span>]看这城市 悄悄的 熄了光\n[<span class="number">00:51.850</span>]听风的方向\n[<span class="number">00:55.090</span>]这一刻 是否和我一样\n[<span class="number">00:58.730</span>]孤单的飞翔\n[<span class="number">01:02.300</span>]模糊了眼眶\n[<span class="number">01:07.760</span>]广播里 那首歌曲\n[<span class="number">01:14.830</span>]重复当时 那条街那个你\n[<span class="number">01:20.410</span>]相同的桌椅\n[<span class="number">01:23.740</span>]不用言语 就会有默契\n[<span class="number">01:27.470</span>]这份亲密\n[<span class="number">01:30.560</span>]那么熟悉\n[<span class="number">01:33.850</span>]在爱里 等着你\n[<span class="number">01:37.480</span>]被你疼惜 有种暖意\n[<span class="number">01:41.090</span>]在梦里 全是你\n[<span class="number">01:43.920</span>]不要再迟疑 把我抱紧"</span><br><span class="line">    &#125;,</span><br><span class="line">    klyric:</span><br><span class="line">    &#123;</span><br><span class="line">        version: 0,</span><br><span class="line">        lyric: null</span><br><span class="line">    &#125;,</span><br><span class="line">    tlyric:</span><br><span class="line">    &#123;</span><br><span class="line">        version: 0,</span><br><span class="line">        lyric: null</span><br><span class="line">    &#125;,</span><br><span class="line">    code: 200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>剩下的也没有什么好说的啦！</p>
<h3 id="4、坑点与进阶">4、坑点与进阶</h3><p>表面上很简单，但是需要注意的是，网易返回的链接，数据是js动态加载，也就是爬虫得到的网页数据和浏览器得到的dom内容和结构不一样！</p>
<ul>
<li><p>坑<br>其中，搜索列表爬虫回来的内容，完全得不到歌曲id！！！</p>
</li>
<li><p>解决<br>解决方法也是有的！</p>
<ul>
<li><p>python模拟浏览器<br>使用selenium+phantomjs无界面浏览器，这两者的结合其实就是直接操作浏览器，可以获取JavaScript渲染后的页面数据。</p>
<p>缺点：</p>
<blockquote>
<p>由于是无界面浏览器，采用此方案效率极低，如果大批量抓取不推荐。<br>对于异步请求并且数据在源码中并不存在的，同时也就无法抓取到的数据。</p>
</blockquote>
</li>
<li><p>搜索的歌曲变成歌单<br>比如想下载全部的某一歌手的全部音乐，用手机云音乐搜索，然后全部保存到新建一个歌单，这样就可以啦！</p>
</li>
</ul>
</li>
<li><p>进阶<br>如果想使用了解更多网易云音乐js的加密解密过程，可以看看这个 <a href="https://www.zhihu.com/question/21471960/answer/154098407" target="_blank" rel="external">Python 爬虫如何获取 JS 生成的 URL 和网页内容？ - 路人甲的回答 - 知乎</a></p>
</li>
</ul>
<h3 id="总结">总结</h3><p>用python，就一定要简单，我认为复杂的东西，还是尽量少做，能取巧就取巧，所以本文没有使用selenium+phantomjs实践，如果想了解更多<code>selenium+phantomjs</code>内容，可以参考文末引用链接。</p>
<p><strong>注：本文只是技术交流，请不要商业用途~ 如有违反，本人一概不负责。</strong></p>
<h3 id="全部代码">全部代码</h3><p>又是非常简单的100行代码完事！！！</p>
<p>GitHub: <a href="https://github.com/iHTCboy/WebCrawlerExample/blob/master/WebCrawler/163_NeteaseMusic.py" target="_blank" rel="external">WebCrawlerExample/163_NeteaseMusic.py at master · iHTCboy/WebCrawlerExample</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_songs</span><span class="params">(url=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        url = <span class="string">'https://music.163.com/#/playlist?id=2384642500'</span></span><br><span class="line"></span><br><span class="line">    url = url.replace(<span class="string">'/#'</span>, <span class="string">''</span>).replace(<span class="string">'https'</span>, <span class="string">'http'</span>)  <span class="comment"># 对字符串进行去空格和转协议处理</span></span><br><span class="line">    <span class="comment"># 网易云音乐外链url接口：http://music.163.com/song/media/outer/url?id=xxxx</span></span><br><span class="line">    out_link = <span class="string">'http://music.163.com/song/media/outer/url?id='</span></span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://music.163.com/'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'music.163.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 请求页面的源码</span></span><br><span class="line">    res = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    tree = etree.HTML(res)</span><br><span class="line">    <span class="comment"># 音乐列表</span></span><br><span class="line">    song_list = tree.xpath(<span class="string">'//ul[@class="f-hide"]/li/a'</span>)</span><br><span class="line">    <span class="comment"># 如果是歌手页面</span></span><br><span class="line">    artist_name_tree = tree.xpath(<span class="string">'//h2[@id="artist-name"]/text()'</span>)</span><br><span class="line">    artist_name = str(artist_name_tree[<span class="number">0</span>]) <span class="keyword">if</span> artist_name_tree <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是歌单页面：</span></span><br><span class="line">    <span class="comment">#song_list_tree = tree.xpath('//*[@id="m-playlist"]/div[1]/div/div/div[2]/div[2]/div/div[1]/table/tbody')</span></span><br><span class="line">    song_list_name_tree = tree.xpath(<span class="string">'//h2[contains(@class,"f-ff2")]/text()'</span>)</span><br><span class="line">    song_list_name = str(song_list_name_tree[<span class="number">0</span>]) <span class="keyword">if</span> song_list_name_tree <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置音乐下载的文件夹为歌手名字或歌单名</span></span><br><span class="line">    folder = <span class="string">'./'</span> + artist_name <span class="keyword">if</span> artist_name <span class="keyword">else</span> <span class="string">'./'</span> + song_list_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder):</span><br><span class="line">        os.mkdir(folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(song_list):</span><br><span class="line">        href = str(s.xpath(<span class="string">'./@href'</span>)[<span class="number">0</span>])</span><br><span class="line">        song_id = href.split(<span class="string">'='</span>)[-<span class="number">1</span>]</span><br><span class="line">        src = out_link + song_id  <span class="comment"># 拼接获取音乐真实的src资源值</span></span><br><span class="line">        title = str(s.xpath(<span class="string">'./text()'</span>)[<span class="number">0</span>])  <span class="comment"># 音乐的名字</span></span><br><span class="line">        filename = title + <span class="string">'.mp3'</span></span><br><span class="line">        filepath = folder + <span class="string">'/'</span> + filename</span><br><span class="line">        print(<span class="string">'开始下载第&#123;&#125;首音乐：&#123;&#125;\n'</span>.format(i + <span class="number">1</span>, filename))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 下载音乐</span></span><br><span class="line">            <span class="comment">#下载歌词</span></span><br><span class="line">            <span class="comment">#download_lyric(title, song_id)</span></span><br><span class="line"></span><br><span class="line">            data = requests.get(src).content  <span class="comment"># 音乐的二进制数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> open(filepath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'&#123;&#125;首全部歌曲已经下载完毕！'</span>.format(len(song_list)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_lyric</span><span class="params">(song_name, song_id)</span>:</span></span><br><span class="line">    url = <span class="string">'http://music.163.com/api/song/lyric?id=&#123;&#125;&amp;lv=-1&amp;kv=-1&amp;tv=-1'</span>.format(song_id)</span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://music.163.com/'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'music.163.com'</span></span><br><span class="line">        <span class="comment"># 'Origin': 'https://music.163.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 请求页面的源码</span></span><br><span class="line">    res = requests.get(url=url, headers=headers).text</span><br><span class="line">    json_obj = json.loads(res)</span><br><span class="line">    lyric = json_obj[<span class="string">'lrc'</span>][<span class="string">'lyric'</span>]</span><br><span class="line">    reg = re.compile(<span class="string">r'\[.*\]'</span>)</span><br><span class="line">    lrc_text = re.sub(reg, <span class="string">''</span>, lyric).strip()</span><br><span class="line"></span><br><span class="line">    print(song_name, lrc_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#music_list = 'https://music.163.com/#/playlist?id=2384642500' #歌曲清单</span></span><br><span class="line">    music_list = <span class="string">'https://music.163.com/#/artist?id=8325'</span> <span class="comment">#歌手排行榜</span></span><br><span class="line">    <span class="comment"># music_list = 'https://music.163.com/#/search/m/?order=hot&amp;cat=全部&amp;limit=435&amp;offset=435&amp;s=梁静茹' #搜索列表</span></span><br><span class="line">    download_songs(music_list)</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/25bc4822af16" target="_blank" rel="external">python编写GUI版网易云音乐爬虫</a> </li>
<li><a href="https://ihtcboy.com/2018/07/10/2018-07-10_Python爬虫实践入门篇/">Python爬虫实践入门篇 | iHTCboy’s blog</a></li>
<li><a href="https://www.zhihu.com/question/21471960/answer/154098407" target="_blank" rel="external">Python 爬虫如何获取 JS 生成的 URL 和网页内容？ - 路人甲的回答 - 知乎</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NjUxMDk5Mg==&amp;mid=2247484026&amp;idx=1&amp;sn=393eb1f4eb577b88e49b7ce10ff0e500&amp;chksm=fdfb6585ca8cec93a6d70f4666bd3fab69a7eb9390d4a1207f21142dc127975b6e209be32f1a&amp;scene=21#wechat_redirect" target="_blank" rel="external">Python 爬虫获取网易云音乐歌手歌词</a></li>
<li><a href="https://www.jianshu.com/p/520749be7377" target="_blank" rel="external">python爬虫的最佳实践(五)–selenium+PhantomJS的简单使用</a></li>
<li><a href="https://selenium-python.readthedocs.io/index.html" target="_blank" rel="external">Selenium with Python — Selenium Python Bindings 2 documentation</a></li>
<li><a href="https://github.com/ariya/phantomjs" target="_blank" rel="external">ariya/phantomjs: Scriptable Headless Browser</a></li>
<li><a href="https://github.com/iHTCboy/WebCrawlerExample/blob/master/WebCrawler/163_NeteaseMusic.py" target="_blank" rel="external">WebCrawlerExample/163_NeteaseMusic.py at master · iHTCboy/WebCrawlerExample</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近，网易的音乐很多听不到了，刚好也看到很多教程，跟进学习了一下，也集大全了吧，本来想优化一下的，但是发现问题还是有点复杂，最后另辟捷径，提供了简单的方法啊！</p>
<p>本文主要参考 <a href="https://www.jianshu.com/p/25bc4822af16">python编写GUI版网易云音乐爬虫</a> 后改写，有兴趣的可以看看文章的GUI，了解更多知识~</p>]]>
    
    </summary>
    
      <category term="Python" scheme="https://iHTCboy.com/tags/Python/"/>
    
      <category term="Python爬虫" scheme="https://iHTCboy.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="爬虫" scheme="https://iHTCboy.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="网易云音乐" scheme="https://iHTCboy.com/tags/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[django中ajax post数据时request.POST获取数组问题]]></title>
    <link href="https://iHTCboy.com/2018/09/05/2018-09-05_post%E5%8F%82%E6%95%B0%E4%B8%BA%E6%95%B0%E7%BB%84%E6%97%B6django%E4%B8%ADrequest%E9%97%AE%E9%A2%98/"/>
    <id>https://iHTCboy.com/2018/09/05/2018-09-05_post参数为数组时django中request问题/</id>
    <published>2018-09-05T10:49:16.000Z</published>
    <updated>2018-09-09T14:31:59.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在使用django开发web页面时，使用ajax的post参数中带有数组，然后在 <code>request.POST</code> 里获取的数组时，数组变成了一个元组！！！官方给出的通过 <code>request.POST.getlist(&#39;key&#39;)</code>来获取也是很鸡肉！那要怎么解决呢？</p>
<a id="more"></a>
<h3 id="2、问题">2、问题</h3><p>问题是这样，在前端js的post请求参数带有数组或字典：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = &#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'dict'</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    data: body,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在django后python解析request.POST，获取数组就变成这样：</p>
<p>如果是这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">    array = request.POST[<span class="string">'array'</span>]</span><br><span class="line">    dict = request.POST[<span class="string">'dict'</span>]</span><br></pre></td></tr></table></figure>
<p>直接是报错：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise <span class="function"><span class="title">MultiValueDictKeyError</span><span class="params">(key)</span></span></span><br><span class="line">django<span class="class">.utils</span><span class="class">.datastructures</span><span class="class">.MultiValueDictKeyError</span>: <span class="string">'array'</span></span><br></pre></td></tr></table></figure>
<p>所以我们要看看 <code>request.POST</code> 到底是什么类型，内容又是什么？？？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST：</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">'account'</span>: [<span class="string">'account'</span>], <span class="string">'password'</span>: [<span class="string">'password'</span>], <span class="string">'array[]'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>], <span class="string">'dict[k1]'</span>: [<span class="string">'v1'</span>], <span class="string">'dict[k2]'</span>: [<span class="string">'v2'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p><code>QueryDict</code> ？？？字典！！！</p>
<p>从前端传入的数组，变成了字典，问题有三个：</p>
<ul>
<li><code>array</code> 变成 <code>array[]</code> 键</li>
<li><code>[1, 2, 3]</code> 变成 <code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></li>
<li><code>dict</code> 变成 <code>dict[k1]</code>、<code>dict[k1]</code></li>
</ul>
<p>其实，这个不是bug！！！</p>
<blockquote>
<p>这是一个 django 自定义的类似字典的类，用来处理同一个键带多个值的情况。 python 原始的字典中，当一个键出现多个值的时候会发生冲突，只保留最后一个值。而在 HTML 表单中，通常会发生一个键有多个值的情况。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> query_string 需要一个字符串 a=<span class="number">1</span>&amp;a=<span class="number">2</span>&amp;c=<span class="number">3</span>，例如：</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>QueryDict(<span class="string">'a=1&amp;a=2&amp;c=3'</span>)</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">'a'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>], <span class="string">'c'</span>: [<span class="string">'3'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>那么怎么取值呢？</p>
<p>按照<code>getlist(key)</code> 拿不到：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-getlist-key.png" alt="20180905-request.POST-getlist-key.png"></p>
<p>用 <code>[key]</code> 只取到容器的最后一个值：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-get.png" alt="20180905-request.POST-get.png"></p>
<p>用 <code>getlist(key[])</code> 数组可以拿到字符串数组，但是字典就只能一个一个拿了！<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-getlist.png" alt="20180905-request.POST-getlist.png"></p>
<h3 id="3、解决方法">3、解决方法</h3><ul>
<li>方法一</li>
</ul>
<p>在前端的body参数变成json字符串：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'dict'</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>但在后端得到的是这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'&#123;"account":"account","password":"password","array":[1,2,3],"dict":&#123;"k1":"v1","k2":"v2"&#125;&#125;'</span>: [<span class="string">''</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>全部参数作为key的字典，显示不符合要求，并且导致处理复杂起来。</p>
<ul>
<li>方法二<br>子级变成json字符串：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = &#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: <span class="built_in">JSON</span>.stringify([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">    <span class="string">'dict'</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>得到的结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'account'</span>: [<span class="string">'account'</span>], <span class="string">'password'</span>: [<span class="string">'password'</span>], <span class="string">'array'</span>: [<span class="string">'[1,2,3]'</span>], <span class="string">'dict'</span>: [<span class="string">'&#123;"k1":"v1","k2":"v2"&#125;'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>数组和字典的全部值作为value，并且是string类型，显示不符合要求，并且导致处理复杂起来。</p>
<ul>
<li>方法三<br>其实，我们知道后端为了多个相同key存在，所以才这样处理，那么我们可以这样考虑，让数据和字典不在是数组和字典，后端在还原不就可以啦！</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = &#123;</span><br><span class="line">    <span class="string">'account'</span>: account,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'array'</span>: <span class="string">'1'</span> + <span class="built_in">JSON</span>.stringify([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">    <span class="string">'dict'</span>: <span class="string">'1'</span> + <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>让 ‘array’、’dict’ 变成 ‘1’ + json字符串形式，然后后端按规则还原：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'account'</span>: [<span class="string">'account'</span>], <span class="string">'password'</span>: [<span class="string">'password'</span>], <span class="string">'array'</span>: [<span class="string">'1[1,2,3]'</span>], <span class="string">'dict'</span>: [<span class="string">'1&#123;"k1":"v1","k2":"v2"&#125;'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>按规则还原：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array = request.POST[<span class="string">'array'</span>]</span><br><span class="line">dict = request.POST[<span class="string">'dict'</span>]</span><br><span class="line">array_list = json.loads(array[<span class="number">1</span>:])</span><br><span class="line">dict_list = json.loads(dict[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/09/20180905-request.POST-irregular.png" alt="20180905-request.POST-irregular.png"></p>
<p>这样拿也许不是好办法，但是当你数组或字典数据非常多时，也就这样啦，当然，也可以json字符串后加密，这样后端也不能解析，如果需要，大家也可以这样做啊~</p>
<h3 id="总结">总结</h3><p>在处理这些数据时，可能是为了方便而方便，有时候只有清楚知道原因，才能更好的处理，上面的方法确实不是<code>好方法</code>，有时候还是按规则来处理更好，一个人开发还好，如果是多人，那将来可能会留下坑啊。</p>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.jianshu.com/p/7af7e1e783ee" target="_blank" rel="external">关于ajax post 数据时django中request.body与request.POST问题 - 简书</a></li>
<li><a href="https://www.cnblogs.com/scolia/p/5634591.html" target="_blank" rel="external">django-QueryDict 对象 - scolia - 博客园</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict.getlist" target="_blank" rel="external">Request and response objects | Django documentation | Django</a></li>
<li><a href="https://www.cnblogs.com/ccorz/p/6346883.html" target="_blank" rel="external">django中同通过getlist() 接收页面form的post数组 - ccorz - 博客园</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近在使用django开发web页面时，使用ajax的post参数中带有数组，然后在 <code>request.POST</code> 里获取的数组时，数组变成了一个元组！！！官方给出的通过 <code>request.POST.getlist(&#39;key&#39;)</code>来获取也是很鸡肉！那要怎么解决呢？</p>]]>
    
    </summary>
    
      <category term="django" scheme="https://iHTCboy.com/tags/django/"/>
    
      <category term="post数组参数" scheme="https://iHTCboy.com/tags/post%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0/"/>
    
      <category term="request.POST" scheme="https://iHTCboy.com/tags/request-POST/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell技巧1 - 生成ipa文件]]></title>
    <link href="https://iHTCboy.com/2018/08/31/2018-08-31_shell%E6%8A%80%E5%B7%A71_%E7%94%9F%E6%88%90ipa%E6%96%87%E4%BB%B6/"/>
    <id>https://iHTCboy.com/2018/08/31/2018-08-31_shell技巧1_生成ipa文件/</id>
    <published>2018-08-31T13:19:16.000Z</published>
    <updated>2018-09-09T12:59:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>iTunes 12.7 之前，可以下载ipa应用包、打开ipa包，也生成ipa文件！但是在这12.7之后，关于ipa的所有功能已经移除，如果还想下载ipa包，可以参考我之前的文章：<a href="https://ihtcboy.com/2017/10/30/2017_10_解决iTunes12.7无法下载AppStore应用的IPA包问题/">解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题</a>，今天我们主要来说说制作ipa文件的功能。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-iTunes12.7-new-change.png" alt="20180831-iTunes12.7-new-change.png"></p>
<a id="more"></a>
<h3 id="2、ipa文件结构">2、ipa文件结构</h3><p>其实ipa文件可以理解为一个zip的压缩文件，所以解压ipa文件后，得到ipa的目录 <code>ipafilename/Payload/xxx.app</code>，以微信示例：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-ipa-file-path.png" alt="20180831-ipa-file-path.png"></p>
<p>所以，如果我们编译的项目，想生成ipa文件，以前是拖拽到iTunes就会自动生成ipa文件，现在不行了，根据这个原理，我们在Xcode中编译生成的<code>.app</code>目录，按照前面说的目录结构，进行压缩就行啦！</p>
<h3 id="3、bash脚本">3、bash脚本</h3><ul>
<li><p>生成.app目录内容：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-Xcode-build-app.png" alt="20180831-Xcode-build-app.png"></p>
</li>
<li><p>执行shell脚本生成ipa文件：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-bash-make-ipa-file.png" alt="20180831-bash-make-ipa-file.png"></p>
</li>
<li><p>生成成功后，自动打开ipa文件所在目录：<br><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-make-ipa-finish.png" alt="20180831-make-ipa-finish.png"></p>
</li>
</ul>
<h3 id="4、全部代码">4、全部代码</h3><p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># 定义用到的变量</span></span><br><span class="line">projectAppPath=<span class="string">""</span></span><br><span class="line">outputPath=<span class="string">""</span></span><br><span class="line">ipaFileName=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义读取输入字符的函数</span></span><br><span class="line"><span class="function"><span class="title">getProjectAppPath</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"\n================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter .app path: "</span> projectAppPath</span><br><span class="line">	<span class="comment"># 如果为空值，从新监听</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$projectAppPath</span>"</span>; <span class="keyword">then</span></span><br><span class="line">		getprojectAppPath</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getOutputPath</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"\n================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter output path: "</span> outputPath</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$outputPath</span>"</span>; <span class="keyword">then</span></span><br><span class="line">		<span class="comment"># 如果没有输出路径，默认输出到桌面</span></span><br><span class="line">	  outputPath=<span class="string">"Desktop"</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getipaFileName</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 输出换行，方便查看</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"\n================================================"</span></span><br><span class="line">	<span class="comment"># 监听输入并且赋值给变量</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">" Enter ipa FileName: "</span> ipaFileName</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$ipaFileName</span>"</span>; <span class="keyword">then</span></span><br><span class="line">		getipaFileName</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行函数，给变量赋值</span></span><br><span class="line">getProjectAppPath</span><br><span class="line">getOutputPath</span><br><span class="line">getipaFileName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到当前用户的home目录，方便创建桌面目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在输出路径下创建 Payload 文件夹</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;outputPath&#125;</span>/Payload"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将.app 文件复制到 输出路径的 Payload 文件夹下</span></span><br><span class="line">cp -r <span class="string">"<span class="variable">$&#123;projectAppPath&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;outputPath&#125;</span>/Payload/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到输出路径</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;outputPath&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Payload 文件夹压缩成 ipa 包</span></span><br><span class="line">zip -r <span class="string">"<span class="variable">$&#123;ipaFileName&#125;</span>.ipa"</span> Payload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前路径下 Payload 文件夹【-r 就是向下递归，不管有多少级目录，一并删除 -f 就是直接强行删除，不作任何提示的意思】</span></span><br><span class="line">rm -rf <span class="string">"Payload"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功提示</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n\n=====================【转换ipa完成】=========================\n"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;outputPath&#125;</span></span><br><span class="line"><span class="comment">## 打开输出的路径</span></span><br><span class="line"><span class="comment">#open -a Finder "$&#123;outputPath&#125;"</span></span><br><span class="line"><span class="comment"># 从当前位置打开finder</span></span><br><span class="line">open .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束退出</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="5、优化">5、优化</h3><h4 id="方法一">方法一</h4><p>每次想生成ipa文件，就要打开终端，执行 <code>sh make_ipa_file.sh</code>，相当麻烦，所以，如果生成别名，直接在终端输入别名就可以执行啦，是不是很棒！</p>
<p>为.bash_profile添加了一个别名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkipa=<span class="string">'sh /Users/HTC/Documents/iBash/make_ipa_file.sh'</span></span><br></pre></td></tr></table></figure></p>
<p>以后直接在终端输入：<code>mkipa</code>就可以啦，这不是很棒！！！</p>
<h4 id="方法二">方法二</h4><p>如果是 Unix 可执行文件，直接点击，会自动打开终端执行。</p>
<p>把 <code>make_ipa_file.sh</code> 改为 <code>make_ipa_file_sh</code> 名字，然后在终端为文件添加可执行权限：<br><code>chmod +x /Users/HTC/Desktop/make_ipa_file_sh</code> </p>
<p>这样就生成了 Unix 文件，双击就会打开到终端：</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-make-ipa-Unix-file.png" alt="20180831-make-ipa-Unix-file.png"></p>
<h4 id="方法三">方法三</h4><p>在  ~/.bashrc 里面添加本函数，或添加脚本路径，也可以方便执行。</p>
<h4 id="方法四">方法四</h4><p>如果是macOS环境，还可以通过苹果的apple脚本服务，来做到一键化，以后有机会在谈谈。</p>
<h4 id="方法五">方法五</h4><p>也通过 <code>spotlight</code> 或 第三方软件 <code>Alfred</code> 快速查找文件打开~</p>
<h3 id="6、总结">6、总结</h3><p>通过这个简单又复杂的示例，其实使用脚本的最终目录，也是想提高效率！！所以，打包ipa包的效率，也是向着这样的方向努力！如果你对shell还不熟悉，可以看看下面这2个教程，当前我学习的时候，还没有人给指导，所以，你们是幸福的一代程序员！加油！</p>
<ul>
<li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">Shell 教程 | 菜鸟教程</a></li>
<li><del><a href="https://bestswifter.gitbook.io/effectivemac/zhong-ji-wu-qi-zsh/zhi-hang-shell-jiao-ben" target="_blank" rel="external">执行 Shell 脚本 - EffectiveMac</a></del></li>
</ul>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/iShell" target="_blank" rel="external">iHTCboy/iShell: Shell脚本编程技巧，总结一些常用的提高效率的方法。</a></li>
<li><a href="https://support.apple.com/zh-cn/HT208075" target="_blank" rel="external">新版 iTunes 的变化 - Apple 支持</a></li>
<li><a href="http://www.cnblogs.com/skywang12345/archive/2013/05/30/3106570.html" target="_blank" rel="external">Linux bash总结(一) 基础部分(适合初学者学习和非初学者参考)  - 博客园</a></li>
<li><a href="http://www.cnblogs.com/wengzilin/p/4601684.html" target="_blank" rel="external">ios打包ipa的四种实用方法(.app转.ipa)</a></li>
<li><a href="https://stackoverflow.com/questions/281372/executing-shell-scripts-from-the-os-x-dock?answertab=votes" target="_blank" rel="external">osx - Executing Shell Scripts from the OS X Dock? - Stack Overflow</a></li>
<li><a href="https://ihtcboy.com/2017/10/30/2017_10_解决iTunes12.7无法下载AppStore应用的IPA包问题/">解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题</a></li>
<li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">Shell 教程 | 菜鸟教程</a></li>
<li><a href="https://bestswifter.gitbook.io/effectivemac/zhong-ji-wu-qi-zsh/zhi-hang-shell-jiao-ben" target="_blank" rel="external">执行 Shell 脚本 - EffectiveMac</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>iTunes 12.7 之前，可以下载ipa应用包、打开ipa包，也生成ipa文件！但是在这12.7之后，关于ipa的所有功能已经移除，如果还想下载ipa包，可以参考我之前的文章：<a href="https://ihtcboy.com/2017/10/30/2017_10_解决iTunes12.7无法下载AppStore应用的IPA包问题/">解决 iTunes 12.7 无法下载 AppStore应用的IPA包问题</a>，今天我们主要来说说制作ipa文件的功能。</p>
<p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180831-iTunes12.7-new-change.png" alt="20180831-iTunes12.7-new-change.png"></p>]]>
    
    </summary>
    
      <category term="bash" scheme="https://iHTCboy.com/tags/bash/"/>
    
      <category term="ipa" scheme="https://iHTCboy.com/tags/ipa/"/>
    
      <category term="itunes" scheme="https://iHTCboy.com/tags/itunes/"/>
    
      <category term="shell" scheme="https://iHTCboy.com/tags/shell/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python爬虫天猫店铺全部商品一记]]></title>
    <link href="https://iHTCboy.com/2018/08/25/2018-08-25_Python%E7%88%AC%E8%99%AB%E5%A4%A9%E7%8C%AB%E5%BA%97%E9%93%BA%E5%85%A8%E9%83%A8%E5%95%86%E5%93%81%E4%B8%80%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/08/25/2018-08-25_Python爬虫天猫店铺全部商品一记/</id>
    <published>2018-08-25T07:49:16.000Z</published>
    <updated>2018-09-09T09:16:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>最近小姐姐工作需要，需要爬取天猫某店的全部商品，正好小哥学习了Python几个月，就答应上手试试！结果第一道题就难住了，天猫登陆需要账号密码和验证码！！！虽然知道可以通过模拟和Session操作，但是，始终是新手开车，还没有学习那么高深，感觉会走很多弯路！！另外，也想想，有没有什么更简单的方法？？？</p>
<p>不出意思，还真发现啦！天猫的手机版可以不用登陆，全部数据访问！！！就这样~ </p>
<p>开始吧！</p>
<a id="more"></a>
<h3 id="2、遇到的坑点">2、遇到的坑点</h3><p>本文主要是在 <a href="https://www.cnblogs.com/gopythoner/p/7885093.html" target="_blank" rel="external">利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园</a> 这个大哥的基础上，踩坑填坑，然后增加自己一些数据要求~</p>
<ul>
<li>坑一</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">"/Users/HTC/Documents/Programing/Python/WebCrawlerExample/WebCrawler/Tmall_demo.py"</span>, line <span class="number">63</span>, <span class="keyword">in</span> get_products</span><br><span class="line">    writer.writerows(products)</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py"</span>, line <span class="number">158</span>, <span class="keyword">in</span> writerows</span><br><span class="line">    <span class="keyword">return</span> self.writer.writerows(map(self._dict_to_list, rowdicts))</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py"</span>, line <span class="number">151</span>, <span class="keyword">in</span> _dict_to_list</span><br><span class="line">    + <span class="string">", "</span>.join([repr(x) <span class="keyword">for</span> x <span class="keyword">in</span> wrong_fields]))</span><br><span class="line">ValueError: dict contains fields <span class="keyword">not</span> <span class="keyword">in</span> fieldnames: <span class="string">'titleUnderIconList'</span></span><br></pre></td></tr></table></figure>
<p><code>writer.writerows</code> 没有找到这个’titleUnderIconList’字段，这个字段应该是天猫的接口后来返回的数据，在代码里只能删除掉：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> product[<span class="string">'titleUnderIconList'</span>]<span class="keyword">del</span> product[<span class="string">'titleUnderIconList'</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>坑二</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">"/Users/HTC/Documents/Programing/Python/WebCrawlerExample/WebCrawler/Tmall_demo.py"</span>, line <span class="number">65</span>, <span class="keyword">in</span> get_products</span><br><span class="line">    writer.writerows(products)</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/csv.py"</span>, line <span class="number">158</span>, <span class="keyword">in</span> writerows</span><br><span class="line">    <span class="keyword">return</span> self.writer.writerows(map(self._dict_to_list, rowdicts))</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 26-27: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>
<p>熟悉的人儿，看到python3与python2的区别，就知道，<code>&#39;ascii&#39; codec can&#39;t encode</code> 就是编码问题，问题就出来这里<code>writer.writerows</code>, python3处理、解析或转换和保存时，最好都指定一下使用 <code>utf-8</code>编码吧，特别是遇到中文的情况！</p>
<p>最后指定编码用utf-8：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(self.filename, <span class="string">'a'</span>, encoding=<span class="string">"utf-8"</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f, fieldnames=title)</span><br><span class="line">    writer.writerows(products)</span><br></pre></td></tr></table></figure>
<ul>
<li>坑三</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">035009803B0</span><br><span class="line">图片下载错误 ： http//img.alicdn.com/bao/uploaded/i4/821705368/TB1Sht8cfQs8KJjSZFEXXc9RpXa_!!0-item_pic.jpg Invalid URL '035009803B0': No schema supplied. Perhaps you meant http://035009803B0?</span><br><span class="line">02100713003</span><br><span class="line">图片下载错误 ： http//img.alicdn.com/bao/uploaded/i1/821705368/TB1_OIkXQfb_uJkSmRyXXbWxVXa_!!0-item_pic.jpg Invalid URL '02100713003': No schema supplied. Perhaps you meant http://02100713003?</span><br><span class="line">02800614023</span><br><span class="line">图片下载错误 ： http//img.alicdn.com/bao/uploaded/i3/821705368/TB1kKK6cInI8KJjSsziXXb8QpXa_!!0-item_pic.jpg Invalid URL '02800614023': No schema supplied. Perhaps you meant http://02800614023?</span><br></pre></td></tr></table></figure>
<p>下图图片失败的提示，原因是天猫接口返回的商品数据如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attribute">item_id</span>: <span class="number">14292263734</span>,</span><br><span class="line"><span class="attribute">title</span>: <span class="string">"XXXXXX"</span>,</span><br><span class="line"><span class="attribute">img</span>: <span class="string">"//img.alicdn.com/bao/uploaded/i2/821705368/TB1Us3Qcr_I8KJjy1XaXXbsxpXa_!!0-item_pic.jpg"</span>,</span><br><span class="line"><span class="attribute">sold</span>: <span class="string">"3"</span>,</span><br><span class="line"><span class="attribute">quantity</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attribute">totalSoldQuantity</span>: <span class="number">2937</span>,</span><br><span class="line"><span class="attribute">url</span>: <span class="string">"//detail.m.tmall.com/item.htm?id=xxxxx"</span>,</span><br><span class="line"><span class="attribute">price</span>: <span class="string">"188.00"</span>,</span><br><span class="line"><span class="attribute">titleUnderIconList</span>: [ ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>不带协议名字！！！不知道是什么时候的历史留下的坑点吧！！！大厂也是有坑的！！</p>
<h3 id="3、总结">3、总结</h3><p>具体的代码，可参考我的Github代码：</p>
<ul>
<li><a href="https://github.com/iHTCboy/WebCrawlerExample" target="_blank" rel="external">iHTCboy/WebCrawlerExample: 网页爬虫实践示例</a></li>
</ul>
<p>代码详细的解析还是参考这位大神的 <a href="https://www.cnblogs.com/gopythoner/p/7885093.html" target="_blank" rel="external">利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园</a>，写的非常的详细！</p>
<p>整体来说，因为天猫的商品数据通过js来获取，所以比较容易获取到数据，而不用大量的爬取页面的商品，这个很赞！所以，爬虫这技术活，有很多方法，能找到好的方法，才是爬虫的最高境界啊！加油~ </p>
<h3 id="代码">代码</h3><p>python就是利害，一百行代码就搞定！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TM_producs</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, storename)</span>:</span></span><br><span class="line">        self.storename = storename</span><br><span class="line">        self.url = <span class="string">'https://&#123;&#125;.m.tmall.com'</span>.format(storename)</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 "</span></span><br><span class="line">                          <span class="string">"(KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1"</span></span><br><span class="line">        &#125;</span><br><span class="line">        datenum = datetime.now().strftime(<span class="string">'%Y%m%d_%H%M%S'</span>)</span><br><span class="line">        self.filename = <span class="string">'&#123;&#125;_&#123;&#125;.csv'</span>.format(self.storename, datenum)</span><br><span class="line">        self.get_file()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''创建一个含有标题的表格'''</span></span><br><span class="line">        title = [<span class="string">'item_id'</span>, <span class="string">'product_id'</span>, <span class="string">'price'</span>, <span class="string">'quantity'</span>, <span class="string">'sold'</span>, <span class="string">'title'</span>, <span class="string">'totalSoldQuantity'</span>, <span class="string">'url'</span>, <span class="string">'img'</span>]</span><br><span class="line">        <span class="keyword">with</span> open(self.filename, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.DictWriter(f, fieldnames=title)</span><br><span class="line">            writer.writeheader()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_totalpage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''提取总页码数'''</span></span><br><span class="line">        num = random.randint(<span class="number">83739921</span>, <span class="number">87739530</span>)</span><br><span class="line">        endurl = <span class="string">'/shop/shop_auction_search.do?sort=s&amp;p=1&amp;page_size=12&amp;from=h5&amp;ajson=1&amp;_tm_source=tmallsearch&amp;callback=jsonp_&#123;&#125;'</span></span><br><span class="line">        url = self.url + endurl.format(num)</span><br><span class="line">        html = requests.get(url, headers=self.headers).text</span><br><span class="line">        infos = re.findall(<span class="string">'\((&#123;.*&#125;)\)'</span>, html)[<span class="number">0</span>]</span><br><span class="line">        infos = json.loads(infos)</span><br><span class="line">        totalpage = infos.get(<span class="string">'total_page'</span>)</span><br><span class="line">        <span class="keyword">return</span> int(totalpage)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_products</span><span class="params">(self, page)</span>:</span></span><br><span class="line">        <span class="string">'''提取单页商品列表'''</span></span><br><span class="line">        num = random.randint(<span class="number">83739921</span>, <span class="number">87739530</span>)</span><br><span class="line">        endurl = <span class="string">'/shop/shop_auction_search.do?sort=s&amp;p=&#123;&#125;&amp;page_size=12&amp;from=h5&amp;ajson=1&amp;_tm_source=tmallsearch&amp;callback=jsonp_&#123;&#125;'</span></span><br><span class="line">        url = self.url + endurl.format(page, num)</span><br><span class="line">        html = requests.get(url, headers=self.headers).text</span><br><span class="line">        infos = re.findall(<span class="string">'\((&#123;.*&#125;)\)'</span>, html)[<span class="number">0</span>]</span><br><span class="line">        infos = json.loads(infos)</span><br><span class="line">        products = infos.get(<span class="string">'items'</span>)</span><br><span class="line">        <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">            <span class="keyword">del</span> product[<span class="string">'titleUnderIconList'</span>]</span><br><span class="line">            item_id = product[<span class="string">'item_id'</span>]</span><br><span class="line">            product_id = self.get_product_spm(item_id)</span><br><span class="line">            product[<span class="string">'product_id'</span>] = product_id</span><br><span class="line">            imgUrl = <span class="string">'https:'</span> + product[<span class="string">'img'</span>]</span><br><span class="line">            self.save_img(imgUrl, product_id)</span><br><span class="line">            item_id = product[<span class="string">'item_id'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(products)</span></span><br><span class="line">        title = [<span class="string">'item_id'</span>, <span class="string">'product_id'</span>, <span class="string">'price'</span>, <span class="string">'quantity'</span>, <span class="string">'sold'</span>, <span class="string">'title'</span>, <span class="string">'totalSoldQuantity'</span>, <span class="string">'url'</span>, <span class="string">'img'</span>]</span><br><span class="line">        <span class="keyword">with</span> open(self.filename, <span class="string">'a'</span>, encoding=<span class="string">"utf-8"</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.DictWriter(f, fieldnames=title)</span><br><span class="line">            writer.writerows(products)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_product_spm</span><span class="params">(self, item_id)</span>:</span></span><br><span class="line">        url = <span class="string">'https://detail.m.tmall.com/item.htm?id=&#123;&#125;'</span>.format(item_id)</span><br><span class="line">        html = requests.get(url, headers=self.headers).text</span><br><span class="line">        <span class="comment"># &#123;"货号":"07300318000 "&#125;</span></span><br><span class="line">        product_id = re.findall(<span class="string">r'"货号":"(.+?)"&#125;'</span>, html)[<span class="number">0</span>].strip()</span><br><span class="line">        print(product_id)</span><br><span class="line">        <span class="keyword">return</span> product_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(self, img_url, file_name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获得图片后缀</span></span><br><span class="line">            file_suffix = os.path.splitext(img_url)[<span class="number">1</span>]</span><br><span class="line">            cwd = os.getcwd()</span><br><span class="line">            save_path = os.path.join(cwd, <span class="string">'images/'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_path):</span><br><span class="line">                os.makedirs(save_path)</span><br><span class="line"></span><br><span class="line">            image_path = os.path.join(save_path, file_name + file_suffix)</span><br><span class="line">            <span class="comment"># 下载图片</span></span><br><span class="line">            image = requests.get(img_url, headers=self.headers)</span><br><span class="line">            <span class="comment"># 命名并保存图片</span></span><br><span class="line">            <span class="keyword">with</span> open(image_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(image.content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'图片下载错误 ：'</span>, file_name, e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''循环爬取所有页面宝贝'''</span></span><br><span class="line">        total_page = self.get_totalpage()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, total_page + <span class="number">1</span>):</span><br><span class="line">            self.get_products(i)</span><br><span class="line">            print(<span class="string">'总计&#123;&#125;页商品，已经提取第&#123;&#125;页'</span>.format(total_page, i))</span><br><span class="line">            time.sleep(<span class="number">1</span> + random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    storename = <span class="string">'mgssp'</span></span><br><span class="line">    tm = TM_producs(storename)</span><br><span class="line">    tm.main()</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><ul>
<li><a href="https://github.com/iHTCboy/WebCrawlerExample" target="_blank" rel="external">iHTCboy/WebCrawlerExample: 网页爬虫实践示例</a></li>
<li><a href="https://www.cnblogs.com/gopythoner/p/7885093.html" target="_blank" rel="external">利用Python爬虫爬取指定天猫店铺全店商品信息 - 晴空行 - 博客园</a></li>
<li><a href="https://github.com/Hopetree/E-commerce-crawlers" target="_blank" rel="external">Hopetree/E-commerce-crawlers: 电商网站爬虫合集，淘宝京东亚马逊等</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>最近小姐姐工作需要，需要爬取天猫某店的全部商品，正好小哥学习了Python几个月，就答应上手试试！结果第一道题就难住了，天猫登陆需要账号密码和验证码！！！虽然知道可以通过模拟和Session操作，但是，始终是新手开车，还没有学习那么高深，感觉会走很多弯路！！另外，也想想，有没有什么更简单的方法？？？</p>
<p>不出意思，还真发现啦！天猫的手机版可以不用登陆，全部数据访问！！！就这样~ </p>
<p>开始吧！</p>]]>
    
    </summary>
    
      <category term="Python" scheme="https://iHTCboy.com/tags/Python/"/>
    
      <category term="Python爬虫" scheme="https://iHTCboy.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="天猫" scheme="https://iHTCboy.com/tags/%E5%A4%A9%E7%8C%AB/"/>
    
      <category term="爬虫" scheme="https://iHTCboy.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="technology" scheme="https://iHTCboy.com/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PyCharm for Mac快捷键小记]]></title>
    <link href="https://iHTCboy.com/2018/08/04/2018-08-04_PyCharm_for_Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/08/04/2018-08-04_PyCharm_for_Mac快捷键小记/</id>
    <published>2018-08-04T15:09:16.000Z</published>
    <updated>2019-03-30T08:23:03.004Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的PyCharm for Mac快捷键，因为网上经常找到的都是Windows版本，所以当是备忘也好，后续会不定期更新。</p>
<a id="more"></a>
<h3 id="2、PyCharm_for_Mac_快捷键">2、PyCharm for Mac 快捷键</h3><h4 id="思维导图">思维导图</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180804-PyCharm-Shortcut-20190330.png" alt="20180804-PyCharm-Shortcut-20190330.png"></p>
<h4 id="快捷键">快捷键</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cmd + b</td>
<td>跳转到声明处（cmd加鼠标）</td>
</tr>
<tr>
<td>cmd + d</td>
<td>在下一行复制本行的内容</td>
</tr>
<tr>
<td>cmd [ / ]</td>
<td>跳转的页面回退或前进</td>
</tr>
<tr>
<td>cmd + opt + [ / ]</td>
<td>函数和方法前后的位置</td>
</tr>
<tr>
<td>cmd + backspace</td>
<td>删除当前行</td>
</tr>
<tr>
<td>cmd + c</td>
<td>复制光标当前行,剪切同理</td>
</tr>
<tr>
<td>cmd + f</td>
<td>当前文件搜索（回车下一个 shift回车上一个）</td>
</tr>
<tr>
<td>cmd + r</td>
<td>当前文件替换</td>
</tr>
<tr>
<td>cmd + shift + f</td>
<td>全局搜索</td>
</tr>
<tr>
<td>cmd + shift + r</td>
<td>全局替换</td>
</tr>
<tr>
<td>cmd + shift + a</td>
<td>搜索动作</td>
</tr>
<tr>
<td>cmd + o</td>
<td>搜索class</td>
</tr>
<tr>
<td>cmd + opt + o</td>
<td>搜索符号（函数等)</td>
</tr>
<tr>
<td>cmd + shift + o</td>
<td>搜索文件</td>
</tr>
<tr>
<td>shift + shift</td>
<td>任意搜索功能</td>
</tr>
<tr>
<td>cmd + l</td>
<td>指定行数跳转</td>
</tr>
<tr>
<td>shift + enter</td>
<td>在行中的时候直接到下一行(新建)</td>
</tr>
<tr>
<td>cmd +</td>
<td>展开当前</td>
</tr>
<tr>
<td>cmd -</td>
<td>折叠当前</td>
</tr>
<tr>
<td>cmd shift +</td>
<td>展开所有</td>
</tr>
<tr>
<td>cmd shift -</td>
<td>折叠所有</td>
</tr>
<tr>
<td>cmd /</td>
<td>注释/取消注释一行</td>
</tr>
<tr>
<td>cmd + opt + /</td>
<td>批量注释(pycharm不生效)</td>
</tr>
<tr>
<td>ctr + tab</td>
<td>史上最NB的导航窗口（工程文件列表、文件结构列表、命令行模式、代码检查、VCS等）</td>
</tr>
<tr>
<td>alt + F12</td>
<td>打开命令行栏</td>
</tr>
<tr>
<td>cmd + F12</td>
<td>显示文件结构</td>
</tr>
<tr>
<td>cmd + j</td>
<td>代码智能补全</td>
</tr>
<tr>
<td>alt + F1</td>
<td>定位编辑文件所在位置:</td>
</tr>
<tr>
<td>cmd + F6</td>
<td>更改变量</td>
</tr>
<tr>
<td>cmd + opt + t</td>
<td>指定代码被注释语句或者逻辑结构、函数包围</td>
</tr>
<tr>
<td>Tab / Shift + Tab</td>
<td>缩进、不缩进当前行</td>
</tr>
<tr>
<td>cmd + opt + l</td>
<td>代码块对齐</td>
</tr>
<tr>
<td>opt + F7</td>
<td>find usage</td>
</tr>
</tbody>
</table>
<h3 id="参考">参考</h3><p>下面是PyCharm教程、Flask、Django框架学习的一些链接！大家有空可以看看~</p>
<ul>
<li>PyCharm</li>
</ul>
<p>PyCharm 收藏多年快捷键分享~ - Henry Z’s blog~ <a href="https://changchen.me/blog/20170607/pycharm-shortcut/" target="_blank" rel="external">https://changchen.me/blog/20170607/pycharm-shortcut/</a><br>pycharm 使用教程 <a href="https://www.jianshu.com/p/2bfc19e1381c" target="_blank" rel="external">https://www.jianshu.com/p/2bfc19e1381c</a><br>PyCharm IDE 链接sqlite、建表、添加、查询数据 - CSDN博客 <a href="https://blog.csdn.net/qq_36482772/article/details/53458400" target="_blank" rel="external">https://blog.csdn.net/qq_36482772/article/details/53458400</a><br>Pycharm快捷键整理（Mac） - 简书 <a href="https://www.jianshu.com/p/be0bdc02f7da" target="_blank" rel="external">https://www.jianshu.com/p/be0bdc02f7da</a><br>你有哪些想要分享的 PyCharm 使用技巧？ - 知乎<a href="https://www.zhihu.com/question/37787004/answer/186042335" target="_blank" rel="external">https://www.zhihu.com/question/37787004/answer/186042335</a><br>PyCharm速览 <a href="http://www.liujiangblog.com/blog/28/" target="_blank" rel="external">http://www.liujiangblog.com/blog/28/</a><br>迈出Pycharm第一步-刘江的博客 <a href="http://www.liujiangblog.com/blog/29/" target="_blank" rel="external">http://www.liujiangblog.com/blog/29/</a></p>
<ul>
<li>Flask框架</li>
</ul>
<p>快速入门 — Flask 0.10.1 文档 <a href="http://docs.jinkan.org/docs/flask/quickstart.html#quickstart" target="_blank" rel="external">http://docs.jinkan.org/docs/flask/quickstart.html#quickstart</a><br>    Flask 入门指南 <a href="https://blog.igevin.info/posts/flask-startup-guideline/" target="_blank" rel="external">https://blog.igevin.info/posts/flask-startup-guideline/</a><br>    利用pycharm学习flask教程 <a href="https://www.jianshu.com/p/a7d988fb807f" target="_blank" rel="external">https://www.jianshu.com/p/a7d988fb807f</a><br>    python flask搭建web应用 - CSDN博客  <a href="https://blog.csdn.net/u012734441/article/details/62036503" target="_blank" rel="external">https://blog.csdn.net/u012734441/article/details/62036503</a><br>《Flask Web开发——基于Python的Web应用开发实践》一字一句上机实践（上） - 舞动的心 - 博客园  <a href="http://www.cnblogs.com/liuzhen1995/p/8001040.html" target="_blank" rel="external">http://www.cnblogs.com/liuzhen1995/p/8001040.html</a><br>Flask Web开发学习笔记（一）~（6） <a href="https://www.jianshu.com/p/303057e51417" target="_blank" rel="external">https://www.jianshu.com/p/303057e51417</a><br>Flask 的部署 <a href="https://windard.com/project/2016/12/01/Deploy-Flask-APP" target="_blank" rel="external">https://windard.com/project/2016/12/01/Deploy-Flask-APP</a><br>如果你也想写Flask| 编程派 | Coding Python <a href="http://codingpy.com/article/if-you-also-want-to-write-flask/" target="_blank" rel="external">http://codingpy.com/article/if-you-also-want-to-write-flask/</a><br>Introduction | Flask之旅 <a href="https://spacewander.github.io/explore-flask-zh/index.html" target="_blank" rel="external">https://spacewander.github.io/explore-flask-zh/index.html</a></p>
<ul>
<li>Django框架</li>
</ul>
<p>介紹 | Django Book 2.0 中文版 <a href="https://wizardforcel.gitbooks.io/django-book-20-zh-cn/content/index.html" target="_blank" rel="external">https://wizardforcel.gitbooks.io/django-book-20-zh-cn/content/index.html</a><br>从Python到Django入门教程 <a href="https://borisliu.gitbooks.io/from-python-to-django/content/introduction/preface.html" target="_blank" rel="external">https://borisliu.gitbooks.io/from-python-to-django/content/introduction/preface.html</a><br>Django新手图文入门教程 <a href="http://www.liujiangblog.com/blog/3/" target="_blank" rel="external">http://www.liujiangblog.com/blog/3/</a></p>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的PyCharm for Mac快捷键，因为网上经常找到的都是Windows版本，所以当是备忘也好，后续会不定期更新。</p>]]>
    
    </summary>
    
      <category term="PyCharm" scheme="https://iHTCboy.com/tags/PyCharm/"/>
    
      <category term="shortcut" scheme="https://iHTCboy.com/tags/shortcut/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iTerm2快捷键小记]]></title>
    <link href="https://iHTCboy.com/2018/08/03/2018-08-03_iTerm%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/08/03/2018-08-03_iTerm快捷键小记/</id>
    <published>2018-08-03T13:19:16.000Z</published>
    <updated>2019-03-30T08:26:13.186Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的iTerm快捷键，当是备忘也好，后续会不定期更新。</p>
<a id="more"></a>
<h3 id="2、iTerm2_快捷键">2、iTerm2 快捷键</h3><h4 id="思维导图">思维导图</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/08/20180803-iTerm2-Shortcut-20190330.png" alt="20180803-iTerm2-Shortcut-20190330.png"></p>
<h4 id="快捷键">快捷键</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>command + f</td>
<td><strong>搜索&amp;查找</strong>，如果输入搜索内容后，按下 tab 键，就会 iTerm 自动帮选中搜索关键词，并且自动的帮我们复制到了剪贴板中。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。按 esc 退出搜索。</td>
</tr>
<tr>
<td>command + r <br>或 ctrl + l</td>
<td>清空屏幕，而且只是换到新一屏，不会像 clear 一样创建一个空屏</td>
</tr>
<tr>
<td>command + k</td>
<td>clear，清空屏幕</td>
</tr>
<tr>
<td>command + d</td>
<td>垂直分屏</td>
</tr>
<tr>
<td>command + shift + d</td>
<td>水平分屏</td>
</tr>
<tr>
<td>command + ;</td>
<td>查看历史命令</td>
</tr>
<tr>
<td>command + shift + h</td>
<td>查看剪贴板历史，会自动列出输入过的命令</td>
</tr>
<tr>
<td>command + number</td>
<td>tab 标签窗口来回切换</td>
</tr>
<tr>
<td>command + option + ←/→ <br>或 command + [ / ]</td>
<td>切换屏幕</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>ctrl +  x</td>
<td>第一次按时，移动光标至行首；再次按时，回到原有位置</td>
</tr>
<tr>
<td>ctrl + a</td>
<td>到行首（Ahead of line）</td>
</tr>
<tr>
<td>ctrl + e</td>
<td>到行尾（End of line）</td>
</tr>
<tr>
<td>ctrl + f/b</td>
<td>前进后退(相当于左右方向键)</td>
</tr>
<tr>
<td>ctrl + u</td>
<td>清除当前行（无论光标在什么位置）</td>
</tr>
<tr>
<td>ctrl + d</td>
<td>删除光标当前位置的<strong>字符</strong></td>
</tr>
<tr>
<td>ctrl + h</td>
<td>删除光标之前的<strong>字符</strong></td>
</tr>
<tr>
<td>ctrl + w</td>
<td>删除光标之前的<strong>单词</strong></td>
</tr>
<tr>
<td>ctrl + k</td>
<td>删除光标当前位置到文本末尾的<strong>所有字符</strong></td>
</tr>
<tr>
<td>ctrl + t</td>
<td>交换光标当前位置的字符与前一个字符的位置</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>ctrl + c <br>或 ctrl + j <br>或 ctrl + o</td>
<td>取消当前行输入的命令（中断操作）。重新起一行。</td>
</tr>
<tr>
<td>ctrl + y</td>
<td>粘贴之前（ctrl +u/k/w）删除的内容</td>
</tr>
<tr>
<td>ctrl + p <br>或 !!</td>
<td>上一条命令。调出命令历史中的前一条（Previous）命令，相当于通常的上箭头</td>
</tr>
<tr>
<td>ctrl + n</td>
<td>下一条命令。调出命令历史中的下一条（Next）命令，相当于通常的上箭头</td>
</tr>
<tr>
<td>ctrl + s</td>
<td>冻结终端操作（暂停脚本）</td>
</tr>
<tr>
<td>ctrl  + q</td>
<td>恢复冻结（继续执行脚本）</td>
</tr>
<tr>
<td>ctrl + r</td>
<td>搜索命令历史。根据用户输入查找相关历史命令（reverse-i-search）</td>
</tr>
<tr>
<td>ctrl + l  <br>或 command + r</td>
<td>换到新一屏，创建一个空屏</td>
</tr>
<tr>
<td>ctrl + i <br>或 tab</td>
<td>横行制表符，在命令行中补齐指令</td>
</tr>
<tr>
<td>双击</td>
<td>选中单词</td>
</tr>
<tr>
<td>三击</td>
<td>选中整行</td>
</tr>
<tr>
<td>四击</td>
<td>智能选择</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>!word</td>
<td>重复运行最近一条以“word”开头的指令，如!ls 或 !l</td>
</tr>
<tr>
<td>!$</td>
<td>调用上一条指令的最后一个参数作为当前指令对象,如，假设上一条指令为： ls abc.txt bbc.txt 那么， vi !$ 相当于： vi bbc.txt</td>
</tr>
<tr>
<td>!number</td>
<td>调用执行指定编号的历史记录指令,如!2, !11</td>
</tr>
</tbody>
</table>
<h3 id="参考">参考</h3><ul>
<li><a href="https://cnbin.github.io/blog/2015/06/20/iterm2-kuai-jie-jian-da-quan/" target="_blank" rel="external">iTerm2 快捷键大全 - 陈斌彬的技术博客</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>总结一下自己平时常用的iTerm快捷键，当是备忘也好，后续会不定期更新。</p>]]>
    
    </summary>
    
      <category term="iTerm" scheme="https://iHTCboy.com/tags/iTerm/"/>
    
      <category term="shortcut" scheme="https://iHTCboy.com/tags/shortcut/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vi(vim)快捷键小记]]></title>
    <link href="https://iHTCboy.com/2018/07/28/2018-07-28_Vim%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://iHTCboy.com/2018/07/28/2018-07-28_Vim快捷键小记/</id>
    <published>2018-07-28T07:49:16.000Z</published>
    <updated>2019-03-30T08:22:00.399Z</updated>
    <content type="html"><![CDATA[<h3 id="1、前言">1、前言</h3><p>vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。总结一下自己平时常用的vim快捷键，当是忘记也好，后续会不定期更新。</p>
<a id="more"></a>
<h3 id="2、vim_快捷键">2、vim 快捷键</h3><h4 id="思维导图">思维导图</h4><p><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180728-vi(vim" alt="20180728-vi(vim)-Shortcut-20190330.png">-Shortcut-20190330.png)</p>
<h4 id="快捷键">快捷键</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>vi[m] + file</td>
<td>打开[新建]文件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>【命令模式】</td>
<td>可以移动光标、删除字符等</td>
</tr>
<tr>
<td>h,j,k,l</td>
<td>左，下，上，右</td>
</tr>
<tr>
<td>Blankspace</td>
<td>向右</td>
</tr>
<tr>
<td>Backspace</td>
<td>向左</td>
</tr>
<tr>
<td>Enter</td>
<td>移动到下一行首</td>
</tr>
<tr>
<td>-</td>
<td>移动到上一行首</td>
</tr>
<tr>
<td>b</td>
<td>上一个词的词首</td>
</tr>
<tr>
<td>w</td>
<td>下一个词的词首</td>
</tr>
<tr>
<td>e</td>
<td>下一个词的词尾</td>
</tr>
<tr>
<td>^</td>
<td>行首</td>
</tr>
<tr>
<td>$</td>
<td>行尾</td>
</tr>
<tr>
<td>f/F + 字符</td>
<td>向前/向后移动到特定的字符（行内）</td>
</tr>
<tr>
<td>gg</td>
<td>文件的第一行</td>
</tr>
<tr>
<td>G</td>
<td>文件的最后一行</td>
</tr>
<tr>
<td>nG</td>
<td>移动到第n行</td>
</tr>
<tr>
<td>n+</td>
<td>向下跳n行</td>
</tr>
<tr>
<td>n-</td>
<td>向上跳n行</td>
</tr>
<tr>
<td>/字</td>
<td>正向查找搜素字符串</td>
</tr>
<tr>
<td>?字</td>
<td>反向查找搜素字符串</td>
</tr>
<tr>
<td>n</td>
<td>向下搜索前一个搜素动作</td>
</tr>
<tr>
<td>N</td>
<td>向上搜索前一个搜索动作</td>
</tr>
<tr>
<td>x</td>
<td>删除字符</td>
</tr>
<tr>
<td>nx</td>
<td>删除从光标开始的n个字符</td>
</tr>
<tr>
<td>df + 字符</td>
<td>删除从当前字符到指定字符</td>
</tr>
<tr>
<td>dw/daw</td>
<td>删除单词</td>
</tr>
<tr>
<td>d$</td>
<td>删除从当前光标到行尾</td>
</tr>
<tr>
<td>dd</td>
<td>删除当前行</td>
</tr>
<tr>
<td>ndd</td>
<td>向下删除当前行在内的n行</td>
</tr>
<tr>
<td>dd + p</td>
<td>delete一行，然后放在当前光标下方</td>
</tr>
<tr>
<td>dd + P</td>
<td>delete一行，然后放在当前光标上方</td>
</tr>
<tr>
<td>dw + p</td>
<td>delete单词，然后放在当前光标后面</td>
</tr>
<tr>
<td>dw + P</td>
<td>delete单词，然后放在当前光标前面</td>
</tr>
<tr>
<td>p/P</td>
<td>重复粘贴，粘贴剪切板里的内容在光标后/前</td>
</tr>
<tr>
<td>yw</td>
<td>复制单词</td>
</tr>
<tr>
<td>yf + 字符</td>
<td>复制从当前字符到指定字符</td>
</tr>
<tr>
<td>yy</td>
<td>复制整行</td>
</tr>
<tr>
<td>y$</td>
<td>复制当前光标到行尾的内容</td>
</tr>
<tr>
<td>y^</td>
<td>复制从光标到行首的内容</td>
</tr>
<tr>
<td>J</td>
<td>合并光标所在行及下一行为一行</td>
</tr>
<tr>
<td>.</td>
<td>重复上一个操作</td>
</tr>
<tr>
<td>n+action</td>
<td>表示执行某个操作n次</td>
</tr>
<tr>
<td>u</td>
<td>撤销上一步操作</td>
</tr>
<tr>
<td>U</td>
<td>撤销对当前行的所有操作</td>
</tr>
<tr>
<td>ctrl + r</td>
<td>重做</td>
</tr>
<tr>
<td>ctrl + b</td>
<td>向前翻一页</td>
</tr>
<tr>
<td>ctrl + f</td>
<td>向后翻一页</td>
</tr>
<tr>
<td>ctrl + u</td>
<td>向前翻半页</td>
</tr>
<tr>
<td>ctrl + d</td>
<td>向后翻半页</td>
</tr>
<tr>
<td>ctrl + e</td>
<td>下滚一行</td>
</tr>
<tr>
<td>:set  nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>取消显示行号</td>
</tr>
<tr>
<td>:s/old/new</td>
<td>用new替换行中首次出现的old</td>
</tr>
<tr>
<td>:s/old/new/g</td>
<td>用new替换行中所有的old</td>
</tr>
<tr>
<td>:n,m s/old/new/g</td>
<td>用new替换从n到m行里所有的old</td>
</tr>
<tr>
<td>:%s/old/new/g</td>
<td>用new替换当前文件里所有的old</td>
</tr>
<tr>
<td>:w</td>
<td>保存正在编辑的文件</td>
</tr>
<tr>
<td>:w new.txt</td>
<td>保存至new.tex文件</td>
</tr>
<tr>
<td>:q</td>
<td>退出不保存（文件未修改时）</td>
</tr>
<tr>
<td>:q!</td>
<td>退出编辑器，且不保存</td>
</tr>
<tr>
<td>:wq</td>
<td>保存后退出正在编辑的文件</td>
</tr>
<tr>
<td>:help</td>
<td>显示相关命令的帮助</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>【选择模式】</td>
<td></td>
</tr>
<tr>
<td>v</td>
<td>不规则选择</td>
</tr>
<tr>
<td>V</td>
<td>按行选择</td>
</tr>
<tr>
<td>Ctrl + v</td>
<td>按列选择</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>【插入模式】</td>
<td>在此模式下可以输入字符，按ESC将回到命令模式。</td>
</tr>
<tr>
<td>i</td>
<td>在当前字符前面插入</td>
</tr>
<tr>
<td>I</td>
<td>在行首插入</td>
</tr>
<tr>
<td>a</td>
<td>在当前字符后面插入</td>
</tr>
<tr>
<td>A</td>
<td>在行尾插入</td>
</tr>
<tr>
<td>o</td>
<td>在当前行的下一行插入</td>
</tr>
<tr>
<td>O</td>
<td>在当前行的上一行插入</td>
</tr>
<tr>
<td>r</td>
<td>更改当前的字符</td>
</tr>
<tr>
<td>R</td>
<td>更改多个字符</td>
</tr>
<tr>
<td>cw/caw</td>
<td>更改单词</td>
</tr>
<tr>
<td>cf + 字符</td>
<td>更改从当前字符到指定字符</td>
</tr>
<tr>
<td>c$</td>
<td>更改从当前字符到行尾</td>
</tr>
<tr>
<td>cc</td>
<td>更改整行</td>
</tr>
</tbody>
</table>
<h3 id="参考">参考</h3><ul>
<li><a href="https://www.vpser.net/manage/vi.html" target="_blank" rel="external">Linux上vi(vim)编辑器使用教程 - VPS侦探</a></li>
<li><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明 Vim 练级攻略 | | 酷 壳 - CoolShell</a></li>
<li><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="external">YBlog - Learn Vim Progressively</a></li>
<li><a href="https://www.jianshu.com/p/a0b452f8f720" target="_blank" rel="external">Vim配置、插件和使用技巧 - 简书</a></li>
<li><a href="https://www.cnblogs.com/jikey/archive/2011/12/28/2304341.html" target="_blank" rel="external">Vim快捷键分类 - 豪情 - 博客园</a></li>
</ul>
<p><br></p>
<ul>
<li>如有疑问，欢迎在评论区一起讨论！</li>
<li>如有不正确的地方，欢迎指导！</li>
</ul>
<p><br></p>
<blockquote>
<p>注：本文首发于 <a href="https://iHTCboy.com">iHTCboy’s blog</a>，如若转载，请注来源</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、前言">1、前言</h3><p>vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。总结一下自己平时常用的vim快捷键，当是忘记也好，后续会不定期更新。</p>]]>
    
    </summary>
    
      <category term="Vim" scheme="https://iHTCboy.com/tags/Vim/"/>
    
      <category term="shortcut" scheme="https://iHTCboy.com/tags/shortcut/"/>
    
      <category term="induction" scheme="https://iHTCboy.com/categories/induction/"/>
    
  </entry>
  
</feed>
